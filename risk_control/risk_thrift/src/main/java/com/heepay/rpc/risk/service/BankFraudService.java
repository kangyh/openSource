/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.risk.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-19")
public class BankFraudService {

  public interface Iface {

    public com.heepay.rpc.risk.model.AsyncMsgVO GetTransDetailList(String jsonStr) throws org.apache.thrift.TException;

    public com.heepay.rpc.risk.model.AsyncMsgVO GetAccountSubjectDetailList(String jsonStr) throws org.apache.thrift.TException;

    public com.heepay.rpc.risk.model.AsyncMsgVO GetAccountDynamic(String jsonStr) throws org.apache.thrift.TException;

    public com.heepay.rpc.risk.model.AsyncMsgVO GetAccountDynamicRelease(String jsonStr) throws org.apache.thrift.TException;

    public com.heepay.rpc.risk.model.AsyncMsgVO GetBankCardInfoByTransSerialNo(String jsonStr) throws org.apache.thrift.TException;

    public com.heepay.rpc.risk.model.AsyncMsgVO GetPaymentAccountList(String jsonStr) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void GetTransDetailList(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetAccountSubjectDetailList(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetAccountDynamic(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetAccountDynamicRelease(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetBankCardInfoByTransSerialNo(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetPaymentAccountList(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO GetTransDetailList(String jsonStr) throws org.apache.thrift.TException
    {
      send_GetTransDetailList(jsonStr);
      return recv_GetTransDetailList();
    }

    public void send_GetTransDetailList(String jsonStr) throws org.apache.thrift.TException
    {
      GetTransDetailList_args args = new GetTransDetailList_args();
      args.setJsonStr(jsonStr);
      sendBase("GetTransDetailList", args);
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO recv_GetTransDetailList() throws org.apache.thrift.TException
    {
      GetTransDetailList_result result = new GetTransDetailList_result();
      receiveBase(result, "GetTransDetailList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetTransDetailList failed: unknown result");
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO GetAccountSubjectDetailList(String jsonStr) throws org.apache.thrift.TException
    {
      send_GetAccountSubjectDetailList(jsonStr);
      return recv_GetAccountSubjectDetailList();
    }

    public void send_GetAccountSubjectDetailList(String jsonStr) throws org.apache.thrift.TException
    {
      GetAccountSubjectDetailList_args args = new GetAccountSubjectDetailList_args();
      args.setJsonStr(jsonStr);
      sendBase("GetAccountSubjectDetailList", args);
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO recv_GetAccountSubjectDetailList() throws org.apache.thrift.TException
    {
      GetAccountSubjectDetailList_result result = new GetAccountSubjectDetailList_result();
      receiveBase(result, "GetAccountSubjectDetailList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAccountSubjectDetailList failed: unknown result");
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO GetAccountDynamic(String jsonStr) throws org.apache.thrift.TException
    {
      send_GetAccountDynamic(jsonStr);
      return recv_GetAccountDynamic();
    }

    public void send_GetAccountDynamic(String jsonStr) throws org.apache.thrift.TException
    {
      GetAccountDynamic_args args = new GetAccountDynamic_args();
      args.setJsonStr(jsonStr);
      sendBase("GetAccountDynamic", args);
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO recv_GetAccountDynamic() throws org.apache.thrift.TException
    {
      GetAccountDynamic_result result = new GetAccountDynamic_result();
      receiveBase(result, "GetAccountDynamic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAccountDynamic failed: unknown result");
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO GetAccountDynamicRelease(String jsonStr) throws org.apache.thrift.TException
    {
      send_GetAccountDynamicRelease(jsonStr);
      return recv_GetAccountDynamicRelease();
    }

    public void send_GetAccountDynamicRelease(String jsonStr) throws org.apache.thrift.TException
    {
      GetAccountDynamicRelease_args args = new GetAccountDynamicRelease_args();
      args.setJsonStr(jsonStr);
      sendBase("GetAccountDynamicRelease", args);
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO recv_GetAccountDynamicRelease() throws org.apache.thrift.TException
    {
      GetAccountDynamicRelease_result result = new GetAccountDynamicRelease_result();
      receiveBase(result, "GetAccountDynamicRelease");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAccountDynamicRelease failed: unknown result");
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO GetBankCardInfoByTransSerialNo(String jsonStr) throws org.apache.thrift.TException
    {
      send_GetBankCardInfoByTransSerialNo(jsonStr);
      return recv_GetBankCardInfoByTransSerialNo();
    }

    public void send_GetBankCardInfoByTransSerialNo(String jsonStr) throws org.apache.thrift.TException
    {
      GetBankCardInfoByTransSerialNo_args args = new GetBankCardInfoByTransSerialNo_args();
      args.setJsonStr(jsonStr);
      sendBase("GetBankCardInfoByTransSerialNo", args);
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO recv_GetBankCardInfoByTransSerialNo() throws org.apache.thrift.TException
    {
      GetBankCardInfoByTransSerialNo_result result = new GetBankCardInfoByTransSerialNo_result();
      receiveBase(result, "GetBankCardInfoByTransSerialNo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetBankCardInfoByTransSerialNo failed: unknown result");
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO GetPaymentAccountList(String jsonStr) throws org.apache.thrift.TException
    {
      send_GetPaymentAccountList(jsonStr);
      return recv_GetPaymentAccountList();
    }

    public void send_GetPaymentAccountList(String jsonStr) throws org.apache.thrift.TException
    {
      GetPaymentAccountList_args args = new GetPaymentAccountList_args();
      args.setJsonStr(jsonStr);
      sendBase("GetPaymentAccountList", args);
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO recv_GetPaymentAccountList() throws org.apache.thrift.TException
    {
      GetPaymentAccountList_result result = new GetPaymentAccountList_result();
      receiveBase(result, "GetPaymentAccountList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetPaymentAccountList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void GetTransDetailList(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetTransDetailList_call method_call = new GetTransDetailList_call(jsonStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetTransDetailList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jsonStr;
      public GetTransDetailList_call(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonStr = jsonStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetTransDetailList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetTransDetailList_args args = new GetTransDetailList_args();
        args.setJsonStr(jsonStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.heepay.rpc.risk.model.AsyncMsgVO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetTransDetailList();
      }
    }

    public void GetAccountSubjectDetailList(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAccountSubjectDetailList_call method_call = new GetAccountSubjectDetailList_call(jsonStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAccountSubjectDetailList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jsonStr;
      public GetAccountSubjectDetailList_call(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonStr = jsonStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAccountSubjectDetailList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAccountSubjectDetailList_args args = new GetAccountSubjectDetailList_args();
        args.setJsonStr(jsonStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.heepay.rpc.risk.model.AsyncMsgVO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAccountSubjectDetailList();
      }
    }

    public void GetAccountDynamic(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAccountDynamic_call method_call = new GetAccountDynamic_call(jsonStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAccountDynamic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jsonStr;
      public GetAccountDynamic_call(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonStr = jsonStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAccountDynamic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAccountDynamic_args args = new GetAccountDynamic_args();
        args.setJsonStr(jsonStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.heepay.rpc.risk.model.AsyncMsgVO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAccountDynamic();
      }
    }

    public void GetAccountDynamicRelease(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAccountDynamicRelease_call method_call = new GetAccountDynamicRelease_call(jsonStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAccountDynamicRelease_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jsonStr;
      public GetAccountDynamicRelease_call(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonStr = jsonStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAccountDynamicRelease", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAccountDynamicRelease_args args = new GetAccountDynamicRelease_args();
        args.setJsonStr(jsonStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.heepay.rpc.risk.model.AsyncMsgVO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAccountDynamicRelease();
      }
    }

    public void GetBankCardInfoByTransSerialNo(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetBankCardInfoByTransSerialNo_call method_call = new GetBankCardInfoByTransSerialNo_call(jsonStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetBankCardInfoByTransSerialNo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jsonStr;
      public GetBankCardInfoByTransSerialNo_call(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonStr = jsonStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetBankCardInfoByTransSerialNo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetBankCardInfoByTransSerialNo_args args = new GetBankCardInfoByTransSerialNo_args();
        args.setJsonStr(jsonStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.heepay.rpc.risk.model.AsyncMsgVO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetBankCardInfoByTransSerialNo();
      }
    }

    public void GetPaymentAccountList(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetPaymentAccountList_call method_call = new GetPaymentAccountList_call(jsonStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetPaymentAccountList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jsonStr;
      public GetPaymentAccountList_call(String jsonStr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jsonStr = jsonStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetPaymentAccountList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetPaymentAccountList_args args = new GetPaymentAccountList_args();
        args.setJsonStr(jsonStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.heepay.rpc.risk.model.AsyncMsgVO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetPaymentAccountList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("GetTransDetailList", new GetTransDetailList());
      processMap.put("GetAccountSubjectDetailList", new GetAccountSubjectDetailList());
      processMap.put("GetAccountDynamic", new GetAccountDynamic());
      processMap.put("GetAccountDynamicRelease", new GetAccountDynamicRelease());
      processMap.put("GetBankCardInfoByTransSerialNo", new GetBankCardInfoByTransSerialNo());
      processMap.put("GetPaymentAccountList", new GetPaymentAccountList());
      return processMap;
    }

    public static class GetTransDetailList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetTransDetailList_args> {
      public GetTransDetailList() {
        super("GetTransDetailList");
      }

      public GetTransDetailList_args getEmptyArgsInstance() {
        return new GetTransDetailList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetTransDetailList_result getResult(I iface, GetTransDetailList_args args) throws org.apache.thrift.TException {
        GetTransDetailList_result result = new GetTransDetailList_result();
        result.success = iface.GetTransDetailList(args.jsonStr);
        return result;
      }
    }

    public static class GetAccountSubjectDetailList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAccountSubjectDetailList_args> {
      public GetAccountSubjectDetailList() {
        super("GetAccountSubjectDetailList");
      }

      public GetAccountSubjectDetailList_args getEmptyArgsInstance() {
        return new GetAccountSubjectDetailList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetAccountSubjectDetailList_result getResult(I iface, GetAccountSubjectDetailList_args args) throws org.apache.thrift.TException {
        GetAccountSubjectDetailList_result result = new GetAccountSubjectDetailList_result();
        result.success = iface.GetAccountSubjectDetailList(args.jsonStr);
        return result;
      }
    }

    public static class GetAccountDynamic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAccountDynamic_args> {
      public GetAccountDynamic() {
        super("GetAccountDynamic");
      }

      public GetAccountDynamic_args getEmptyArgsInstance() {
        return new GetAccountDynamic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetAccountDynamic_result getResult(I iface, GetAccountDynamic_args args) throws org.apache.thrift.TException {
        GetAccountDynamic_result result = new GetAccountDynamic_result();
        result.success = iface.GetAccountDynamic(args.jsonStr);
        return result;
      }
    }

    public static class GetAccountDynamicRelease<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAccountDynamicRelease_args> {
      public GetAccountDynamicRelease() {
        super("GetAccountDynamicRelease");
      }

      public GetAccountDynamicRelease_args getEmptyArgsInstance() {
        return new GetAccountDynamicRelease_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetAccountDynamicRelease_result getResult(I iface, GetAccountDynamicRelease_args args) throws org.apache.thrift.TException {
        GetAccountDynamicRelease_result result = new GetAccountDynamicRelease_result();
        result.success = iface.GetAccountDynamicRelease(args.jsonStr);
        return result;
      }
    }

    public static class GetBankCardInfoByTransSerialNo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetBankCardInfoByTransSerialNo_args> {
      public GetBankCardInfoByTransSerialNo() {
        super("GetBankCardInfoByTransSerialNo");
      }

      public GetBankCardInfoByTransSerialNo_args getEmptyArgsInstance() {
        return new GetBankCardInfoByTransSerialNo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetBankCardInfoByTransSerialNo_result getResult(I iface, GetBankCardInfoByTransSerialNo_args args) throws org.apache.thrift.TException {
        GetBankCardInfoByTransSerialNo_result result = new GetBankCardInfoByTransSerialNo_result();
        result.success = iface.GetBankCardInfoByTransSerialNo(args.jsonStr);
        return result;
      }
    }

    public static class GetPaymentAccountList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetPaymentAccountList_args> {
      public GetPaymentAccountList() {
        super("GetPaymentAccountList");
      }

      public GetPaymentAccountList_args getEmptyArgsInstance() {
        return new GetPaymentAccountList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetPaymentAccountList_result getResult(I iface, GetPaymentAccountList_args args) throws org.apache.thrift.TException {
        GetPaymentAccountList_result result = new GetPaymentAccountList_result();
        result.success = iface.GetPaymentAccountList(args.jsonStr);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("GetTransDetailList", new GetTransDetailList());
      processMap.put("GetAccountSubjectDetailList", new GetAccountSubjectDetailList());
      processMap.put("GetAccountDynamic", new GetAccountDynamic());
      processMap.put("GetAccountDynamicRelease", new GetAccountDynamicRelease());
      processMap.put("GetBankCardInfoByTransSerialNo", new GetBankCardInfoByTransSerialNo());
      processMap.put("GetPaymentAccountList", new GetPaymentAccountList());
      return processMap;
    }

    public static class GetTransDetailList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetTransDetailList_args, com.heepay.rpc.risk.model.AsyncMsgVO> {
      public GetTransDetailList() {
        super("GetTransDetailList");
      }

      public GetTransDetailList_args getEmptyArgsInstance() {
        return new GetTransDetailList_args();
      }

      public AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO>() { 
          public void onComplete(com.heepay.rpc.risk.model.AsyncMsgVO o) {
            GetTransDetailList_result result = new GetTransDetailList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetTransDetailList_result result = new GetTransDetailList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetTransDetailList_args args, org.apache.thrift.async.AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO> resultHandler) throws TException {
        iface.GetTransDetailList(args.jsonStr,resultHandler);
      }
    }

    public static class GetAccountSubjectDetailList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAccountSubjectDetailList_args, com.heepay.rpc.risk.model.AsyncMsgVO> {
      public GetAccountSubjectDetailList() {
        super("GetAccountSubjectDetailList");
      }

      public GetAccountSubjectDetailList_args getEmptyArgsInstance() {
        return new GetAccountSubjectDetailList_args();
      }

      public AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO>() { 
          public void onComplete(com.heepay.rpc.risk.model.AsyncMsgVO o) {
            GetAccountSubjectDetailList_result result = new GetAccountSubjectDetailList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetAccountSubjectDetailList_result result = new GetAccountSubjectDetailList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAccountSubjectDetailList_args args, org.apache.thrift.async.AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO> resultHandler) throws TException {
        iface.GetAccountSubjectDetailList(args.jsonStr,resultHandler);
      }
    }

    public static class GetAccountDynamic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAccountDynamic_args, com.heepay.rpc.risk.model.AsyncMsgVO> {
      public GetAccountDynamic() {
        super("GetAccountDynamic");
      }

      public GetAccountDynamic_args getEmptyArgsInstance() {
        return new GetAccountDynamic_args();
      }

      public AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO>() { 
          public void onComplete(com.heepay.rpc.risk.model.AsyncMsgVO o) {
            GetAccountDynamic_result result = new GetAccountDynamic_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetAccountDynamic_result result = new GetAccountDynamic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAccountDynamic_args args, org.apache.thrift.async.AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO> resultHandler) throws TException {
        iface.GetAccountDynamic(args.jsonStr,resultHandler);
      }
    }

    public static class GetAccountDynamicRelease<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAccountDynamicRelease_args, com.heepay.rpc.risk.model.AsyncMsgVO> {
      public GetAccountDynamicRelease() {
        super("GetAccountDynamicRelease");
      }

      public GetAccountDynamicRelease_args getEmptyArgsInstance() {
        return new GetAccountDynamicRelease_args();
      }

      public AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO>() { 
          public void onComplete(com.heepay.rpc.risk.model.AsyncMsgVO o) {
            GetAccountDynamicRelease_result result = new GetAccountDynamicRelease_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetAccountDynamicRelease_result result = new GetAccountDynamicRelease_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAccountDynamicRelease_args args, org.apache.thrift.async.AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO> resultHandler) throws TException {
        iface.GetAccountDynamicRelease(args.jsonStr,resultHandler);
      }
    }

    public static class GetBankCardInfoByTransSerialNo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetBankCardInfoByTransSerialNo_args, com.heepay.rpc.risk.model.AsyncMsgVO> {
      public GetBankCardInfoByTransSerialNo() {
        super("GetBankCardInfoByTransSerialNo");
      }

      public GetBankCardInfoByTransSerialNo_args getEmptyArgsInstance() {
        return new GetBankCardInfoByTransSerialNo_args();
      }

      public AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO>() { 
          public void onComplete(com.heepay.rpc.risk.model.AsyncMsgVO o) {
            GetBankCardInfoByTransSerialNo_result result = new GetBankCardInfoByTransSerialNo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetBankCardInfoByTransSerialNo_result result = new GetBankCardInfoByTransSerialNo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetBankCardInfoByTransSerialNo_args args, org.apache.thrift.async.AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO> resultHandler) throws TException {
        iface.GetBankCardInfoByTransSerialNo(args.jsonStr,resultHandler);
      }
    }

    public static class GetPaymentAccountList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetPaymentAccountList_args, com.heepay.rpc.risk.model.AsyncMsgVO> {
      public GetPaymentAccountList() {
        super("GetPaymentAccountList");
      }

      public GetPaymentAccountList_args getEmptyArgsInstance() {
        return new GetPaymentAccountList_args();
      }

      public AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO>() { 
          public void onComplete(com.heepay.rpc.risk.model.AsyncMsgVO o) {
            GetPaymentAccountList_result result = new GetPaymentAccountList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetPaymentAccountList_result result = new GetPaymentAccountList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetPaymentAccountList_args args, org.apache.thrift.async.AsyncMethodCallback<com.heepay.rpc.risk.model.AsyncMsgVO> resultHandler) throws TException {
        iface.GetPaymentAccountList(args.jsonStr,resultHandler);
      }
    }

  }

  public static class GetTransDetailList_args implements org.apache.thrift.TBase<GetTransDetailList_args, GetTransDetailList_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetTransDetailList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTransDetailList_args");

    private static final org.apache.thrift.protocol.TField JSON_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonStr", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetTransDetailList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetTransDetailList_argsTupleSchemeFactory());
    }

    public String jsonStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_STR((short)1, "jsonStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_STR
            return JSON_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_STR, new org.apache.thrift.meta_data.FieldMetaData("jsonStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTransDetailList_args.class, metaDataMap);
    }

    public GetTransDetailList_args() {
    }

    public GetTransDetailList_args(
      String jsonStr)
    {
      this();
      this.jsonStr = jsonStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetTransDetailList_args(GetTransDetailList_args other) {
      if (other.isSetJsonStr()) {
        this.jsonStr = other.jsonStr;
      }
    }

    public GetTransDetailList_args deepCopy() {
      return new GetTransDetailList_args(this);
    }

    @Override
    public void clear() {
      this.jsonStr = null;
    }

    public String getJsonStr() {
      return this.jsonStr;
    }

    public GetTransDetailList_args setJsonStr(String jsonStr) {
      this.jsonStr = jsonStr;
      return this;
    }

    public void unsetJsonStr() {
      this.jsonStr = null;
    }

    /** Returns true if field jsonStr is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonStr() {
      return this.jsonStr != null;
    }

    public void setJsonStrIsSet(boolean value) {
      if (!value) {
        this.jsonStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JSON_STR:
        if (value == null) {
          unsetJsonStr();
        } else {
          setJsonStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_STR:
        return getJsonStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JSON_STR:
        return isSetJsonStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetTransDetailList_args)
        return this.equals((GetTransDetailList_args)that);
      return false;
    }

    public boolean equals(GetTransDetailList_args that) {
      if (that == null)
        return false;

      boolean this_present_jsonStr = true && this.isSetJsonStr();
      boolean that_present_jsonStr = true && that.isSetJsonStr();
      if (this_present_jsonStr || that_present_jsonStr) {
        if (!(this_present_jsonStr && that_present_jsonStr))
          return false;
        if (!this.jsonStr.equals(that.jsonStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jsonStr = true && (isSetJsonStr());
      list.add(present_jsonStr);
      if (present_jsonStr)
        list.add(jsonStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetTransDetailList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJsonStr()).compareTo(other.isSetJsonStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonStr, other.jsonStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetTransDetailList_args(");
      boolean first = true;

      sb.append("jsonStr:");
      if (this.jsonStr == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetTransDetailList_argsStandardSchemeFactory implements SchemeFactory {
      public GetTransDetailList_argsStandardScheme getScheme() {
        return new GetTransDetailList_argsStandardScheme();
      }
    }

    private static class GetTransDetailList_argsStandardScheme extends StandardScheme<GetTransDetailList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetTransDetailList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JSON_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonStr = iprot.readString();
                struct.setJsonStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetTransDetailList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jsonStr != null) {
          oprot.writeFieldBegin(JSON_STR_FIELD_DESC);
          oprot.writeString(struct.jsonStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetTransDetailList_argsTupleSchemeFactory implements SchemeFactory {
      public GetTransDetailList_argsTupleScheme getScheme() {
        return new GetTransDetailList_argsTupleScheme();
      }
    }

    private static class GetTransDetailList_argsTupleScheme extends TupleScheme<GetTransDetailList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetTransDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJsonStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJsonStr()) {
          oprot.writeString(struct.jsonStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetTransDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jsonStr = iprot.readString();
          struct.setJsonStrIsSet(true);
        }
      }
    }

  }

  public static class GetTransDetailList_result implements org.apache.thrift.TBase<GetTransDetailList_result, GetTransDetailList_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetTransDetailList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTransDetailList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetTransDetailList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetTransDetailList_resultTupleSchemeFactory());
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.risk.model.AsyncMsgVO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTransDetailList_result.class, metaDataMap);
    }

    public GetTransDetailList_result() {
    }

    public GetTransDetailList_result(
      com.heepay.rpc.risk.model.AsyncMsgVO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetTransDetailList_result(GetTransDetailList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.heepay.rpc.risk.model.AsyncMsgVO(other.success);
      }
    }

    public GetTransDetailList_result deepCopy() {
      return new GetTransDetailList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO getSuccess() {
      return this.success;
    }

    public GetTransDetailList_result setSuccess(com.heepay.rpc.risk.model.AsyncMsgVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.heepay.rpc.risk.model.AsyncMsgVO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetTransDetailList_result)
        return this.equals((GetTransDetailList_result)that);
      return false;
    }

    public boolean equals(GetTransDetailList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetTransDetailList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetTransDetailList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetTransDetailList_resultStandardSchemeFactory implements SchemeFactory {
      public GetTransDetailList_resultStandardScheme getScheme() {
        return new GetTransDetailList_resultStandardScheme();
      }
    }

    private static class GetTransDetailList_resultStandardScheme extends StandardScheme<GetTransDetailList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetTransDetailList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.heepay.rpc.risk.model.AsyncMsgVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetTransDetailList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetTransDetailList_resultTupleSchemeFactory implements SchemeFactory {
      public GetTransDetailList_resultTupleScheme getScheme() {
        return new GetTransDetailList_resultTupleScheme();
      }
    }

    private static class GetTransDetailList_resultTupleScheme extends TupleScheme<GetTransDetailList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetTransDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetTransDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.heepay.rpc.risk.model.AsyncMsgVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetAccountSubjectDetailList_args implements org.apache.thrift.TBase<GetAccountSubjectDetailList_args, GetAccountSubjectDetailList_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAccountSubjectDetailList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAccountSubjectDetailList_args");

    private static final org.apache.thrift.protocol.TField JSON_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonStr", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAccountSubjectDetailList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAccountSubjectDetailList_argsTupleSchemeFactory());
    }

    public String jsonStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_STR((short)1, "jsonStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_STR
            return JSON_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_STR, new org.apache.thrift.meta_data.FieldMetaData("jsonStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAccountSubjectDetailList_args.class, metaDataMap);
    }

    public GetAccountSubjectDetailList_args() {
    }

    public GetAccountSubjectDetailList_args(
      String jsonStr)
    {
      this();
      this.jsonStr = jsonStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAccountSubjectDetailList_args(GetAccountSubjectDetailList_args other) {
      if (other.isSetJsonStr()) {
        this.jsonStr = other.jsonStr;
      }
    }

    public GetAccountSubjectDetailList_args deepCopy() {
      return new GetAccountSubjectDetailList_args(this);
    }

    @Override
    public void clear() {
      this.jsonStr = null;
    }

    public String getJsonStr() {
      return this.jsonStr;
    }

    public GetAccountSubjectDetailList_args setJsonStr(String jsonStr) {
      this.jsonStr = jsonStr;
      return this;
    }

    public void unsetJsonStr() {
      this.jsonStr = null;
    }

    /** Returns true if field jsonStr is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonStr() {
      return this.jsonStr != null;
    }

    public void setJsonStrIsSet(boolean value) {
      if (!value) {
        this.jsonStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JSON_STR:
        if (value == null) {
          unsetJsonStr();
        } else {
          setJsonStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_STR:
        return getJsonStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JSON_STR:
        return isSetJsonStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAccountSubjectDetailList_args)
        return this.equals((GetAccountSubjectDetailList_args)that);
      return false;
    }

    public boolean equals(GetAccountSubjectDetailList_args that) {
      if (that == null)
        return false;

      boolean this_present_jsonStr = true && this.isSetJsonStr();
      boolean that_present_jsonStr = true && that.isSetJsonStr();
      if (this_present_jsonStr || that_present_jsonStr) {
        if (!(this_present_jsonStr && that_present_jsonStr))
          return false;
        if (!this.jsonStr.equals(that.jsonStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jsonStr = true && (isSetJsonStr());
      list.add(present_jsonStr);
      if (present_jsonStr)
        list.add(jsonStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAccountSubjectDetailList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJsonStr()).compareTo(other.isSetJsonStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonStr, other.jsonStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAccountSubjectDetailList_args(");
      boolean first = true;

      sb.append("jsonStr:");
      if (this.jsonStr == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAccountSubjectDetailList_argsStandardSchemeFactory implements SchemeFactory {
      public GetAccountSubjectDetailList_argsStandardScheme getScheme() {
        return new GetAccountSubjectDetailList_argsStandardScheme();
      }
    }

    private static class GetAccountSubjectDetailList_argsStandardScheme extends StandardScheme<GetAccountSubjectDetailList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAccountSubjectDetailList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JSON_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonStr = iprot.readString();
                struct.setJsonStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAccountSubjectDetailList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jsonStr != null) {
          oprot.writeFieldBegin(JSON_STR_FIELD_DESC);
          oprot.writeString(struct.jsonStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAccountSubjectDetailList_argsTupleSchemeFactory implements SchemeFactory {
      public GetAccountSubjectDetailList_argsTupleScheme getScheme() {
        return new GetAccountSubjectDetailList_argsTupleScheme();
      }
    }

    private static class GetAccountSubjectDetailList_argsTupleScheme extends TupleScheme<GetAccountSubjectDetailList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAccountSubjectDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJsonStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJsonStr()) {
          oprot.writeString(struct.jsonStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAccountSubjectDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jsonStr = iprot.readString();
          struct.setJsonStrIsSet(true);
        }
      }
    }

  }

  public static class GetAccountSubjectDetailList_result implements org.apache.thrift.TBase<GetAccountSubjectDetailList_result, GetAccountSubjectDetailList_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAccountSubjectDetailList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAccountSubjectDetailList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAccountSubjectDetailList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAccountSubjectDetailList_resultTupleSchemeFactory());
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.risk.model.AsyncMsgVO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAccountSubjectDetailList_result.class, metaDataMap);
    }

    public GetAccountSubjectDetailList_result() {
    }

    public GetAccountSubjectDetailList_result(
      com.heepay.rpc.risk.model.AsyncMsgVO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAccountSubjectDetailList_result(GetAccountSubjectDetailList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.heepay.rpc.risk.model.AsyncMsgVO(other.success);
      }
    }

    public GetAccountSubjectDetailList_result deepCopy() {
      return new GetAccountSubjectDetailList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO getSuccess() {
      return this.success;
    }

    public GetAccountSubjectDetailList_result setSuccess(com.heepay.rpc.risk.model.AsyncMsgVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.heepay.rpc.risk.model.AsyncMsgVO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAccountSubjectDetailList_result)
        return this.equals((GetAccountSubjectDetailList_result)that);
      return false;
    }

    public boolean equals(GetAccountSubjectDetailList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAccountSubjectDetailList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAccountSubjectDetailList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAccountSubjectDetailList_resultStandardSchemeFactory implements SchemeFactory {
      public GetAccountSubjectDetailList_resultStandardScheme getScheme() {
        return new GetAccountSubjectDetailList_resultStandardScheme();
      }
    }

    private static class GetAccountSubjectDetailList_resultStandardScheme extends StandardScheme<GetAccountSubjectDetailList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAccountSubjectDetailList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.heepay.rpc.risk.model.AsyncMsgVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAccountSubjectDetailList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAccountSubjectDetailList_resultTupleSchemeFactory implements SchemeFactory {
      public GetAccountSubjectDetailList_resultTupleScheme getScheme() {
        return new GetAccountSubjectDetailList_resultTupleScheme();
      }
    }

    private static class GetAccountSubjectDetailList_resultTupleScheme extends TupleScheme<GetAccountSubjectDetailList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAccountSubjectDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAccountSubjectDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.heepay.rpc.risk.model.AsyncMsgVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetAccountDynamic_args implements org.apache.thrift.TBase<GetAccountDynamic_args, GetAccountDynamic_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAccountDynamic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAccountDynamic_args");

    private static final org.apache.thrift.protocol.TField JSON_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonStr", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAccountDynamic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAccountDynamic_argsTupleSchemeFactory());
    }

    public String jsonStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_STR((short)1, "jsonStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_STR
            return JSON_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_STR, new org.apache.thrift.meta_data.FieldMetaData("jsonStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAccountDynamic_args.class, metaDataMap);
    }

    public GetAccountDynamic_args() {
    }

    public GetAccountDynamic_args(
      String jsonStr)
    {
      this();
      this.jsonStr = jsonStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAccountDynamic_args(GetAccountDynamic_args other) {
      if (other.isSetJsonStr()) {
        this.jsonStr = other.jsonStr;
      }
    }

    public GetAccountDynamic_args deepCopy() {
      return new GetAccountDynamic_args(this);
    }

    @Override
    public void clear() {
      this.jsonStr = null;
    }

    public String getJsonStr() {
      return this.jsonStr;
    }

    public GetAccountDynamic_args setJsonStr(String jsonStr) {
      this.jsonStr = jsonStr;
      return this;
    }

    public void unsetJsonStr() {
      this.jsonStr = null;
    }

    /** Returns true if field jsonStr is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonStr() {
      return this.jsonStr != null;
    }

    public void setJsonStrIsSet(boolean value) {
      if (!value) {
        this.jsonStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JSON_STR:
        if (value == null) {
          unsetJsonStr();
        } else {
          setJsonStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_STR:
        return getJsonStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JSON_STR:
        return isSetJsonStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAccountDynamic_args)
        return this.equals((GetAccountDynamic_args)that);
      return false;
    }

    public boolean equals(GetAccountDynamic_args that) {
      if (that == null)
        return false;

      boolean this_present_jsonStr = true && this.isSetJsonStr();
      boolean that_present_jsonStr = true && that.isSetJsonStr();
      if (this_present_jsonStr || that_present_jsonStr) {
        if (!(this_present_jsonStr && that_present_jsonStr))
          return false;
        if (!this.jsonStr.equals(that.jsonStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jsonStr = true && (isSetJsonStr());
      list.add(present_jsonStr);
      if (present_jsonStr)
        list.add(jsonStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAccountDynamic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJsonStr()).compareTo(other.isSetJsonStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonStr, other.jsonStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAccountDynamic_args(");
      boolean first = true;

      sb.append("jsonStr:");
      if (this.jsonStr == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAccountDynamic_argsStandardSchemeFactory implements SchemeFactory {
      public GetAccountDynamic_argsStandardScheme getScheme() {
        return new GetAccountDynamic_argsStandardScheme();
      }
    }

    private static class GetAccountDynamic_argsStandardScheme extends StandardScheme<GetAccountDynamic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAccountDynamic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JSON_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonStr = iprot.readString();
                struct.setJsonStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAccountDynamic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jsonStr != null) {
          oprot.writeFieldBegin(JSON_STR_FIELD_DESC);
          oprot.writeString(struct.jsonStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAccountDynamic_argsTupleSchemeFactory implements SchemeFactory {
      public GetAccountDynamic_argsTupleScheme getScheme() {
        return new GetAccountDynamic_argsTupleScheme();
      }
    }

    private static class GetAccountDynamic_argsTupleScheme extends TupleScheme<GetAccountDynamic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAccountDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJsonStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJsonStr()) {
          oprot.writeString(struct.jsonStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAccountDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jsonStr = iprot.readString();
          struct.setJsonStrIsSet(true);
        }
      }
    }

  }

  public static class GetAccountDynamic_result implements org.apache.thrift.TBase<GetAccountDynamic_result, GetAccountDynamic_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAccountDynamic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAccountDynamic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAccountDynamic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAccountDynamic_resultTupleSchemeFactory());
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.risk.model.AsyncMsgVO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAccountDynamic_result.class, metaDataMap);
    }

    public GetAccountDynamic_result() {
    }

    public GetAccountDynamic_result(
      com.heepay.rpc.risk.model.AsyncMsgVO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAccountDynamic_result(GetAccountDynamic_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.heepay.rpc.risk.model.AsyncMsgVO(other.success);
      }
    }

    public GetAccountDynamic_result deepCopy() {
      return new GetAccountDynamic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO getSuccess() {
      return this.success;
    }

    public GetAccountDynamic_result setSuccess(com.heepay.rpc.risk.model.AsyncMsgVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.heepay.rpc.risk.model.AsyncMsgVO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAccountDynamic_result)
        return this.equals((GetAccountDynamic_result)that);
      return false;
    }

    public boolean equals(GetAccountDynamic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAccountDynamic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAccountDynamic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAccountDynamic_resultStandardSchemeFactory implements SchemeFactory {
      public GetAccountDynamic_resultStandardScheme getScheme() {
        return new GetAccountDynamic_resultStandardScheme();
      }
    }

    private static class GetAccountDynamic_resultStandardScheme extends StandardScheme<GetAccountDynamic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAccountDynamic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.heepay.rpc.risk.model.AsyncMsgVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAccountDynamic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAccountDynamic_resultTupleSchemeFactory implements SchemeFactory {
      public GetAccountDynamic_resultTupleScheme getScheme() {
        return new GetAccountDynamic_resultTupleScheme();
      }
    }

    private static class GetAccountDynamic_resultTupleScheme extends TupleScheme<GetAccountDynamic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAccountDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAccountDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.heepay.rpc.risk.model.AsyncMsgVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetAccountDynamicRelease_args implements org.apache.thrift.TBase<GetAccountDynamicRelease_args, GetAccountDynamicRelease_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAccountDynamicRelease_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAccountDynamicRelease_args");

    private static final org.apache.thrift.protocol.TField JSON_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonStr", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAccountDynamicRelease_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAccountDynamicRelease_argsTupleSchemeFactory());
    }

    public String jsonStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_STR((short)1, "jsonStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_STR
            return JSON_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_STR, new org.apache.thrift.meta_data.FieldMetaData("jsonStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAccountDynamicRelease_args.class, metaDataMap);
    }

    public GetAccountDynamicRelease_args() {
    }

    public GetAccountDynamicRelease_args(
      String jsonStr)
    {
      this();
      this.jsonStr = jsonStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAccountDynamicRelease_args(GetAccountDynamicRelease_args other) {
      if (other.isSetJsonStr()) {
        this.jsonStr = other.jsonStr;
      }
    }

    public GetAccountDynamicRelease_args deepCopy() {
      return new GetAccountDynamicRelease_args(this);
    }

    @Override
    public void clear() {
      this.jsonStr = null;
    }

    public String getJsonStr() {
      return this.jsonStr;
    }

    public GetAccountDynamicRelease_args setJsonStr(String jsonStr) {
      this.jsonStr = jsonStr;
      return this;
    }

    public void unsetJsonStr() {
      this.jsonStr = null;
    }

    /** Returns true if field jsonStr is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonStr() {
      return this.jsonStr != null;
    }

    public void setJsonStrIsSet(boolean value) {
      if (!value) {
        this.jsonStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JSON_STR:
        if (value == null) {
          unsetJsonStr();
        } else {
          setJsonStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_STR:
        return getJsonStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JSON_STR:
        return isSetJsonStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAccountDynamicRelease_args)
        return this.equals((GetAccountDynamicRelease_args)that);
      return false;
    }

    public boolean equals(GetAccountDynamicRelease_args that) {
      if (that == null)
        return false;

      boolean this_present_jsonStr = true && this.isSetJsonStr();
      boolean that_present_jsonStr = true && that.isSetJsonStr();
      if (this_present_jsonStr || that_present_jsonStr) {
        if (!(this_present_jsonStr && that_present_jsonStr))
          return false;
        if (!this.jsonStr.equals(that.jsonStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jsonStr = true && (isSetJsonStr());
      list.add(present_jsonStr);
      if (present_jsonStr)
        list.add(jsonStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAccountDynamicRelease_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJsonStr()).compareTo(other.isSetJsonStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonStr, other.jsonStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAccountDynamicRelease_args(");
      boolean first = true;

      sb.append("jsonStr:");
      if (this.jsonStr == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAccountDynamicRelease_argsStandardSchemeFactory implements SchemeFactory {
      public GetAccountDynamicRelease_argsStandardScheme getScheme() {
        return new GetAccountDynamicRelease_argsStandardScheme();
      }
    }

    private static class GetAccountDynamicRelease_argsStandardScheme extends StandardScheme<GetAccountDynamicRelease_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAccountDynamicRelease_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JSON_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonStr = iprot.readString();
                struct.setJsonStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAccountDynamicRelease_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jsonStr != null) {
          oprot.writeFieldBegin(JSON_STR_FIELD_DESC);
          oprot.writeString(struct.jsonStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAccountDynamicRelease_argsTupleSchemeFactory implements SchemeFactory {
      public GetAccountDynamicRelease_argsTupleScheme getScheme() {
        return new GetAccountDynamicRelease_argsTupleScheme();
      }
    }

    private static class GetAccountDynamicRelease_argsTupleScheme extends TupleScheme<GetAccountDynamicRelease_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAccountDynamicRelease_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJsonStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJsonStr()) {
          oprot.writeString(struct.jsonStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAccountDynamicRelease_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jsonStr = iprot.readString();
          struct.setJsonStrIsSet(true);
        }
      }
    }

  }

  public static class GetAccountDynamicRelease_result implements org.apache.thrift.TBase<GetAccountDynamicRelease_result, GetAccountDynamicRelease_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAccountDynamicRelease_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAccountDynamicRelease_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAccountDynamicRelease_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAccountDynamicRelease_resultTupleSchemeFactory());
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.risk.model.AsyncMsgVO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAccountDynamicRelease_result.class, metaDataMap);
    }

    public GetAccountDynamicRelease_result() {
    }

    public GetAccountDynamicRelease_result(
      com.heepay.rpc.risk.model.AsyncMsgVO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAccountDynamicRelease_result(GetAccountDynamicRelease_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.heepay.rpc.risk.model.AsyncMsgVO(other.success);
      }
    }

    public GetAccountDynamicRelease_result deepCopy() {
      return new GetAccountDynamicRelease_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO getSuccess() {
      return this.success;
    }

    public GetAccountDynamicRelease_result setSuccess(com.heepay.rpc.risk.model.AsyncMsgVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.heepay.rpc.risk.model.AsyncMsgVO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAccountDynamicRelease_result)
        return this.equals((GetAccountDynamicRelease_result)that);
      return false;
    }

    public boolean equals(GetAccountDynamicRelease_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAccountDynamicRelease_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAccountDynamicRelease_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAccountDynamicRelease_resultStandardSchemeFactory implements SchemeFactory {
      public GetAccountDynamicRelease_resultStandardScheme getScheme() {
        return new GetAccountDynamicRelease_resultStandardScheme();
      }
    }

    private static class GetAccountDynamicRelease_resultStandardScheme extends StandardScheme<GetAccountDynamicRelease_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAccountDynamicRelease_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.heepay.rpc.risk.model.AsyncMsgVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAccountDynamicRelease_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAccountDynamicRelease_resultTupleSchemeFactory implements SchemeFactory {
      public GetAccountDynamicRelease_resultTupleScheme getScheme() {
        return new GetAccountDynamicRelease_resultTupleScheme();
      }
    }

    private static class GetAccountDynamicRelease_resultTupleScheme extends TupleScheme<GetAccountDynamicRelease_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAccountDynamicRelease_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAccountDynamicRelease_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.heepay.rpc.risk.model.AsyncMsgVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetBankCardInfoByTransSerialNo_args implements org.apache.thrift.TBase<GetBankCardInfoByTransSerialNo_args, GetBankCardInfoByTransSerialNo_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetBankCardInfoByTransSerialNo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetBankCardInfoByTransSerialNo_args");

    private static final org.apache.thrift.protocol.TField JSON_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonStr", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetBankCardInfoByTransSerialNo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetBankCardInfoByTransSerialNo_argsTupleSchemeFactory());
    }

    public String jsonStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_STR((short)1, "jsonStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_STR
            return JSON_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_STR, new org.apache.thrift.meta_data.FieldMetaData("jsonStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetBankCardInfoByTransSerialNo_args.class, metaDataMap);
    }

    public GetBankCardInfoByTransSerialNo_args() {
    }

    public GetBankCardInfoByTransSerialNo_args(
      String jsonStr)
    {
      this();
      this.jsonStr = jsonStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetBankCardInfoByTransSerialNo_args(GetBankCardInfoByTransSerialNo_args other) {
      if (other.isSetJsonStr()) {
        this.jsonStr = other.jsonStr;
      }
    }

    public GetBankCardInfoByTransSerialNo_args deepCopy() {
      return new GetBankCardInfoByTransSerialNo_args(this);
    }

    @Override
    public void clear() {
      this.jsonStr = null;
    }

    public String getJsonStr() {
      return this.jsonStr;
    }

    public GetBankCardInfoByTransSerialNo_args setJsonStr(String jsonStr) {
      this.jsonStr = jsonStr;
      return this;
    }

    public void unsetJsonStr() {
      this.jsonStr = null;
    }

    /** Returns true if field jsonStr is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonStr() {
      return this.jsonStr != null;
    }

    public void setJsonStrIsSet(boolean value) {
      if (!value) {
        this.jsonStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JSON_STR:
        if (value == null) {
          unsetJsonStr();
        } else {
          setJsonStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_STR:
        return getJsonStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JSON_STR:
        return isSetJsonStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetBankCardInfoByTransSerialNo_args)
        return this.equals((GetBankCardInfoByTransSerialNo_args)that);
      return false;
    }

    public boolean equals(GetBankCardInfoByTransSerialNo_args that) {
      if (that == null)
        return false;

      boolean this_present_jsonStr = true && this.isSetJsonStr();
      boolean that_present_jsonStr = true && that.isSetJsonStr();
      if (this_present_jsonStr || that_present_jsonStr) {
        if (!(this_present_jsonStr && that_present_jsonStr))
          return false;
        if (!this.jsonStr.equals(that.jsonStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jsonStr = true && (isSetJsonStr());
      list.add(present_jsonStr);
      if (present_jsonStr)
        list.add(jsonStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetBankCardInfoByTransSerialNo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJsonStr()).compareTo(other.isSetJsonStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonStr, other.jsonStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetBankCardInfoByTransSerialNo_args(");
      boolean first = true;

      sb.append("jsonStr:");
      if (this.jsonStr == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetBankCardInfoByTransSerialNo_argsStandardSchemeFactory implements SchemeFactory {
      public GetBankCardInfoByTransSerialNo_argsStandardScheme getScheme() {
        return new GetBankCardInfoByTransSerialNo_argsStandardScheme();
      }
    }

    private static class GetBankCardInfoByTransSerialNo_argsStandardScheme extends StandardScheme<GetBankCardInfoByTransSerialNo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetBankCardInfoByTransSerialNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JSON_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonStr = iprot.readString();
                struct.setJsonStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetBankCardInfoByTransSerialNo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jsonStr != null) {
          oprot.writeFieldBegin(JSON_STR_FIELD_DESC);
          oprot.writeString(struct.jsonStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetBankCardInfoByTransSerialNo_argsTupleSchemeFactory implements SchemeFactory {
      public GetBankCardInfoByTransSerialNo_argsTupleScheme getScheme() {
        return new GetBankCardInfoByTransSerialNo_argsTupleScheme();
      }
    }

    private static class GetBankCardInfoByTransSerialNo_argsTupleScheme extends TupleScheme<GetBankCardInfoByTransSerialNo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetBankCardInfoByTransSerialNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJsonStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJsonStr()) {
          oprot.writeString(struct.jsonStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetBankCardInfoByTransSerialNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jsonStr = iprot.readString();
          struct.setJsonStrIsSet(true);
        }
      }
    }

  }

  public static class GetBankCardInfoByTransSerialNo_result implements org.apache.thrift.TBase<GetBankCardInfoByTransSerialNo_result, GetBankCardInfoByTransSerialNo_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetBankCardInfoByTransSerialNo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetBankCardInfoByTransSerialNo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetBankCardInfoByTransSerialNo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetBankCardInfoByTransSerialNo_resultTupleSchemeFactory());
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.risk.model.AsyncMsgVO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetBankCardInfoByTransSerialNo_result.class, metaDataMap);
    }

    public GetBankCardInfoByTransSerialNo_result() {
    }

    public GetBankCardInfoByTransSerialNo_result(
      com.heepay.rpc.risk.model.AsyncMsgVO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetBankCardInfoByTransSerialNo_result(GetBankCardInfoByTransSerialNo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.heepay.rpc.risk.model.AsyncMsgVO(other.success);
      }
    }

    public GetBankCardInfoByTransSerialNo_result deepCopy() {
      return new GetBankCardInfoByTransSerialNo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO getSuccess() {
      return this.success;
    }

    public GetBankCardInfoByTransSerialNo_result setSuccess(com.heepay.rpc.risk.model.AsyncMsgVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.heepay.rpc.risk.model.AsyncMsgVO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetBankCardInfoByTransSerialNo_result)
        return this.equals((GetBankCardInfoByTransSerialNo_result)that);
      return false;
    }

    public boolean equals(GetBankCardInfoByTransSerialNo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetBankCardInfoByTransSerialNo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetBankCardInfoByTransSerialNo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetBankCardInfoByTransSerialNo_resultStandardSchemeFactory implements SchemeFactory {
      public GetBankCardInfoByTransSerialNo_resultStandardScheme getScheme() {
        return new GetBankCardInfoByTransSerialNo_resultStandardScheme();
      }
    }

    private static class GetBankCardInfoByTransSerialNo_resultStandardScheme extends StandardScheme<GetBankCardInfoByTransSerialNo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetBankCardInfoByTransSerialNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.heepay.rpc.risk.model.AsyncMsgVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetBankCardInfoByTransSerialNo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetBankCardInfoByTransSerialNo_resultTupleSchemeFactory implements SchemeFactory {
      public GetBankCardInfoByTransSerialNo_resultTupleScheme getScheme() {
        return new GetBankCardInfoByTransSerialNo_resultTupleScheme();
      }
    }

    private static class GetBankCardInfoByTransSerialNo_resultTupleScheme extends TupleScheme<GetBankCardInfoByTransSerialNo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetBankCardInfoByTransSerialNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetBankCardInfoByTransSerialNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.heepay.rpc.risk.model.AsyncMsgVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetPaymentAccountList_args implements org.apache.thrift.TBase<GetPaymentAccountList_args, GetPaymentAccountList_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetPaymentAccountList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetPaymentAccountList_args");

    private static final org.apache.thrift.protocol.TField JSON_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonStr", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetPaymentAccountList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetPaymentAccountList_argsTupleSchemeFactory());
    }

    public String jsonStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_STR((short)1, "jsonStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_STR
            return JSON_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_STR, new org.apache.thrift.meta_data.FieldMetaData("jsonStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPaymentAccountList_args.class, metaDataMap);
    }

    public GetPaymentAccountList_args() {
    }

    public GetPaymentAccountList_args(
      String jsonStr)
    {
      this();
      this.jsonStr = jsonStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetPaymentAccountList_args(GetPaymentAccountList_args other) {
      if (other.isSetJsonStr()) {
        this.jsonStr = other.jsonStr;
      }
    }

    public GetPaymentAccountList_args deepCopy() {
      return new GetPaymentAccountList_args(this);
    }

    @Override
    public void clear() {
      this.jsonStr = null;
    }

    public String getJsonStr() {
      return this.jsonStr;
    }

    public GetPaymentAccountList_args setJsonStr(String jsonStr) {
      this.jsonStr = jsonStr;
      return this;
    }

    public void unsetJsonStr() {
      this.jsonStr = null;
    }

    /** Returns true if field jsonStr is set (has been assigned a value) and false otherwise */
    public boolean isSetJsonStr() {
      return this.jsonStr != null;
    }

    public void setJsonStrIsSet(boolean value) {
      if (!value) {
        this.jsonStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JSON_STR:
        if (value == null) {
          unsetJsonStr();
        } else {
          setJsonStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_STR:
        return getJsonStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JSON_STR:
        return isSetJsonStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetPaymentAccountList_args)
        return this.equals((GetPaymentAccountList_args)that);
      return false;
    }

    public boolean equals(GetPaymentAccountList_args that) {
      if (that == null)
        return false;

      boolean this_present_jsonStr = true && this.isSetJsonStr();
      boolean that_present_jsonStr = true && that.isSetJsonStr();
      if (this_present_jsonStr || that_present_jsonStr) {
        if (!(this_present_jsonStr && that_present_jsonStr))
          return false;
        if (!this.jsonStr.equals(that.jsonStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jsonStr = true && (isSetJsonStr());
      list.add(present_jsonStr);
      if (present_jsonStr)
        list.add(jsonStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetPaymentAccountList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJsonStr()).compareTo(other.isSetJsonStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJsonStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonStr, other.jsonStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetPaymentAccountList_args(");
      boolean first = true;

      sb.append("jsonStr:");
      if (this.jsonStr == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetPaymentAccountList_argsStandardSchemeFactory implements SchemeFactory {
      public GetPaymentAccountList_argsStandardScheme getScheme() {
        return new GetPaymentAccountList_argsStandardScheme();
      }
    }

    private static class GetPaymentAccountList_argsStandardScheme extends StandardScheme<GetPaymentAccountList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetPaymentAccountList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JSON_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jsonStr = iprot.readString();
                struct.setJsonStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetPaymentAccountList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jsonStr != null) {
          oprot.writeFieldBegin(JSON_STR_FIELD_DESC);
          oprot.writeString(struct.jsonStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetPaymentAccountList_argsTupleSchemeFactory implements SchemeFactory {
      public GetPaymentAccountList_argsTupleScheme getScheme() {
        return new GetPaymentAccountList_argsTupleScheme();
      }
    }

    private static class GetPaymentAccountList_argsTupleScheme extends TupleScheme<GetPaymentAccountList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetPaymentAccountList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJsonStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJsonStr()) {
          oprot.writeString(struct.jsonStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetPaymentAccountList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jsonStr = iprot.readString();
          struct.setJsonStrIsSet(true);
        }
      }
    }

  }

  public static class GetPaymentAccountList_result implements org.apache.thrift.TBase<GetPaymentAccountList_result, GetPaymentAccountList_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetPaymentAccountList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetPaymentAccountList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetPaymentAccountList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetPaymentAccountList_resultTupleSchemeFactory());
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.risk.model.AsyncMsgVO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPaymentAccountList_result.class, metaDataMap);
    }

    public GetPaymentAccountList_result() {
    }

    public GetPaymentAccountList_result(
      com.heepay.rpc.risk.model.AsyncMsgVO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetPaymentAccountList_result(GetPaymentAccountList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.heepay.rpc.risk.model.AsyncMsgVO(other.success);
      }
    }

    public GetPaymentAccountList_result deepCopy() {
      return new GetPaymentAccountList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.heepay.rpc.risk.model.AsyncMsgVO getSuccess() {
      return this.success;
    }

    public GetPaymentAccountList_result setSuccess(com.heepay.rpc.risk.model.AsyncMsgVO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.heepay.rpc.risk.model.AsyncMsgVO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetPaymentAccountList_result)
        return this.equals((GetPaymentAccountList_result)that);
      return false;
    }

    public boolean equals(GetPaymentAccountList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetPaymentAccountList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetPaymentAccountList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetPaymentAccountList_resultStandardSchemeFactory implements SchemeFactory {
      public GetPaymentAccountList_resultStandardScheme getScheme() {
        return new GetPaymentAccountList_resultStandardScheme();
      }
    }

    private static class GetPaymentAccountList_resultStandardScheme extends StandardScheme<GetPaymentAccountList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetPaymentAccountList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.heepay.rpc.risk.model.AsyncMsgVO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetPaymentAccountList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetPaymentAccountList_resultTupleSchemeFactory implements SchemeFactory {
      public GetPaymentAccountList_resultTupleScheme getScheme() {
        return new GetPaymentAccountList_resultTupleScheme();
      }
    }

    private static class GetPaymentAccountList_resultTupleScheme extends TupleScheme<GetPaymentAccountList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetPaymentAccountList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetPaymentAccountList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.heepay.rpc.risk.model.AsyncMsgVO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
