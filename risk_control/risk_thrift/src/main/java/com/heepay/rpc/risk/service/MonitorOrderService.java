/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.risk.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-14")
public class MonitorOrderService {

  public interface Iface {

    public Map<String,List<Map<String,String>>> getMonitorOrderList(String fields, String param) throws org.apache.thrift.TException;

    public String getMonitorOrderInfo(String fields, String orderId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getMonitorOrderList(String fields, String param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMonitorOrderInfo(String fields, String orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<String,List<Map<String,String>>> getMonitorOrderList(String fields, String param) throws org.apache.thrift.TException
    {
      send_getMonitorOrderList(fields, param);
      return recv_getMonitorOrderList();
    }

    public void send_getMonitorOrderList(String fields, String param) throws org.apache.thrift.TException
    {
      getMonitorOrderList_args args = new getMonitorOrderList_args();
      args.setFields(fields);
      args.setParam(param);
      sendBase("getMonitorOrderList", args);
    }

    public Map<String,List<Map<String,String>>> recv_getMonitorOrderList() throws org.apache.thrift.TException
    {
      getMonitorOrderList_result result = new getMonitorOrderList_result();
      receiveBase(result, "getMonitorOrderList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMonitorOrderList failed: unknown result");
    }

    public String getMonitorOrderInfo(String fields, String orderId) throws org.apache.thrift.TException
    {
      send_getMonitorOrderInfo(fields, orderId);
      return recv_getMonitorOrderInfo();
    }

    public void send_getMonitorOrderInfo(String fields, String orderId) throws org.apache.thrift.TException
    {
      getMonitorOrderInfo_args args = new getMonitorOrderInfo_args();
      args.setFields(fields);
      args.setOrderId(orderId);
      sendBase("getMonitorOrderInfo", args);
    }

    public String recv_getMonitorOrderInfo() throws org.apache.thrift.TException
    {
      getMonitorOrderInfo_result result = new getMonitorOrderInfo_result();
      receiveBase(result, "getMonitorOrderInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMonitorOrderInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getMonitorOrderList(String fields, String param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMonitorOrderList_call method_call = new getMonitorOrderList_call(fields, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMonitorOrderList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String fields;
      private String param;
      public getMonitorOrderList_call(String fields, String param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fields = fields;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMonitorOrderList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMonitorOrderList_args args = new getMonitorOrderList_args();
        args.setFields(fields);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<Map<String,String>>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMonitorOrderList();
      }
    }

    public void getMonitorOrderInfo(String fields, String orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMonitorOrderInfo_call method_call = new getMonitorOrderInfo_call(fields, orderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMonitorOrderInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String fields;
      private String orderId;
      public getMonitorOrderInfo_call(String fields, String orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fields = fields;
        this.orderId = orderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMonitorOrderInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMonitorOrderInfo_args args = new getMonitorOrderInfo_args();
        args.setFields(fields);
        args.setOrderId(orderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMonitorOrderInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getMonitorOrderList", new getMonitorOrderList());
      processMap.put("getMonitorOrderInfo", new getMonitorOrderInfo());
      return processMap;
    }

    public static class getMonitorOrderList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMonitorOrderList_args> {
      public getMonitorOrderList() {
        super("getMonitorOrderList");
      }

      public getMonitorOrderList_args getEmptyArgsInstance() {
        return new getMonitorOrderList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMonitorOrderList_result getResult(I iface, getMonitorOrderList_args args) throws org.apache.thrift.TException {
        getMonitorOrderList_result result = new getMonitorOrderList_result();
        result.success = iface.getMonitorOrderList(args.fields, args.param);
        return result;
      }
    }

    public static class getMonitorOrderInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMonitorOrderInfo_args> {
      public getMonitorOrderInfo() {
        super("getMonitorOrderInfo");
      }

      public getMonitorOrderInfo_args getEmptyArgsInstance() {
        return new getMonitorOrderInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMonitorOrderInfo_result getResult(I iface, getMonitorOrderInfo_args args) throws org.apache.thrift.TException {
        getMonitorOrderInfo_result result = new getMonitorOrderInfo_result();
        result.success = iface.getMonitorOrderInfo(args.fields, args.orderId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getMonitorOrderList", new getMonitorOrderList());
      processMap.put("getMonitorOrderInfo", new getMonitorOrderInfo());
      return processMap;
    }

    public static class getMonitorOrderList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMonitorOrderList_args, Map<String,List<Map<String,String>>>> {
      public getMonitorOrderList() {
        super("getMonitorOrderList");
      }

      public getMonitorOrderList_args getEmptyArgsInstance() {
        return new getMonitorOrderList_args();
      }

      public AsyncMethodCallback<Map<String,List<Map<String,String>>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<Map<String,String>>>>() { 
          public void onComplete(Map<String,List<Map<String,String>>> o) {
            getMonitorOrderList_result result = new getMonitorOrderList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMonitorOrderList_result result = new getMonitorOrderList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMonitorOrderList_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<Map<String,String>>>> resultHandler) throws TException {
        iface.getMonitorOrderList(args.fields, args.param,resultHandler);
      }
    }

    public static class getMonitorOrderInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMonitorOrderInfo_args, String> {
      public getMonitorOrderInfo() {
        super("getMonitorOrderInfo");
      }

      public getMonitorOrderInfo_args getEmptyArgsInstance() {
        return new getMonitorOrderInfo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getMonitorOrderInfo_result result = new getMonitorOrderInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMonitorOrderInfo_result result = new getMonitorOrderInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMonitorOrderInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getMonitorOrderInfo(args.fields, args.orderId,resultHandler);
      }
    }

  }

  public static class getMonitorOrderList_args implements org.apache.thrift.TBase<getMonitorOrderList_args, getMonitorOrderList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMonitorOrderList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMonitorOrderList_args");

    private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMonitorOrderList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMonitorOrderList_argsTupleSchemeFactory());
    }

    public String fields; // required
    public String param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIELDS((short)1, "fields"),
      PARAM((short)2, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIELDS
            return FIELDS;
          case 2: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMonitorOrderList_args.class, metaDataMap);
    }

    public getMonitorOrderList_args() {
    }

    public getMonitorOrderList_args(
      String fields,
      String param)
    {
      this();
      this.fields = fields;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMonitorOrderList_args(getMonitorOrderList_args other) {
      if (other.isSetFields()) {
        this.fields = other.fields;
      }
      if (other.isSetParam()) {
        this.param = other.param;
      }
    }

    public getMonitorOrderList_args deepCopy() {
      return new getMonitorOrderList_args(this);
    }

    @Override
    public void clear() {
      this.fields = null;
      this.param = null;
    }

    public String getFields() {
      return this.fields;
    }

    public getMonitorOrderList_args setFields(String fields) {
      this.fields = fields;
      return this;
    }

    public void unsetFields() {
      this.fields = null;
    }

    /** Returns true if field fields is set (has been assigned a value) and false otherwise */
    public boolean isSetFields() {
      return this.fields != null;
    }

    public void setFieldsIsSet(boolean value) {
      if (!value) {
        this.fields = null;
      }
    }

    public String getParam() {
      return this.param;
    }

    public getMonitorOrderList_args setParam(String param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIELDS:
        if (value == null) {
          unsetFields();
        } else {
          setFields((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIELDS:
        return getFields();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIELDS:
        return isSetFields();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMonitorOrderList_args)
        return this.equals((getMonitorOrderList_args)that);
      return false;
    }

    public boolean equals(getMonitorOrderList_args that) {
      if (that == null)
        return false;

      boolean this_present_fields = true && this.isSetFields();
      boolean that_present_fields = true && that.isSetFields();
      if (this_present_fields || that_present_fields) {
        if (!(this_present_fields && that_present_fields))
          return false;
        if (!this.fields.equals(that.fields))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fields = true && (isSetFields());
      list.add(present_fields);
      if (present_fields)
        list.add(fields);

      boolean present_param = true && (isSetParam());
      list.add(present_param);
      if (present_param)
        list.add(param);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMonitorOrderList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFields()).compareTo(other.isSetFields());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFields()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, other.fields);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMonitorOrderList_args(");
      boolean first = true;

      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMonitorOrderList_argsStandardSchemeFactory implements SchemeFactory {
      public getMonitorOrderList_argsStandardScheme getScheme() {
        return new getMonitorOrderList_argsStandardScheme();
      }
    }

    private static class getMonitorOrderList_argsStandardScheme extends StandardScheme<getMonitorOrderList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMonitorOrderList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIELDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fields = iprot.readString();
                struct.setFieldsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.param = iprot.readString();
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMonitorOrderList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fields != null) {
          oprot.writeFieldBegin(FIELDS_FIELD_DESC);
          oprot.writeString(struct.fields);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          oprot.writeString(struct.param);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMonitorOrderList_argsTupleSchemeFactory implements SchemeFactory {
      public getMonitorOrderList_argsTupleScheme getScheme() {
        return new getMonitorOrderList_argsTupleScheme();
      }
    }

    private static class getMonitorOrderList_argsTupleScheme extends TupleScheme<getMonitorOrderList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMonitorOrderList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFields()) {
          optionals.set(0);
        }
        if (struct.isSetParam()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFields()) {
          oprot.writeString(struct.fields);
        }
        if (struct.isSetParam()) {
          oprot.writeString(struct.param);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMonitorOrderList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fields = iprot.readString();
          struct.setFieldsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.param = iprot.readString();
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class getMonitorOrderList_result implements org.apache.thrift.TBase<getMonitorOrderList_result, getMonitorOrderList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMonitorOrderList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMonitorOrderList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMonitorOrderList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMonitorOrderList_resultTupleSchemeFactory());
    }

    public Map<String,List<Map<String,String>>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMonitorOrderList_result.class, metaDataMap);
    }

    public getMonitorOrderList_result() {
    }

    public getMonitorOrderList_result(
      Map<String,List<Map<String,String>>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMonitorOrderList_result(getMonitorOrderList_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<Map<String,String>>> __this__success = new HashMap<String,List<Map<String,String>>>(other.success.size());
        for (Map.Entry<String, List<Map<String,String>>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<Map<String,String>> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<Map<String,String>> __this__success_copy_value = new ArrayList<Map<String,String>>(other_element_value.size());
          for (Map<String,String> other_element_value_element : other_element_value) {
            Map<String,String> __this__success_copy_value_copy = new HashMap<String,String>(other_element_value_element);
            __this__success_copy_value.add(__this__success_copy_value_copy);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getMonitorOrderList_result deepCopy() {
      return new getMonitorOrderList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<Map<String,String>> val) {
      if (this.success == null) {
        this.success = new HashMap<String,List<Map<String,String>>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<Map<String,String>>> getSuccess() {
      return this.success;
    }

    public getMonitorOrderList_result setSuccess(Map<String,List<Map<String,String>>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<Map<String,String>>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMonitorOrderList_result)
        return this.equals((getMonitorOrderList_result)that);
      return false;
    }

    public boolean equals(getMonitorOrderList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMonitorOrderList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMonitorOrderList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMonitorOrderList_resultStandardSchemeFactory implements SchemeFactory {
      public getMonitorOrderList_resultStandardScheme getScheme() {
        return new getMonitorOrderList_resultStandardScheme();
      }
    }

    private static class getMonitorOrderList_resultStandardScheme extends StandardScheme<getMonitorOrderList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMonitorOrderList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.success = new HashMap<String,List<Map<String,String>>>(2*_map0.size);
                  String _key1;
                  List<Map<String,String>> _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                      _val2 = new ArrayList<Map<String,String>>(_list4.size);
                      Map<String,String> _elem5;
                      for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                      {
                        {
                          org.apache.thrift.protocol.TMap _map7 = iprot.readMapBegin();
                          _elem5 = new HashMap<String,String>(2*_map7.size);
                          String _key8;
                          String _val9;
                          for (int _i10 = 0; _i10 < _map7.size; ++_i10)
                          {
                            _key8 = iprot.readString();
                            _val9 = iprot.readString();
                            _elem5.put(_key8, _val9);
                          }
                          iprot.readMapEnd();
                        }
                        _val2.add(_elem5);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMonitorOrderList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<Map<String,String>>> _iter11 : struct.success.entrySet())
            {
              oprot.writeString(_iter11.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, _iter11.getValue().size()));
                for (Map<String,String> _iter12 : _iter11.getValue())
                {
                  {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter12.size()));
                    for (Map.Entry<String, String> _iter13 : _iter12.entrySet())
                    {
                      oprot.writeString(_iter13.getKey());
                      oprot.writeString(_iter13.getValue());
                    }
                    oprot.writeMapEnd();
                  }
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMonitorOrderList_resultTupleSchemeFactory implements SchemeFactory {
      public getMonitorOrderList_resultTupleScheme getScheme() {
        return new getMonitorOrderList_resultTupleScheme();
      }
    }

    private static class getMonitorOrderList_resultTupleScheme extends TupleScheme<getMonitorOrderList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMonitorOrderList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<Map<String,String>>> _iter14 : struct.success.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              {
                oprot.writeI32(_iter14.getValue().size());
                for (Map<String,String> _iter15 : _iter14.getValue())
                {
                  {
                    oprot.writeI32(_iter15.size());
                    for (Map.Entry<String, String> _iter16 : _iter15.entrySet())
                    {
                      oprot.writeString(_iter16.getKey());
                      oprot.writeString(_iter16.getValue());
                    }
                  }
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMonitorOrderList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map17 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<String,List<Map<String,String>>>(2*_map17.size);
            String _key18;
            List<Map<String,String>> _val19;
            for (int _i20 = 0; _i20 < _map17.size; ++_i20)
            {
              _key18 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
                _val19 = new ArrayList<Map<String,String>>(_list21.size);
                Map<String,String> _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  {
                    org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    _elem22 = new HashMap<String,String>(2*_map24.size);
                    String _key25;
                    String _val26;
                    for (int _i27 = 0; _i27 < _map24.size; ++_i27)
                    {
                      _key25 = iprot.readString();
                      _val26 = iprot.readString();
                      _elem22.put(_key25, _val26);
                    }
                  }
                  _val19.add(_elem22);
                }
              }
              struct.success.put(_key18, _val19);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMonitorOrderInfo_args implements org.apache.thrift.TBase<getMonitorOrderInfo_args, getMonitorOrderInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMonitorOrderInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMonitorOrderInfo_args");

    private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMonitorOrderInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMonitorOrderInfo_argsTupleSchemeFactory());
    }

    public String fields; // required
    public String orderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIELDS((short)1, "fields"),
      ORDER_ID((short)2, "orderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIELDS
            return FIELDS;
          case 2: // ORDER_ID
            return ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMonitorOrderInfo_args.class, metaDataMap);
    }

    public getMonitorOrderInfo_args() {
    }

    public getMonitorOrderInfo_args(
      String fields,
      String orderId)
    {
      this();
      this.fields = fields;
      this.orderId = orderId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMonitorOrderInfo_args(getMonitorOrderInfo_args other) {
      if (other.isSetFields()) {
        this.fields = other.fields;
      }
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
    }

    public getMonitorOrderInfo_args deepCopy() {
      return new getMonitorOrderInfo_args(this);
    }

    @Override
    public void clear() {
      this.fields = null;
      this.orderId = null;
    }

    public String getFields() {
      return this.fields;
    }

    public getMonitorOrderInfo_args setFields(String fields) {
      this.fields = fields;
      return this;
    }

    public void unsetFields() {
      this.fields = null;
    }

    /** Returns true if field fields is set (has been assigned a value) and false otherwise */
    public boolean isSetFields() {
      return this.fields != null;
    }

    public void setFieldsIsSet(boolean value) {
      if (!value) {
        this.fields = null;
      }
    }

    public String getOrderId() {
      return this.orderId;
    }

    public getMonitorOrderInfo_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIELDS:
        if (value == null) {
          unsetFields();
        } else {
          setFields((String)value);
        }
        break;

      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIELDS:
        return getFields();

      case ORDER_ID:
        return getOrderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIELDS:
        return isSetFields();
      case ORDER_ID:
        return isSetOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMonitorOrderInfo_args)
        return this.equals((getMonitorOrderInfo_args)that);
      return false;
    }

    public boolean equals(getMonitorOrderInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_fields = true && this.isSetFields();
      boolean that_present_fields = true && that.isSetFields();
      if (this_present_fields || that_present_fields) {
        if (!(this_present_fields && that_present_fields))
          return false;
        if (!this.fields.equals(that.fields))
          return false;
      }

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fields = true && (isSetFields());
      list.add(present_fields);
      if (present_fields)
        list.add(fields);

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMonitorOrderInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFields()).compareTo(other.isSetFields());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFields()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, other.fields);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMonitorOrderInfo_args(");
      boolean first = true;

      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMonitorOrderInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getMonitorOrderInfo_argsStandardScheme getScheme() {
        return new getMonitorOrderInfo_argsStandardScheme();
      }
    }

    private static class getMonitorOrderInfo_argsStandardScheme extends StandardScheme<getMonitorOrderInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMonitorOrderInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIELDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fields = iprot.readString();
                struct.setFieldsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMonitorOrderInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fields != null) {
          oprot.writeFieldBegin(FIELDS_FIELD_DESC);
          oprot.writeString(struct.fields);
          oprot.writeFieldEnd();
        }
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMonitorOrderInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getMonitorOrderInfo_argsTupleScheme getScheme() {
        return new getMonitorOrderInfo_argsTupleScheme();
      }
    }

    private static class getMonitorOrderInfo_argsTupleScheme extends TupleScheme<getMonitorOrderInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMonitorOrderInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFields()) {
          optionals.set(0);
        }
        if (struct.isSetOrderId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFields()) {
          oprot.writeString(struct.fields);
        }
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMonitorOrderInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fields = iprot.readString();
          struct.setFieldsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
      }
    }

  }

  public static class getMonitorOrderInfo_result implements org.apache.thrift.TBase<getMonitorOrderInfo_result, getMonitorOrderInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMonitorOrderInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMonitorOrderInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMonitorOrderInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMonitorOrderInfo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMonitorOrderInfo_result.class, metaDataMap);
    }

    public getMonitorOrderInfo_result() {
    }

    public getMonitorOrderInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMonitorOrderInfo_result(getMonitorOrderInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getMonitorOrderInfo_result deepCopy() {
      return new getMonitorOrderInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getMonitorOrderInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMonitorOrderInfo_result)
        return this.equals((getMonitorOrderInfo_result)that);
      return false;
    }

    public boolean equals(getMonitorOrderInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMonitorOrderInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMonitorOrderInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMonitorOrderInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getMonitorOrderInfo_resultStandardScheme getScheme() {
        return new getMonitorOrderInfo_resultStandardScheme();
      }
    }

    private static class getMonitorOrderInfo_resultStandardScheme extends StandardScheme<getMonitorOrderInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMonitorOrderInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMonitorOrderInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMonitorOrderInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getMonitorOrderInfo_resultTupleScheme getScheme() {
        return new getMonitorOrderInfo_resultTupleScheme();
      }
    }

    private static class getMonitorOrderInfo_resultTupleScheme extends TupleScheme<getMonitorOrderInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMonitorOrderInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMonitorOrderInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
