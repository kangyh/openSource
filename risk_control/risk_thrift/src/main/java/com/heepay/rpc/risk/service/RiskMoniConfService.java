/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.risk.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-10")
public class RiskMoniConfService {

  public interface Iface {

    public String addChannelMonitorConfig(String configStr) throws org.apache.thrift.TException;

    public String editChannelMonitorConfig(String configStr) throws org.apache.thrift.TException;

    public String delChannelMonitorConfig(String configStr) throws org.apache.thrift.TException;

    public String addMerchantMonitorConfig(String configStr) throws org.apache.thrift.TException;

    public String editMerchantMonitorConfig(String configStr) throws org.apache.thrift.TException;

    public String delMerchantMonitorConfig(String configStr) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addChannelMonitorConfig(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editChannelMonitorConfig(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delChannelMonitorConfig(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addMerchantMonitorConfig(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editMerchantMonitorConfig(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delMerchantMonitorConfig(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String addChannelMonitorConfig(String configStr) throws org.apache.thrift.TException
    {
      send_addChannelMonitorConfig(configStr);
      return recv_addChannelMonitorConfig();
    }

    public void send_addChannelMonitorConfig(String configStr) throws org.apache.thrift.TException
    {
      addChannelMonitorConfig_args args = new addChannelMonitorConfig_args();
      args.setConfigStr(configStr);
      sendBase("addChannelMonitorConfig", args);
    }

    public String recv_addChannelMonitorConfig() throws org.apache.thrift.TException
    {
      addChannelMonitorConfig_result result = new addChannelMonitorConfig_result();
      receiveBase(result, "addChannelMonitorConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addChannelMonitorConfig failed: unknown result");
    }

    public String editChannelMonitorConfig(String configStr) throws org.apache.thrift.TException
    {
      send_editChannelMonitorConfig(configStr);
      return recv_editChannelMonitorConfig();
    }

    public void send_editChannelMonitorConfig(String configStr) throws org.apache.thrift.TException
    {
      editChannelMonitorConfig_args args = new editChannelMonitorConfig_args();
      args.setConfigStr(configStr);
      sendBase("editChannelMonitorConfig", args);
    }

    public String recv_editChannelMonitorConfig() throws org.apache.thrift.TException
    {
      editChannelMonitorConfig_result result = new editChannelMonitorConfig_result();
      receiveBase(result, "editChannelMonitorConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editChannelMonitorConfig failed: unknown result");
    }

    public String delChannelMonitorConfig(String configStr) throws org.apache.thrift.TException
    {
      send_delChannelMonitorConfig(configStr);
      return recv_delChannelMonitorConfig();
    }

    public void send_delChannelMonitorConfig(String configStr) throws org.apache.thrift.TException
    {
      delChannelMonitorConfig_args args = new delChannelMonitorConfig_args();
      args.setConfigStr(configStr);
      sendBase("delChannelMonitorConfig", args);
    }

    public String recv_delChannelMonitorConfig() throws org.apache.thrift.TException
    {
      delChannelMonitorConfig_result result = new delChannelMonitorConfig_result();
      receiveBase(result, "delChannelMonitorConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delChannelMonitorConfig failed: unknown result");
    }

    public String addMerchantMonitorConfig(String configStr) throws org.apache.thrift.TException
    {
      send_addMerchantMonitorConfig(configStr);
      return recv_addMerchantMonitorConfig();
    }

    public void send_addMerchantMonitorConfig(String configStr) throws org.apache.thrift.TException
    {
      addMerchantMonitorConfig_args args = new addMerchantMonitorConfig_args();
      args.setConfigStr(configStr);
      sendBase("addMerchantMonitorConfig", args);
    }

    public String recv_addMerchantMonitorConfig() throws org.apache.thrift.TException
    {
      addMerchantMonitorConfig_result result = new addMerchantMonitorConfig_result();
      receiveBase(result, "addMerchantMonitorConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMerchantMonitorConfig failed: unknown result");
    }

    public String editMerchantMonitorConfig(String configStr) throws org.apache.thrift.TException
    {
      send_editMerchantMonitorConfig(configStr);
      return recv_editMerchantMonitorConfig();
    }

    public void send_editMerchantMonitorConfig(String configStr) throws org.apache.thrift.TException
    {
      editMerchantMonitorConfig_args args = new editMerchantMonitorConfig_args();
      args.setConfigStr(configStr);
      sendBase("editMerchantMonitorConfig", args);
    }

    public String recv_editMerchantMonitorConfig() throws org.apache.thrift.TException
    {
      editMerchantMonitorConfig_result result = new editMerchantMonitorConfig_result();
      receiveBase(result, "editMerchantMonitorConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editMerchantMonitorConfig failed: unknown result");
    }

    public String delMerchantMonitorConfig(String configStr) throws org.apache.thrift.TException
    {
      send_delMerchantMonitorConfig(configStr);
      return recv_delMerchantMonitorConfig();
    }

    public void send_delMerchantMonitorConfig(String configStr) throws org.apache.thrift.TException
    {
      delMerchantMonitorConfig_args args = new delMerchantMonitorConfig_args();
      args.setConfigStr(configStr);
      sendBase("delMerchantMonitorConfig", args);
    }

    public String recv_delMerchantMonitorConfig() throws org.apache.thrift.TException
    {
      delMerchantMonitorConfig_result result = new delMerchantMonitorConfig_result();
      receiveBase(result, "delMerchantMonitorConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delMerchantMonitorConfig failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addChannelMonitorConfig(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addChannelMonitorConfig_call method_call = new addChannelMonitorConfig_call(configStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addChannelMonitorConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String configStr;
      public addChannelMonitorConfig_call(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configStr = configStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addChannelMonitorConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addChannelMonitorConfig_args args = new addChannelMonitorConfig_args();
        args.setConfigStr(configStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addChannelMonitorConfig();
      }
    }

    public void editChannelMonitorConfig(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editChannelMonitorConfig_call method_call = new editChannelMonitorConfig_call(configStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editChannelMonitorConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String configStr;
      public editChannelMonitorConfig_call(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configStr = configStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editChannelMonitorConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editChannelMonitorConfig_args args = new editChannelMonitorConfig_args();
        args.setConfigStr(configStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editChannelMonitorConfig();
      }
    }

    public void delChannelMonitorConfig(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delChannelMonitorConfig_call method_call = new delChannelMonitorConfig_call(configStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delChannelMonitorConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String configStr;
      public delChannelMonitorConfig_call(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configStr = configStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delChannelMonitorConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delChannelMonitorConfig_args args = new delChannelMonitorConfig_args();
        args.setConfigStr(configStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delChannelMonitorConfig();
      }
    }

    public void addMerchantMonitorConfig(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMerchantMonitorConfig_call method_call = new addMerchantMonitorConfig_call(configStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMerchantMonitorConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String configStr;
      public addMerchantMonitorConfig_call(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configStr = configStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMerchantMonitorConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMerchantMonitorConfig_args args = new addMerchantMonitorConfig_args();
        args.setConfigStr(configStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addMerchantMonitorConfig();
      }
    }

    public void editMerchantMonitorConfig(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editMerchantMonitorConfig_call method_call = new editMerchantMonitorConfig_call(configStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editMerchantMonitorConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String configStr;
      public editMerchantMonitorConfig_call(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configStr = configStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editMerchantMonitorConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editMerchantMonitorConfig_args args = new editMerchantMonitorConfig_args();
        args.setConfigStr(configStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editMerchantMonitorConfig();
      }
    }

    public void delMerchantMonitorConfig(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delMerchantMonitorConfig_call method_call = new delMerchantMonitorConfig_call(configStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delMerchantMonitorConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String configStr;
      public delMerchantMonitorConfig_call(String configStr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configStr = configStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delMerchantMonitorConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delMerchantMonitorConfig_args args = new delMerchantMonitorConfig_args();
        args.setConfigStr(configStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delMerchantMonitorConfig();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addChannelMonitorConfig", new addChannelMonitorConfig());
      processMap.put("editChannelMonitorConfig", new editChannelMonitorConfig());
      processMap.put("delChannelMonitorConfig", new delChannelMonitorConfig());
      processMap.put("addMerchantMonitorConfig", new addMerchantMonitorConfig());
      processMap.put("editMerchantMonitorConfig", new editMerchantMonitorConfig());
      processMap.put("delMerchantMonitorConfig", new delMerchantMonitorConfig());
      return processMap;
    }

    public static class addChannelMonitorConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addChannelMonitorConfig_args> {
      public addChannelMonitorConfig() {
        super("addChannelMonitorConfig");
      }

      public addChannelMonitorConfig_args getEmptyArgsInstance() {
        return new addChannelMonitorConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addChannelMonitorConfig_result getResult(I iface, addChannelMonitorConfig_args args) throws org.apache.thrift.TException {
        addChannelMonitorConfig_result result = new addChannelMonitorConfig_result();
        result.success = iface.addChannelMonitorConfig(args.configStr);
        return result;
      }
    }

    public static class editChannelMonitorConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editChannelMonitorConfig_args> {
      public editChannelMonitorConfig() {
        super("editChannelMonitorConfig");
      }

      public editChannelMonitorConfig_args getEmptyArgsInstance() {
        return new editChannelMonitorConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editChannelMonitorConfig_result getResult(I iface, editChannelMonitorConfig_args args) throws org.apache.thrift.TException {
        editChannelMonitorConfig_result result = new editChannelMonitorConfig_result();
        result.success = iface.editChannelMonitorConfig(args.configStr);
        return result;
      }
    }

    public static class delChannelMonitorConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delChannelMonitorConfig_args> {
      public delChannelMonitorConfig() {
        super("delChannelMonitorConfig");
      }

      public delChannelMonitorConfig_args getEmptyArgsInstance() {
        return new delChannelMonitorConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delChannelMonitorConfig_result getResult(I iface, delChannelMonitorConfig_args args) throws org.apache.thrift.TException {
        delChannelMonitorConfig_result result = new delChannelMonitorConfig_result();
        result.success = iface.delChannelMonitorConfig(args.configStr);
        return result;
      }
    }

    public static class addMerchantMonitorConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMerchantMonitorConfig_args> {
      public addMerchantMonitorConfig() {
        super("addMerchantMonitorConfig");
      }

      public addMerchantMonitorConfig_args getEmptyArgsInstance() {
        return new addMerchantMonitorConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addMerchantMonitorConfig_result getResult(I iface, addMerchantMonitorConfig_args args) throws org.apache.thrift.TException {
        addMerchantMonitorConfig_result result = new addMerchantMonitorConfig_result();
        result.success = iface.addMerchantMonitorConfig(args.configStr);
        return result;
      }
    }

    public static class editMerchantMonitorConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editMerchantMonitorConfig_args> {
      public editMerchantMonitorConfig() {
        super("editMerchantMonitorConfig");
      }

      public editMerchantMonitorConfig_args getEmptyArgsInstance() {
        return new editMerchantMonitorConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editMerchantMonitorConfig_result getResult(I iface, editMerchantMonitorConfig_args args) throws org.apache.thrift.TException {
        editMerchantMonitorConfig_result result = new editMerchantMonitorConfig_result();
        result.success = iface.editMerchantMonitorConfig(args.configStr);
        return result;
      }
    }

    public static class delMerchantMonitorConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delMerchantMonitorConfig_args> {
      public delMerchantMonitorConfig() {
        super("delMerchantMonitorConfig");
      }

      public delMerchantMonitorConfig_args getEmptyArgsInstance() {
        return new delMerchantMonitorConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delMerchantMonitorConfig_result getResult(I iface, delMerchantMonitorConfig_args args) throws org.apache.thrift.TException {
        delMerchantMonitorConfig_result result = new delMerchantMonitorConfig_result();
        result.success = iface.delMerchantMonitorConfig(args.configStr);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addChannelMonitorConfig", new addChannelMonitorConfig());
      processMap.put("editChannelMonitorConfig", new editChannelMonitorConfig());
      processMap.put("delChannelMonitorConfig", new delChannelMonitorConfig());
      processMap.put("addMerchantMonitorConfig", new addMerchantMonitorConfig());
      processMap.put("editMerchantMonitorConfig", new editMerchantMonitorConfig());
      processMap.put("delMerchantMonitorConfig", new delMerchantMonitorConfig());
      return processMap;
    }

    public static class addChannelMonitorConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addChannelMonitorConfig_args, String> {
      public addChannelMonitorConfig() {
        super("addChannelMonitorConfig");
      }

      public addChannelMonitorConfig_args getEmptyArgsInstance() {
        return new addChannelMonitorConfig_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addChannelMonitorConfig_result result = new addChannelMonitorConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addChannelMonitorConfig_result result = new addChannelMonitorConfig_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addChannelMonitorConfig_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addChannelMonitorConfig(args.configStr,resultHandler);
      }
    }

    public static class editChannelMonitorConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editChannelMonitorConfig_args, String> {
      public editChannelMonitorConfig() {
        super("editChannelMonitorConfig");
      }

      public editChannelMonitorConfig_args getEmptyArgsInstance() {
        return new editChannelMonitorConfig_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editChannelMonitorConfig_result result = new editChannelMonitorConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editChannelMonitorConfig_result result = new editChannelMonitorConfig_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editChannelMonitorConfig_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editChannelMonitorConfig(args.configStr,resultHandler);
      }
    }

    public static class delChannelMonitorConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delChannelMonitorConfig_args, String> {
      public delChannelMonitorConfig() {
        super("delChannelMonitorConfig");
      }

      public delChannelMonitorConfig_args getEmptyArgsInstance() {
        return new delChannelMonitorConfig_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            delChannelMonitorConfig_result result = new delChannelMonitorConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delChannelMonitorConfig_result result = new delChannelMonitorConfig_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delChannelMonitorConfig_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.delChannelMonitorConfig(args.configStr,resultHandler);
      }
    }

    public static class addMerchantMonitorConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMerchantMonitorConfig_args, String> {
      public addMerchantMonitorConfig() {
        super("addMerchantMonitorConfig");
      }

      public addMerchantMonitorConfig_args getEmptyArgsInstance() {
        return new addMerchantMonitorConfig_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addMerchantMonitorConfig_result result = new addMerchantMonitorConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addMerchantMonitorConfig_result result = new addMerchantMonitorConfig_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addMerchantMonitorConfig_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addMerchantMonitorConfig(args.configStr,resultHandler);
      }
    }

    public static class editMerchantMonitorConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editMerchantMonitorConfig_args, String> {
      public editMerchantMonitorConfig() {
        super("editMerchantMonitorConfig");
      }

      public editMerchantMonitorConfig_args getEmptyArgsInstance() {
        return new editMerchantMonitorConfig_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editMerchantMonitorConfig_result result = new editMerchantMonitorConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editMerchantMonitorConfig_result result = new editMerchantMonitorConfig_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editMerchantMonitorConfig_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editMerchantMonitorConfig(args.configStr,resultHandler);
      }
    }

    public static class delMerchantMonitorConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delMerchantMonitorConfig_args, String> {
      public delMerchantMonitorConfig() {
        super("delMerchantMonitorConfig");
      }

      public delMerchantMonitorConfig_args getEmptyArgsInstance() {
        return new delMerchantMonitorConfig_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            delMerchantMonitorConfig_result result = new delMerchantMonitorConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delMerchantMonitorConfig_result result = new delMerchantMonitorConfig_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delMerchantMonitorConfig_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.delMerchantMonitorConfig(args.configStr,resultHandler);
      }
    }

  }

  public static class addChannelMonitorConfig_args implements org.apache.thrift.TBase<addChannelMonitorConfig_args, addChannelMonitorConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<addChannelMonitorConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addChannelMonitorConfig_args");

    private static final org.apache.thrift.protocol.TField CONFIG_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("configStr", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addChannelMonitorConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addChannelMonitorConfig_argsTupleSchemeFactory());
    }

    public String configStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG_STR((short)1, "configStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG_STR
            return CONFIG_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG_STR, new org.apache.thrift.meta_data.FieldMetaData("configStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addChannelMonitorConfig_args.class, metaDataMap);
    }

    public addChannelMonitorConfig_args() {
    }

    public addChannelMonitorConfig_args(
      String configStr)
    {
      this();
      this.configStr = configStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addChannelMonitorConfig_args(addChannelMonitorConfig_args other) {
      if (other.isSetConfigStr()) {
        this.configStr = other.configStr;
      }
    }

    public addChannelMonitorConfig_args deepCopy() {
      return new addChannelMonitorConfig_args(this);
    }

    @Override
    public void clear() {
      this.configStr = null;
    }

    public String getConfigStr() {
      return this.configStr;
    }

    public addChannelMonitorConfig_args setConfigStr(String configStr) {
      this.configStr = configStr;
      return this;
    }

    public void unsetConfigStr() {
      this.configStr = null;
    }

    /** Returns true if field configStr is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigStr() {
      return this.configStr != null;
    }

    public void setConfigStrIsSet(boolean value) {
      if (!value) {
        this.configStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG_STR:
        if (value == null) {
          unsetConfigStr();
        } else {
          setConfigStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG_STR:
        return getConfigStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG_STR:
        return isSetConfigStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addChannelMonitorConfig_args)
        return this.equals((addChannelMonitorConfig_args)that);
      return false;
    }

    public boolean equals(addChannelMonitorConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_configStr = true && this.isSetConfigStr();
      boolean that_present_configStr = true && that.isSetConfigStr();
      if (this_present_configStr || that_present_configStr) {
        if (!(this_present_configStr && that_present_configStr))
          return false;
        if (!this.configStr.equals(that.configStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_configStr = true && (isSetConfigStr());
      list.add(present_configStr);
      if (present_configStr)
        list.add(configStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(addChannelMonitorConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfigStr()).compareTo(other.isSetConfigStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configStr, other.configStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addChannelMonitorConfig_args(");
      boolean first = true;

      sb.append("configStr:");
      if (this.configStr == null) {
        sb.append("null");
      } else {
        sb.append(this.configStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addChannelMonitorConfig_argsStandardSchemeFactory implements SchemeFactory {
      public addChannelMonitorConfig_argsStandardScheme getScheme() {
        return new addChannelMonitorConfig_argsStandardScheme();
      }
    }

    private static class addChannelMonitorConfig_argsStandardScheme extends StandardScheme<addChannelMonitorConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addChannelMonitorConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIG_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configStr = iprot.readString();
                struct.setConfigStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addChannelMonitorConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configStr != null) {
          oprot.writeFieldBegin(CONFIG_STR_FIELD_DESC);
          oprot.writeString(struct.configStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addChannelMonitorConfig_argsTupleSchemeFactory implements SchemeFactory {
      public addChannelMonitorConfig_argsTupleScheme getScheme() {
        return new addChannelMonitorConfig_argsTupleScheme();
      }
    }

    private static class addChannelMonitorConfig_argsTupleScheme extends TupleScheme<addChannelMonitorConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addChannelMonitorConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfigStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfigStr()) {
          oprot.writeString(struct.configStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addChannelMonitorConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.configStr = iprot.readString();
          struct.setConfigStrIsSet(true);
        }
      }
    }

  }

  public static class addChannelMonitorConfig_result implements org.apache.thrift.TBase<addChannelMonitorConfig_result, addChannelMonitorConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<addChannelMonitorConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addChannelMonitorConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addChannelMonitorConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addChannelMonitorConfig_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addChannelMonitorConfig_result.class, metaDataMap);
    }

    public addChannelMonitorConfig_result() {
    }

    public addChannelMonitorConfig_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addChannelMonitorConfig_result(addChannelMonitorConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addChannelMonitorConfig_result deepCopy() {
      return new addChannelMonitorConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addChannelMonitorConfig_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addChannelMonitorConfig_result)
        return this.equals((addChannelMonitorConfig_result)that);
      return false;
    }

    public boolean equals(addChannelMonitorConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addChannelMonitorConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addChannelMonitorConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addChannelMonitorConfig_resultStandardSchemeFactory implements SchemeFactory {
      public addChannelMonitorConfig_resultStandardScheme getScheme() {
        return new addChannelMonitorConfig_resultStandardScheme();
      }
    }

    private static class addChannelMonitorConfig_resultStandardScheme extends StandardScheme<addChannelMonitorConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addChannelMonitorConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addChannelMonitorConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addChannelMonitorConfig_resultTupleSchemeFactory implements SchemeFactory {
      public addChannelMonitorConfig_resultTupleScheme getScheme() {
        return new addChannelMonitorConfig_resultTupleScheme();
      }
    }

    private static class addChannelMonitorConfig_resultTupleScheme extends TupleScheme<addChannelMonitorConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addChannelMonitorConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addChannelMonitorConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editChannelMonitorConfig_args implements org.apache.thrift.TBase<editChannelMonitorConfig_args, editChannelMonitorConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<editChannelMonitorConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editChannelMonitorConfig_args");

    private static final org.apache.thrift.protocol.TField CONFIG_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("configStr", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editChannelMonitorConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editChannelMonitorConfig_argsTupleSchemeFactory());
    }

    public String configStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG_STR((short)1, "configStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG_STR
            return CONFIG_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG_STR, new org.apache.thrift.meta_data.FieldMetaData("configStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editChannelMonitorConfig_args.class, metaDataMap);
    }

    public editChannelMonitorConfig_args() {
    }

    public editChannelMonitorConfig_args(
      String configStr)
    {
      this();
      this.configStr = configStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editChannelMonitorConfig_args(editChannelMonitorConfig_args other) {
      if (other.isSetConfigStr()) {
        this.configStr = other.configStr;
      }
    }

    public editChannelMonitorConfig_args deepCopy() {
      return new editChannelMonitorConfig_args(this);
    }

    @Override
    public void clear() {
      this.configStr = null;
    }

    public String getConfigStr() {
      return this.configStr;
    }

    public editChannelMonitorConfig_args setConfigStr(String configStr) {
      this.configStr = configStr;
      return this;
    }

    public void unsetConfigStr() {
      this.configStr = null;
    }

    /** Returns true if field configStr is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigStr() {
      return this.configStr != null;
    }

    public void setConfigStrIsSet(boolean value) {
      if (!value) {
        this.configStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG_STR:
        if (value == null) {
          unsetConfigStr();
        } else {
          setConfigStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG_STR:
        return getConfigStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG_STR:
        return isSetConfigStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editChannelMonitorConfig_args)
        return this.equals((editChannelMonitorConfig_args)that);
      return false;
    }

    public boolean equals(editChannelMonitorConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_configStr = true && this.isSetConfigStr();
      boolean that_present_configStr = true && that.isSetConfigStr();
      if (this_present_configStr || that_present_configStr) {
        if (!(this_present_configStr && that_present_configStr))
          return false;
        if (!this.configStr.equals(that.configStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_configStr = true && (isSetConfigStr());
      list.add(present_configStr);
      if (present_configStr)
        list.add(configStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(editChannelMonitorConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfigStr()).compareTo(other.isSetConfigStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configStr, other.configStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editChannelMonitorConfig_args(");
      boolean first = true;

      sb.append("configStr:");
      if (this.configStr == null) {
        sb.append("null");
      } else {
        sb.append(this.configStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editChannelMonitorConfig_argsStandardSchemeFactory implements SchemeFactory {
      public editChannelMonitorConfig_argsStandardScheme getScheme() {
        return new editChannelMonitorConfig_argsStandardScheme();
      }
    }

    private static class editChannelMonitorConfig_argsStandardScheme extends StandardScheme<editChannelMonitorConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editChannelMonitorConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIG_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configStr = iprot.readString();
                struct.setConfigStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editChannelMonitorConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configStr != null) {
          oprot.writeFieldBegin(CONFIG_STR_FIELD_DESC);
          oprot.writeString(struct.configStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editChannelMonitorConfig_argsTupleSchemeFactory implements SchemeFactory {
      public editChannelMonitorConfig_argsTupleScheme getScheme() {
        return new editChannelMonitorConfig_argsTupleScheme();
      }
    }

    private static class editChannelMonitorConfig_argsTupleScheme extends TupleScheme<editChannelMonitorConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editChannelMonitorConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfigStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfigStr()) {
          oprot.writeString(struct.configStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editChannelMonitorConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.configStr = iprot.readString();
          struct.setConfigStrIsSet(true);
        }
      }
    }

  }

  public static class editChannelMonitorConfig_result implements org.apache.thrift.TBase<editChannelMonitorConfig_result, editChannelMonitorConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<editChannelMonitorConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editChannelMonitorConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editChannelMonitorConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editChannelMonitorConfig_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editChannelMonitorConfig_result.class, metaDataMap);
    }

    public editChannelMonitorConfig_result() {
    }

    public editChannelMonitorConfig_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editChannelMonitorConfig_result(editChannelMonitorConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editChannelMonitorConfig_result deepCopy() {
      return new editChannelMonitorConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editChannelMonitorConfig_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editChannelMonitorConfig_result)
        return this.equals((editChannelMonitorConfig_result)that);
      return false;
    }

    public boolean equals(editChannelMonitorConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editChannelMonitorConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editChannelMonitorConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editChannelMonitorConfig_resultStandardSchemeFactory implements SchemeFactory {
      public editChannelMonitorConfig_resultStandardScheme getScheme() {
        return new editChannelMonitorConfig_resultStandardScheme();
      }
    }

    private static class editChannelMonitorConfig_resultStandardScheme extends StandardScheme<editChannelMonitorConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editChannelMonitorConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editChannelMonitorConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editChannelMonitorConfig_resultTupleSchemeFactory implements SchemeFactory {
      public editChannelMonitorConfig_resultTupleScheme getScheme() {
        return new editChannelMonitorConfig_resultTupleScheme();
      }
    }

    private static class editChannelMonitorConfig_resultTupleScheme extends TupleScheme<editChannelMonitorConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editChannelMonitorConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editChannelMonitorConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delChannelMonitorConfig_args implements org.apache.thrift.TBase<delChannelMonitorConfig_args, delChannelMonitorConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<delChannelMonitorConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delChannelMonitorConfig_args");

    private static final org.apache.thrift.protocol.TField CONFIG_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("configStr", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delChannelMonitorConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delChannelMonitorConfig_argsTupleSchemeFactory());
    }

    public String configStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG_STR((short)1, "configStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG_STR
            return CONFIG_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG_STR, new org.apache.thrift.meta_data.FieldMetaData("configStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delChannelMonitorConfig_args.class, metaDataMap);
    }

    public delChannelMonitorConfig_args() {
    }

    public delChannelMonitorConfig_args(
      String configStr)
    {
      this();
      this.configStr = configStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delChannelMonitorConfig_args(delChannelMonitorConfig_args other) {
      if (other.isSetConfigStr()) {
        this.configStr = other.configStr;
      }
    }

    public delChannelMonitorConfig_args deepCopy() {
      return new delChannelMonitorConfig_args(this);
    }

    @Override
    public void clear() {
      this.configStr = null;
    }

    public String getConfigStr() {
      return this.configStr;
    }

    public delChannelMonitorConfig_args setConfigStr(String configStr) {
      this.configStr = configStr;
      return this;
    }

    public void unsetConfigStr() {
      this.configStr = null;
    }

    /** Returns true if field configStr is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigStr() {
      return this.configStr != null;
    }

    public void setConfigStrIsSet(boolean value) {
      if (!value) {
        this.configStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG_STR:
        if (value == null) {
          unsetConfigStr();
        } else {
          setConfigStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG_STR:
        return getConfigStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG_STR:
        return isSetConfigStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delChannelMonitorConfig_args)
        return this.equals((delChannelMonitorConfig_args)that);
      return false;
    }

    public boolean equals(delChannelMonitorConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_configStr = true && this.isSetConfigStr();
      boolean that_present_configStr = true && that.isSetConfigStr();
      if (this_present_configStr || that_present_configStr) {
        if (!(this_present_configStr && that_present_configStr))
          return false;
        if (!this.configStr.equals(that.configStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_configStr = true && (isSetConfigStr());
      list.add(present_configStr);
      if (present_configStr)
        list.add(configStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(delChannelMonitorConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfigStr()).compareTo(other.isSetConfigStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configStr, other.configStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delChannelMonitorConfig_args(");
      boolean first = true;

      sb.append("configStr:");
      if (this.configStr == null) {
        sb.append("null");
      } else {
        sb.append(this.configStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delChannelMonitorConfig_argsStandardSchemeFactory implements SchemeFactory {
      public delChannelMonitorConfig_argsStandardScheme getScheme() {
        return new delChannelMonitorConfig_argsStandardScheme();
      }
    }

    private static class delChannelMonitorConfig_argsStandardScheme extends StandardScheme<delChannelMonitorConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delChannelMonitorConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIG_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configStr = iprot.readString();
                struct.setConfigStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delChannelMonitorConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configStr != null) {
          oprot.writeFieldBegin(CONFIG_STR_FIELD_DESC);
          oprot.writeString(struct.configStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delChannelMonitorConfig_argsTupleSchemeFactory implements SchemeFactory {
      public delChannelMonitorConfig_argsTupleScheme getScheme() {
        return new delChannelMonitorConfig_argsTupleScheme();
      }
    }

    private static class delChannelMonitorConfig_argsTupleScheme extends TupleScheme<delChannelMonitorConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delChannelMonitorConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfigStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfigStr()) {
          oprot.writeString(struct.configStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delChannelMonitorConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.configStr = iprot.readString();
          struct.setConfigStrIsSet(true);
        }
      }
    }

  }

  public static class delChannelMonitorConfig_result implements org.apache.thrift.TBase<delChannelMonitorConfig_result, delChannelMonitorConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<delChannelMonitorConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delChannelMonitorConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delChannelMonitorConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delChannelMonitorConfig_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delChannelMonitorConfig_result.class, metaDataMap);
    }

    public delChannelMonitorConfig_result() {
    }

    public delChannelMonitorConfig_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delChannelMonitorConfig_result(delChannelMonitorConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public delChannelMonitorConfig_result deepCopy() {
      return new delChannelMonitorConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public delChannelMonitorConfig_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delChannelMonitorConfig_result)
        return this.equals((delChannelMonitorConfig_result)that);
      return false;
    }

    public boolean equals(delChannelMonitorConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delChannelMonitorConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delChannelMonitorConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delChannelMonitorConfig_resultStandardSchemeFactory implements SchemeFactory {
      public delChannelMonitorConfig_resultStandardScheme getScheme() {
        return new delChannelMonitorConfig_resultStandardScheme();
      }
    }

    private static class delChannelMonitorConfig_resultStandardScheme extends StandardScheme<delChannelMonitorConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delChannelMonitorConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delChannelMonitorConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delChannelMonitorConfig_resultTupleSchemeFactory implements SchemeFactory {
      public delChannelMonitorConfig_resultTupleScheme getScheme() {
        return new delChannelMonitorConfig_resultTupleScheme();
      }
    }

    private static class delChannelMonitorConfig_resultTupleScheme extends TupleScheme<delChannelMonitorConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delChannelMonitorConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delChannelMonitorConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addMerchantMonitorConfig_args implements org.apache.thrift.TBase<addMerchantMonitorConfig_args, addMerchantMonitorConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantMonitorConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantMonitorConfig_args");

    private static final org.apache.thrift.protocol.TField CONFIG_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("configStr", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantMonitorConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantMonitorConfig_argsTupleSchemeFactory());
    }

    public String configStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG_STR((short)1, "configStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG_STR
            return CONFIG_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG_STR, new org.apache.thrift.meta_data.FieldMetaData("configStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantMonitorConfig_args.class, metaDataMap);
    }

    public addMerchantMonitorConfig_args() {
    }

    public addMerchantMonitorConfig_args(
      String configStr)
    {
      this();
      this.configStr = configStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantMonitorConfig_args(addMerchantMonitorConfig_args other) {
      if (other.isSetConfigStr()) {
        this.configStr = other.configStr;
      }
    }

    public addMerchantMonitorConfig_args deepCopy() {
      return new addMerchantMonitorConfig_args(this);
    }

    @Override
    public void clear() {
      this.configStr = null;
    }

    public String getConfigStr() {
      return this.configStr;
    }

    public addMerchantMonitorConfig_args setConfigStr(String configStr) {
      this.configStr = configStr;
      return this;
    }

    public void unsetConfigStr() {
      this.configStr = null;
    }

    /** Returns true if field configStr is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigStr() {
      return this.configStr != null;
    }

    public void setConfigStrIsSet(boolean value) {
      if (!value) {
        this.configStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG_STR:
        if (value == null) {
          unsetConfigStr();
        } else {
          setConfigStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG_STR:
        return getConfigStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG_STR:
        return isSetConfigStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantMonitorConfig_args)
        return this.equals((addMerchantMonitorConfig_args)that);
      return false;
    }

    public boolean equals(addMerchantMonitorConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_configStr = true && this.isSetConfigStr();
      boolean that_present_configStr = true && that.isSetConfigStr();
      if (this_present_configStr || that_present_configStr) {
        if (!(this_present_configStr && that_present_configStr))
          return false;
        if (!this.configStr.equals(that.configStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_configStr = true && (isSetConfigStr());
      list.add(present_configStr);
      if (present_configStr)
        list.add(configStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantMonitorConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfigStr()).compareTo(other.isSetConfigStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configStr, other.configStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantMonitorConfig_args(");
      boolean first = true;

      sb.append("configStr:");
      if (this.configStr == null) {
        sb.append("null");
      } else {
        sb.append(this.configStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantMonitorConfig_argsStandardSchemeFactory implements SchemeFactory {
      public addMerchantMonitorConfig_argsStandardScheme getScheme() {
        return new addMerchantMonitorConfig_argsStandardScheme();
      }
    }

    private static class addMerchantMonitorConfig_argsStandardScheme extends StandardScheme<addMerchantMonitorConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantMonitorConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIG_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configStr = iprot.readString();
                struct.setConfigStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantMonitorConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configStr != null) {
          oprot.writeFieldBegin(CONFIG_STR_FIELD_DESC);
          oprot.writeString(struct.configStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantMonitorConfig_argsTupleSchemeFactory implements SchemeFactory {
      public addMerchantMonitorConfig_argsTupleScheme getScheme() {
        return new addMerchantMonitorConfig_argsTupleScheme();
      }
    }

    private static class addMerchantMonitorConfig_argsTupleScheme extends TupleScheme<addMerchantMonitorConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantMonitorConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfigStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfigStr()) {
          oprot.writeString(struct.configStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantMonitorConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.configStr = iprot.readString();
          struct.setConfigStrIsSet(true);
        }
      }
    }

  }

  public static class addMerchantMonitorConfig_result implements org.apache.thrift.TBase<addMerchantMonitorConfig_result, addMerchantMonitorConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantMonitorConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantMonitorConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantMonitorConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantMonitorConfig_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantMonitorConfig_result.class, metaDataMap);
    }

    public addMerchantMonitorConfig_result() {
    }

    public addMerchantMonitorConfig_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantMonitorConfig_result(addMerchantMonitorConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addMerchantMonitorConfig_result deepCopy() {
      return new addMerchantMonitorConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addMerchantMonitorConfig_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantMonitorConfig_result)
        return this.equals((addMerchantMonitorConfig_result)that);
      return false;
    }

    public boolean equals(addMerchantMonitorConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantMonitorConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantMonitorConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantMonitorConfig_resultStandardSchemeFactory implements SchemeFactory {
      public addMerchantMonitorConfig_resultStandardScheme getScheme() {
        return new addMerchantMonitorConfig_resultStandardScheme();
      }
    }

    private static class addMerchantMonitorConfig_resultStandardScheme extends StandardScheme<addMerchantMonitorConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantMonitorConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantMonitorConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantMonitorConfig_resultTupleSchemeFactory implements SchemeFactory {
      public addMerchantMonitorConfig_resultTupleScheme getScheme() {
        return new addMerchantMonitorConfig_resultTupleScheme();
      }
    }

    private static class addMerchantMonitorConfig_resultTupleScheme extends TupleScheme<addMerchantMonitorConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantMonitorConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantMonitorConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editMerchantMonitorConfig_args implements org.apache.thrift.TBase<editMerchantMonitorConfig_args, editMerchantMonitorConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<editMerchantMonitorConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editMerchantMonitorConfig_args");

    private static final org.apache.thrift.protocol.TField CONFIG_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("configStr", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editMerchantMonitorConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editMerchantMonitorConfig_argsTupleSchemeFactory());
    }

    public String configStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG_STR((short)1, "configStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG_STR
            return CONFIG_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG_STR, new org.apache.thrift.meta_data.FieldMetaData("configStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editMerchantMonitorConfig_args.class, metaDataMap);
    }

    public editMerchantMonitorConfig_args() {
    }

    public editMerchantMonitorConfig_args(
      String configStr)
    {
      this();
      this.configStr = configStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editMerchantMonitorConfig_args(editMerchantMonitorConfig_args other) {
      if (other.isSetConfigStr()) {
        this.configStr = other.configStr;
      }
    }

    public editMerchantMonitorConfig_args deepCopy() {
      return new editMerchantMonitorConfig_args(this);
    }

    @Override
    public void clear() {
      this.configStr = null;
    }

    public String getConfigStr() {
      return this.configStr;
    }

    public editMerchantMonitorConfig_args setConfigStr(String configStr) {
      this.configStr = configStr;
      return this;
    }

    public void unsetConfigStr() {
      this.configStr = null;
    }

    /** Returns true if field configStr is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigStr() {
      return this.configStr != null;
    }

    public void setConfigStrIsSet(boolean value) {
      if (!value) {
        this.configStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG_STR:
        if (value == null) {
          unsetConfigStr();
        } else {
          setConfigStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG_STR:
        return getConfigStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG_STR:
        return isSetConfigStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editMerchantMonitorConfig_args)
        return this.equals((editMerchantMonitorConfig_args)that);
      return false;
    }

    public boolean equals(editMerchantMonitorConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_configStr = true && this.isSetConfigStr();
      boolean that_present_configStr = true && that.isSetConfigStr();
      if (this_present_configStr || that_present_configStr) {
        if (!(this_present_configStr && that_present_configStr))
          return false;
        if (!this.configStr.equals(that.configStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_configStr = true && (isSetConfigStr());
      list.add(present_configStr);
      if (present_configStr)
        list.add(configStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(editMerchantMonitorConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfigStr()).compareTo(other.isSetConfigStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configStr, other.configStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editMerchantMonitorConfig_args(");
      boolean first = true;

      sb.append("configStr:");
      if (this.configStr == null) {
        sb.append("null");
      } else {
        sb.append(this.configStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editMerchantMonitorConfig_argsStandardSchemeFactory implements SchemeFactory {
      public editMerchantMonitorConfig_argsStandardScheme getScheme() {
        return new editMerchantMonitorConfig_argsStandardScheme();
      }
    }

    private static class editMerchantMonitorConfig_argsStandardScheme extends StandardScheme<editMerchantMonitorConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editMerchantMonitorConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIG_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configStr = iprot.readString();
                struct.setConfigStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editMerchantMonitorConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configStr != null) {
          oprot.writeFieldBegin(CONFIG_STR_FIELD_DESC);
          oprot.writeString(struct.configStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editMerchantMonitorConfig_argsTupleSchemeFactory implements SchemeFactory {
      public editMerchantMonitorConfig_argsTupleScheme getScheme() {
        return new editMerchantMonitorConfig_argsTupleScheme();
      }
    }

    private static class editMerchantMonitorConfig_argsTupleScheme extends TupleScheme<editMerchantMonitorConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editMerchantMonitorConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfigStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfigStr()) {
          oprot.writeString(struct.configStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editMerchantMonitorConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.configStr = iprot.readString();
          struct.setConfigStrIsSet(true);
        }
      }
    }

  }

  public static class editMerchantMonitorConfig_result implements org.apache.thrift.TBase<editMerchantMonitorConfig_result, editMerchantMonitorConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<editMerchantMonitorConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editMerchantMonitorConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editMerchantMonitorConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editMerchantMonitorConfig_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editMerchantMonitorConfig_result.class, metaDataMap);
    }

    public editMerchantMonitorConfig_result() {
    }

    public editMerchantMonitorConfig_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editMerchantMonitorConfig_result(editMerchantMonitorConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editMerchantMonitorConfig_result deepCopy() {
      return new editMerchantMonitorConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editMerchantMonitorConfig_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editMerchantMonitorConfig_result)
        return this.equals((editMerchantMonitorConfig_result)that);
      return false;
    }

    public boolean equals(editMerchantMonitorConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editMerchantMonitorConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editMerchantMonitorConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editMerchantMonitorConfig_resultStandardSchemeFactory implements SchemeFactory {
      public editMerchantMonitorConfig_resultStandardScheme getScheme() {
        return new editMerchantMonitorConfig_resultStandardScheme();
      }
    }

    private static class editMerchantMonitorConfig_resultStandardScheme extends StandardScheme<editMerchantMonitorConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editMerchantMonitorConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editMerchantMonitorConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editMerchantMonitorConfig_resultTupleSchemeFactory implements SchemeFactory {
      public editMerchantMonitorConfig_resultTupleScheme getScheme() {
        return new editMerchantMonitorConfig_resultTupleScheme();
      }
    }

    private static class editMerchantMonitorConfig_resultTupleScheme extends TupleScheme<editMerchantMonitorConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editMerchantMonitorConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editMerchantMonitorConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delMerchantMonitorConfig_args implements org.apache.thrift.TBase<delMerchantMonitorConfig_args, delMerchantMonitorConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<delMerchantMonitorConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delMerchantMonitorConfig_args");

    private static final org.apache.thrift.protocol.TField CONFIG_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("configStr", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delMerchantMonitorConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delMerchantMonitorConfig_argsTupleSchemeFactory());
    }

    public String configStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG_STR((short)1, "configStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG_STR
            return CONFIG_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG_STR, new org.apache.thrift.meta_data.FieldMetaData("configStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delMerchantMonitorConfig_args.class, metaDataMap);
    }

    public delMerchantMonitorConfig_args() {
    }

    public delMerchantMonitorConfig_args(
      String configStr)
    {
      this();
      this.configStr = configStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delMerchantMonitorConfig_args(delMerchantMonitorConfig_args other) {
      if (other.isSetConfigStr()) {
        this.configStr = other.configStr;
      }
    }

    public delMerchantMonitorConfig_args deepCopy() {
      return new delMerchantMonitorConfig_args(this);
    }

    @Override
    public void clear() {
      this.configStr = null;
    }

    public String getConfigStr() {
      return this.configStr;
    }

    public delMerchantMonitorConfig_args setConfigStr(String configStr) {
      this.configStr = configStr;
      return this;
    }

    public void unsetConfigStr() {
      this.configStr = null;
    }

    /** Returns true if field configStr is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigStr() {
      return this.configStr != null;
    }

    public void setConfigStrIsSet(boolean value) {
      if (!value) {
        this.configStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG_STR:
        if (value == null) {
          unsetConfigStr();
        } else {
          setConfigStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG_STR:
        return getConfigStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG_STR:
        return isSetConfigStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delMerchantMonitorConfig_args)
        return this.equals((delMerchantMonitorConfig_args)that);
      return false;
    }

    public boolean equals(delMerchantMonitorConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_configStr = true && this.isSetConfigStr();
      boolean that_present_configStr = true && that.isSetConfigStr();
      if (this_present_configStr || that_present_configStr) {
        if (!(this_present_configStr && that_present_configStr))
          return false;
        if (!this.configStr.equals(that.configStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_configStr = true && (isSetConfigStr());
      list.add(present_configStr);
      if (present_configStr)
        list.add(configStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(delMerchantMonitorConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfigStr()).compareTo(other.isSetConfigStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configStr, other.configStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delMerchantMonitorConfig_args(");
      boolean first = true;

      sb.append("configStr:");
      if (this.configStr == null) {
        sb.append("null");
      } else {
        sb.append(this.configStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delMerchantMonitorConfig_argsStandardSchemeFactory implements SchemeFactory {
      public delMerchantMonitorConfig_argsStandardScheme getScheme() {
        return new delMerchantMonitorConfig_argsStandardScheme();
      }
    }

    private static class delMerchantMonitorConfig_argsStandardScheme extends StandardScheme<delMerchantMonitorConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delMerchantMonitorConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIG_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configStr = iprot.readString();
                struct.setConfigStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delMerchantMonitorConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configStr != null) {
          oprot.writeFieldBegin(CONFIG_STR_FIELD_DESC);
          oprot.writeString(struct.configStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delMerchantMonitorConfig_argsTupleSchemeFactory implements SchemeFactory {
      public delMerchantMonitorConfig_argsTupleScheme getScheme() {
        return new delMerchantMonitorConfig_argsTupleScheme();
      }
    }

    private static class delMerchantMonitorConfig_argsTupleScheme extends TupleScheme<delMerchantMonitorConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delMerchantMonitorConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfigStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfigStr()) {
          oprot.writeString(struct.configStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delMerchantMonitorConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.configStr = iprot.readString();
          struct.setConfigStrIsSet(true);
        }
      }
    }

  }

  public static class delMerchantMonitorConfig_result implements org.apache.thrift.TBase<delMerchantMonitorConfig_result, delMerchantMonitorConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<delMerchantMonitorConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delMerchantMonitorConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delMerchantMonitorConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delMerchantMonitorConfig_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delMerchantMonitorConfig_result.class, metaDataMap);
    }

    public delMerchantMonitorConfig_result() {
    }

    public delMerchantMonitorConfig_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delMerchantMonitorConfig_result(delMerchantMonitorConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public delMerchantMonitorConfig_result deepCopy() {
      return new delMerchantMonitorConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public delMerchantMonitorConfig_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delMerchantMonitorConfig_result)
        return this.equals((delMerchantMonitorConfig_result)that);
      return false;
    }

    public boolean equals(delMerchantMonitorConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delMerchantMonitorConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delMerchantMonitorConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delMerchantMonitorConfig_resultStandardSchemeFactory implements SchemeFactory {
      public delMerchantMonitorConfig_resultStandardScheme getScheme() {
        return new delMerchantMonitorConfig_resultStandardScheme();
      }
    }

    private static class delMerchantMonitorConfig_resultStandardScheme extends StandardScheme<delMerchantMonitorConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delMerchantMonitorConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delMerchantMonitorConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delMerchantMonitorConfig_resultTupleSchemeFactory implements SchemeFactory {
      public delMerchantMonitorConfig_resultTupleScheme getScheme() {
        return new delMerchantMonitorConfig_resultTupleScheme();
      }
    }

    private static class delMerchantMonitorConfig_resultTupleScheme extends TupleScheme<delMerchantMonitorConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delMerchantMonitorConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delMerchantMonitorConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
