/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.risk.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-25")
public class TransOrderRiskModel implements org.apache.thrift.TBase<TransOrderRiskModel, TransOrderRiskModel._Fields>, java.io.Serializable, Cloneable, Comparable<TransOrderRiskModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransOrderRiskModel");

  private static final org.apache.thrift.protocol.TField MERCHANT_ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantOrderNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("TransNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("productType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MERCHANT_COMPANY_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantCompany", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TRANS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TRANS_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("transAmount", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardType", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BANK_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardNo", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BANK_CARD_OWNER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardOwnerName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField BANK_CARD_OWNER_ID_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardOwnerIdCard", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField BANK_CARD_OWNER_MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardOwnerMobile", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CHANNEL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCode", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CHANNEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("channelName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CHANNEL_TRANS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelTransType", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField FEE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("feeType", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField BANK_CARD_OWNER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardOwnerType", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField TRANSFER_BATCH_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("transferBatchAmount", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField FEE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("feeAmount", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField REQ_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("reqIp", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField NOTIFY_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyUrl", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField RETURN_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("returnUrl", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField ASSOCIATE_LINE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("associateLineNumber", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)26);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransOrderRiskModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransOrderRiskModelTupleSchemeFactory());
  }

  public String merchantOrderNo; // required
  public String TransNo; // required
  public String productType; // required
  public String productName; // required
  public String merchantId; // required
  public String merchantCompany; // required
  public String transType; // required
  public String transAmount; // required
  public String bankCardType; // required
  public String bankCardNo; // required
  public String bankCardOwnerName; // required
  public String bankCardOwnerIdCard; // required
  public String bankCardOwnerMobile; // required
  public String channelCode; // required
  public String channelName; // required
  public String channelTransType; // required
  public String feeType; // required
  public String bankCardOwnerType; // required
  public String createTime; // required
  public String transferBatchAmount; // required
  public String feeAmount; // required
  public String reqIp; // required
  public String notifyUrl; // required
  public String returnUrl; // required
  public String associateLineNumber; // required
  public String userType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MERCHANT_ORDER_NO((short)1, "merchantOrderNo"),
    TRANS_NO((short)2, "TransNo"),
    PRODUCT_TYPE((short)3, "productType"),
    PRODUCT_NAME((short)4, "productName"),
    MERCHANT_ID((short)5, "merchantId"),
    MERCHANT_COMPANY((short)6, "merchantCompany"),
    TRANS_TYPE((short)7, "transType"),
    TRANS_AMOUNT((short)8, "transAmount"),
    BANK_CARD_TYPE((short)9, "bankCardType"),
    BANK_CARD_NO((short)10, "bankCardNo"),
    BANK_CARD_OWNER_NAME((short)11, "bankCardOwnerName"),
    BANK_CARD_OWNER_ID_CARD((short)12, "bankCardOwnerIdCard"),
    BANK_CARD_OWNER_MOBILE((short)13, "bankCardOwnerMobile"),
    CHANNEL_CODE((short)14, "channelCode"),
    CHANNEL_NAME((short)15, "channelName"),
    CHANNEL_TRANS_TYPE((short)16, "channelTransType"),
    FEE_TYPE((short)17, "feeType"),
    BANK_CARD_OWNER_TYPE((short)18, "bankCardOwnerType"),
    CREATE_TIME((short)19, "createTime"),
    TRANSFER_BATCH_AMOUNT((short)20, "transferBatchAmount"),
    FEE_AMOUNT((short)21, "feeAmount"),
    REQ_IP((short)22, "reqIp"),
    NOTIFY_URL((short)23, "notifyUrl"),
    RETURN_URL((short)24, "returnUrl"),
    ASSOCIATE_LINE_NUMBER((short)25, "associateLineNumber"),
    USER_TYPE((short)26, "userType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MERCHANT_ORDER_NO
          return MERCHANT_ORDER_NO;
        case 2: // TRANS_NO
          return TRANS_NO;
        case 3: // PRODUCT_TYPE
          return PRODUCT_TYPE;
        case 4: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 5: // MERCHANT_ID
          return MERCHANT_ID;
        case 6: // MERCHANT_COMPANY
          return MERCHANT_COMPANY;
        case 7: // TRANS_TYPE
          return TRANS_TYPE;
        case 8: // TRANS_AMOUNT
          return TRANS_AMOUNT;
        case 9: // BANK_CARD_TYPE
          return BANK_CARD_TYPE;
        case 10: // BANK_CARD_NO
          return BANK_CARD_NO;
        case 11: // BANK_CARD_OWNER_NAME
          return BANK_CARD_OWNER_NAME;
        case 12: // BANK_CARD_OWNER_ID_CARD
          return BANK_CARD_OWNER_ID_CARD;
        case 13: // BANK_CARD_OWNER_MOBILE
          return BANK_CARD_OWNER_MOBILE;
        case 14: // CHANNEL_CODE
          return CHANNEL_CODE;
        case 15: // CHANNEL_NAME
          return CHANNEL_NAME;
        case 16: // CHANNEL_TRANS_TYPE
          return CHANNEL_TRANS_TYPE;
        case 17: // FEE_TYPE
          return FEE_TYPE;
        case 18: // BANK_CARD_OWNER_TYPE
          return BANK_CARD_OWNER_TYPE;
        case 19: // CREATE_TIME
          return CREATE_TIME;
        case 20: // TRANSFER_BATCH_AMOUNT
          return TRANSFER_BATCH_AMOUNT;
        case 21: // FEE_AMOUNT
          return FEE_AMOUNT;
        case 22: // REQ_IP
          return REQ_IP;
        case 23: // NOTIFY_URL
          return NOTIFY_URL;
        case 24: // RETURN_URL
          return RETURN_URL;
        case 25: // ASSOCIATE_LINE_NUMBER
          return ASSOCIATE_LINE_NUMBER;
        case 26: // USER_TYPE
          return USER_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MERCHANT_ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("merchantOrderNo", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("TransNo", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("productType", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_COMPANY, new org.apache.thrift.meta_data.FieldMetaData("merchantCompany", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transType", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("transAmount", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankCardType", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("bankCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_OWNER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankCardOwnerName", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_OWNER_ID_CARD, new org.apache.thrift.meta_data.FieldMetaData("bankCardOwnerIdCard", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_OWNER_MOBILE, new org.apache.thrift.meta_data.FieldMetaData("bankCardOwnerMobile", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelCode", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("channelName", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_TRANS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("channelTransType", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("feeType", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_OWNER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankCardOwnerType", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFER_BATCH_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("transferBatchAmount", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("feeAmount", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQ_IP, new org.apache.thrift.meta_data.FieldMetaData("reqIp", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFY_URL, new org.apache.thrift.meta_data.FieldMetaData("notifyUrl", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_URL, new org.apache.thrift.meta_data.FieldMetaData("returnUrl", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSOCIATE_LINE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("associateLineNumber", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransOrderRiskModel.class, metaDataMap);
  }

  public TransOrderRiskModel() {
  }

  public TransOrderRiskModel(
          String merchantOrderNo,
          String TransNo,
          String productType,
          String productName,
          String merchantId,
          String merchantCompany,
          String transType,
          String transAmount,
          String bankCardType,
          String bankCardNo,
          String bankCardOwnerName,
          String bankCardOwnerIdCard,
          String bankCardOwnerMobile,
          String channelCode,
          String channelName,
          String channelTransType,
          String feeType,
          String bankCardOwnerType,
          String createTime,
          String transferBatchAmount,
          String feeAmount,
          String reqIp,
          String notifyUrl,
          String returnUrl,
          String associateLineNumber,
          String userType)
  {
    this();
    this.merchantOrderNo = merchantOrderNo;
    this.TransNo = TransNo;
    this.productType = productType;
    this.productName = productName;
    this.merchantId = merchantId;
    this.merchantCompany = merchantCompany;
    this.transType = transType;
    this.transAmount = transAmount;
    this.bankCardType = bankCardType;
    this.bankCardNo = bankCardNo;
    this.bankCardOwnerName = bankCardOwnerName;
    this.bankCardOwnerIdCard = bankCardOwnerIdCard;
    this.bankCardOwnerMobile = bankCardOwnerMobile;
    this.channelCode = channelCode;
    this.channelName = channelName;
    this.channelTransType = channelTransType;
    this.feeType = feeType;
    this.bankCardOwnerType = bankCardOwnerType;
    this.createTime = createTime;
    this.transferBatchAmount = transferBatchAmount;
    this.feeAmount = feeAmount;
    this.reqIp = reqIp;
    this.notifyUrl = notifyUrl;
    this.returnUrl = returnUrl;
    this.associateLineNumber = associateLineNumber;
    this.userType = userType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransOrderRiskModel(TransOrderRiskModel other) {
    if (other.isSetMerchantOrderNo()) {
      this.merchantOrderNo = other.merchantOrderNo;
    }
    if (other.isSetTransNo()) {
      this.TransNo = other.TransNo;
    }
    if (other.isSetProductType()) {
      this.productType = other.productType;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetMerchantCompany()) {
      this.merchantCompany = other.merchantCompany;
    }
    if (other.isSetTransType()) {
      this.transType = other.transType;
    }
    if (other.isSetTransAmount()) {
      this.transAmount = other.transAmount;
    }
    if (other.isSetBankCardType()) {
      this.bankCardType = other.bankCardType;
    }
    if (other.isSetBankCardNo()) {
      this.bankCardNo = other.bankCardNo;
    }
    if (other.isSetBankCardOwnerName()) {
      this.bankCardOwnerName = other.bankCardOwnerName;
    }
    if (other.isSetBankCardOwnerIdCard()) {
      this.bankCardOwnerIdCard = other.bankCardOwnerIdCard;
    }
    if (other.isSetBankCardOwnerMobile()) {
      this.bankCardOwnerMobile = other.bankCardOwnerMobile;
    }
    if (other.isSetChannelCode()) {
      this.channelCode = other.channelCode;
    }
    if (other.isSetChannelName()) {
      this.channelName = other.channelName;
    }
    if (other.isSetChannelTransType()) {
      this.channelTransType = other.channelTransType;
    }
    if (other.isSetFeeType()) {
      this.feeType = other.feeType;
    }
    if (other.isSetBankCardOwnerType()) {
      this.bankCardOwnerType = other.bankCardOwnerType;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetTransferBatchAmount()) {
      this.transferBatchAmount = other.transferBatchAmount;
    }
    if (other.isSetFeeAmount()) {
      this.feeAmount = other.feeAmount;
    }
    if (other.isSetReqIp()) {
      this.reqIp = other.reqIp;
    }
    if (other.isSetNotifyUrl()) {
      this.notifyUrl = other.notifyUrl;
    }
    if (other.isSetReturnUrl()) {
      this.returnUrl = other.returnUrl;
    }
    if (other.isSetAssociateLineNumber()) {
      this.associateLineNumber = other.associateLineNumber;
    }
    if (other.isSetUserType()) {
      this.userType = other.userType;
    }
  }

  public TransOrderRiskModel deepCopy() {
    return new TransOrderRiskModel(this);
  }

  @Override
  public void clear() {
    this.merchantOrderNo = null;
    this.TransNo = null;
    this.productType = null;
    this.productName = null;
    this.merchantId = null;
    this.merchantCompany = null;
    this.transType = null;
    this.transAmount = null;
    this.bankCardType = null;
    this.bankCardNo = null;
    this.bankCardOwnerName = null;
    this.bankCardOwnerIdCard = null;
    this.bankCardOwnerMobile = null;
    this.channelCode = null;
    this.channelName = null;
    this.channelTransType = null;
    this.feeType = null;
    this.bankCardOwnerType = null;
    this.createTime = null;
    this.transferBatchAmount = null;
    this.feeAmount = null;
    this.reqIp = null;
    this.notifyUrl = null;
    this.returnUrl = null;
    this.associateLineNumber = null;
    this.userType = null;
  }

  public String getMerchantOrderNo() {
    return this.merchantOrderNo;
  }

  public TransOrderRiskModel setMerchantOrderNo(String merchantOrderNo) {
    this.merchantOrderNo = merchantOrderNo;
    return this;
  }

  public void unsetMerchantOrderNo() {
    this.merchantOrderNo = null;
  }

  /** Returns true if field merchantOrderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantOrderNo() {
    return this.merchantOrderNo != null;
  }

  public void setMerchantOrderNoIsSet(boolean value) {
    if (!value) {
      this.merchantOrderNo = null;
    }
  }

  public String getTransNo() {
    return this.TransNo;
  }

  public TransOrderRiskModel setTransNo(String TransNo) {
    this.TransNo = TransNo;
    return this;
  }

  public void unsetTransNo() {
    this.TransNo = null;
  }

  /** Returns true if field TransNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTransNo() {
    return this.TransNo != null;
  }

  public void setTransNoIsSet(boolean value) {
    if (!value) {
      this.TransNo = null;
    }
  }

  public String getProductType() {
    return this.productType;
  }

  public TransOrderRiskModel setProductType(String productType) {
    this.productType = productType;
    return this;
  }

  public void unsetProductType() {
    this.productType = null;
  }

  /** Returns true if field productType is set (has been assigned a value) and false otherwise */
  public boolean isSetProductType() {
    return this.productType != null;
  }

  public void setProductTypeIsSet(boolean value) {
    if (!value) {
      this.productType = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public TransOrderRiskModel setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getMerchantId() {
    return this.merchantId;
  }

  public TransOrderRiskModel setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  public String getMerchantCompany() {
    return this.merchantCompany;
  }

  public TransOrderRiskModel setMerchantCompany(String merchantCompany) {
    this.merchantCompany = merchantCompany;
    return this;
  }

  public void unsetMerchantCompany() {
    this.merchantCompany = null;
  }

  /** Returns true if field merchantCompany is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantCompany() {
    return this.merchantCompany != null;
  }

  public void setMerchantCompanyIsSet(boolean value) {
    if (!value) {
      this.merchantCompany = null;
    }
  }

  public String getTransType() {
    return this.transType;
  }

  public TransOrderRiskModel setTransType(String transType) {
    this.transType = transType;
    return this;
  }

  public void unsetTransType() {
    this.transType = null;
  }

  /** Returns true if field transType is set (has been assigned a value) and false otherwise */
  public boolean isSetTransType() {
    return this.transType != null;
  }

  public void setTransTypeIsSet(boolean value) {
    if (!value) {
      this.transType = null;
    }
  }

  public String getTransAmount() {
    return this.transAmount;
  }

  public TransOrderRiskModel setTransAmount(String transAmount) {
    this.transAmount = transAmount;
    return this;
  }

  public void unsetTransAmount() {
    this.transAmount = null;
  }

  /** Returns true if field transAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTransAmount() {
    return this.transAmount != null;
  }

  public void setTransAmountIsSet(boolean value) {
    if (!value) {
      this.transAmount = null;
    }
  }

  public String getBankCardType() {
    return this.bankCardType;
  }

  public TransOrderRiskModel setBankCardType(String bankCardType) {
    this.bankCardType = bankCardType;
    return this;
  }

  public void unsetBankCardType() {
    this.bankCardType = null;
  }

  /** Returns true if field bankCardType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardType() {
    return this.bankCardType != null;
  }

  public void setBankCardTypeIsSet(boolean value) {
    if (!value) {
      this.bankCardType = null;
    }
  }

  public String getBankCardNo() {
    return this.bankCardNo;
  }

  public TransOrderRiskModel setBankCardNo(String bankCardNo) {
    this.bankCardNo = bankCardNo;
    return this;
  }

  public void unsetBankCardNo() {
    this.bankCardNo = null;
  }

  /** Returns true if field bankCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardNo() {
    return this.bankCardNo != null;
  }

  public void setBankCardNoIsSet(boolean value) {
    if (!value) {
      this.bankCardNo = null;
    }
  }

  public String getBankCardOwnerName() {
    return this.bankCardOwnerName;
  }

  public TransOrderRiskModel setBankCardOwnerName(String bankCardOwnerName) {
    this.bankCardOwnerName = bankCardOwnerName;
    return this;
  }

  public void unsetBankCardOwnerName() {
    this.bankCardOwnerName = null;
  }

  /** Returns true if field bankCardOwnerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardOwnerName() {
    return this.bankCardOwnerName != null;
  }

  public void setBankCardOwnerNameIsSet(boolean value) {
    if (!value) {
      this.bankCardOwnerName = null;
    }
  }

  public String getBankCardOwnerIdCard() {
    return this.bankCardOwnerIdCard;
  }

  public TransOrderRiskModel setBankCardOwnerIdCard(String bankCardOwnerIdCard) {
    this.bankCardOwnerIdCard = bankCardOwnerIdCard;
    return this;
  }

  public void unsetBankCardOwnerIdCard() {
    this.bankCardOwnerIdCard = null;
  }

  /** Returns true if field bankCardOwnerIdCard is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardOwnerIdCard() {
    return this.bankCardOwnerIdCard != null;
  }

  public void setBankCardOwnerIdCardIsSet(boolean value) {
    if (!value) {
      this.bankCardOwnerIdCard = null;
    }
  }

  public String getBankCardOwnerMobile() {
    return this.bankCardOwnerMobile;
  }

  public TransOrderRiskModel setBankCardOwnerMobile(String bankCardOwnerMobile) {
    this.bankCardOwnerMobile = bankCardOwnerMobile;
    return this;
  }

  public void unsetBankCardOwnerMobile() {
    this.bankCardOwnerMobile = null;
  }

  /** Returns true if field bankCardOwnerMobile is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardOwnerMobile() {
    return this.bankCardOwnerMobile != null;
  }

  public void setBankCardOwnerMobileIsSet(boolean value) {
    if (!value) {
      this.bankCardOwnerMobile = null;
    }
  }

  public String getChannelCode() {
    return this.channelCode;
  }

  public TransOrderRiskModel setChannelCode(String channelCode) {
    this.channelCode = channelCode;
    return this;
  }

  public void unsetChannelCode() {
    this.channelCode = null;
  }

  /** Returns true if field channelCode is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelCode() {
    return this.channelCode != null;
  }

  public void setChannelCodeIsSet(boolean value) {
    if (!value) {
      this.channelCode = null;
    }
  }

  public String getChannelName() {
    return this.channelName;
  }

  public TransOrderRiskModel setChannelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  public void unsetChannelName() {
    this.channelName = null;
  }

  /** Returns true if field channelName is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelName() {
    return this.channelName != null;
  }

  public void setChannelNameIsSet(boolean value) {
    if (!value) {
      this.channelName = null;
    }
  }

  public String getChannelTransType() {
    return this.channelTransType;
  }

  public TransOrderRiskModel setChannelTransType(String channelTransType) {
    this.channelTransType = channelTransType;
    return this;
  }

  public void unsetChannelTransType() {
    this.channelTransType = null;
  }

  /** Returns true if field channelTransType is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelTransType() {
    return this.channelTransType != null;
  }

  public void setChannelTransTypeIsSet(boolean value) {
    if (!value) {
      this.channelTransType = null;
    }
  }

  public String getFeeType() {
    return this.feeType;
  }

  public TransOrderRiskModel setFeeType(String feeType) {
    this.feeType = feeType;
    return this;
  }

  public void unsetFeeType() {
    this.feeType = null;
  }

  /** Returns true if field feeType is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeType() {
    return this.feeType != null;
  }

  public void setFeeTypeIsSet(boolean value) {
    if (!value) {
      this.feeType = null;
    }
  }

  public String getBankCardOwnerType() {
    return this.bankCardOwnerType;
  }

  public TransOrderRiskModel setBankCardOwnerType(String bankCardOwnerType) {
    this.bankCardOwnerType = bankCardOwnerType;
    return this;
  }

  public void unsetBankCardOwnerType() {
    this.bankCardOwnerType = null;
  }

  /** Returns true if field bankCardOwnerType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardOwnerType() {
    return this.bankCardOwnerType != null;
  }

  public void setBankCardOwnerTypeIsSet(boolean value) {
    if (!value) {
      this.bankCardOwnerType = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public TransOrderRiskModel setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getTransferBatchAmount() {
    return this.transferBatchAmount;
  }

  public TransOrderRiskModel setTransferBatchAmount(String transferBatchAmount) {
    this.transferBatchAmount = transferBatchAmount;
    return this;
  }

  public void unsetTransferBatchAmount() {
    this.transferBatchAmount = null;
  }

  /** Returns true if field transferBatchAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferBatchAmount() {
    return this.transferBatchAmount != null;
  }

  public void setTransferBatchAmountIsSet(boolean value) {
    if (!value) {
      this.transferBatchAmount = null;
    }
  }

  public String getFeeAmount() {
    return this.feeAmount;
  }

  public TransOrderRiskModel setFeeAmount(String feeAmount) {
    this.feeAmount = feeAmount;
    return this;
  }

  public void unsetFeeAmount() {
    this.feeAmount = null;
  }

  /** Returns true if field feeAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeAmount() {
    return this.feeAmount != null;
  }

  public void setFeeAmountIsSet(boolean value) {
    if (!value) {
      this.feeAmount = null;
    }
  }

  public String getReqIp() {
    return this.reqIp;
  }

  public TransOrderRiskModel setReqIp(String reqIp) {
    this.reqIp = reqIp;
    return this;
  }

  public void unsetReqIp() {
    this.reqIp = null;
  }

  /** Returns true if field reqIp is set (has been assigned a value) and false otherwise */
  public boolean isSetReqIp() {
    return this.reqIp != null;
  }

  public void setReqIpIsSet(boolean value) {
    if (!value) {
      this.reqIp = null;
    }
  }

  public String getNotifyUrl() {
    return this.notifyUrl;
  }

  public TransOrderRiskModel setNotifyUrl(String notifyUrl) {
    this.notifyUrl = notifyUrl;
    return this;
  }

  public void unsetNotifyUrl() {
    this.notifyUrl = null;
  }

  /** Returns true if field notifyUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyUrl() {
    return this.notifyUrl != null;
  }

  public void setNotifyUrlIsSet(boolean value) {
    if (!value) {
      this.notifyUrl = null;
    }
  }

  public String getReturnUrl() {
    return this.returnUrl;
  }

  public TransOrderRiskModel setReturnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
    return this;
  }

  public void unsetReturnUrl() {
    this.returnUrl = null;
  }

  /** Returns true if field returnUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnUrl() {
    return this.returnUrl != null;
  }

  public void setReturnUrlIsSet(boolean value) {
    if (!value) {
      this.returnUrl = null;
    }
  }

  public String getAssociateLineNumber() {
    return this.associateLineNumber;
  }

  public TransOrderRiskModel setAssociateLineNumber(String associateLineNumber) {
    this.associateLineNumber = associateLineNumber;
    return this;
  }

  public void unsetAssociateLineNumber() {
    this.associateLineNumber = null;
  }

  /** Returns true if field associateLineNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetAssociateLineNumber() {
    return this.associateLineNumber != null;
  }

  public void setAssociateLineNumberIsSet(boolean value) {
    if (!value) {
      this.associateLineNumber = null;
    }
  }

  public String getUserType() {
    return this.userType;
  }

  public TransOrderRiskModel setUserType(String userType) {
    this.userType = userType;
    return this;
  }

  public void unsetUserType() {
    this.userType = null;
  }

  /** Returns true if field userType is set (has been assigned a value) and false otherwise */
  public boolean isSetUserType() {
    return this.userType != null;
  }

  public void setUserTypeIsSet(boolean value) {
    if (!value) {
      this.userType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case MERCHANT_ORDER_NO:
        if (value == null) {
          unsetMerchantOrderNo();
        } else {
          setMerchantOrderNo((String)value);
        }
        break;

      case TRANS_NO:
        if (value == null) {
          unsetTransNo();
        } else {
          setTransNo((String)value);
        }
        break;

      case PRODUCT_TYPE:
        if (value == null) {
          unsetProductType();
        } else {
          setProductType((String)value);
        }
        break;

      case PRODUCT_NAME:
        if (value == null) {
          unsetProductName();
        } else {
          setProductName((String)value);
        }
        break;

      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case MERCHANT_COMPANY:
        if (value == null) {
          unsetMerchantCompany();
        } else {
          setMerchantCompany((String)value);
        }
        break;

      case TRANS_TYPE:
        if (value == null) {
          unsetTransType();
        } else {
          setTransType((String)value);
        }
        break;

      case TRANS_AMOUNT:
        if (value == null) {
          unsetTransAmount();
        } else {
          setTransAmount((String)value);
        }
        break;

      case BANK_CARD_TYPE:
        if (value == null) {
          unsetBankCardType();
        } else {
          setBankCardType((String)value);
        }
        break;

      case BANK_CARD_NO:
        if (value == null) {
          unsetBankCardNo();
        } else {
          setBankCardNo((String)value);
        }
        break;

      case BANK_CARD_OWNER_NAME:
        if (value == null) {
          unsetBankCardOwnerName();
        } else {
          setBankCardOwnerName((String)value);
        }
        break;

      case BANK_CARD_OWNER_ID_CARD:
        if (value == null) {
          unsetBankCardOwnerIdCard();
        } else {
          setBankCardOwnerIdCard((String)value);
        }
        break;

      case BANK_CARD_OWNER_MOBILE:
        if (value == null) {
          unsetBankCardOwnerMobile();
        } else {
          setBankCardOwnerMobile((String)value);
        }
        break;

      case CHANNEL_CODE:
        if (value == null) {
          unsetChannelCode();
        } else {
          setChannelCode((String)value);
        }
        break;

      case CHANNEL_NAME:
        if (value == null) {
          unsetChannelName();
        } else {
          setChannelName((String)value);
        }
        break;

      case CHANNEL_TRANS_TYPE:
        if (value == null) {
          unsetChannelTransType();
        } else {
          setChannelTransType((String)value);
        }
        break;

      case FEE_TYPE:
        if (value == null) {
          unsetFeeType();
        } else {
          setFeeType((String)value);
        }
        break;

      case BANK_CARD_OWNER_TYPE:
        if (value == null) {
          unsetBankCardOwnerType();
        } else {
          setBankCardOwnerType((String)value);
        }
        break;

      case CREATE_TIME:
        if (value == null) {
          unsetCreateTime();
        } else {
          setCreateTime((String)value);
        }
        break;

      case TRANSFER_BATCH_AMOUNT:
        if (value == null) {
          unsetTransferBatchAmount();
        } else {
          setTransferBatchAmount((String)value);
        }
        break;

      case FEE_AMOUNT:
        if (value == null) {
          unsetFeeAmount();
        } else {
          setFeeAmount((String)value);
        }
        break;

      case REQ_IP:
        if (value == null) {
          unsetReqIp();
        } else {
          setReqIp((String)value);
        }
        break;

      case NOTIFY_URL:
        if (value == null) {
          unsetNotifyUrl();
        } else {
          setNotifyUrl((String)value);
        }
        break;

      case RETURN_URL:
        if (value == null) {
          unsetReturnUrl();
        } else {
          setReturnUrl((String)value);
        }
        break;

      case ASSOCIATE_LINE_NUMBER:
        if (value == null) {
          unsetAssociateLineNumber();
        } else {
          setAssociateLineNumber((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((String)value);
        }
        break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
      case MERCHANT_ORDER_NO:
        return getMerchantOrderNo();

      case TRANS_NO:
        return getTransNo();

      case PRODUCT_TYPE:
        return getProductType();

      case PRODUCT_NAME:
        return getProductName();

      case MERCHANT_ID:
        return getMerchantId();

      case MERCHANT_COMPANY:
        return getMerchantCompany();

      case TRANS_TYPE:
        return getTransType();

      case TRANS_AMOUNT:
        return getTransAmount();

      case BANK_CARD_TYPE:
        return getBankCardType();

      case BANK_CARD_NO:
        return getBankCardNo();

      case BANK_CARD_OWNER_NAME:
        return getBankCardOwnerName();

      case BANK_CARD_OWNER_ID_CARD:
        return getBankCardOwnerIdCard();

      case BANK_CARD_OWNER_MOBILE:
        return getBankCardOwnerMobile();

      case CHANNEL_CODE:
        return getChannelCode();

      case CHANNEL_NAME:
        return getChannelName();

      case CHANNEL_TRANS_TYPE:
        return getChannelTransType();

      case FEE_TYPE:
        return getFeeType();

      case BANK_CARD_OWNER_TYPE:
        return getBankCardOwnerType();

      case CREATE_TIME:
        return getCreateTime();

      case TRANSFER_BATCH_AMOUNT:
        return getTransferBatchAmount();

      case FEE_AMOUNT:
        return getFeeAmount();

      case REQ_IP:
        return getReqIp();

      case NOTIFY_URL:
        return getNotifyUrl();

      case RETURN_URL:
        return getReturnUrl();

      case ASSOCIATE_LINE_NUMBER:
        return getAssociateLineNumber();

      case USER_TYPE:
        return getUserType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
      case MERCHANT_ORDER_NO:
        return isSetMerchantOrderNo();
      case TRANS_NO:
        return isSetTransNo();
      case PRODUCT_TYPE:
        return isSetProductType();
      case PRODUCT_NAME:
        return isSetProductName();
      case MERCHANT_ID:
        return isSetMerchantId();
      case MERCHANT_COMPANY:
        return isSetMerchantCompany();
      case TRANS_TYPE:
        return isSetTransType();
      case TRANS_AMOUNT:
        return isSetTransAmount();
      case BANK_CARD_TYPE:
        return isSetBankCardType();
      case BANK_CARD_NO:
        return isSetBankCardNo();
      case BANK_CARD_OWNER_NAME:
        return isSetBankCardOwnerName();
      case BANK_CARD_OWNER_ID_CARD:
        return isSetBankCardOwnerIdCard();
      case BANK_CARD_OWNER_MOBILE:
        return isSetBankCardOwnerMobile();
      case CHANNEL_CODE:
        return isSetChannelCode();
      case CHANNEL_NAME:
        return isSetChannelName();
      case CHANNEL_TRANS_TYPE:
        return isSetChannelTransType();
      case FEE_TYPE:
        return isSetFeeType();
      case BANK_CARD_OWNER_TYPE:
        return isSetBankCardOwnerType();
      case CREATE_TIME:
        return isSetCreateTime();
      case TRANSFER_BATCH_AMOUNT:
        return isSetTransferBatchAmount();
      case FEE_AMOUNT:
        return isSetFeeAmount();
      case REQ_IP:
        return isSetReqIp();
      case NOTIFY_URL:
        return isSetNotifyUrl();
      case RETURN_URL:
        return isSetReturnUrl();
      case ASSOCIATE_LINE_NUMBER:
        return isSetAssociateLineNumber();
      case USER_TYPE:
        return isSetUserType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransOrderRiskModel)
      return this.equals((TransOrderRiskModel)that);
    return false;
  }

  public boolean equals(TransOrderRiskModel that) {
    if (that == null)
      return false;

    boolean this_present_merchantOrderNo = true && this.isSetMerchantOrderNo();
    boolean that_present_merchantOrderNo = true && that.isSetMerchantOrderNo();
    if (this_present_merchantOrderNo || that_present_merchantOrderNo) {
      if (!(this_present_merchantOrderNo && that_present_merchantOrderNo))
        return false;
      if (!this.merchantOrderNo.equals(that.merchantOrderNo))
        return false;
    }

    boolean this_present_TransNo = true && this.isSetTransNo();
    boolean that_present_TransNo = true && that.isSetTransNo();
    if (this_present_TransNo || that_present_TransNo) {
      if (!(this_present_TransNo && that_present_TransNo))
        return false;
      if (!this.TransNo.equals(that.TransNo))
        return false;
    }

    boolean this_present_productType = true && this.isSetProductType();
    boolean that_present_productType = true && that.isSetProductType();
    if (this_present_productType || that_present_productType) {
      if (!(this_present_productType && that_present_productType))
        return false;
      if (!this.productType.equals(that.productType))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_merchantCompany = true && this.isSetMerchantCompany();
    boolean that_present_merchantCompany = true && that.isSetMerchantCompany();
    if (this_present_merchantCompany || that_present_merchantCompany) {
      if (!(this_present_merchantCompany && that_present_merchantCompany))
        return false;
      if (!this.merchantCompany.equals(that.merchantCompany))
        return false;
    }

    boolean this_present_transType = true && this.isSetTransType();
    boolean that_present_transType = true && that.isSetTransType();
    if (this_present_transType || that_present_transType) {
      if (!(this_present_transType && that_present_transType))
        return false;
      if (!this.transType.equals(that.transType))
        return false;
    }

    boolean this_present_transAmount = true && this.isSetTransAmount();
    boolean that_present_transAmount = true && that.isSetTransAmount();
    if (this_present_transAmount || that_present_transAmount) {
      if (!(this_present_transAmount && that_present_transAmount))
        return false;
      if (!this.transAmount.equals(that.transAmount))
        return false;
    }

    boolean this_present_bankCardType = true && this.isSetBankCardType();
    boolean that_present_bankCardType = true && that.isSetBankCardType();
    if (this_present_bankCardType || that_present_bankCardType) {
      if (!(this_present_bankCardType && that_present_bankCardType))
        return false;
      if (!this.bankCardType.equals(that.bankCardType))
        return false;
    }

    boolean this_present_bankCardNo = true && this.isSetBankCardNo();
    boolean that_present_bankCardNo = true && that.isSetBankCardNo();
    if (this_present_bankCardNo || that_present_bankCardNo) {
      if (!(this_present_bankCardNo && that_present_bankCardNo))
        return false;
      if (!this.bankCardNo.equals(that.bankCardNo))
        return false;
    }

    boolean this_present_bankCardOwnerName = true && this.isSetBankCardOwnerName();
    boolean that_present_bankCardOwnerName = true && that.isSetBankCardOwnerName();
    if (this_present_bankCardOwnerName || that_present_bankCardOwnerName) {
      if (!(this_present_bankCardOwnerName && that_present_bankCardOwnerName))
        return false;
      if (!this.bankCardOwnerName.equals(that.bankCardOwnerName))
        return false;
    }

    boolean this_present_bankCardOwnerIdCard = true && this.isSetBankCardOwnerIdCard();
    boolean that_present_bankCardOwnerIdCard = true && that.isSetBankCardOwnerIdCard();
    if (this_present_bankCardOwnerIdCard || that_present_bankCardOwnerIdCard) {
      if (!(this_present_bankCardOwnerIdCard && that_present_bankCardOwnerIdCard))
        return false;
      if (!this.bankCardOwnerIdCard.equals(that.bankCardOwnerIdCard))
        return false;
    }

    boolean this_present_bankCardOwnerMobile = true && this.isSetBankCardOwnerMobile();
    boolean that_present_bankCardOwnerMobile = true && that.isSetBankCardOwnerMobile();
    if (this_present_bankCardOwnerMobile || that_present_bankCardOwnerMobile) {
      if (!(this_present_bankCardOwnerMobile && that_present_bankCardOwnerMobile))
        return false;
      if (!this.bankCardOwnerMobile.equals(that.bankCardOwnerMobile))
        return false;
    }

    boolean this_present_channelCode = true && this.isSetChannelCode();
    boolean that_present_channelCode = true && that.isSetChannelCode();
    if (this_present_channelCode || that_present_channelCode) {
      if (!(this_present_channelCode && that_present_channelCode))
        return false;
      if (!this.channelCode.equals(that.channelCode))
        return false;
    }

    boolean this_present_channelName = true && this.isSetChannelName();
    boolean that_present_channelName = true && that.isSetChannelName();
    if (this_present_channelName || that_present_channelName) {
      if (!(this_present_channelName && that_present_channelName))
        return false;
      if (!this.channelName.equals(that.channelName))
        return false;
    }

    boolean this_present_channelTransType = true && this.isSetChannelTransType();
    boolean that_present_channelTransType = true && that.isSetChannelTransType();
    if (this_present_channelTransType || that_present_channelTransType) {
      if (!(this_present_channelTransType && that_present_channelTransType))
        return false;
      if (!this.channelTransType.equals(that.channelTransType))
        return false;
    }

    boolean this_present_feeType = true && this.isSetFeeType();
    boolean that_present_feeType = true && that.isSetFeeType();
    if (this_present_feeType || that_present_feeType) {
      if (!(this_present_feeType && that_present_feeType))
        return false;
      if (!this.feeType.equals(that.feeType))
        return false;
    }

    boolean this_present_bankCardOwnerType = true && this.isSetBankCardOwnerType();
    boolean that_present_bankCardOwnerType = true && that.isSetBankCardOwnerType();
    if (this_present_bankCardOwnerType || that_present_bankCardOwnerType) {
      if (!(this_present_bankCardOwnerType && that_present_bankCardOwnerType))
        return false;
      if (!this.bankCardOwnerType.equals(that.bankCardOwnerType))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_transferBatchAmount = true && this.isSetTransferBatchAmount();
    boolean that_present_transferBatchAmount = true && that.isSetTransferBatchAmount();
    if (this_present_transferBatchAmount || that_present_transferBatchAmount) {
      if (!(this_present_transferBatchAmount && that_present_transferBatchAmount))
        return false;
      if (!this.transferBatchAmount.equals(that.transferBatchAmount))
        return false;
    }

    boolean this_present_feeAmount = true && this.isSetFeeAmount();
    boolean that_present_feeAmount = true && that.isSetFeeAmount();
    if (this_present_feeAmount || that_present_feeAmount) {
      if (!(this_present_feeAmount && that_present_feeAmount))
        return false;
      if (!this.feeAmount.equals(that.feeAmount))
        return false;
    }

    boolean this_present_reqIp = true && this.isSetReqIp();
    boolean that_present_reqIp = true && that.isSetReqIp();
    if (this_present_reqIp || that_present_reqIp) {
      if (!(this_present_reqIp && that_present_reqIp))
        return false;
      if (!this.reqIp.equals(that.reqIp))
        return false;
    }

    boolean this_present_notifyUrl = true && this.isSetNotifyUrl();
    boolean that_present_notifyUrl = true && that.isSetNotifyUrl();
    if (this_present_notifyUrl || that_present_notifyUrl) {
      if (!(this_present_notifyUrl && that_present_notifyUrl))
        return false;
      if (!this.notifyUrl.equals(that.notifyUrl))
        return false;
    }

    boolean this_present_returnUrl = true && this.isSetReturnUrl();
    boolean that_present_returnUrl = true && that.isSetReturnUrl();
    if (this_present_returnUrl || that_present_returnUrl) {
      if (!(this_present_returnUrl && that_present_returnUrl))
        return false;
      if (!this.returnUrl.equals(that.returnUrl))
        return false;
    }

    boolean this_present_associateLineNumber = true && this.isSetAssociateLineNumber();
    boolean that_present_associateLineNumber = true && that.isSetAssociateLineNumber();
    if (this_present_associateLineNumber || that_present_associateLineNumber) {
      if (!(this_present_associateLineNumber && that_present_associateLineNumber))
        return false;
      if (!this.associateLineNumber.equals(that.associateLineNumber))
        return false;
    }

    boolean this_present_userType = true && this.isSetUserType();
    boolean that_present_userType = true && that.isSetUserType();
    if (this_present_userType || that_present_userType) {
      if (!(this_present_userType && that_present_userType))
        return false;
      if (!this.userType.equals(that.userType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_merchantOrderNo = true && (isSetMerchantOrderNo());
    list.add(present_merchantOrderNo);
    if (present_merchantOrderNo)
      list.add(merchantOrderNo);

    boolean present_TransNo = true && (isSetTransNo());
    list.add(present_TransNo);
    if (present_TransNo)
      list.add(TransNo);

    boolean present_productType = true && (isSetProductType());
    list.add(present_productType);
    if (present_productType)
      list.add(productType);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_merchantCompany = true && (isSetMerchantCompany());
    list.add(present_merchantCompany);
    if (present_merchantCompany)
      list.add(merchantCompany);

    boolean present_transType = true && (isSetTransType());
    list.add(present_transType);
    if (present_transType)
      list.add(transType);

    boolean present_transAmount = true && (isSetTransAmount());
    list.add(present_transAmount);
    if (present_transAmount)
      list.add(transAmount);

    boolean present_bankCardType = true && (isSetBankCardType());
    list.add(present_bankCardType);
    if (present_bankCardType)
      list.add(bankCardType);

    boolean present_bankCardNo = true && (isSetBankCardNo());
    list.add(present_bankCardNo);
    if (present_bankCardNo)
      list.add(bankCardNo);

    boolean present_bankCardOwnerName = true && (isSetBankCardOwnerName());
    list.add(present_bankCardOwnerName);
    if (present_bankCardOwnerName)
      list.add(bankCardOwnerName);

    boolean present_bankCardOwnerIdCard = true && (isSetBankCardOwnerIdCard());
    list.add(present_bankCardOwnerIdCard);
    if (present_bankCardOwnerIdCard)
      list.add(bankCardOwnerIdCard);

    boolean present_bankCardOwnerMobile = true && (isSetBankCardOwnerMobile());
    list.add(present_bankCardOwnerMobile);
    if (present_bankCardOwnerMobile)
      list.add(bankCardOwnerMobile);

    boolean present_channelCode = true && (isSetChannelCode());
    list.add(present_channelCode);
    if (present_channelCode)
      list.add(channelCode);

    boolean present_channelName = true && (isSetChannelName());
    list.add(present_channelName);
    if (present_channelName)
      list.add(channelName);

    boolean present_channelTransType = true && (isSetChannelTransType());
    list.add(present_channelTransType);
    if (present_channelTransType)
      list.add(channelTransType);

    boolean present_feeType = true && (isSetFeeType());
    list.add(present_feeType);
    if (present_feeType)
      list.add(feeType);

    boolean present_bankCardOwnerType = true && (isSetBankCardOwnerType());
    list.add(present_bankCardOwnerType);
    if (present_bankCardOwnerType)
      list.add(bankCardOwnerType);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_transferBatchAmount = true && (isSetTransferBatchAmount());
    list.add(present_transferBatchAmount);
    if (present_transferBatchAmount)
      list.add(transferBatchAmount);

    boolean present_feeAmount = true && (isSetFeeAmount());
    list.add(present_feeAmount);
    if (present_feeAmount)
      list.add(feeAmount);

    boolean present_reqIp = true && (isSetReqIp());
    list.add(present_reqIp);
    if (present_reqIp)
      list.add(reqIp);

    boolean present_notifyUrl = true && (isSetNotifyUrl());
    list.add(present_notifyUrl);
    if (present_notifyUrl)
      list.add(notifyUrl);

    boolean present_returnUrl = true && (isSetReturnUrl());
    list.add(present_returnUrl);
    if (present_returnUrl)
      list.add(returnUrl);

    boolean present_associateLineNumber = true && (isSetAssociateLineNumber());
    list.add(present_associateLineNumber);
    if (present_associateLineNumber)
      list.add(associateLineNumber);

    boolean present_userType = true && (isSetUserType());
    list.add(present_userType);
    if (present_userType)
      list.add(userType);

    return list.hashCode();
  }

  @Override
  public int compareTo(TransOrderRiskModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMerchantOrderNo()).compareTo(other.isSetMerchantOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantOrderNo, other.merchantOrderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TransNo, other.TransNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductType()).compareTo(other.isSetProductType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productType, other.productType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantCompany()).compareTo(other.isSetMerchantCompany());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantCompany()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantCompany, other.merchantCompany);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransType()).compareTo(other.isSetTransType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transType, other.transType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransAmount()).compareTo(other.isSetTransAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transAmount, other.transAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardType()).compareTo(other.isSetBankCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardType, other.bankCardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardNo()).compareTo(other.isSetBankCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardNo, other.bankCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardOwnerName()).compareTo(other.isSetBankCardOwnerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardOwnerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardOwnerName, other.bankCardOwnerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardOwnerIdCard()).compareTo(other.isSetBankCardOwnerIdCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardOwnerIdCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardOwnerIdCard, other.bankCardOwnerIdCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardOwnerMobile()).compareTo(other.isSetBankCardOwnerMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardOwnerMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardOwnerMobile, other.bankCardOwnerMobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelCode()).compareTo(other.isSetChannelCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCode, other.channelCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelName()).compareTo(other.isSetChannelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelName, other.channelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelTransType()).compareTo(other.isSetChannelTransType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelTransType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelTransType, other.channelTransType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeType()).compareTo(other.isSetFeeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeType, other.feeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardOwnerType()).compareTo(other.isSetBankCardOwnerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardOwnerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardOwnerType, other.bankCardOwnerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferBatchAmount()).compareTo(other.isSetTransferBatchAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferBatchAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferBatchAmount, other.transferBatchAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeAmount()).compareTo(other.isSetFeeAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeAmount, other.feeAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReqIp()).compareTo(other.isSetReqIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqIp, other.reqIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyUrl()).compareTo(other.isSetNotifyUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyUrl, other.notifyUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnUrl()).compareTo(other.isSetReturnUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnUrl, other.returnUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssociateLineNumber()).compareTo(other.isSetAssociateLineNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssociateLineNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.associateLineNumber, other.associateLineNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransOrderRiskModel(");
    boolean first = true;

    sb.append("merchantOrderNo:");
    if (this.merchantOrderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantOrderNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TransNo:");
    if (this.TransNo == null) {
      sb.append("null");
    } else {
      sb.append(this.TransNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productType:");
    if (this.productType == null) {
      sb.append("null");
    } else {
      sb.append(this.productType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantCompany:");
    if (this.merchantCompany == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantCompany);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transType:");
    if (this.transType == null) {
      sb.append("null");
    } else {
      sb.append(this.transType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transAmount:");
    if (this.transAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.transAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardType:");
    if (this.bankCardType == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCardType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardNo:");
    if (this.bankCardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardOwnerName:");
    if (this.bankCardOwnerName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCardOwnerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardOwnerIdCard:");
    if (this.bankCardOwnerIdCard == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCardOwnerIdCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardOwnerMobile:");
    if (this.bankCardOwnerMobile == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCardOwnerMobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelCode:");
    if (this.channelCode == null) {
      sb.append("null");
    } else {
      sb.append(this.channelCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelName:");
    if (this.channelName == null) {
      sb.append("null");
    } else {
      sb.append(this.channelName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelTransType:");
    if (this.channelTransType == null) {
      sb.append("null");
    } else {
      sb.append(this.channelTransType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeType:");
    if (this.feeType == null) {
      sb.append("null");
    } else {
      sb.append(this.feeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardOwnerType:");
    if (this.bankCardOwnerType == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCardOwnerType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferBatchAmount:");
    if (this.transferBatchAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.transferBatchAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeAmount:");
    if (this.feeAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.feeAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reqIp:");
    if (this.reqIp == null) {
      sb.append("null");
    } else {
      sb.append(this.reqIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifyUrl:");
    if (this.notifyUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.notifyUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnUrl:");
    if (this.returnUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.returnUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("associateLineNumber:");
    if (this.associateLineNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.associateLineNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userType:");
    if (this.userType == null) {
      sb.append("null");
    } else {
      sb.append(this.userType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransOrderRiskModelStandardSchemeFactory implements SchemeFactory {
    public TransOrderRiskModelStandardScheme getScheme() {
      return new TransOrderRiskModelStandardScheme();
    }
  }

  private static class TransOrderRiskModelStandardScheme extends StandardScheme<TransOrderRiskModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransOrderRiskModel struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // MERCHANT_ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantOrderNo = iprot.readString();
              struct.setMerchantOrderNoIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRANS_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.TransNo = iprot.readString();
              struct.setTransNoIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productType = iprot.readString();
              struct.setProductTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MERCHANT_COMPANY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantCompany = iprot.readString();
              struct.setMerchantCompanyIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRANS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transType = iprot.readString();
              struct.setTransTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TRANS_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transAmount = iprot.readString();
              struct.setTransAmountIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BANK_CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCardType = iprot.readString();
              struct.setBankCardTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BANK_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCardNo = iprot.readString();
              struct.setBankCardNoIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BANK_CARD_OWNER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCardOwnerName = iprot.readString();
              struct.setBankCardOwnerNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BANK_CARD_OWNER_ID_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCardOwnerIdCard = iprot.readString();
              struct.setBankCardOwnerIdCardIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BANK_CARD_OWNER_MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCardOwnerMobile = iprot.readString();
              struct.setBankCardOwnerMobileIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CHANNEL_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelCode = iprot.readString();
              struct.setChannelCodeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CHANNEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelName = iprot.readString();
              struct.setChannelNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CHANNEL_TRANS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelTransType = iprot.readString();
              struct.setChannelTransTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FEE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feeType = iprot.readString();
              struct.setFeeTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BANK_CARD_OWNER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCardOwnerType = iprot.readString();
              struct.setBankCardOwnerTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TRANSFER_BATCH_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferBatchAmount = iprot.readString();
              struct.setTransferBatchAmountIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // FEE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feeAmount = iprot.readString();
              struct.setFeeAmountIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // REQ_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reqIp = iprot.readString();
              struct.setReqIpIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // NOTIFY_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notifyUrl = iprot.readString();
              struct.setNotifyUrlIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // RETURN_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.returnUrl = iprot.readString();
              struct.setReturnUrlIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ASSOCIATE_LINE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.associateLineNumber = iprot.readString();
              struct.setAssociateLineNumberIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // USER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userType = iprot.readString();
              struct.setUserTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransOrderRiskModel struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.merchantOrderNo != null) {
        oprot.writeFieldBegin(MERCHANT_ORDER_NO_FIELD_DESC);
        oprot.writeString(struct.merchantOrderNo);
        oprot.writeFieldEnd();
      }
      if (struct.TransNo != null) {
        oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
        oprot.writeString(struct.TransNo);
        oprot.writeFieldEnd();
      }
      if (struct.productType != null) {
        oprot.writeFieldBegin(PRODUCT_TYPE_FIELD_DESC);
        oprot.writeString(struct.productType);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantCompany != null) {
        oprot.writeFieldBegin(MERCHANT_COMPANY_FIELD_DESC);
        oprot.writeString(struct.merchantCompany);
        oprot.writeFieldEnd();
      }
      if (struct.transType != null) {
        oprot.writeFieldBegin(TRANS_TYPE_FIELD_DESC);
        oprot.writeString(struct.transType);
        oprot.writeFieldEnd();
      }
      if (struct.transAmount != null) {
        oprot.writeFieldBegin(TRANS_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.transAmount);
        oprot.writeFieldEnd();
      }
      if (struct.bankCardType != null) {
        oprot.writeFieldBegin(BANK_CARD_TYPE_FIELD_DESC);
        oprot.writeString(struct.bankCardType);
        oprot.writeFieldEnd();
      }
      if (struct.bankCardNo != null) {
        oprot.writeFieldBegin(BANK_CARD_NO_FIELD_DESC);
        oprot.writeString(struct.bankCardNo);
        oprot.writeFieldEnd();
      }
      if (struct.bankCardOwnerName != null) {
        oprot.writeFieldBegin(BANK_CARD_OWNER_NAME_FIELD_DESC);
        oprot.writeString(struct.bankCardOwnerName);
        oprot.writeFieldEnd();
      }
      if (struct.bankCardOwnerIdCard != null) {
        oprot.writeFieldBegin(BANK_CARD_OWNER_ID_CARD_FIELD_DESC);
        oprot.writeString(struct.bankCardOwnerIdCard);
        oprot.writeFieldEnd();
      }
      if (struct.bankCardOwnerMobile != null) {
        oprot.writeFieldBegin(BANK_CARD_OWNER_MOBILE_FIELD_DESC);
        oprot.writeString(struct.bankCardOwnerMobile);
        oprot.writeFieldEnd();
      }
      if (struct.channelCode != null) {
        oprot.writeFieldBegin(CHANNEL_CODE_FIELD_DESC);
        oprot.writeString(struct.channelCode);
        oprot.writeFieldEnd();
      }
      if (struct.channelName != null) {
        oprot.writeFieldBegin(CHANNEL_NAME_FIELD_DESC);
        oprot.writeString(struct.channelName);
        oprot.writeFieldEnd();
      }
      if (struct.channelTransType != null) {
        oprot.writeFieldBegin(CHANNEL_TRANS_TYPE_FIELD_DESC);
        oprot.writeString(struct.channelTransType);
        oprot.writeFieldEnd();
      }
      if (struct.feeType != null) {
        oprot.writeFieldBegin(FEE_TYPE_FIELD_DESC);
        oprot.writeString(struct.feeType);
        oprot.writeFieldEnd();
      }
      if (struct.bankCardOwnerType != null) {
        oprot.writeFieldBegin(BANK_CARD_OWNER_TYPE_FIELD_DESC);
        oprot.writeString(struct.bankCardOwnerType);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.transferBatchAmount != null) {
        oprot.writeFieldBegin(TRANSFER_BATCH_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.transferBatchAmount);
        oprot.writeFieldEnd();
      }
      if (struct.feeAmount != null) {
        oprot.writeFieldBegin(FEE_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.feeAmount);
        oprot.writeFieldEnd();
      }
      if (struct.reqIp != null) {
        oprot.writeFieldBegin(REQ_IP_FIELD_DESC);
        oprot.writeString(struct.reqIp);
        oprot.writeFieldEnd();
      }
      if (struct.notifyUrl != null) {
        oprot.writeFieldBegin(NOTIFY_URL_FIELD_DESC);
        oprot.writeString(struct.notifyUrl);
        oprot.writeFieldEnd();
      }
      if (struct.returnUrl != null) {
        oprot.writeFieldBegin(RETURN_URL_FIELD_DESC);
        oprot.writeString(struct.returnUrl);
        oprot.writeFieldEnd();
      }
      if (struct.associateLineNumber != null) {
        oprot.writeFieldBegin(ASSOCIATE_LINE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.associateLineNumber);
        oprot.writeFieldEnd();
      }
      if (struct.userType != null) {
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeString(struct.userType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransOrderRiskModelTupleSchemeFactory implements SchemeFactory {
    public TransOrderRiskModelTupleScheme getScheme() {
      return new TransOrderRiskModelTupleScheme();
    }
  }

  private static class TransOrderRiskModelTupleScheme extends TupleScheme<TransOrderRiskModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransOrderRiskModel struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMerchantOrderNo()) {
        optionals.set(0);
      }
      if (struct.isSetTransNo()) {
        optionals.set(1);
      }
      if (struct.isSetProductType()) {
        optionals.set(2);
      }
      if (struct.isSetProductName()) {
        optionals.set(3);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(4);
      }
      if (struct.isSetMerchantCompany()) {
        optionals.set(5);
      }
      if (struct.isSetTransType()) {
        optionals.set(6);
      }
      if (struct.isSetTransAmount()) {
        optionals.set(7);
      }
      if (struct.isSetBankCardType()) {
        optionals.set(8);
      }
      if (struct.isSetBankCardNo()) {
        optionals.set(9);
      }
      if (struct.isSetBankCardOwnerName()) {
        optionals.set(10);
      }
      if (struct.isSetBankCardOwnerIdCard()) {
        optionals.set(11);
      }
      if (struct.isSetBankCardOwnerMobile()) {
        optionals.set(12);
      }
      if (struct.isSetChannelCode()) {
        optionals.set(13);
      }
      if (struct.isSetChannelName()) {
        optionals.set(14);
      }
      if (struct.isSetChannelTransType()) {
        optionals.set(15);
      }
      if (struct.isSetFeeType()) {
        optionals.set(16);
      }
      if (struct.isSetBankCardOwnerType()) {
        optionals.set(17);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(18);
      }
      if (struct.isSetTransferBatchAmount()) {
        optionals.set(19);
      }
      if (struct.isSetFeeAmount()) {
        optionals.set(20);
      }
      if (struct.isSetReqIp()) {
        optionals.set(21);
      }
      if (struct.isSetNotifyUrl()) {
        optionals.set(22);
      }
      if (struct.isSetReturnUrl()) {
        optionals.set(23);
      }
      if (struct.isSetAssociateLineNumber()) {
        optionals.set(24);
      }
      if (struct.isSetUserType()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetMerchantOrderNo()) {
        oprot.writeString(struct.merchantOrderNo);
      }
      if (struct.isSetTransNo()) {
        oprot.writeString(struct.TransNo);
      }
      if (struct.isSetProductType()) {
        oprot.writeString(struct.productType);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetMerchantCompany()) {
        oprot.writeString(struct.merchantCompany);
      }
      if (struct.isSetTransType()) {
        oprot.writeString(struct.transType);
      }
      if (struct.isSetTransAmount()) {
        oprot.writeString(struct.transAmount);
      }
      if (struct.isSetBankCardType()) {
        oprot.writeString(struct.bankCardType);
      }
      if (struct.isSetBankCardNo()) {
        oprot.writeString(struct.bankCardNo);
      }
      if (struct.isSetBankCardOwnerName()) {
        oprot.writeString(struct.bankCardOwnerName);
      }
      if (struct.isSetBankCardOwnerIdCard()) {
        oprot.writeString(struct.bankCardOwnerIdCard);
      }
      if (struct.isSetBankCardOwnerMobile()) {
        oprot.writeString(struct.bankCardOwnerMobile);
      }
      if (struct.isSetChannelCode()) {
        oprot.writeString(struct.channelCode);
      }
      if (struct.isSetChannelName()) {
        oprot.writeString(struct.channelName);
      }
      if (struct.isSetChannelTransType()) {
        oprot.writeString(struct.channelTransType);
      }
      if (struct.isSetFeeType()) {
        oprot.writeString(struct.feeType);
      }
      if (struct.isSetBankCardOwnerType()) {
        oprot.writeString(struct.bankCardOwnerType);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetTransferBatchAmount()) {
        oprot.writeString(struct.transferBatchAmount);
      }
      if (struct.isSetFeeAmount()) {
        oprot.writeString(struct.feeAmount);
      }
      if (struct.isSetReqIp()) {
        oprot.writeString(struct.reqIp);
      }
      if (struct.isSetNotifyUrl()) {
        oprot.writeString(struct.notifyUrl);
      }
      if (struct.isSetReturnUrl()) {
        oprot.writeString(struct.returnUrl);
      }
      if (struct.isSetAssociateLineNumber()) {
        oprot.writeString(struct.associateLineNumber);
      }
      if (struct.isSetUserType()) {
        oprot.writeString(struct.userType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransOrderRiskModel struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.merchantOrderNo = iprot.readString();
        struct.setMerchantOrderNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.TransNo = iprot.readString();
        struct.setTransNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.productType = iprot.readString();
        struct.setProductTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.merchantCompany = iprot.readString();
        struct.setMerchantCompanyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.transType = iprot.readString();
        struct.setTransTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.transAmount = iprot.readString();
        struct.setTransAmountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bankCardType = iprot.readString();
        struct.setBankCardTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.bankCardNo = iprot.readString();
        struct.setBankCardNoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.bankCardOwnerName = iprot.readString();
        struct.setBankCardOwnerNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.bankCardOwnerIdCard = iprot.readString();
        struct.setBankCardOwnerIdCardIsSet(true);
      }
      if (incoming.get(12)) {
        struct.bankCardOwnerMobile = iprot.readString();
        struct.setBankCardOwnerMobileIsSet(true);
      }
      if (incoming.get(13)) {
        struct.channelCode = iprot.readString();
        struct.setChannelCodeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.channelName = iprot.readString();
        struct.setChannelNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.channelTransType = iprot.readString();
        struct.setChannelTransTypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.feeType = iprot.readString();
        struct.setFeeTypeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.bankCardOwnerType = iprot.readString();
        struct.setBankCardOwnerTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.transferBatchAmount = iprot.readString();
        struct.setTransferBatchAmountIsSet(true);
      }
      if (incoming.get(20)) {
        struct.feeAmount = iprot.readString();
        struct.setFeeAmountIsSet(true);
      }
      if (incoming.get(21)) {
        struct.reqIp = iprot.readString();
        struct.setReqIpIsSet(true);
      }
      if (incoming.get(22)) {
        struct.notifyUrl = iprot.readString();
        struct.setNotifyUrlIsSet(true);
      }
      if (incoming.get(23)) {
        struct.returnUrl = iprot.readString();
        struct.setReturnUrlIsSet(true);
      }
      if (incoming.get(24)) {
        struct.associateLineNumber = iprot.readString();
        struct.setAssociateLineNumberIsSet(true);
      }
      if (incoming.get(25)) {
        struct.userType = iprot.readString();
        struct.setUserTypeIsSet(true);
      }
    }
  }

}