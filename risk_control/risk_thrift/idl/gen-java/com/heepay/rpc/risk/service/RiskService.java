/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.risk.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-07-27")
public class RiskService {

  public interface Iface {

    public String getRiskRunStatus() throws org.apache.thrift.TException;

    public String addRiskMerchantProductQuota(String merchantProductQuotaEntity) throws org.apache.thrift.TException;

    public String editRiskMerchantProductQuota(String merchantProductQuotaEntity) throws org.apache.thrift.TException;

    public String addRiskProductQuota(String productQuotaEntity) throws org.apache.thrift.TException;

    public String editRiskProductQuota(String merchantProductQuotaEntity) throws org.apache.thrift.TException;

    public String addBlackorwhiteItemList(String blackorwhiteItemListEntity) throws org.apache.thrift.TException;

    public String editBlackorwhiteItemList(String blackorwhiteItemListEntity) throws org.apache.thrift.TException;

    public String delBlackorwhiteItemList(String blackorwhiteItemListEntity) throws org.apache.thrift.TException;

    public String addBlackorwhiteList(String blackorwhiteListEntity) throws org.apache.thrift.TException;

    public String editBlackorwhiteList(String blackorwhiteListEntity) throws org.apache.thrift.TException;

    public String delBlackorwhiteList(String blackorwhiteListEntity) throws org.apache.thrift.TException;

    public String addRiskIncomeQuota(String blackorwhiteListEntity) throws org.apache.thrift.TException;

    public String editRiskIncomeQuota(String blackorwhiteListEntity) throws org.apache.thrift.TException;

    public String delRiskIncomeQuota(String blackorwhiteListEntity) throws org.apache.thrift.TException;

    public String addSettleIncomeInfo(String SettleIncomeInfoEntity) throws org.apache.thrift.TException;

    public String editSettleIncomeInfo(String SettleIncomeInfoEntity) throws org.apache.thrift.TException;

    public String delSettleIncomeInfo(String SettleIncomeInfoEntity) throws org.apache.thrift.TException;

    public String addRiskLoginBlacklistInfo(String riskLoginBlacklist) throws org.apache.thrift.TException;

    public String editRiskLoginBlacklistInfo(String riskLoginBlacklist) throws org.apache.thrift.TException;

    public String delRiskLoginBlacklistInfo(String riskLoginBlacklist) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getRiskRunStatus(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRiskMerchantProductQuota(String merchantProductQuotaEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editRiskMerchantProductQuota(String merchantProductQuotaEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRiskProductQuota(String productQuotaEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editRiskProductQuota(String merchantProductQuotaEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addBlackorwhiteItemList(String blackorwhiteItemListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editBlackorwhiteItemList(String blackorwhiteItemListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delBlackorwhiteItemList(String blackorwhiteItemListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addBlackorwhiteList(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editBlackorwhiteList(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delBlackorwhiteList(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRiskIncomeQuota(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editRiskIncomeQuota(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delRiskIncomeQuota(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addSettleIncomeInfo(String SettleIncomeInfoEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editSettleIncomeInfo(String SettleIncomeInfoEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delSettleIncomeInfo(String SettleIncomeInfoEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRiskLoginBlacklistInfo(String riskLoginBlacklist, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editRiskLoginBlacklistInfo(String riskLoginBlacklist, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delRiskLoginBlacklistInfo(String riskLoginBlacklist, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getRiskRunStatus() throws org.apache.thrift.TException
    {
      send_getRiskRunStatus();
      return recv_getRiskRunStatus();
    }

    public void send_getRiskRunStatus() throws org.apache.thrift.TException
    {
      getRiskRunStatus_args args = new getRiskRunStatus_args();
      sendBase("getRiskRunStatus", args);
    }

    public String recv_getRiskRunStatus() throws org.apache.thrift.TException
    {
      getRiskRunStatus_result result = new getRiskRunStatus_result();
      receiveBase(result, "getRiskRunStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRiskRunStatus failed: unknown result");
    }

    public String addRiskMerchantProductQuota(String merchantProductQuotaEntity) throws org.apache.thrift.TException
    {
      send_addRiskMerchantProductQuota(merchantProductQuotaEntity);
      return recv_addRiskMerchantProductQuota();
    }

    public void send_addRiskMerchantProductQuota(String merchantProductQuotaEntity) throws org.apache.thrift.TException
    {
      addRiskMerchantProductQuota_args args = new addRiskMerchantProductQuota_args();
      args.setMerchantProductQuotaEntity(merchantProductQuotaEntity);
      sendBase("addRiskMerchantProductQuota", args);
    }

    public String recv_addRiskMerchantProductQuota() throws org.apache.thrift.TException
    {
      addRiskMerchantProductQuota_result result = new addRiskMerchantProductQuota_result();
      receiveBase(result, "addRiskMerchantProductQuota");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRiskMerchantProductQuota failed: unknown result");
    }

    public String editRiskMerchantProductQuota(String merchantProductQuotaEntity) throws org.apache.thrift.TException
    {
      send_editRiskMerchantProductQuota(merchantProductQuotaEntity);
      return recv_editRiskMerchantProductQuota();
    }

    public void send_editRiskMerchantProductQuota(String merchantProductQuotaEntity) throws org.apache.thrift.TException
    {
      editRiskMerchantProductQuota_args args = new editRiskMerchantProductQuota_args();
      args.setMerchantProductQuotaEntity(merchantProductQuotaEntity);
      sendBase("editRiskMerchantProductQuota", args);
    }

    public String recv_editRiskMerchantProductQuota() throws org.apache.thrift.TException
    {
      editRiskMerchantProductQuota_result result = new editRiskMerchantProductQuota_result();
      receiveBase(result, "editRiskMerchantProductQuota");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editRiskMerchantProductQuota failed: unknown result");
    }

    public String addRiskProductQuota(String productQuotaEntity) throws org.apache.thrift.TException
    {
      send_addRiskProductQuota(productQuotaEntity);
      return recv_addRiskProductQuota();
    }

    public void send_addRiskProductQuota(String productQuotaEntity) throws org.apache.thrift.TException
    {
      addRiskProductQuota_args args = new addRiskProductQuota_args();
      args.setProductQuotaEntity(productQuotaEntity);
      sendBase("addRiskProductQuota", args);
    }

    public String recv_addRiskProductQuota() throws org.apache.thrift.TException
    {
      addRiskProductQuota_result result = new addRiskProductQuota_result();
      receiveBase(result, "addRiskProductQuota");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRiskProductQuota failed: unknown result");
    }

    public String editRiskProductQuota(String merchantProductQuotaEntity) throws org.apache.thrift.TException
    {
      send_editRiskProductQuota(merchantProductQuotaEntity);
      return recv_editRiskProductQuota();
    }

    public void send_editRiskProductQuota(String merchantProductQuotaEntity) throws org.apache.thrift.TException
    {
      editRiskProductQuota_args args = new editRiskProductQuota_args();
      args.setMerchantProductQuotaEntity(merchantProductQuotaEntity);
      sendBase("editRiskProductQuota", args);
    }

    public String recv_editRiskProductQuota() throws org.apache.thrift.TException
    {
      editRiskProductQuota_result result = new editRiskProductQuota_result();
      receiveBase(result, "editRiskProductQuota");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editRiskProductQuota failed: unknown result");
    }

    public String addBlackorwhiteItemList(String blackorwhiteItemListEntity) throws org.apache.thrift.TException
    {
      send_addBlackorwhiteItemList(blackorwhiteItemListEntity);
      return recv_addBlackorwhiteItemList();
    }

    public void send_addBlackorwhiteItemList(String blackorwhiteItemListEntity) throws org.apache.thrift.TException
    {
      addBlackorwhiteItemList_args args = new addBlackorwhiteItemList_args();
      args.setBlackorwhiteItemListEntity(blackorwhiteItemListEntity);
      sendBase("addBlackorwhiteItemList", args);
    }

    public String recv_addBlackorwhiteItemList() throws org.apache.thrift.TException
    {
      addBlackorwhiteItemList_result result = new addBlackorwhiteItemList_result();
      receiveBase(result, "addBlackorwhiteItemList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addBlackorwhiteItemList failed: unknown result");
    }

    public String editBlackorwhiteItemList(String blackorwhiteItemListEntity) throws org.apache.thrift.TException
    {
      send_editBlackorwhiteItemList(blackorwhiteItemListEntity);
      return recv_editBlackorwhiteItemList();
    }

    public void send_editBlackorwhiteItemList(String blackorwhiteItemListEntity) throws org.apache.thrift.TException
    {
      editBlackorwhiteItemList_args args = new editBlackorwhiteItemList_args();
      args.setBlackorwhiteItemListEntity(blackorwhiteItemListEntity);
      sendBase("editBlackorwhiteItemList", args);
    }

    public String recv_editBlackorwhiteItemList() throws org.apache.thrift.TException
    {
      editBlackorwhiteItemList_result result = new editBlackorwhiteItemList_result();
      receiveBase(result, "editBlackorwhiteItemList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editBlackorwhiteItemList failed: unknown result");
    }

    public String delBlackorwhiteItemList(String blackorwhiteItemListEntity) throws org.apache.thrift.TException
    {
      send_delBlackorwhiteItemList(blackorwhiteItemListEntity);
      return recv_delBlackorwhiteItemList();
    }

    public void send_delBlackorwhiteItemList(String blackorwhiteItemListEntity) throws org.apache.thrift.TException
    {
      delBlackorwhiteItemList_args args = new delBlackorwhiteItemList_args();
      args.setBlackorwhiteItemListEntity(blackorwhiteItemListEntity);
      sendBase("delBlackorwhiteItemList", args);
    }

    public String recv_delBlackorwhiteItemList() throws org.apache.thrift.TException
    {
      delBlackorwhiteItemList_result result = new delBlackorwhiteItemList_result();
      receiveBase(result, "delBlackorwhiteItemList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delBlackorwhiteItemList failed: unknown result");
    }

    public String addBlackorwhiteList(String blackorwhiteListEntity) throws org.apache.thrift.TException
    {
      send_addBlackorwhiteList(blackorwhiteListEntity);
      return recv_addBlackorwhiteList();
    }

    public void send_addBlackorwhiteList(String blackorwhiteListEntity) throws org.apache.thrift.TException
    {
      addBlackorwhiteList_args args = new addBlackorwhiteList_args();
      args.setBlackorwhiteListEntity(blackorwhiteListEntity);
      sendBase("addBlackorwhiteList", args);
    }

    public String recv_addBlackorwhiteList() throws org.apache.thrift.TException
    {
      addBlackorwhiteList_result result = new addBlackorwhiteList_result();
      receiveBase(result, "addBlackorwhiteList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addBlackorwhiteList failed: unknown result");
    }

    public String editBlackorwhiteList(String blackorwhiteListEntity) throws org.apache.thrift.TException
    {
      send_editBlackorwhiteList(blackorwhiteListEntity);
      return recv_editBlackorwhiteList();
    }

    public void send_editBlackorwhiteList(String blackorwhiteListEntity) throws org.apache.thrift.TException
    {
      editBlackorwhiteList_args args = new editBlackorwhiteList_args();
      args.setBlackorwhiteListEntity(blackorwhiteListEntity);
      sendBase("editBlackorwhiteList", args);
    }

    public String recv_editBlackorwhiteList() throws org.apache.thrift.TException
    {
      editBlackorwhiteList_result result = new editBlackorwhiteList_result();
      receiveBase(result, "editBlackorwhiteList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editBlackorwhiteList failed: unknown result");
    }

    public String delBlackorwhiteList(String blackorwhiteListEntity) throws org.apache.thrift.TException
    {
      send_delBlackorwhiteList(blackorwhiteListEntity);
      return recv_delBlackorwhiteList();
    }

    public void send_delBlackorwhiteList(String blackorwhiteListEntity) throws org.apache.thrift.TException
    {
      delBlackorwhiteList_args args = new delBlackorwhiteList_args();
      args.setBlackorwhiteListEntity(blackorwhiteListEntity);
      sendBase("delBlackorwhiteList", args);
    }

    public String recv_delBlackorwhiteList() throws org.apache.thrift.TException
    {
      delBlackorwhiteList_result result = new delBlackorwhiteList_result();
      receiveBase(result, "delBlackorwhiteList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delBlackorwhiteList failed: unknown result");
    }

    public String addRiskIncomeQuota(String blackorwhiteListEntity) throws org.apache.thrift.TException
    {
      send_addRiskIncomeQuota(blackorwhiteListEntity);
      return recv_addRiskIncomeQuota();
    }

    public void send_addRiskIncomeQuota(String blackorwhiteListEntity) throws org.apache.thrift.TException
    {
      addRiskIncomeQuota_args args = new addRiskIncomeQuota_args();
      args.setBlackorwhiteListEntity(blackorwhiteListEntity);
      sendBase("addRiskIncomeQuota", args);
    }

    public String recv_addRiskIncomeQuota() throws org.apache.thrift.TException
    {
      addRiskIncomeQuota_result result = new addRiskIncomeQuota_result();
      receiveBase(result, "addRiskIncomeQuota");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRiskIncomeQuota failed: unknown result");
    }

    public String editRiskIncomeQuota(String blackorwhiteListEntity) throws org.apache.thrift.TException
    {
      send_editRiskIncomeQuota(blackorwhiteListEntity);
      return recv_editRiskIncomeQuota();
    }

    public void send_editRiskIncomeQuota(String blackorwhiteListEntity) throws org.apache.thrift.TException
    {
      editRiskIncomeQuota_args args = new editRiskIncomeQuota_args();
      args.setBlackorwhiteListEntity(blackorwhiteListEntity);
      sendBase("editRiskIncomeQuota", args);
    }

    public String recv_editRiskIncomeQuota() throws org.apache.thrift.TException
    {
      editRiskIncomeQuota_result result = new editRiskIncomeQuota_result();
      receiveBase(result, "editRiskIncomeQuota");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editRiskIncomeQuota failed: unknown result");
    }

    public String delRiskIncomeQuota(String blackorwhiteListEntity) throws org.apache.thrift.TException
    {
      send_delRiskIncomeQuota(blackorwhiteListEntity);
      return recv_delRiskIncomeQuota();
    }

    public void send_delRiskIncomeQuota(String blackorwhiteListEntity) throws org.apache.thrift.TException
    {
      delRiskIncomeQuota_args args = new delRiskIncomeQuota_args();
      args.setBlackorwhiteListEntity(blackorwhiteListEntity);
      sendBase("delRiskIncomeQuota", args);
    }

    public String recv_delRiskIncomeQuota() throws org.apache.thrift.TException
    {
      delRiskIncomeQuota_result result = new delRiskIncomeQuota_result();
      receiveBase(result, "delRiskIncomeQuota");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delRiskIncomeQuota failed: unknown result");
    }

    public String addSettleIncomeInfo(String SettleIncomeInfoEntity) throws org.apache.thrift.TException
    {
      send_addSettleIncomeInfo(SettleIncomeInfoEntity);
      return recv_addSettleIncomeInfo();
    }

    public void send_addSettleIncomeInfo(String SettleIncomeInfoEntity) throws org.apache.thrift.TException
    {
      addSettleIncomeInfo_args args = new addSettleIncomeInfo_args();
      args.setSettleIncomeInfoEntity(SettleIncomeInfoEntity);
      sendBase("addSettleIncomeInfo", args);
    }

    public String recv_addSettleIncomeInfo() throws org.apache.thrift.TException
    {
      addSettleIncomeInfo_result result = new addSettleIncomeInfo_result();
      receiveBase(result, "addSettleIncomeInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSettleIncomeInfo failed: unknown result");
    }

    public String editSettleIncomeInfo(String SettleIncomeInfoEntity) throws org.apache.thrift.TException
    {
      send_editSettleIncomeInfo(SettleIncomeInfoEntity);
      return recv_editSettleIncomeInfo();
    }

    public void send_editSettleIncomeInfo(String SettleIncomeInfoEntity) throws org.apache.thrift.TException
    {
      editSettleIncomeInfo_args args = new editSettleIncomeInfo_args();
      args.setSettleIncomeInfoEntity(SettleIncomeInfoEntity);
      sendBase("editSettleIncomeInfo", args);
    }

    public String recv_editSettleIncomeInfo() throws org.apache.thrift.TException
    {
      editSettleIncomeInfo_result result = new editSettleIncomeInfo_result();
      receiveBase(result, "editSettleIncomeInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editSettleIncomeInfo failed: unknown result");
    }

    public String delSettleIncomeInfo(String SettleIncomeInfoEntity) throws org.apache.thrift.TException
    {
      send_delSettleIncomeInfo(SettleIncomeInfoEntity);
      return recv_delSettleIncomeInfo();
    }

    public void send_delSettleIncomeInfo(String SettleIncomeInfoEntity) throws org.apache.thrift.TException
    {
      delSettleIncomeInfo_args args = new delSettleIncomeInfo_args();
      args.setSettleIncomeInfoEntity(SettleIncomeInfoEntity);
      sendBase("delSettleIncomeInfo", args);
    }

    public String recv_delSettleIncomeInfo() throws org.apache.thrift.TException
    {
      delSettleIncomeInfo_result result = new delSettleIncomeInfo_result();
      receiveBase(result, "delSettleIncomeInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delSettleIncomeInfo failed: unknown result");
    }

    public String addRiskLoginBlacklistInfo(String riskLoginBlacklist) throws org.apache.thrift.TException
    {
      send_addRiskLoginBlacklistInfo(riskLoginBlacklist);
      return recv_addRiskLoginBlacklistInfo();
    }

    public void send_addRiskLoginBlacklistInfo(String riskLoginBlacklist) throws org.apache.thrift.TException
    {
      addRiskLoginBlacklistInfo_args args = new addRiskLoginBlacklistInfo_args();
      args.setRiskLoginBlacklist(riskLoginBlacklist);
      sendBase("addRiskLoginBlacklistInfo", args);
    }

    public String recv_addRiskLoginBlacklistInfo() throws org.apache.thrift.TException
    {
      addRiskLoginBlacklistInfo_result result = new addRiskLoginBlacklistInfo_result();
      receiveBase(result, "addRiskLoginBlacklistInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRiskLoginBlacklistInfo failed: unknown result");
    }

    public String editRiskLoginBlacklistInfo(String riskLoginBlacklist) throws org.apache.thrift.TException
    {
      send_editRiskLoginBlacklistInfo(riskLoginBlacklist);
      return recv_editRiskLoginBlacklistInfo();
    }

    public void send_editRiskLoginBlacklistInfo(String riskLoginBlacklist) throws org.apache.thrift.TException
    {
      editRiskLoginBlacklistInfo_args args = new editRiskLoginBlacklistInfo_args();
      args.setRiskLoginBlacklist(riskLoginBlacklist);
      sendBase("editRiskLoginBlacklistInfo", args);
    }

    public String recv_editRiskLoginBlacklistInfo() throws org.apache.thrift.TException
    {
      editRiskLoginBlacklistInfo_result result = new editRiskLoginBlacklistInfo_result();
      receiveBase(result, "editRiskLoginBlacklistInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editRiskLoginBlacklistInfo failed: unknown result");
    }

    public String delRiskLoginBlacklistInfo(String riskLoginBlacklist) throws org.apache.thrift.TException
    {
      send_delRiskLoginBlacklistInfo(riskLoginBlacklist);
      return recv_delRiskLoginBlacklistInfo();
    }

    public void send_delRiskLoginBlacklistInfo(String riskLoginBlacklist) throws org.apache.thrift.TException
    {
      delRiskLoginBlacklistInfo_args args = new delRiskLoginBlacklistInfo_args();
      args.setRiskLoginBlacklist(riskLoginBlacklist);
      sendBase("delRiskLoginBlacklistInfo", args);
    }

    public String recv_delRiskLoginBlacklistInfo() throws org.apache.thrift.TException
    {
      delRiskLoginBlacklistInfo_result result = new delRiskLoginBlacklistInfo_result();
      receiveBase(result, "delRiskLoginBlacklistInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delRiskLoginBlacklistInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getRiskRunStatus(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRiskRunStatus_call method_call = new getRiskRunStatus_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRiskRunStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getRiskRunStatus_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRiskRunStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRiskRunStatus_args args = new getRiskRunStatus_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRiskRunStatus();
      }
    }

    public void addRiskMerchantProductQuota(String merchantProductQuotaEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRiskMerchantProductQuota_call method_call = new addRiskMerchantProductQuota_call(merchantProductQuotaEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRiskMerchantProductQuota_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantProductQuotaEntity;
      public addRiskMerchantProductQuota_call(String merchantProductQuotaEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantProductQuotaEntity = merchantProductQuotaEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRiskMerchantProductQuota", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRiskMerchantProductQuota_args args = new addRiskMerchantProductQuota_args();
        args.setMerchantProductQuotaEntity(merchantProductQuotaEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRiskMerchantProductQuota();
      }
    }

    public void editRiskMerchantProductQuota(String merchantProductQuotaEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editRiskMerchantProductQuota_call method_call = new editRiskMerchantProductQuota_call(merchantProductQuotaEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editRiskMerchantProductQuota_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantProductQuotaEntity;
      public editRiskMerchantProductQuota_call(String merchantProductQuotaEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantProductQuotaEntity = merchantProductQuotaEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editRiskMerchantProductQuota", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editRiskMerchantProductQuota_args args = new editRiskMerchantProductQuota_args();
        args.setMerchantProductQuotaEntity(merchantProductQuotaEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editRiskMerchantProductQuota();
      }
    }

    public void addRiskProductQuota(String productQuotaEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRiskProductQuota_call method_call = new addRiskProductQuota_call(productQuotaEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRiskProductQuota_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productQuotaEntity;
      public addRiskProductQuota_call(String productQuotaEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productQuotaEntity = productQuotaEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRiskProductQuota", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRiskProductQuota_args args = new addRiskProductQuota_args();
        args.setProductQuotaEntity(productQuotaEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRiskProductQuota();
      }
    }

    public void editRiskProductQuota(String merchantProductQuotaEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editRiskProductQuota_call method_call = new editRiskProductQuota_call(merchantProductQuotaEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editRiskProductQuota_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantProductQuotaEntity;
      public editRiskProductQuota_call(String merchantProductQuotaEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantProductQuotaEntity = merchantProductQuotaEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editRiskProductQuota", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editRiskProductQuota_args args = new editRiskProductQuota_args();
        args.setMerchantProductQuotaEntity(merchantProductQuotaEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editRiskProductQuota();
      }
    }

    public void addBlackorwhiteItemList(String blackorwhiteItemListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBlackorwhiteItemList_call method_call = new addBlackorwhiteItemList_call(blackorwhiteItemListEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBlackorwhiteItemList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String blackorwhiteItemListEntity;
      public addBlackorwhiteItemList_call(String blackorwhiteItemListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blackorwhiteItemListEntity = blackorwhiteItemListEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBlackorwhiteItemList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBlackorwhiteItemList_args args = new addBlackorwhiteItemList_args();
        args.setBlackorwhiteItemListEntity(blackorwhiteItemListEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addBlackorwhiteItemList();
      }
    }

    public void editBlackorwhiteItemList(String blackorwhiteItemListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editBlackorwhiteItemList_call method_call = new editBlackorwhiteItemList_call(blackorwhiteItemListEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editBlackorwhiteItemList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String blackorwhiteItemListEntity;
      public editBlackorwhiteItemList_call(String blackorwhiteItemListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blackorwhiteItemListEntity = blackorwhiteItemListEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editBlackorwhiteItemList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editBlackorwhiteItemList_args args = new editBlackorwhiteItemList_args();
        args.setBlackorwhiteItemListEntity(blackorwhiteItemListEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editBlackorwhiteItemList();
      }
    }

    public void delBlackorwhiteItemList(String blackorwhiteItemListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delBlackorwhiteItemList_call method_call = new delBlackorwhiteItemList_call(blackorwhiteItemListEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delBlackorwhiteItemList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String blackorwhiteItemListEntity;
      public delBlackorwhiteItemList_call(String blackorwhiteItemListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blackorwhiteItemListEntity = blackorwhiteItemListEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delBlackorwhiteItemList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delBlackorwhiteItemList_args args = new delBlackorwhiteItemList_args();
        args.setBlackorwhiteItemListEntity(blackorwhiteItemListEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delBlackorwhiteItemList();
      }
    }

    public void addBlackorwhiteList(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBlackorwhiteList_call method_call = new addBlackorwhiteList_call(blackorwhiteListEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBlackorwhiteList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String blackorwhiteListEntity;
      public addBlackorwhiteList_call(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blackorwhiteListEntity = blackorwhiteListEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBlackorwhiteList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBlackorwhiteList_args args = new addBlackorwhiteList_args();
        args.setBlackorwhiteListEntity(blackorwhiteListEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addBlackorwhiteList();
      }
    }

    public void editBlackorwhiteList(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editBlackorwhiteList_call method_call = new editBlackorwhiteList_call(blackorwhiteListEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editBlackorwhiteList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String blackorwhiteListEntity;
      public editBlackorwhiteList_call(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blackorwhiteListEntity = blackorwhiteListEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editBlackorwhiteList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editBlackorwhiteList_args args = new editBlackorwhiteList_args();
        args.setBlackorwhiteListEntity(blackorwhiteListEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editBlackorwhiteList();
      }
    }

    public void delBlackorwhiteList(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delBlackorwhiteList_call method_call = new delBlackorwhiteList_call(blackorwhiteListEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delBlackorwhiteList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String blackorwhiteListEntity;
      public delBlackorwhiteList_call(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blackorwhiteListEntity = blackorwhiteListEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delBlackorwhiteList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delBlackorwhiteList_args args = new delBlackorwhiteList_args();
        args.setBlackorwhiteListEntity(blackorwhiteListEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delBlackorwhiteList();
      }
    }

    public void addRiskIncomeQuota(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRiskIncomeQuota_call method_call = new addRiskIncomeQuota_call(blackorwhiteListEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRiskIncomeQuota_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String blackorwhiteListEntity;
      public addRiskIncomeQuota_call(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blackorwhiteListEntity = blackorwhiteListEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRiskIncomeQuota", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRiskIncomeQuota_args args = new addRiskIncomeQuota_args();
        args.setBlackorwhiteListEntity(blackorwhiteListEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRiskIncomeQuota();
      }
    }

    public void editRiskIncomeQuota(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editRiskIncomeQuota_call method_call = new editRiskIncomeQuota_call(blackorwhiteListEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editRiskIncomeQuota_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String blackorwhiteListEntity;
      public editRiskIncomeQuota_call(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blackorwhiteListEntity = blackorwhiteListEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editRiskIncomeQuota", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editRiskIncomeQuota_args args = new editRiskIncomeQuota_args();
        args.setBlackorwhiteListEntity(blackorwhiteListEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editRiskIncomeQuota();
      }
    }

    public void delRiskIncomeQuota(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delRiskIncomeQuota_call method_call = new delRiskIncomeQuota_call(blackorwhiteListEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delRiskIncomeQuota_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String blackorwhiteListEntity;
      public delRiskIncomeQuota_call(String blackorwhiteListEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blackorwhiteListEntity = blackorwhiteListEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delRiskIncomeQuota", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delRiskIncomeQuota_args args = new delRiskIncomeQuota_args();
        args.setBlackorwhiteListEntity(blackorwhiteListEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delRiskIncomeQuota();
      }
    }

    public void addSettleIncomeInfo(String SettleIncomeInfoEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSettleIncomeInfo_call method_call = new addSettleIncomeInfo_call(SettleIncomeInfoEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSettleIncomeInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String SettleIncomeInfoEntity;
      public addSettleIncomeInfo_call(String SettleIncomeInfoEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.SettleIncomeInfoEntity = SettleIncomeInfoEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSettleIncomeInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSettleIncomeInfo_args args = new addSettleIncomeInfo_args();
        args.setSettleIncomeInfoEntity(SettleIncomeInfoEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSettleIncomeInfo();
      }
    }

    public void editSettleIncomeInfo(String SettleIncomeInfoEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editSettleIncomeInfo_call method_call = new editSettleIncomeInfo_call(SettleIncomeInfoEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editSettleIncomeInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String SettleIncomeInfoEntity;
      public editSettleIncomeInfo_call(String SettleIncomeInfoEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.SettleIncomeInfoEntity = SettleIncomeInfoEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editSettleIncomeInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editSettleIncomeInfo_args args = new editSettleIncomeInfo_args();
        args.setSettleIncomeInfoEntity(SettleIncomeInfoEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editSettleIncomeInfo();
      }
    }

    public void delSettleIncomeInfo(String SettleIncomeInfoEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delSettleIncomeInfo_call method_call = new delSettleIncomeInfo_call(SettleIncomeInfoEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delSettleIncomeInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String SettleIncomeInfoEntity;
      public delSettleIncomeInfo_call(String SettleIncomeInfoEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.SettleIncomeInfoEntity = SettleIncomeInfoEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delSettleIncomeInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delSettleIncomeInfo_args args = new delSettleIncomeInfo_args();
        args.setSettleIncomeInfoEntity(SettleIncomeInfoEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delSettleIncomeInfo();
      }
    }

    public void addRiskLoginBlacklistInfo(String riskLoginBlacklist, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRiskLoginBlacklistInfo_call method_call = new addRiskLoginBlacklistInfo_call(riskLoginBlacklist, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRiskLoginBlacklistInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String riskLoginBlacklist;
      public addRiskLoginBlacklistInfo_call(String riskLoginBlacklist, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.riskLoginBlacklist = riskLoginBlacklist;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRiskLoginBlacklistInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRiskLoginBlacklistInfo_args args = new addRiskLoginBlacklistInfo_args();
        args.setRiskLoginBlacklist(riskLoginBlacklist);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRiskLoginBlacklistInfo();
      }
    }

    public void editRiskLoginBlacklistInfo(String riskLoginBlacklist, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editRiskLoginBlacklistInfo_call method_call = new editRiskLoginBlacklistInfo_call(riskLoginBlacklist, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editRiskLoginBlacklistInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String riskLoginBlacklist;
      public editRiskLoginBlacklistInfo_call(String riskLoginBlacklist, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.riskLoginBlacklist = riskLoginBlacklist;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editRiskLoginBlacklistInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editRiskLoginBlacklistInfo_args args = new editRiskLoginBlacklistInfo_args();
        args.setRiskLoginBlacklist(riskLoginBlacklist);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editRiskLoginBlacklistInfo();
      }
    }

    public void delRiskLoginBlacklistInfo(String riskLoginBlacklist, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delRiskLoginBlacklistInfo_call method_call = new delRiskLoginBlacklistInfo_call(riskLoginBlacklist, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delRiskLoginBlacklistInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String riskLoginBlacklist;
      public delRiskLoginBlacklistInfo_call(String riskLoginBlacklist, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.riskLoginBlacklist = riskLoginBlacklist;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delRiskLoginBlacklistInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delRiskLoginBlacklistInfo_args args = new delRiskLoginBlacklistInfo_args();
        args.setRiskLoginBlacklist(riskLoginBlacklist);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delRiskLoginBlacklistInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getRiskRunStatus", new getRiskRunStatus());
      processMap.put("addRiskMerchantProductQuota", new addRiskMerchantProductQuota());
      processMap.put("editRiskMerchantProductQuota", new editRiskMerchantProductQuota());
      processMap.put("addRiskProductQuota", new addRiskProductQuota());
      processMap.put("editRiskProductQuota", new editRiskProductQuota());
      processMap.put("addBlackorwhiteItemList", new addBlackorwhiteItemList());
      processMap.put("editBlackorwhiteItemList", new editBlackorwhiteItemList());
      processMap.put("delBlackorwhiteItemList", new delBlackorwhiteItemList());
      processMap.put("addBlackorwhiteList", new addBlackorwhiteList());
      processMap.put("editBlackorwhiteList", new editBlackorwhiteList());
      processMap.put("delBlackorwhiteList", new delBlackorwhiteList());
      processMap.put("addRiskIncomeQuota", new addRiskIncomeQuota());
      processMap.put("editRiskIncomeQuota", new editRiskIncomeQuota());
      processMap.put("delRiskIncomeQuota", new delRiskIncomeQuota());
      processMap.put("addSettleIncomeInfo", new addSettleIncomeInfo());
      processMap.put("editSettleIncomeInfo", new editSettleIncomeInfo());
      processMap.put("delSettleIncomeInfo", new delSettleIncomeInfo());
      processMap.put("addRiskLoginBlacklistInfo", new addRiskLoginBlacklistInfo());
      processMap.put("editRiskLoginBlacklistInfo", new editRiskLoginBlacklistInfo());
      processMap.put("delRiskLoginBlacklistInfo", new delRiskLoginBlacklistInfo());
      return processMap;
    }

    public static class getRiskRunStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRiskRunStatus_args> {
      public getRiskRunStatus() {
        super("getRiskRunStatus");
      }

      public getRiskRunStatus_args getEmptyArgsInstance() {
        return new getRiskRunStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRiskRunStatus_result getResult(I iface, getRiskRunStatus_args args) throws org.apache.thrift.TException {
        getRiskRunStatus_result result = new getRiskRunStatus_result();
        result.success = iface.getRiskRunStatus();
        return result;
      }
    }

    public static class addRiskMerchantProductQuota<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRiskMerchantProductQuota_args> {
      public addRiskMerchantProductQuota() {
        super("addRiskMerchantProductQuota");
      }

      public addRiskMerchantProductQuota_args getEmptyArgsInstance() {
        return new addRiskMerchantProductQuota_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRiskMerchantProductQuota_result getResult(I iface, addRiskMerchantProductQuota_args args) throws org.apache.thrift.TException {
        addRiskMerchantProductQuota_result result = new addRiskMerchantProductQuota_result();
        result.success = iface.addRiskMerchantProductQuota(args.merchantProductQuotaEntity);
        return result;
      }
    }

    public static class editRiskMerchantProductQuota<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editRiskMerchantProductQuota_args> {
      public editRiskMerchantProductQuota() {
        super("editRiskMerchantProductQuota");
      }

      public editRiskMerchantProductQuota_args getEmptyArgsInstance() {
        return new editRiskMerchantProductQuota_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editRiskMerchantProductQuota_result getResult(I iface, editRiskMerchantProductQuota_args args) throws org.apache.thrift.TException {
        editRiskMerchantProductQuota_result result = new editRiskMerchantProductQuota_result();
        result.success = iface.editRiskMerchantProductQuota(args.merchantProductQuotaEntity);
        return result;
      }
    }

    public static class addRiskProductQuota<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRiskProductQuota_args> {
      public addRiskProductQuota() {
        super("addRiskProductQuota");
      }

      public addRiskProductQuota_args getEmptyArgsInstance() {
        return new addRiskProductQuota_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRiskProductQuota_result getResult(I iface, addRiskProductQuota_args args) throws org.apache.thrift.TException {
        addRiskProductQuota_result result = new addRiskProductQuota_result();
        result.success = iface.addRiskProductQuota(args.productQuotaEntity);
        return result;
      }
    }

    public static class editRiskProductQuota<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editRiskProductQuota_args> {
      public editRiskProductQuota() {
        super("editRiskProductQuota");
      }

      public editRiskProductQuota_args getEmptyArgsInstance() {
        return new editRiskProductQuota_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editRiskProductQuota_result getResult(I iface, editRiskProductQuota_args args) throws org.apache.thrift.TException {
        editRiskProductQuota_result result = new editRiskProductQuota_result();
        result.success = iface.editRiskProductQuota(args.merchantProductQuotaEntity);
        return result;
      }
    }

    public static class addBlackorwhiteItemList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBlackorwhiteItemList_args> {
      public addBlackorwhiteItemList() {
        super("addBlackorwhiteItemList");
      }

      public addBlackorwhiteItemList_args getEmptyArgsInstance() {
        return new addBlackorwhiteItemList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addBlackorwhiteItemList_result getResult(I iface, addBlackorwhiteItemList_args args) throws org.apache.thrift.TException {
        addBlackorwhiteItemList_result result = new addBlackorwhiteItemList_result();
        result.success = iface.addBlackorwhiteItemList(args.blackorwhiteItemListEntity);
        return result;
      }
    }

    public static class editBlackorwhiteItemList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editBlackorwhiteItemList_args> {
      public editBlackorwhiteItemList() {
        super("editBlackorwhiteItemList");
      }

      public editBlackorwhiteItemList_args getEmptyArgsInstance() {
        return new editBlackorwhiteItemList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editBlackorwhiteItemList_result getResult(I iface, editBlackorwhiteItemList_args args) throws org.apache.thrift.TException {
        editBlackorwhiteItemList_result result = new editBlackorwhiteItemList_result();
        result.success = iface.editBlackorwhiteItemList(args.blackorwhiteItemListEntity);
        return result;
      }
    }

    public static class delBlackorwhiteItemList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delBlackorwhiteItemList_args> {
      public delBlackorwhiteItemList() {
        super("delBlackorwhiteItemList");
      }

      public delBlackorwhiteItemList_args getEmptyArgsInstance() {
        return new delBlackorwhiteItemList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delBlackorwhiteItemList_result getResult(I iface, delBlackorwhiteItemList_args args) throws org.apache.thrift.TException {
        delBlackorwhiteItemList_result result = new delBlackorwhiteItemList_result();
        result.success = iface.delBlackorwhiteItemList(args.blackorwhiteItemListEntity);
        return result;
      }
    }

    public static class addBlackorwhiteList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBlackorwhiteList_args> {
      public addBlackorwhiteList() {
        super("addBlackorwhiteList");
      }

      public addBlackorwhiteList_args getEmptyArgsInstance() {
        return new addBlackorwhiteList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addBlackorwhiteList_result getResult(I iface, addBlackorwhiteList_args args) throws org.apache.thrift.TException {
        addBlackorwhiteList_result result = new addBlackorwhiteList_result();
        result.success = iface.addBlackorwhiteList(args.blackorwhiteListEntity);
        return result;
      }
    }

    public static class editBlackorwhiteList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editBlackorwhiteList_args> {
      public editBlackorwhiteList() {
        super("editBlackorwhiteList");
      }

      public editBlackorwhiteList_args getEmptyArgsInstance() {
        return new editBlackorwhiteList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editBlackorwhiteList_result getResult(I iface, editBlackorwhiteList_args args) throws org.apache.thrift.TException {
        editBlackorwhiteList_result result = new editBlackorwhiteList_result();
        result.success = iface.editBlackorwhiteList(args.blackorwhiteListEntity);
        return result;
      }
    }

    public static class delBlackorwhiteList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delBlackorwhiteList_args> {
      public delBlackorwhiteList() {
        super("delBlackorwhiteList");
      }

      public delBlackorwhiteList_args getEmptyArgsInstance() {
        return new delBlackorwhiteList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delBlackorwhiteList_result getResult(I iface, delBlackorwhiteList_args args) throws org.apache.thrift.TException {
        delBlackorwhiteList_result result = new delBlackorwhiteList_result();
        result.success = iface.delBlackorwhiteList(args.blackorwhiteListEntity);
        return result;
      }
    }

    public static class addRiskIncomeQuota<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRiskIncomeQuota_args> {
      public addRiskIncomeQuota() {
        super("addRiskIncomeQuota");
      }

      public addRiskIncomeQuota_args getEmptyArgsInstance() {
        return new addRiskIncomeQuota_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRiskIncomeQuota_result getResult(I iface, addRiskIncomeQuota_args args) throws org.apache.thrift.TException {
        addRiskIncomeQuota_result result = new addRiskIncomeQuota_result();
        result.success = iface.addRiskIncomeQuota(args.blackorwhiteListEntity);
        return result;
      }
    }

    public static class editRiskIncomeQuota<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editRiskIncomeQuota_args> {
      public editRiskIncomeQuota() {
        super("editRiskIncomeQuota");
      }

      public editRiskIncomeQuota_args getEmptyArgsInstance() {
        return new editRiskIncomeQuota_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editRiskIncomeQuota_result getResult(I iface, editRiskIncomeQuota_args args) throws org.apache.thrift.TException {
        editRiskIncomeQuota_result result = new editRiskIncomeQuota_result();
        result.success = iface.editRiskIncomeQuota(args.blackorwhiteListEntity);
        return result;
      }
    }

    public static class delRiskIncomeQuota<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delRiskIncomeQuota_args> {
      public delRiskIncomeQuota() {
        super("delRiskIncomeQuota");
      }

      public delRiskIncomeQuota_args getEmptyArgsInstance() {
        return new delRiskIncomeQuota_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delRiskIncomeQuota_result getResult(I iface, delRiskIncomeQuota_args args) throws org.apache.thrift.TException {
        delRiskIncomeQuota_result result = new delRiskIncomeQuota_result();
        result.success = iface.delRiskIncomeQuota(args.blackorwhiteListEntity);
        return result;
      }
    }

    public static class addSettleIncomeInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSettleIncomeInfo_args> {
      public addSettleIncomeInfo() {
        super("addSettleIncomeInfo");
      }

      public addSettleIncomeInfo_args getEmptyArgsInstance() {
        return new addSettleIncomeInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSettleIncomeInfo_result getResult(I iface, addSettleIncomeInfo_args args) throws org.apache.thrift.TException {
        addSettleIncomeInfo_result result = new addSettleIncomeInfo_result();
        result.success = iface.addSettleIncomeInfo(args.SettleIncomeInfoEntity);
        return result;
      }
    }

    public static class editSettleIncomeInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editSettleIncomeInfo_args> {
      public editSettleIncomeInfo() {
        super("editSettleIncomeInfo");
      }

      public editSettleIncomeInfo_args getEmptyArgsInstance() {
        return new editSettleIncomeInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editSettleIncomeInfo_result getResult(I iface, editSettleIncomeInfo_args args) throws org.apache.thrift.TException {
        editSettleIncomeInfo_result result = new editSettleIncomeInfo_result();
        result.success = iface.editSettleIncomeInfo(args.SettleIncomeInfoEntity);
        return result;
      }
    }

    public static class delSettleIncomeInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delSettleIncomeInfo_args> {
      public delSettleIncomeInfo() {
        super("delSettleIncomeInfo");
      }

      public delSettleIncomeInfo_args getEmptyArgsInstance() {
        return new delSettleIncomeInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delSettleIncomeInfo_result getResult(I iface, delSettleIncomeInfo_args args) throws org.apache.thrift.TException {
        delSettleIncomeInfo_result result = new delSettleIncomeInfo_result();
        result.success = iface.delSettleIncomeInfo(args.SettleIncomeInfoEntity);
        return result;
      }
    }

    public static class addRiskLoginBlacklistInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRiskLoginBlacklistInfo_args> {
      public addRiskLoginBlacklistInfo() {
        super("addRiskLoginBlacklistInfo");
      }

      public addRiskLoginBlacklistInfo_args getEmptyArgsInstance() {
        return new addRiskLoginBlacklistInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRiskLoginBlacklistInfo_result getResult(I iface, addRiskLoginBlacklistInfo_args args) throws org.apache.thrift.TException {
        addRiskLoginBlacklistInfo_result result = new addRiskLoginBlacklistInfo_result();
        result.success = iface.addRiskLoginBlacklistInfo(args.riskLoginBlacklist);
        return result;
      }
    }

    public static class editRiskLoginBlacklistInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editRiskLoginBlacklistInfo_args> {
      public editRiskLoginBlacklistInfo() {
        super("editRiskLoginBlacklistInfo");
      }

      public editRiskLoginBlacklistInfo_args getEmptyArgsInstance() {
        return new editRiskLoginBlacklistInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editRiskLoginBlacklistInfo_result getResult(I iface, editRiskLoginBlacklistInfo_args args) throws org.apache.thrift.TException {
        editRiskLoginBlacklistInfo_result result = new editRiskLoginBlacklistInfo_result();
        result.success = iface.editRiskLoginBlacklistInfo(args.riskLoginBlacklist);
        return result;
      }
    }

    public static class delRiskLoginBlacklistInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delRiskLoginBlacklistInfo_args> {
      public delRiskLoginBlacklistInfo() {
        super("delRiskLoginBlacklistInfo");
      }

      public delRiskLoginBlacklistInfo_args getEmptyArgsInstance() {
        return new delRiskLoginBlacklistInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delRiskLoginBlacklistInfo_result getResult(I iface, delRiskLoginBlacklistInfo_args args) throws org.apache.thrift.TException {
        delRiskLoginBlacklistInfo_result result = new delRiskLoginBlacklistInfo_result();
        result.success = iface.delRiskLoginBlacklistInfo(args.riskLoginBlacklist);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getRiskRunStatus", new getRiskRunStatus());
      processMap.put("addRiskMerchantProductQuota", new addRiskMerchantProductQuota());
      processMap.put("editRiskMerchantProductQuota", new editRiskMerchantProductQuota());
      processMap.put("addRiskProductQuota", new addRiskProductQuota());
      processMap.put("editRiskProductQuota", new editRiskProductQuota());
      processMap.put("addBlackorwhiteItemList", new addBlackorwhiteItemList());
      processMap.put("editBlackorwhiteItemList", new editBlackorwhiteItemList());
      processMap.put("delBlackorwhiteItemList", new delBlackorwhiteItemList());
      processMap.put("addBlackorwhiteList", new addBlackorwhiteList());
      processMap.put("editBlackorwhiteList", new editBlackorwhiteList());
      processMap.put("delBlackorwhiteList", new delBlackorwhiteList());
      processMap.put("addRiskIncomeQuota", new addRiskIncomeQuota());
      processMap.put("editRiskIncomeQuota", new editRiskIncomeQuota());
      processMap.put("delRiskIncomeQuota", new delRiskIncomeQuota());
      processMap.put("addSettleIncomeInfo", new addSettleIncomeInfo());
      processMap.put("editSettleIncomeInfo", new editSettleIncomeInfo());
      processMap.put("delSettleIncomeInfo", new delSettleIncomeInfo());
      processMap.put("addRiskLoginBlacklistInfo", new addRiskLoginBlacklistInfo());
      processMap.put("editRiskLoginBlacklistInfo", new editRiskLoginBlacklistInfo());
      processMap.put("delRiskLoginBlacklistInfo", new delRiskLoginBlacklistInfo());
      return processMap;
    }

    public static class getRiskRunStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRiskRunStatus_args, String> {
      public getRiskRunStatus() {
        super("getRiskRunStatus");
      }

      public getRiskRunStatus_args getEmptyArgsInstance() {
        return new getRiskRunStatus_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getRiskRunStatus_result result = new getRiskRunStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRiskRunStatus_result result = new getRiskRunStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRiskRunStatus_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getRiskRunStatus(resultHandler);
      }
    }

    public static class addRiskMerchantProductQuota<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRiskMerchantProductQuota_args, String> {
      public addRiskMerchantProductQuota() {
        super("addRiskMerchantProductQuota");
      }

      public addRiskMerchantProductQuota_args getEmptyArgsInstance() {
        return new addRiskMerchantProductQuota_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addRiskMerchantProductQuota_result result = new addRiskMerchantProductQuota_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRiskMerchantProductQuota_result result = new addRiskMerchantProductQuota_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRiskMerchantProductQuota_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addRiskMerchantProductQuota(args.merchantProductQuotaEntity,resultHandler);
      }
    }

    public static class editRiskMerchantProductQuota<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editRiskMerchantProductQuota_args, String> {
      public editRiskMerchantProductQuota() {
        super("editRiskMerchantProductQuota");
      }

      public editRiskMerchantProductQuota_args getEmptyArgsInstance() {
        return new editRiskMerchantProductQuota_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editRiskMerchantProductQuota_result result = new editRiskMerchantProductQuota_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editRiskMerchantProductQuota_result result = new editRiskMerchantProductQuota_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editRiskMerchantProductQuota_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editRiskMerchantProductQuota(args.merchantProductQuotaEntity,resultHandler);
      }
    }

    public static class addRiskProductQuota<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRiskProductQuota_args, String> {
      public addRiskProductQuota() {
        super("addRiskProductQuota");
      }

      public addRiskProductQuota_args getEmptyArgsInstance() {
        return new addRiskProductQuota_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addRiskProductQuota_result result = new addRiskProductQuota_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRiskProductQuota_result result = new addRiskProductQuota_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRiskProductQuota_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addRiskProductQuota(args.productQuotaEntity,resultHandler);
      }
    }

    public static class editRiskProductQuota<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editRiskProductQuota_args, String> {
      public editRiskProductQuota() {
        super("editRiskProductQuota");
      }

      public editRiskProductQuota_args getEmptyArgsInstance() {
        return new editRiskProductQuota_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editRiskProductQuota_result result = new editRiskProductQuota_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editRiskProductQuota_result result = new editRiskProductQuota_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editRiskProductQuota_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editRiskProductQuota(args.merchantProductQuotaEntity,resultHandler);
      }
    }

    public static class addBlackorwhiteItemList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBlackorwhiteItemList_args, String> {
      public addBlackorwhiteItemList() {
        super("addBlackorwhiteItemList");
      }

      public addBlackorwhiteItemList_args getEmptyArgsInstance() {
        return new addBlackorwhiteItemList_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addBlackorwhiteItemList_result result = new addBlackorwhiteItemList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addBlackorwhiteItemList_result result = new addBlackorwhiteItemList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBlackorwhiteItemList_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addBlackorwhiteItemList(args.blackorwhiteItemListEntity,resultHandler);
      }
    }

    public static class editBlackorwhiteItemList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editBlackorwhiteItemList_args, String> {
      public editBlackorwhiteItemList() {
        super("editBlackorwhiteItemList");
      }

      public editBlackorwhiteItemList_args getEmptyArgsInstance() {
        return new editBlackorwhiteItemList_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editBlackorwhiteItemList_result result = new editBlackorwhiteItemList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editBlackorwhiteItemList_result result = new editBlackorwhiteItemList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editBlackorwhiteItemList_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editBlackorwhiteItemList(args.blackorwhiteItemListEntity,resultHandler);
      }
    }

    public static class delBlackorwhiteItemList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delBlackorwhiteItemList_args, String> {
      public delBlackorwhiteItemList() {
        super("delBlackorwhiteItemList");
      }

      public delBlackorwhiteItemList_args getEmptyArgsInstance() {
        return new delBlackorwhiteItemList_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            delBlackorwhiteItemList_result result = new delBlackorwhiteItemList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delBlackorwhiteItemList_result result = new delBlackorwhiteItemList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delBlackorwhiteItemList_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.delBlackorwhiteItemList(args.blackorwhiteItemListEntity,resultHandler);
      }
    }

    public static class addBlackorwhiteList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBlackorwhiteList_args, String> {
      public addBlackorwhiteList() {
        super("addBlackorwhiteList");
      }

      public addBlackorwhiteList_args getEmptyArgsInstance() {
        return new addBlackorwhiteList_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addBlackorwhiteList_result result = new addBlackorwhiteList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addBlackorwhiteList_result result = new addBlackorwhiteList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBlackorwhiteList_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addBlackorwhiteList(args.blackorwhiteListEntity,resultHandler);
      }
    }

    public static class editBlackorwhiteList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editBlackorwhiteList_args, String> {
      public editBlackorwhiteList() {
        super("editBlackorwhiteList");
      }

      public editBlackorwhiteList_args getEmptyArgsInstance() {
        return new editBlackorwhiteList_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editBlackorwhiteList_result result = new editBlackorwhiteList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editBlackorwhiteList_result result = new editBlackorwhiteList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editBlackorwhiteList_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editBlackorwhiteList(args.blackorwhiteListEntity,resultHandler);
      }
    }

    public static class delBlackorwhiteList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delBlackorwhiteList_args, String> {
      public delBlackorwhiteList() {
        super("delBlackorwhiteList");
      }

      public delBlackorwhiteList_args getEmptyArgsInstance() {
        return new delBlackorwhiteList_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            delBlackorwhiteList_result result = new delBlackorwhiteList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delBlackorwhiteList_result result = new delBlackorwhiteList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delBlackorwhiteList_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.delBlackorwhiteList(args.blackorwhiteListEntity,resultHandler);
      }
    }

    public static class addRiskIncomeQuota<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRiskIncomeQuota_args, String> {
      public addRiskIncomeQuota() {
        super("addRiskIncomeQuota");
      }

      public addRiskIncomeQuota_args getEmptyArgsInstance() {
        return new addRiskIncomeQuota_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addRiskIncomeQuota_result result = new addRiskIncomeQuota_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRiskIncomeQuota_result result = new addRiskIncomeQuota_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRiskIncomeQuota_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addRiskIncomeQuota(args.blackorwhiteListEntity,resultHandler);
      }
    }

    public static class editRiskIncomeQuota<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editRiskIncomeQuota_args, String> {
      public editRiskIncomeQuota() {
        super("editRiskIncomeQuota");
      }

      public editRiskIncomeQuota_args getEmptyArgsInstance() {
        return new editRiskIncomeQuota_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editRiskIncomeQuota_result result = new editRiskIncomeQuota_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editRiskIncomeQuota_result result = new editRiskIncomeQuota_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editRiskIncomeQuota_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editRiskIncomeQuota(args.blackorwhiteListEntity,resultHandler);
      }
    }

    public static class delRiskIncomeQuota<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delRiskIncomeQuota_args, String> {
      public delRiskIncomeQuota() {
        super("delRiskIncomeQuota");
      }

      public delRiskIncomeQuota_args getEmptyArgsInstance() {
        return new delRiskIncomeQuota_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            delRiskIncomeQuota_result result = new delRiskIncomeQuota_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delRiskIncomeQuota_result result = new delRiskIncomeQuota_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delRiskIncomeQuota_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.delRiskIncomeQuota(args.blackorwhiteListEntity,resultHandler);
      }
    }

    public static class addSettleIncomeInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSettleIncomeInfo_args, String> {
      public addSettleIncomeInfo() {
        super("addSettleIncomeInfo");
      }

      public addSettleIncomeInfo_args getEmptyArgsInstance() {
        return new addSettleIncomeInfo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addSettleIncomeInfo_result result = new addSettleIncomeInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSettleIncomeInfo_result result = new addSettleIncomeInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSettleIncomeInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addSettleIncomeInfo(args.SettleIncomeInfoEntity,resultHandler);
      }
    }

    public static class editSettleIncomeInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editSettleIncomeInfo_args, String> {
      public editSettleIncomeInfo() {
        super("editSettleIncomeInfo");
      }

      public editSettleIncomeInfo_args getEmptyArgsInstance() {
        return new editSettleIncomeInfo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editSettleIncomeInfo_result result = new editSettleIncomeInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editSettleIncomeInfo_result result = new editSettleIncomeInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editSettleIncomeInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editSettleIncomeInfo(args.SettleIncomeInfoEntity,resultHandler);
      }
    }

    public static class delSettleIncomeInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delSettleIncomeInfo_args, String> {
      public delSettleIncomeInfo() {
        super("delSettleIncomeInfo");
      }

      public delSettleIncomeInfo_args getEmptyArgsInstance() {
        return new delSettleIncomeInfo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            delSettleIncomeInfo_result result = new delSettleIncomeInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delSettleIncomeInfo_result result = new delSettleIncomeInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delSettleIncomeInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.delSettleIncomeInfo(args.SettleIncomeInfoEntity,resultHandler);
      }
    }

    public static class addRiskLoginBlacklistInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRiskLoginBlacklistInfo_args, String> {
      public addRiskLoginBlacklistInfo() {
        super("addRiskLoginBlacklistInfo");
      }

      public addRiskLoginBlacklistInfo_args getEmptyArgsInstance() {
        return new addRiskLoginBlacklistInfo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addRiskLoginBlacklistInfo_result result = new addRiskLoginBlacklistInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRiskLoginBlacklistInfo_result result = new addRiskLoginBlacklistInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRiskLoginBlacklistInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addRiskLoginBlacklistInfo(args.riskLoginBlacklist,resultHandler);
      }
    }

    public static class editRiskLoginBlacklistInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editRiskLoginBlacklistInfo_args, String> {
      public editRiskLoginBlacklistInfo() {
        super("editRiskLoginBlacklistInfo");
      }

      public editRiskLoginBlacklistInfo_args getEmptyArgsInstance() {
        return new editRiskLoginBlacklistInfo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editRiskLoginBlacklistInfo_result result = new editRiskLoginBlacklistInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editRiskLoginBlacklistInfo_result result = new editRiskLoginBlacklistInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editRiskLoginBlacklistInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editRiskLoginBlacklistInfo(args.riskLoginBlacklist,resultHandler);
      }
    }

    public static class delRiskLoginBlacklistInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delRiskLoginBlacklistInfo_args, String> {
      public delRiskLoginBlacklistInfo() {
        super("delRiskLoginBlacklistInfo");
      }

      public delRiskLoginBlacklistInfo_args getEmptyArgsInstance() {
        return new delRiskLoginBlacklistInfo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            delRiskLoginBlacklistInfo_result result = new delRiskLoginBlacklistInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delRiskLoginBlacklistInfo_result result = new delRiskLoginBlacklistInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delRiskLoginBlacklistInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.delRiskLoginBlacklistInfo(args.riskLoginBlacklist,resultHandler);
      }
    }

  }

  public static class getRiskRunStatus_args implements org.apache.thrift.TBase<getRiskRunStatus_args, getRiskRunStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRiskRunStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRiskRunStatus_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRiskRunStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRiskRunStatus_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRiskRunStatus_args.class, metaDataMap);
    }

    public getRiskRunStatus_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRiskRunStatus_args(getRiskRunStatus_args other) {
    }

    public getRiskRunStatus_args deepCopy() {
      return new getRiskRunStatus_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRiskRunStatus_args)
        return this.equals((getRiskRunStatus_args)that);
      return false;
    }

    public boolean equals(getRiskRunStatus_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getRiskRunStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRiskRunStatus_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRiskRunStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getRiskRunStatus_argsStandardScheme getScheme() {
        return new getRiskRunStatus_argsStandardScheme();
      }
    }

    private static class getRiskRunStatus_argsStandardScheme extends StandardScheme<getRiskRunStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRiskRunStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRiskRunStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRiskRunStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getRiskRunStatus_argsTupleScheme getScheme() {
        return new getRiskRunStatus_argsTupleScheme();
      }
    }

    private static class getRiskRunStatus_argsTupleScheme extends TupleScheme<getRiskRunStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRiskRunStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRiskRunStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getRiskRunStatus_result implements org.apache.thrift.TBase<getRiskRunStatus_result, getRiskRunStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRiskRunStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRiskRunStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRiskRunStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRiskRunStatus_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRiskRunStatus_result.class, metaDataMap);
    }

    public getRiskRunStatus_result() {
    }

    public getRiskRunStatus_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRiskRunStatus_result(getRiskRunStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getRiskRunStatus_result deepCopy() {
      return new getRiskRunStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getRiskRunStatus_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRiskRunStatus_result)
        return this.equals((getRiskRunStatus_result)that);
      return false;
    }

    public boolean equals(getRiskRunStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRiskRunStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRiskRunStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRiskRunStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getRiskRunStatus_resultStandardScheme getScheme() {
        return new getRiskRunStatus_resultStandardScheme();
      }
    }

    private static class getRiskRunStatus_resultStandardScheme extends StandardScheme<getRiskRunStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRiskRunStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRiskRunStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRiskRunStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getRiskRunStatus_resultTupleScheme getScheme() {
        return new getRiskRunStatus_resultTupleScheme();
      }
    }

    private static class getRiskRunStatus_resultTupleScheme extends TupleScheme<getRiskRunStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRiskRunStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRiskRunStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addRiskMerchantProductQuota_args implements org.apache.thrift.TBase<addRiskMerchantProductQuota_args, addRiskMerchantProductQuota_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRiskMerchantProductQuota_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRiskMerchantProductQuota_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_PRODUCT_QUOTA_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantProductQuotaEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRiskMerchantProductQuota_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRiskMerchantProductQuota_argsTupleSchemeFactory());
    }

    public String merchantProductQuotaEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_PRODUCT_QUOTA_ENTITY((short)1, "merchantProductQuotaEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_PRODUCT_QUOTA_ENTITY
            return MERCHANT_PRODUCT_QUOTA_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_PRODUCT_QUOTA_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("merchantProductQuotaEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRiskMerchantProductQuota_args.class, metaDataMap);
    }

    public addRiskMerchantProductQuota_args() {
    }

    public addRiskMerchantProductQuota_args(
      String merchantProductQuotaEntity)
    {
      this();
      this.merchantProductQuotaEntity = merchantProductQuotaEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRiskMerchantProductQuota_args(addRiskMerchantProductQuota_args other) {
      if (other.isSetMerchantProductQuotaEntity()) {
        this.merchantProductQuotaEntity = other.merchantProductQuotaEntity;
      }
    }

    public addRiskMerchantProductQuota_args deepCopy() {
      return new addRiskMerchantProductQuota_args(this);
    }

    @Override
    public void clear() {
      this.merchantProductQuotaEntity = null;
    }

    public String getMerchantProductQuotaEntity() {
      return this.merchantProductQuotaEntity;
    }

    public addRiskMerchantProductQuota_args setMerchantProductQuotaEntity(String merchantProductQuotaEntity) {
      this.merchantProductQuotaEntity = merchantProductQuotaEntity;
      return this;
    }

    public void unsetMerchantProductQuotaEntity() {
      this.merchantProductQuotaEntity = null;
    }

    /** Returns true if field merchantProductQuotaEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantProductQuotaEntity() {
      return this.merchantProductQuotaEntity != null;
    }

    public void setMerchantProductQuotaEntityIsSet(boolean value) {
      if (!value) {
        this.merchantProductQuotaEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_PRODUCT_QUOTA_ENTITY:
        if (value == null) {
          unsetMerchantProductQuotaEntity();
        } else {
          setMerchantProductQuotaEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_PRODUCT_QUOTA_ENTITY:
        return getMerchantProductQuotaEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_PRODUCT_QUOTA_ENTITY:
        return isSetMerchantProductQuotaEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRiskMerchantProductQuota_args)
        return this.equals((addRiskMerchantProductQuota_args)that);
      return false;
    }

    public boolean equals(addRiskMerchantProductQuota_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantProductQuotaEntity = true && this.isSetMerchantProductQuotaEntity();
      boolean that_present_merchantProductQuotaEntity = true && that.isSetMerchantProductQuotaEntity();
      if (this_present_merchantProductQuotaEntity || that_present_merchantProductQuotaEntity) {
        if (!(this_present_merchantProductQuotaEntity && that_present_merchantProductQuotaEntity))
          return false;
        if (!this.merchantProductQuotaEntity.equals(that.merchantProductQuotaEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantProductQuotaEntity = true && (isSetMerchantProductQuotaEntity());
      list.add(present_merchantProductQuotaEntity);
      if (present_merchantProductQuotaEntity)
        list.add(merchantProductQuotaEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRiskMerchantProductQuota_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantProductQuotaEntity()).compareTo(other.isSetMerchantProductQuotaEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantProductQuotaEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantProductQuotaEntity, other.merchantProductQuotaEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRiskMerchantProductQuota_args(");
      boolean first = true;

      sb.append("merchantProductQuotaEntity:");
      if (this.merchantProductQuotaEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantProductQuotaEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRiskMerchantProductQuota_argsStandardSchemeFactory implements SchemeFactory {
      public addRiskMerchantProductQuota_argsStandardScheme getScheme() {
        return new addRiskMerchantProductQuota_argsStandardScheme();
      }
    }

    private static class addRiskMerchantProductQuota_argsStandardScheme extends StandardScheme<addRiskMerchantProductQuota_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRiskMerchantProductQuota_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_PRODUCT_QUOTA_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantProductQuotaEntity = iprot.readString();
                struct.setMerchantProductQuotaEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRiskMerchantProductQuota_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantProductQuotaEntity != null) {
          oprot.writeFieldBegin(MERCHANT_PRODUCT_QUOTA_ENTITY_FIELD_DESC);
          oprot.writeString(struct.merchantProductQuotaEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRiskMerchantProductQuota_argsTupleSchemeFactory implements SchemeFactory {
      public addRiskMerchantProductQuota_argsTupleScheme getScheme() {
        return new addRiskMerchantProductQuota_argsTupleScheme();
      }
    }

    private static class addRiskMerchantProductQuota_argsTupleScheme extends TupleScheme<addRiskMerchantProductQuota_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRiskMerchantProductQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantProductQuotaEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantProductQuotaEntity()) {
          oprot.writeString(struct.merchantProductQuotaEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRiskMerchantProductQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantProductQuotaEntity = iprot.readString();
          struct.setMerchantProductQuotaEntityIsSet(true);
        }
      }
    }

  }

  public static class addRiskMerchantProductQuota_result implements org.apache.thrift.TBase<addRiskMerchantProductQuota_result, addRiskMerchantProductQuota_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRiskMerchantProductQuota_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRiskMerchantProductQuota_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRiskMerchantProductQuota_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRiskMerchantProductQuota_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRiskMerchantProductQuota_result.class, metaDataMap);
    }

    public addRiskMerchantProductQuota_result() {
    }

    public addRiskMerchantProductQuota_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRiskMerchantProductQuota_result(addRiskMerchantProductQuota_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addRiskMerchantProductQuota_result deepCopy() {
      return new addRiskMerchantProductQuota_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addRiskMerchantProductQuota_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRiskMerchantProductQuota_result)
        return this.equals((addRiskMerchantProductQuota_result)that);
      return false;
    }

    public boolean equals(addRiskMerchantProductQuota_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRiskMerchantProductQuota_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRiskMerchantProductQuota_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRiskMerchantProductQuota_resultStandardSchemeFactory implements SchemeFactory {
      public addRiskMerchantProductQuota_resultStandardScheme getScheme() {
        return new addRiskMerchantProductQuota_resultStandardScheme();
      }
    }

    private static class addRiskMerchantProductQuota_resultStandardScheme extends StandardScheme<addRiskMerchantProductQuota_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRiskMerchantProductQuota_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRiskMerchantProductQuota_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRiskMerchantProductQuota_resultTupleSchemeFactory implements SchemeFactory {
      public addRiskMerchantProductQuota_resultTupleScheme getScheme() {
        return new addRiskMerchantProductQuota_resultTupleScheme();
      }
    }

    private static class addRiskMerchantProductQuota_resultTupleScheme extends TupleScheme<addRiskMerchantProductQuota_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRiskMerchantProductQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRiskMerchantProductQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editRiskMerchantProductQuota_args implements org.apache.thrift.TBase<editRiskMerchantProductQuota_args, editRiskMerchantProductQuota_args._Fields>, java.io.Serializable, Cloneable, Comparable<editRiskMerchantProductQuota_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editRiskMerchantProductQuota_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_PRODUCT_QUOTA_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantProductQuotaEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editRiskMerchantProductQuota_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editRiskMerchantProductQuota_argsTupleSchemeFactory());
    }

    public String merchantProductQuotaEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_PRODUCT_QUOTA_ENTITY((short)1, "merchantProductQuotaEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_PRODUCT_QUOTA_ENTITY
            return MERCHANT_PRODUCT_QUOTA_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_PRODUCT_QUOTA_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("merchantProductQuotaEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editRiskMerchantProductQuota_args.class, metaDataMap);
    }

    public editRiskMerchantProductQuota_args() {
    }

    public editRiskMerchantProductQuota_args(
      String merchantProductQuotaEntity)
    {
      this();
      this.merchantProductQuotaEntity = merchantProductQuotaEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editRiskMerchantProductQuota_args(editRiskMerchantProductQuota_args other) {
      if (other.isSetMerchantProductQuotaEntity()) {
        this.merchantProductQuotaEntity = other.merchantProductQuotaEntity;
      }
    }

    public editRiskMerchantProductQuota_args deepCopy() {
      return new editRiskMerchantProductQuota_args(this);
    }

    @Override
    public void clear() {
      this.merchantProductQuotaEntity = null;
    }

    public String getMerchantProductQuotaEntity() {
      return this.merchantProductQuotaEntity;
    }

    public editRiskMerchantProductQuota_args setMerchantProductQuotaEntity(String merchantProductQuotaEntity) {
      this.merchantProductQuotaEntity = merchantProductQuotaEntity;
      return this;
    }

    public void unsetMerchantProductQuotaEntity() {
      this.merchantProductQuotaEntity = null;
    }

    /** Returns true if field merchantProductQuotaEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantProductQuotaEntity() {
      return this.merchantProductQuotaEntity != null;
    }

    public void setMerchantProductQuotaEntityIsSet(boolean value) {
      if (!value) {
        this.merchantProductQuotaEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_PRODUCT_QUOTA_ENTITY:
        if (value == null) {
          unsetMerchantProductQuotaEntity();
        } else {
          setMerchantProductQuotaEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_PRODUCT_QUOTA_ENTITY:
        return getMerchantProductQuotaEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_PRODUCT_QUOTA_ENTITY:
        return isSetMerchantProductQuotaEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editRiskMerchantProductQuota_args)
        return this.equals((editRiskMerchantProductQuota_args)that);
      return false;
    }

    public boolean equals(editRiskMerchantProductQuota_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantProductQuotaEntity = true && this.isSetMerchantProductQuotaEntity();
      boolean that_present_merchantProductQuotaEntity = true && that.isSetMerchantProductQuotaEntity();
      if (this_present_merchantProductQuotaEntity || that_present_merchantProductQuotaEntity) {
        if (!(this_present_merchantProductQuotaEntity && that_present_merchantProductQuotaEntity))
          return false;
        if (!this.merchantProductQuotaEntity.equals(that.merchantProductQuotaEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantProductQuotaEntity = true && (isSetMerchantProductQuotaEntity());
      list.add(present_merchantProductQuotaEntity);
      if (present_merchantProductQuotaEntity)
        list.add(merchantProductQuotaEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(editRiskMerchantProductQuota_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantProductQuotaEntity()).compareTo(other.isSetMerchantProductQuotaEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantProductQuotaEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantProductQuotaEntity, other.merchantProductQuotaEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editRiskMerchantProductQuota_args(");
      boolean first = true;

      sb.append("merchantProductQuotaEntity:");
      if (this.merchantProductQuotaEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantProductQuotaEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editRiskMerchantProductQuota_argsStandardSchemeFactory implements SchemeFactory {
      public editRiskMerchantProductQuota_argsStandardScheme getScheme() {
        return new editRiskMerchantProductQuota_argsStandardScheme();
      }
    }

    private static class editRiskMerchantProductQuota_argsStandardScheme extends StandardScheme<editRiskMerchantProductQuota_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editRiskMerchantProductQuota_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_PRODUCT_QUOTA_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantProductQuotaEntity = iprot.readString();
                struct.setMerchantProductQuotaEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editRiskMerchantProductQuota_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantProductQuotaEntity != null) {
          oprot.writeFieldBegin(MERCHANT_PRODUCT_QUOTA_ENTITY_FIELD_DESC);
          oprot.writeString(struct.merchantProductQuotaEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editRiskMerchantProductQuota_argsTupleSchemeFactory implements SchemeFactory {
      public editRiskMerchantProductQuota_argsTupleScheme getScheme() {
        return new editRiskMerchantProductQuota_argsTupleScheme();
      }
    }

    private static class editRiskMerchantProductQuota_argsTupleScheme extends TupleScheme<editRiskMerchantProductQuota_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editRiskMerchantProductQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantProductQuotaEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantProductQuotaEntity()) {
          oprot.writeString(struct.merchantProductQuotaEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editRiskMerchantProductQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantProductQuotaEntity = iprot.readString();
          struct.setMerchantProductQuotaEntityIsSet(true);
        }
      }
    }

  }

  public static class editRiskMerchantProductQuota_result implements org.apache.thrift.TBase<editRiskMerchantProductQuota_result, editRiskMerchantProductQuota_result._Fields>, java.io.Serializable, Cloneable, Comparable<editRiskMerchantProductQuota_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editRiskMerchantProductQuota_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editRiskMerchantProductQuota_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editRiskMerchantProductQuota_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editRiskMerchantProductQuota_result.class, metaDataMap);
    }

    public editRiskMerchantProductQuota_result() {
    }

    public editRiskMerchantProductQuota_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editRiskMerchantProductQuota_result(editRiskMerchantProductQuota_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editRiskMerchantProductQuota_result deepCopy() {
      return new editRiskMerchantProductQuota_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editRiskMerchantProductQuota_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editRiskMerchantProductQuota_result)
        return this.equals((editRiskMerchantProductQuota_result)that);
      return false;
    }

    public boolean equals(editRiskMerchantProductQuota_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editRiskMerchantProductQuota_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editRiskMerchantProductQuota_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editRiskMerchantProductQuota_resultStandardSchemeFactory implements SchemeFactory {
      public editRiskMerchantProductQuota_resultStandardScheme getScheme() {
        return new editRiskMerchantProductQuota_resultStandardScheme();
      }
    }

    private static class editRiskMerchantProductQuota_resultStandardScheme extends StandardScheme<editRiskMerchantProductQuota_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editRiskMerchantProductQuota_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editRiskMerchantProductQuota_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editRiskMerchantProductQuota_resultTupleSchemeFactory implements SchemeFactory {
      public editRiskMerchantProductQuota_resultTupleScheme getScheme() {
        return new editRiskMerchantProductQuota_resultTupleScheme();
      }
    }

    private static class editRiskMerchantProductQuota_resultTupleScheme extends TupleScheme<editRiskMerchantProductQuota_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editRiskMerchantProductQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editRiskMerchantProductQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addRiskProductQuota_args implements org.apache.thrift.TBase<addRiskProductQuota_args, addRiskProductQuota_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRiskProductQuota_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRiskProductQuota_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_QUOTA_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("productQuotaEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRiskProductQuota_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRiskProductQuota_argsTupleSchemeFactory());
    }

    public String productQuotaEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_QUOTA_ENTITY((short)1, "productQuotaEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_QUOTA_ENTITY
            return PRODUCT_QUOTA_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_QUOTA_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("productQuotaEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRiskProductQuota_args.class, metaDataMap);
    }

    public addRiskProductQuota_args() {
    }

    public addRiskProductQuota_args(
      String productQuotaEntity)
    {
      this();
      this.productQuotaEntity = productQuotaEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRiskProductQuota_args(addRiskProductQuota_args other) {
      if (other.isSetProductQuotaEntity()) {
        this.productQuotaEntity = other.productQuotaEntity;
      }
    }

    public addRiskProductQuota_args deepCopy() {
      return new addRiskProductQuota_args(this);
    }

    @Override
    public void clear() {
      this.productQuotaEntity = null;
    }

    public String getProductQuotaEntity() {
      return this.productQuotaEntity;
    }

    public addRiskProductQuota_args setProductQuotaEntity(String productQuotaEntity) {
      this.productQuotaEntity = productQuotaEntity;
      return this;
    }

    public void unsetProductQuotaEntity() {
      this.productQuotaEntity = null;
    }

    /** Returns true if field productQuotaEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetProductQuotaEntity() {
      return this.productQuotaEntity != null;
    }

    public void setProductQuotaEntityIsSet(boolean value) {
      if (!value) {
        this.productQuotaEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_QUOTA_ENTITY:
        if (value == null) {
          unsetProductQuotaEntity();
        } else {
          setProductQuotaEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_QUOTA_ENTITY:
        return getProductQuotaEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_QUOTA_ENTITY:
        return isSetProductQuotaEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRiskProductQuota_args)
        return this.equals((addRiskProductQuota_args)that);
      return false;
    }

    public boolean equals(addRiskProductQuota_args that) {
      if (that == null)
        return false;

      boolean this_present_productQuotaEntity = true && this.isSetProductQuotaEntity();
      boolean that_present_productQuotaEntity = true && that.isSetProductQuotaEntity();
      if (this_present_productQuotaEntity || that_present_productQuotaEntity) {
        if (!(this_present_productQuotaEntity && that_present_productQuotaEntity))
          return false;
        if (!this.productQuotaEntity.equals(that.productQuotaEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productQuotaEntity = true && (isSetProductQuotaEntity());
      list.add(present_productQuotaEntity);
      if (present_productQuotaEntity)
        list.add(productQuotaEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRiskProductQuota_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductQuotaEntity()).compareTo(other.isSetProductQuotaEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductQuotaEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productQuotaEntity, other.productQuotaEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRiskProductQuota_args(");
      boolean first = true;

      sb.append("productQuotaEntity:");
      if (this.productQuotaEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.productQuotaEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRiskProductQuota_argsStandardSchemeFactory implements SchemeFactory {
      public addRiskProductQuota_argsStandardScheme getScheme() {
        return new addRiskProductQuota_argsStandardScheme();
      }
    }

    private static class addRiskProductQuota_argsStandardScheme extends StandardScheme<addRiskProductQuota_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRiskProductQuota_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_QUOTA_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productQuotaEntity = iprot.readString();
                struct.setProductQuotaEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRiskProductQuota_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productQuotaEntity != null) {
          oprot.writeFieldBegin(PRODUCT_QUOTA_ENTITY_FIELD_DESC);
          oprot.writeString(struct.productQuotaEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRiskProductQuota_argsTupleSchemeFactory implements SchemeFactory {
      public addRiskProductQuota_argsTupleScheme getScheme() {
        return new addRiskProductQuota_argsTupleScheme();
      }
    }

    private static class addRiskProductQuota_argsTupleScheme extends TupleScheme<addRiskProductQuota_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRiskProductQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductQuotaEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductQuotaEntity()) {
          oprot.writeString(struct.productQuotaEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRiskProductQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productQuotaEntity = iprot.readString();
          struct.setProductQuotaEntityIsSet(true);
        }
      }
    }

  }

  public static class addRiskProductQuota_result implements org.apache.thrift.TBase<addRiskProductQuota_result, addRiskProductQuota_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRiskProductQuota_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRiskProductQuota_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRiskProductQuota_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRiskProductQuota_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRiskProductQuota_result.class, metaDataMap);
    }

    public addRiskProductQuota_result() {
    }

    public addRiskProductQuota_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRiskProductQuota_result(addRiskProductQuota_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addRiskProductQuota_result deepCopy() {
      return new addRiskProductQuota_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addRiskProductQuota_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRiskProductQuota_result)
        return this.equals((addRiskProductQuota_result)that);
      return false;
    }

    public boolean equals(addRiskProductQuota_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRiskProductQuota_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRiskProductQuota_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRiskProductQuota_resultStandardSchemeFactory implements SchemeFactory {
      public addRiskProductQuota_resultStandardScheme getScheme() {
        return new addRiskProductQuota_resultStandardScheme();
      }
    }

    private static class addRiskProductQuota_resultStandardScheme extends StandardScheme<addRiskProductQuota_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRiskProductQuota_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRiskProductQuota_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRiskProductQuota_resultTupleSchemeFactory implements SchemeFactory {
      public addRiskProductQuota_resultTupleScheme getScheme() {
        return new addRiskProductQuota_resultTupleScheme();
      }
    }

    private static class addRiskProductQuota_resultTupleScheme extends TupleScheme<addRiskProductQuota_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRiskProductQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRiskProductQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editRiskProductQuota_args implements org.apache.thrift.TBase<editRiskProductQuota_args, editRiskProductQuota_args._Fields>, java.io.Serializable, Cloneable, Comparable<editRiskProductQuota_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editRiskProductQuota_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_PRODUCT_QUOTA_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantProductQuotaEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editRiskProductQuota_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editRiskProductQuota_argsTupleSchemeFactory());
    }

    public String merchantProductQuotaEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_PRODUCT_QUOTA_ENTITY((short)1, "merchantProductQuotaEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_PRODUCT_QUOTA_ENTITY
            return MERCHANT_PRODUCT_QUOTA_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_PRODUCT_QUOTA_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("merchantProductQuotaEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editRiskProductQuota_args.class, metaDataMap);
    }

    public editRiskProductQuota_args() {
    }

    public editRiskProductQuota_args(
      String merchantProductQuotaEntity)
    {
      this();
      this.merchantProductQuotaEntity = merchantProductQuotaEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editRiskProductQuota_args(editRiskProductQuota_args other) {
      if (other.isSetMerchantProductQuotaEntity()) {
        this.merchantProductQuotaEntity = other.merchantProductQuotaEntity;
      }
    }

    public editRiskProductQuota_args deepCopy() {
      return new editRiskProductQuota_args(this);
    }

    @Override
    public void clear() {
      this.merchantProductQuotaEntity = null;
    }

    public String getMerchantProductQuotaEntity() {
      return this.merchantProductQuotaEntity;
    }

    public editRiskProductQuota_args setMerchantProductQuotaEntity(String merchantProductQuotaEntity) {
      this.merchantProductQuotaEntity = merchantProductQuotaEntity;
      return this;
    }

    public void unsetMerchantProductQuotaEntity() {
      this.merchantProductQuotaEntity = null;
    }

    /** Returns true if field merchantProductQuotaEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantProductQuotaEntity() {
      return this.merchantProductQuotaEntity != null;
    }

    public void setMerchantProductQuotaEntityIsSet(boolean value) {
      if (!value) {
        this.merchantProductQuotaEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_PRODUCT_QUOTA_ENTITY:
        if (value == null) {
          unsetMerchantProductQuotaEntity();
        } else {
          setMerchantProductQuotaEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_PRODUCT_QUOTA_ENTITY:
        return getMerchantProductQuotaEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_PRODUCT_QUOTA_ENTITY:
        return isSetMerchantProductQuotaEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editRiskProductQuota_args)
        return this.equals((editRiskProductQuota_args)that);
      return false;
    }

    public boolean equals(editRiskProductQuota_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantProductQuotaEntity = true && this.isSetMerchantProductQuotaEntity();
      boolean that_present_merchantProductQuotaEntity = true && that.isSetMerchantProductQuotaEntity();
      if (this_present_merchantProductQuotaEntity || that_present_merchantProductQuotaEntity) {
        if (!(this_present_merchantProductQuotaEntity && that_present_merchantProductQuotaEntity))
          return false;
        if (!this.merchantProductQuotaEntity.equals(that.merchantProductQuotaEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantProductQuotaEntity = true && (isSetMerchantProductQuotaEntity());
      list.add(present_merchantProductQuotaEntity);
      if (present_merchantProductQuotaEntity)
        list.add(merchantProductQuotaEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(editRiskProductQuota_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantProductQuotaEntity()).compareTo(other.isSetMerchantProductQuotaEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantProductQuotaEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantProductQuotaEntity, other.merchantProductQuotaEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editRiskProductQuota_args(");
      boolean first = true;

      sb.append("merchantProductQuotaEntity:");
      if (this.merchantProductQuotaEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantProductQuotaEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editRiskProductQuota_argsStandardSchemeFactory implements SchemeFactory {
      public editRiskProductQuota_argsStandardScheme getScheme() {
        return new editRiskProductQuota_argsStandardScheme();
      }
    }

    private static class editRiskProductQuota_argsStandardScheme extends StandardScheme<editRiskProductQuota_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editRiskProductQuota_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_PRODUCT_QUOTA_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantProductQuotaEntity = iprot.readString();
                struct.setMerchantProductQuotaEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editRiskProductQuota_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantProductQuotaEntity != null) {
          oprot.writeFieldBegin(MERCHANT_PRODUCT_QUOTA_ENTITY_FIELD_DESC);
          oprot.writeString(struct.merchantProductQuotaEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editRiskProductQuota_argsTupleSchemeFactory implements SchemeFactory {
      public editRiskProductQuota_argsTupleScheme getScheme() {
        return new editRiskProductQuota_argsTupleScheme();
      }
    }

    private static class editRiskProductQuota_argsTupleScheme extends TupleScheme<editRiskProductQuota_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editRiskProductQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantProductQuotaEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantProductQuotaEntity()) {
          oprot.writeString(struct.merchantProductQuotaEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editRiskProductQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantProductQuotaEntity = iprot.readString();
          struct.setMerchantProductQuotaEntityIsSet(true);
        }
      }
    }

  }

  public static class editRiskProductQuota_result implements org.apache.thrift.TBase<editRiskProductQuota_result, editRiskProductQuota_result._Fields>, java.io.Serializable, Cloneable, Comparable<editRiskProductQuota_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editRiskProductQuota_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editRiskProductQuota_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editRiskProductQuota_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editRiskProductQuota_result.class, metaDataMap);
    }

    public editRiskProductQuota_result() {
    }

    public editRiskProductQuota_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editRiskProductQuota_result(editRiskProductQuota_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editRiskProductQuota_result deepCopy() {
      return new editRiskProductQuota_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editRiskProductQuota_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editRiskProductQuota_result)
        return this.equals((editRiskProductQuota_result)that);
      return false;
    }

    public boolean equals(editRiskProductQuota_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editRiskProductQuota_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editRiskProductQuota_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editRiskProductQuota_resultStandardSchemeFactory implements SchemeFactory {
      public editRiskProductQuota_resultStandardScheme getScheme() {
        return new editRiskProductQuota_resultStandardScheme();
      }
    }

    private static class editRiskProductQuota_resultStandardScheme extends StandardScheme<editRiskProductQuota_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editRiskProductQuota_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editRiskProductQuota_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editRiskProductQuota_resultTupleSchemeFactory implements SchemeFactory {
      public editRiskProductQuota_resultTupleScheme getScheme() {
        return new editRiskProductQuota_resultTupleScheme();
      }
    }

    private static class editRiskProductQuota_resultTupleScheme extends TupleScheme<editRiskProductQuota_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editRiskProductQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editRiskProductQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addBlackorwhiteItemList_args implements org.apache.thrift.TBase<addBlackorwhiteItemList_args, addBlackorwhiteItemList_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBlackorwhiteItemList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBlackorwhiteItemList_args");

    private static final org.apache.thrift.protocol.TField BLACKORWHITE_ITEM_LIST_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("blackorwhiteItemListEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBlackorwhiteItemList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBlackorwhiteItemList_argsTupleSchemeFactory());
    }

    public String blackorwhiteItemListEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLACKORWHITE_ITEM_LIST_ENTITY((short)1, "blackorwhiteItemListEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLACKORWHITE_ITEM_LIST_ENTITY
            return BLACKORWHITE_ITEM_LIST_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLACKORWHITE_ITEM_LIST_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("blackorwhiteItemListEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBlackorwhiteItemList_args.class, metaDataMap);
    }

    public addBlackorwhiteItemList_args() {
    }

    public addBlackorwhiteItemList_args(
      String blackorwhiteItemListEntity)
    {
      this();
      this.blackorwhiteItemListEntity = blackorwhiteItemListEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBlackorwhiteItemList_args(addBlackorwhiteItemList_args other) {
      if (other.isSetBlackorwhiteItemListEntity()) {
        this.blackorwhiteItemListEntity = other.blackorwhiteItemListEntity;
      }
    }

    public addBlackorwhiteItemList_args deepCopy() {
      return new addBlackorwhiteItemList_args(this);
    }

    @Override
    public void clear() {
      this.blackorwhiteItemListEntity = null;
    }

    public String getBlackorwhiteItemListEntity() {
      return this.blackorwhiteItemListEntity;
    }

    public addBlackorwhiteItemList_args setBlackorwhiteItemListEntity(String blackorwhiteItemListEntity) {
      this.blackorwhiteItemListEntity = blackorwhiteItemListEntity;
      return this;
    }

    public void unsetBlackorwhiteItemListEntity() {
      this.blackorwhiteItemListEntity = null;
    }

    /** Returns true if field blackorwhiteItemListEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetBlackorwhiteItemListEntity() {
      return this.blackorwhiteItemListEntity != null;
    }

    public void setBlackorwhiteItemListEntityIsSet(boolean value) {
      if (!value) {
        this.blackorwhiteItemListEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BLACKORWHITE_ITEM_LIST_ENTITY:
        if (value == null) {
          unsetBlackorwhiteItemListEntity();
        } else {
          setBlackorwhiteItemListEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BLACKORWHITE_ITEM_LIST_ENTITY:
        return getBlackorwhiteItemListEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BLACKORWHITE_ITEM_LIST_ENTITY:
        return isSetBlackorwhiteItemListEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBlackorwhiteItemList_args)
        return this.equals((addBlackorwhiteItemList_args)that);
      return false;
    }

    public boolean equals(addBlackorwhiteItemList_args that) {
      if (that == null)
        return false;

      boolean this_present_blackorwhiteItemListEntity = true && this.isSetBlackorwhiteItemListEntity();
      boolean that_present_blackorwhiteItemListEntity = true && that.isSetBlackorwhiteItemListEntity();
      if (this_present_blackorwhiteItemListEntity || that_present_blackorwhiteItemListEntity) {
        if (!(this_present_blackorwhiteItemListEntity && that_present_blackorwhiteItemListEntity))
          return false;
        if (!this.blackorwhiteItemListEntity.equals(that.blackorwhiteItemListEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_blackorwhiteItemListEntity = true && (isSetBlackorwhiteItemListEntity());
      list.add(present_blackorwhiteItemListEntity);
      if (present_blackorwhiteItemListEntity)
        list.add(blackorwhiteItemListEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBlackorwhiteItemList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBlackorwhiteItemListEntity()).compareTo(other.isSetBlackorwhiteItemListEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlackorwhiteItemListEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blackorwhiteItemListEntity, other.blackorwhiteItemListEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBlackorwhiteItemList_args(");
      boolean first = true;

      sb.append("blackorwhiteItemListEntity:");
      if (this.blackorwhiteItemListEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.blackorwhiteItemListEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBlackorwhiteItemList_argsStandardSchemeFactory implements SchemeFactory {
      public addBlackorwhiteItemList_argsStandardScheme getScheme() {
        return new addBlackorwhiteItemList_argsStandardScheme();
      }
    }

    private static class addBlackorwhiteItemList_argsStandardScheme extends StandardScheme<addBlackorwhiteItemList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBlackorwhiteItemList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLACKORWHITE_ITEM_LIST_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.blackorwhiteItemListEntity = iprot.readString();
                struct.setBlackorwhiteItemListEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBlackorwhiteItemList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.blackorwhiteItemListEntity != null) {
          oprot.writeFieldBegin(BLACKORWHITE_ITEM_LIST_ENTITY_FIELD_DESC);
          oprot.writeString(struct.blackorwhiteItemListEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBlackorwhiteItemList_argsTupleSchemeFactory implements SchemeFactory {
      public addBlackorwhiteItemList_argsTupleScheme getScheme() {
        return new addBlackorwhiteItemList_argsTupleScheme();
      }
    }

    private static class addBlackorwhiteItemList_argsTupleScheme extends TupleScheme<addBlackorwhiteItemList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBlackorwhiteItemList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlackorwhiteItemListEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBlackorwhiteItemListEntity()) {
          oprot.writeString(struct.blackorwhiteItemListEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBlackorwhiteItemList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.blackorwhiteItemListEntity = iprot.readString();
          struct.setBlackorwhiteItemListEntityIsSet(true);
        }
      }
    }

  }

  public static class addBlackorwhiteItemList_result implements org.apache.thrift.TBase<addBlackorwhiteItemList_result, addBlackorwhiteItemList_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBlackorwhiteItemList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBlackorwhiteItemList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBlackorwhiteItemList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBlackorwhiteItemList_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBlackorwhiteItemList_result.class, metaDataMap);
    }

    public addBlackorwhiteItemList_result() {
    }

    public addBlackorwhiteItemList_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBlackorwhiteItemList_result(addBlackorwhiteItemList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addBlackorwhiteItemList_result deepCopy() {
      return new addBlackorwhiteItemList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addBlackorwhiteItemList_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBlackorwhiteItemList_result)
        return this.equals((addBlackorwhiteItemList_result)that);
      return false;
    }

    public boolean equals(addBlackorwhiteItemList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBlackorwhiteItemList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBlackorwhiteItemList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBlackorwhiteItemList_resultStandardSchemeFactory implements SchemeFactory {
      public addBlackorwhiteItemList_resultStandardScheme getScheme() {
        return new addBlackorwhiteItemList_resultStandardScheme();
      }
    }

    private static class addBlackorwhiteItemList_resultStandardScheme extends StandardScheme<addBlackorwhiteItemList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBlackorwhiteItemList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBlackorwhiteItemList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBlackorwhiteItemList_resultTupleSchemeFactory implements SchemeFactory {
      public addBlackorwhiteItemList_resultTupleScheme getScheme() {
        return new addBlackorwhiteItemList_resultTupleScheme();
      }
    }

    private static class addBlackorwhiteItemList_resultTupleScheme extends TupleScheme<addBlackorwhiteItemList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBlackorwhiteItemList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBlackorwhiteItemList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editBlackorwhiteItemList_args implements org.apache.thrift.TBase<editBlackorwhiteItemList_args, editBlackorwhiteItemList_args._Fields>, java.io.Serializable, Cloneable, Comparable<editBlackorwhiteItemList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editBlackorwhiteItemList_args");

    private static final org.apache.thrift.protocol.TField BLACKORWHITE_ITEM_LIST_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("blackorwhiteItemListEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editBlackorwhiteItemList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editBlackorwhiteItemList_argsTupleSchemeFactory());
    }

    public String blackorwhiteItemListEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLACKORWHITE_ITEM_LIST_ENTITY((short)1, "blackorwhiteItemListEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLACKORWHITE_ITEM_LIST_ENTITY
            return BLACKORWHITE_ITEM_LIST_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLACKORWHITE_ITEM_LIST_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("blackorwhiteItemListEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editBlackorwhiteItemList_args.class, metaDataMap);
    }

    public editBlackorwhiteItemList_args() {
    }

    public editBlackorwhiteItemList_args(
      String blackorwhiteItemListEntity)
    {
      this();
      this.blackorwhiteItemListEntity = blackorwhiteItemListEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editBlackorwhiteItemList_args(editBlackorwhiteItemList_args other) {
      if (other.isSetBlackorwhiteItemListEntity()) {
        this.blackorwhiteItemListEntity = other.blackorwhiteItemListEntity;
      }
    }

    public editBlackorwhiteItemList_args deepCopy() {
      return new editBlackorwhiteItemList_args(this);
    }

    @Override
    public void clear() {
      this.blackorwhiteItemListEntity = null;
    }

    public String getBlackorwhiteItemListEntity() {
      return this.blackorwhiteItemListEntity;
    }

    public editBlackorwhiteItemList_args setBlackorwhiteItemListEntity(String blackorwhiteItemListEntity) {
      this.blackorwhiteItemListEntity = blackorwhiteItemListEntity;
      return this;
    }

    public void unsetBlackorwhiteItemListEntity() {
      this.blackorwhiteItemListEntity = null;
    }

    /** Returns true if field blackorwhiteItemListEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetBlackorwhiteItemListEntity() {
      return this.blackorwhiteItemListEntity != null;
    }

    public void setBlackorwhiteItemListEntityIsSet(boolean value) {
      if (!value) {
        this.blackorwhiteItemListEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BLACKORWHITE_ITEM_LIST_ENTITY:
        if (value == null) {
          unsetBlackorwhiteItemListEntity();
        } else {
          setBlackorwhiteItemListEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BLACKORWHITE_ITEM_LIST_ENTITY:
        return getBlackorwhiteItemListEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BLACKORWHITE_ITEM_LIST_ENTITY:
        return isSetBlackorwhiteItemListEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editBlackorwhiteItemList_args)
        return this.equals((editBlackorwhiteItemList_args)that);
      return false;
    }

    public boolean equals(editBlackorwhiteItemList_args that) {
      if (that == null)
        return false;

      boolean this_present_blackorwhiteItemListEntity = true && this.isSetBlackorwhiteItemListEntity();
      boolean that_present_blackorwhiteItemListEntity = true && that.isSetBlackorwhiteItemListEntity();
      if (this_present_blackorwhiteItemListEntity || that_present_blackorwhiteItemListEntity) {
        if (!(this_present_blackorwhiteItemListEntity && that_present_blackorwhiteItemListEntity))
          return false;
        if (!this.blackorwhiteItemListEntity.equals(that.blackorwhiteItemListEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_blackorwhiteItemListEntity = true && (isSetBlackorwhiteItemListEntity());
      list.add(present_blackorwhiteItemListEntity);
      if (present_blackorwhiteItemListEntity)
        list.add(blackorwhiteItemListEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(editBlackorwhiteItemList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBlackorwhiteItemListEntity()).compareTo(other.isSetBlackorwhiteItemListEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlackorwhiteItemListEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blackorwhiteItemListEntity, other.blackorwhiteItemListEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editBlackorwhiteItemList_args(");
      boolean first = true;

      sb.append("blackorwhiteItemListEntity:");
      if (this.blackorwhiteItemListEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.blackorwhiteItemListEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editBlackorwhiteItemList_argsStandardSchemeFactory implements SchemeFactory {
      public editBlackorwhiteItemList_argsStandardScheme getScheme() {
        return new editBlackorwhiteItemList_argsStandardScheme();
      }
    }

    private static class editBlackorwhiteItemList_argsStandardScheme extends StandardScheme<editBlackorwhiteItemList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editBlackorwhiteItemList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLACKORWHITE_ITEM_LIST_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.blackorwhiteItemListEntity = iprot.readString();
                struct.setBlackorwhiteItemListEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editBlackorwhiteItemList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.blackorwhiteItemListEntity != null) {
          oprot.writeFieldBegin(BLACKORWHITE_ITEM_LIST_ENTITY_FIELD_DESC);
          oprot.writeString(struct.blackorwhiteItemListEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editBlackorwhiteItemList_argsTupleSchemeFactory implements SchemeFactory {
      public editBlackorwhiteItemList_argsTupleScheme getScheme() {
        return new editBlackorwhiteItemList_argsTupleScheme();
      }
    }

    private static class editBlackorwhiteItemList_argsTupleScheme extends TupleScheme<editBlackorwhiteItemList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editBlackorwhiteItemList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlackorwhiteItemListEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBlackorwhiteItemListEntity()) {
          oprot.writeString(struct.blackorwhiteItemListEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editBlackorwhiteItemList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.blackorwhiteItemListEntity = iprot.readString();
          struct.setBlackorwhiteItemListEntityIsSet(true);
        }
      }
    }

  }

  public static class editBlackorwhiteItemList_result implements org.apache.thrift.TBase<editBlackorwhiteItemList_result, editBlackorwhiteItemList_result._Fields>, java.io.Serializable, Cloneable, Comparable<editBlackorwhiteItemList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editBlackorwhiteItemList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editBlackorwhiteItemList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editBlackorwhiteItemList_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editBlackorwhiteItemList_result.class, metaDataMap);
    }

    public editBlackorwhiteItemList_result() {
    }

    public editBlackorwhiteItemList_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editBlackorwhiteItemList_result(editBlackorwhiteItemList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editBlackorwhiteItemList_result deepCopy() {
      return new editBlackorwhiteItemList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editBlackorwhiteItemList_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editBlackorwhiteItemList_result)
        return this.equals((editBlackorwhiteItemList_result)that);
      return false;
    }

    public boolean equals(editBlackorwhiteItemList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editBlackorwhiteItemList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editBlackorwhiteItemList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editBlackorwhiteItemList_resultStandardSchemeFactory implements SchemeFactory {
      public editBlackorwhiteItemList_resultStandardScheme getScheme() {
        return new editBlackorwhiteItemList_resultStandardScheme();
      }
    }

    private static class editBlackorwhiteItemList_resultStandardScheme extends StandardScheme<editBlackorwhiteItemList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editBlackorwhiteItemList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editBlackorwhiteItemList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editBlackorwhiteItemList_resultTupleSchemeFactory implements SchemeFactory {
      public editBlackorwhiteItemList_resultTupleScheme getScheme() {
        return new editBlackorwhiteItemList_resultTupleScheme();
      }
    }

    private static class editBlackorwhiteItemList_resultTupleScheme extends TupleScheme<editBlackorwhiteItemList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editBlackorwhiteItemList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editBlackorwhiteItemList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delBlackorwhiteItemList_args implements org.apache.thrift.TBase<delBlackorwhiteItemList_args, delBlackorwhiteItemList_args._Fields>, java.io.Serializable, Cloneable, Comparable<delBlackorwhiteItemList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delBlackorwhiteItemList_args");

    private static final org.apache.thrift.protocol.TField BLACKORWHITE_ITEM_LIST_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("blackorwhiteItemListEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delBlackorwhiteItemList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delBlackorwhiteItemList_argsTupleSchemeFactory());
    }

    public String blackorwhiteItemListEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLACKORWHITE_ITEM_LIST_ENTITY((short)1, "blackorwhiteItemListEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLACKORWHITE_ITEM_LIST_ENTITY
            return BLACKORWHITE_ITEM_LIST_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLACKORWHITE_ITEM_LIST_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("blackorwhiteItemListEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delBlackorwhiteItemList_args.class, metaDataMap);
    }

    public delBlackorwhiteItemList_args() {
    }

    public delBlackorwhiteItemList_args(
      String blackorwhiteItemListEntity)
    {
      this();
      this.blackorwhiteItemListEntity = blackorwhiteItemListEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delBlackorwhiteItemList_args(delBlackorwhiteItemList_args other) {
      if (other.isSetBlackorwhiteItemListEntity()) {
        this.blackorwhiteItemListEntity = other.blackorwhiteItemListEntity;
      }
    }

    public delBlackorwhiteItemList_args deepCopy() {
      return new delBlackorwhiteItemList_args(this);
    }

    @Override
    public void clear() {
      this.blackorwhiteItemListEntity = null;
    }

    public String getBlackorwhiteItemListEntity() {
      return this.blackorwhiteItemListEntity;
    }

    public delBlackorwhiteItemList_args setBlackorwhiteItemListEntity(String blackorwhiteItemListEntity) {
      this.blackorwhiteItemListEntity = blackorwhiteItemListEntity;
      return this;
    }

    public void unsetBlackorwhiteItemListEntity() {
      this.blackorwhiteItemListEntity = null;
    }

    /** Returns true if field blackorwhiteItemListEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetBlackorwhiteItemListEntity() {
      return this.blackorwhiteItemListEntity != null;
    }

    public void setBlackorwhiteItemListEntityIsSet(boolean value) {
      if (!value) {
        this.blackorwhiteItemListEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BLACKORWHITE_ITEM_LIST_ENTITY:
        if (value == null) {
          unsetBlackorwhiteItemListEntity();
        } else {
          setBlackorwhiteItemListEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BLACKORWHITE_ITEM_LIST_ENTITY:
        return getBlackorwhiteItemListEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BLACKORWHITE_ITEM_LIST_ENTITY:
        return isSetBlackorwhiteItemListEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delBlackorwhiteItemList_args)
        return this.equals((delBlackorwhiteItemList_args)that);
      return false;
    }

    public boolean equals(delBlackorwhiteItemList_args that) {
      if (that == null)
        return false;

      boolean this_present_blackorwhiteItemListEntity = true && this.isSetBlackorwhiteItemListEntity();
      boolean that_present_blackorwhiteItemListEntity = true && that.isSetBlackorwhiteItemListEntity();
      if (this_present_blackorwhiteItemListEntity || that_present_blackorwhiteItemListEntity) {
        if (!(this_present_blackorwhiteItemListEntity && that_present_blackorwhiteItemListEntity))
          return false;
        if (!this.blackorwhiteItemListEntity.equals(that.blackorwhiteItemListEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_blackorwhiteItemListEntity = true && (isSetBlackorwhiteItemListEntity());
      list.add(present_blackorwhiteItemListEntity);
      if (present_blackorwhiteItemListEntity)
        list.add(blackorwhiteItemListEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(delBlackorwhiteItemList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBlackorwhiteItemListEntity()).compareTo(other.isSetBlackorwhiteItemListEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlackorwhiteItemListEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blackorwhiteItemListEntity, other.blackorwhiteItemListEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delBlackorwhiteItemList_args(");
      boolean first = true;

      sb.append("blackorwhiteItemListEntity:");
      if (this.blackorwhiteItemListEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.blackorwhiteItemListEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delBlackorwhiteItemList_argsStandardSchemeFactory implements SchemeFactory {
      public delBlackorwhiteItemList_argsStandardScheme getScheme() {
        return new delBlackorwhiteItemList_argsStandardScheme();
      }
    }

    private static class delBlackorwhiteItemList_argsStandardScheme extends StandardScheme<delBlackorwhiteItemList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delBlackorwhiteItemList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLACKORWHITE_ITEM_LIST_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.blackorwhiteItemListEntity = iprot.readString();
                struct.setBlackorwhiteItemListEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delBlackorwhiteItemList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.blackorwhiteItemListEntity != null) {
          oprot.writeFieldBegin(BLACKORWHITE_ITEM_LIST_ENTITY_FIELD_DESC);
          oprot.writeString(struct.blackorwhiteItemListEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delBlackorwhiteItemList_argsTupleSchemeFactory implements SchemeFactory {
      public delBlackorwhiteItemList_argsTupleScheme getScheme() {
        return new delBlackorwhiteItemList_argsTupleScheme();
      }
    }

    private static class delBlackorwhiteItemList_argsTupleScheme extends TupleScheme<delBlackorwhiteItemList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delBlackorwhiteItemList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlackorwhiteItemListEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBlackorwhiteItemListEntity()) {
          oprot.writeString(struct.blackorwhiteItemListEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delBlackorwhiteItemList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.blackorwhiteItemListEntity = iprot.readString();
          struct.setBlackorwhiteItemListEntityIsSet(true);
        }
      }
    }

  }

  public static class delBlackorwhiteItemList_result implements org.apache.thrift.TBase<delBlackorwhiteItemList_result, delBlackorwhiteItemList_result._Fields>, java.io.Serializable, Cloneable, Comparable<delBlackorwhiteItemList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delBlackorwhiteItemList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delBlackorwhiteItemList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delBlackorwhiteItemList_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delBlackorwhiteItemList_result.class, metaDataMap);
    }

    public delBlackorwhiteItemList_result() {
    }

    public delBlackorwhiteItemList_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delBlackorwhiteItemList_result(delBlackorwhiteItemList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public delBlackorwhiteItemList_result deepCopy() {
      return new delBlackorwhiteItemList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public delBlackorwhiteItemList_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delBlackorwhiteItemList_result)
        return this.equals((delBlackorwhiteItemList_result)that);
      return false;
    }

    public boolean equals(delBlackorwhiteItemList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delBlackorwhiteItemList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delBlackorwhiteItemList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delBlackorwhiteItemList_resultStandardSchemeFactory implements SchemeFactory {
      public delBlackorwhiteItemList_resultStandardScheme getScheme() {
        return new delBlackorwhiteItemList_resultStandardScheme();
      }
    }

    private static class delBlackorwhiteItemList_resultStandardScheme extends StandardScheme<delBlackorwhiteItemList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delBlackorwhiteItemList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delBlackorwhiteItemList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delBlackorwhiteItemList_resultTupleSchemeFactory implements SchemeFactory {
      public delBlackorwhiteItemList_resultTupleScheme getScheme() {
        return new delBlackorwhiteItemList_resultTupleScheme();
      }
    }

    private static class delBlackorwhiteItemList_resultTupleScheme extends TupleScheme<delBlackorwhiteItemList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delBlackorwhiteItemList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delBlackorwhiteItemList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addBlackorwhiteList_args implements org.apache.thrift.TBase<addBlackorwhiteList_args, addBlackorwhiteList_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBlackorwhiteList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBlackorwhiteList_args");

    private static final org.apache.thrift.protocol.TField BLACKORWHITE_LIST_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("blackorwhiteListEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBlackorwhiteList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBlackorwhiteList_argsTupleSchemeFactory());
    }

    public String blackorwhiteListEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLACKORWHITE_LIST_ENTITY((short)1, "blackorwhiteListEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLACKORWHITE_LIST_ENTITY
            return BLACKORWHITE_LIST_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLACKORWHITE_LIST_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("blackorwhiteListEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBlackorwhiteList_args.class, metaDataMap);
    }

    public addBlackorwhiteList_args() {
    }

    public addBlackorwhiteList_args(
      String blackorwhiteListEntity)
    {
      this();
      this.blackorwhiteListEntity = blackorwhiteListEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBlackorwhiteList_args(addBlackorwhiteList_args other) {
      if (other.isSetBlackorwhiteListEntity()) {
        this.blackorwhiteListEntity = other.blackorwhiteListEntity;
      }
    }

    public addBlackorwhiteList_args deepCopy() {
      return new addBlackorwhiteList_args(this);
    }

    @Override
    public void clear() {
      this.blackorwhiteListEntity = null;
    }

    public String getBlackorwhiteListEntity() {
      return this.blackorwhiteListEntity;
    }

    public addBlackorwhiteList_args setBlackorwhiteListEntity(String blackorwhiteListEntity) {
      this.blackorwhiteListEntity = blackorwhiteListEntity;
      return this;
    }

    public void unsetBlackorwhiteListEntity() {
      this.blackorwhiteListEntity = null;
    }

    /** Returns true if field blackorwhiteListEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetBlackorwhiteListEntity() {
      return this.blackorwhiteListEntity != null;
    }

    public void setBlackorwhiteListEntityIsSet(boolean value) {
      if (!value) {
        this.blackorwhiteListEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        if (value == null) {
          unsetBlackorwhiteListEntity();
        } else {
          setBlackorwhiteListEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        return getBlackorwhiteListEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        return isSetBlackorwhiteListEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBlackorwhiteList_args)
        return this.equals((addBlackorwhiteList_args)that);
      return false;
    }

    public boolean equals(addBlackorwhiteList_args that) {
      if (that == null)
        return false;

      boolean this_present_blackorwhiteListEntity = true && this.isSetBlackorwhiteListEntity();
      boolean that_present_blackorwhiteListEntity = true && that.isSetBlackorwhiteListEntity();
      if (this_present_blackorwhiteListEntity || that_present_blackorwhiteListEntity) {
        if (!(this_present_blackorwhiteListEntity && that_present_blackorwhiteListEntity))
          return false;
        if (!this.blackorwhiteListEntity.equals(that.blackorwhiteListEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_blackorwhiteListEntity = true && (isSetBlackorwhiteListEntity());
      list.add(present_blackorwhiteListEntity);
      if (present_blackorwhiteListEntity)
        list.add(blackorwhiteListEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBlackorwhiteList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBlackorwhiteListEntity()).compareTo(other.isSetBlackorwhiteListEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlackorwhiteListEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blackorwhiteListEntity, other.blackorwhiteListEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBlackorwhiteList_args(");
      boolean first = true;

      sb.append("blackorwhiteListEntity:");
      if (this.blackorwhiteListEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.blackorwhiteListEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBlackorwhiteList_argsStandardSchemeFactory implements SchemeFactory {
      public addBlackorwhiteList_argsStandardScheme getScheme() {
        return new addBlackorwhiteList_argsStandardScheme();
      }
    }

    private static class addBlackorwhiteList_argsStandardScheme extends StandardScheme<addBlackorwhiteList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBlackorwhiteList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLACKORWHITE_LIST_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.blackorwhiteListEntity = iprot.readString();
                struct.setBlackorwhiteListEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBlackorwhiteList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.blackorwhiteListEntity != null) {
          oprot.writeFieldBegin(BLACKORWHITE_LIST_ENTITY_FIELD_DESC);
          oprot.writeString(struct.blackorwhiteListEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBlackorwhiteList_argsTupleSchemeFactory implements SchemeFactory {
      public addBlackorwhiteList_argsTupleScheme getScheme() {
        return new addBlackorwhiteList_argsTupleScheme();
      }
    }

    private static class addBlackorwhiteList_argsTupleScheme extends TupleScheme<addBlackorwhiteList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBlackorwhiteList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlackorwhiteListEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBlackorwhiteListEntity()) {
          oprot.writeString(struct.blackorwhiteListEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBlackorwhiteList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.blackorwhiteListEntity = iprot.readString();
          struct.setBlackorwhiteListEntityIsSet(true);
        }
      }
    }

  }

  public static class addBlackorwhiteList_result implements org.apache.thrift.TBase<addBlackorwhiteList_result, addBlackorwhiteList_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBlackorwhiteList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBlackorwhiteList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBlackorwhiteList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBlackorwhiteList_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBlackorwhiteList_result.class, metaDataMap);
    }

    public addBlackorwhiteList_result() {
    }

    public addBlackorwhiteList_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBlackorwhiteList_result(addBlackorwhiteList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addBlackorwhiteList_result deepCopy() {
      return new addBlackorwhiteList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addBlackorwhiteList_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBlackorwhiteList_result)
        return this.equals((addBlackorwhiteList_result)that);
      return false;
    }

    public boolean equals(addBlackorwhiteList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBlackorwhiteList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBlackorwhiteList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBlackorwhiteList_resultStandardSchemeFactory implements SchemeFactory {
      public addBlackorwhiteList_resultStandardScheme getScheme() {
        return new addBlackorwhiteList_resultStandardScheme();
      }
    }

    private static class addBlackorwhiteList_resultStandardScheme extends StandardScheme<addBlackorwhiteList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBlackorwhiteList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBlackorwhiteList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBlackorwhiteList_resultTupleSchemeFactory implements SchemeFactory {
      public addBlackorwhiteList_resultTupleScheme getScheme() {
        return new addBlackorwhiteList_resultTupleScheme();
      }
    }

    private static class addBlackorwhiteList_resultTupleScheme extends TupleScheme<addBlackorwhiteList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBlackorwhiteList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBlackorwhiteList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editBlackorwhiteList_args implements org.apache.thrift.TBase<editBlackorwhiteList_args, editBlackorwhiteList_args._Fields>, java.io.Serializable, Cloneable, Comparable<editBlackorwhiteList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editBlackorwhiteList_args");

    private static final org.apache.thrift.protocol.TField BLACKORWHITE_LIST_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("blackorwhiteListEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editBlackorwhiteList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editBlackorwhiteList_argsTupleSchemeFactory());
    }

    public String blackorwhiteListEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLACKORWHITE_LIST_ENTITY((short)1, "blackorwhiteListEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLACKORWHITE_LIST_ENTITY
            return BLACKORWHITE_LIST_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLACKORWHITE_LIST_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("blackorwhiteListEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editBlackorwhiteList_args.class, metaDataMap);
    }

    public editBlackorwhiteList_args() {
    }

    public editBlackorwhiteList_args(
      String blackorwhiteListEntity)
    {
      this();
      this.blackorwhiteListEntity = blackorwhiteListEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editBlackorwhiteList_args(editBlackorwhiteList_args other) {
      if (other.isSetBlackorwhiteListEntity()) {
        this.blackorwhiteListEntity = other.blackorwhiteListEntity;
      }
    }

    public editBlackorwhiteList_args deepCopy() {
      return new editBlackorwhiteList_args(this);
    }

    @Override
    public void clear() {
      this.blackorwhiteListEntity = null;
    }

    public String getBlackorwhiteListEntity() {
      return this.blackorwhiteListEntity;
    }

    public editBlackorwhiteList_args setBlackorwhiteListEntity(String blackorwhiteListEntity) {
      this.blackorwhiteListEntity = blackorwhiteListEntity;
      return this;
    }

    public void unsetBlackorwhiteListEntity() {
      this.blackorwhiteListEntity = null;
    }

    /** Returns true if field blackorwhiteListEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetBlackorwhiteListEntity() {
      return this.blackorwhiteListEntity != null;
    }

    public void setBlackorwhiteListEntityIsSet(boolean value) {
      if (!value) {
        this.blackorwhiteListEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        if (value == null) {
          unsetBlackorwhiteListEntity();
        } else {
          setBlackorwhiteListEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        return getBlackorwhiteListEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        return isSetBlackorwhiteListEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editBlackorwhiteList_args)
        return this.equals((editBlackorwhiteList_args)that);
      return false;
    }

    public boolean equals(editBlackorwhiteList_args that) {
      if (that == null)
        return false;

      boolean this_present_blackorwhiteListEntity = true && this.isSetBlackorwhiteListEntity();
      boolean that_present_blackorwhiteListEntity = true && that.isSetBlackorwhiteListEntity();
      if (this_present_blackorwhiteListEntity || that_present_blackorwhiteListEntity) {
        if (!(this_present_blackorwhiteListEntity && that_present_blackorwhiteListEntity))
          return false;
        if (!this.blackorwhiteListEntity.equals(that.blackorwhiteListEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_blackorwhiteListEntity = true && (isSetBlackorwhiteListEntity());
      list.add(present_blackorwhiteListEntity);
      if (present_blackorwhiteListEntity)
        list.add(blackorwhiteListEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(editBlackorwhiteList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBlackorwhiteListEntity()).compareTo(other.isSetBlackorwhiteListEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlackorwhiteListEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blackorwhiteListEntity, other.blackorwhiteListEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editBlackorwhiteList_args(");
      boolean first = true;

      sb.append("blackorwhiteListEntity:");
      if (this.blackorwhiteListEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.blackorwhiteListEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editBlackorwhiteList_argsStandardSchemeFactory implements SchemeFactory {
      public editBlackorwhiteList_argsStandardScheme getScheme() {
        return new editBlackorwhiteList_argsStandardScheme();
      }
    }

    private static class editBlackorwhiteList_argsStandardScheme extends StandardScheme<editBlackorwhiteList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editBlackorwhiteList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLACKORWHITE_LIST_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.blackorwhiteListEntity = iprot.readString();
                struct.setBlackorwhiteListEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editBlackorwhiteList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.blackorwhiteListEntity != null) {
          oprot.writeFieldBegin(BLACKORWHITE_LIST_ENTITY_FIELD_DESC);
          oprot.writeString(struct.blackorwhiteListEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editBlackorwhiteList_argsTupleSchemeFactory implements SchemeFactory {
      public editBlackorwhiteList_argsTupleScheme getScheme() {
        return new editBlackorwhiteList_argsTupleScheme();
      }
    }

    private static class editBlackorwhiteList_argsTupleScheme extends TupleScheme<editBlackorwhiteList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editBlackorwhiteList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlackorwhiteListEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBlackorwhiteListEntity()) {
          oprot.writeString(struct.blackorwhiteListEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editBlackorwhiteList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.blackorwhiteListEntity = iprot.readString();
          struct.setBlackorwhiteListEntityIsSet(true);
        }
      }
    }

  }

  public static class editBlackorwhiteList_result implements org.apache.thrift.TBase<editBlackorwhiteList_result, editBlackorwhiteList_result._Fields>, java.io.Serializable, Cloneable, Comparable<editBlackorwhiteList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editBlackorwhiteList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editBlackorwhiteList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editBlackorwhiteList_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editBlackorwhiteList_result.class, metaDataMap);
    }

    public editBlackorwhiteList_result() {
    }

    public editBlackorwhiteList_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editBlackorwhiteList_result(editBlackorwhiteList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editBlackorwhiteList_result deepCopy() {
      return new editBlackorwhiteList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editBlackorwhiteList_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editBlackorwhiteList_result)
        return this.equals((editBlackorwhiteList_result)that);
      return false;
    }

    public boolean equals(editBlackorwhiteList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editBlackorwhiteList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editBlackorwhiteList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editBlackorwhiteList_resultStandardSchemeFactory implements SchemeFactory {
      public editBlackorwhiteList_resultStandardScheme getScheme() {
        return new editBlackorwhiteList_resultStandardScheme();
      }
    }

    private static class editBlackorwhiteList_resultStandardScheme extends StandardScheme<editBlackorwhiteList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editBlackorwhiteList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editBlackorwhiteList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editBlackorwhiteList_resultTupleSchemeFactory implements SchemeFactory {
      public editBlackorwhiteList_resultTupleScheme getScheme() {
        return new editBlackorwhiteList_resultTupleScheme();
      }
    }

    private static class editBlackorwhiteList_resultTupleScheme extends TupleScheme<editBlackorwhiteList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editBlackorwhiteList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editBlackorwhiteList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delBlackorwhiteList_args implements org.apache.thrift.TBase<delBlackorwhiteList_args, delBlackorwhiteList_args._Fields>, java.io.Serializable, Cloneable, Comparable<delBlackorwhiteList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delBlackorwhiteList_args");

    private static final org.apache.thrift.protocol.TField BLACKORWHITE_LIST_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("blackorwhiteListEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delBlackorwhiteList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delBlackorwhiteList_argsTupleSchemeFactory());
    }

    public String blackorwhiteListEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLACKORWHITE_LIST_ENTITY((short)1, "blackorwhiteListEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLACKORWHITE_LIST_ENTITY
            return BLACKORWHITE_LIST_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLACKORWHITE_LIST_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("blackorwhiteListEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delBlackorwhiteList_args.class, metaDataMap);
    }

    public delBlackorwhiteList_args() {
    }

    public delBlackorwhiteList_args(
      String blackorwhiteListEntity)
    {
      this();
      this.blackorwhiteListEntity = blackorwhiteListEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delBlackorwhiteList_args(delBlackorwhiteList_args other) {
      if (other.isSetBlackorwhiteListEntity()) {
        this.blackorwhiteListEntity = other.blackorwhiteListEntity;
      }
    }

    public delBlackorwhiteList_args deepCopy() {
      return new delBlackorwhiteList_args(this);
    }

    @Override
    public void clear() {
      this.blackorwhiteListEntity = null;
    }

    public String getBlackorwhiteListEntity() {
      return this.blackorwhiteListEntity;
    }

    public delBlackorwhiteList_args setBlackorwhiteListEntity(String blackorwhiteListEntity) {
      this.blackorwhiteListEntity = blackorwhiteListEntity;
      return this;
    }

    public void unsetBlackorwhiteListEntity() {
      this.blackorwhiteListEntity = null;
    }

    /** Returns true if field blackorwhiteListEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetBlackorwhiteListEntity() {
      return this.blackorwhiteListEntity != null;
    }

    public void setBlackorwhiteListEntityIsSet(boolean value) {
      if (!value) {
        this.blackorwhiteListEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        if (value == null) {
          unsetBlackorwhiteListEntity();
        } else {
          setBlackorwhiteListEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        return getBlackorwhiteListEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        return isSetBlackorwhiteListEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delBlackorwhiteList_args)
        return this.equals((delBlackorwhiteList_args)that);
      return false;
    }

    public boolean equals(delBlackorwhiteList_args that) {
      if (that == null)
        return false;

      boolean this_present_blackorwhiteListEntity = true && this.isSetBlackorwhiteListEntity();
      boolean that_present_blackorwhiteListEntity = true && that.isSetBlackorwhiteListEntity();
      if (this_present_blackorwhiteListEntity || that_present_blackorwhiteListEntity) {
        if (!(this_present_blackorwhiteListEntity && that_present_blackorwhiteListEntity))
          return false;
        if (!this.blackorwhiteListEntity.equals(that.blackorwhiteListEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_blackorwhiteListEntity = true && (isSetBlackorwhiteListEntity());
      list.add(present_blackorwhiteListEntity);
      if (present_blackorwhiteListEntity)
        list.add(blackorwhiteListEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(delBlackorwhiteList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBlackorwhiteListEntity()).compareTo(other.isSetBlackorwhiteListEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlackorwhiteListEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blackorwhiteListEntity, other.blackorwhiteListEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delBlackorwhiteList_args(");
      boolean first = true;

      sb.append("blackorwhiteListEntity:");
      if (this.blackorwhiteListEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.blackorwhiteListEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delBlackorwhiteList_argsStandardSchemeFactory implements SchemeFactory {
      public delBlackorwhiteList_argsStandardScheme getScheme() {
        return new delBlackorwhiteList_argsStandardScheme();
      }
    }

    private static class delBlackorwhiteList_argsStandardScheme extends StandardScheme<delBlackorwhiteList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delBlackorwhiteList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLACKORWHITE_LIST_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.blackorwhiteListEntity = iprot.readString();
                struct.setBlackorwhiteListEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delBlackorwhiteList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.blackorwhiteListEntity != null) {
          oprot.writeFieldBegin(BLACKORWHITE_LIST_ENTITY_FIELD_DESC);
          oprot.writeString(struct.blackorwhiteListEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delBlackorwhiteList_argsTupleSchemeFactory implements SchemeFactory {
      public delBlackorwhiteList_argsTupleScheme getScheme() {
        return new delBlackorwhiteList_argsTupleScheme();
      }
    }

    private static class delBlackorwhiteList_argsTupleScheme extends TupleScheme<delBlackorwhiteList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delBlackorwhiteList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlackorwhiteListEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBlackorwhiteListEntity()) {
          oprot.writeString(struct.blackorwhiteListEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delBlackorwhiteList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.blackorwhiteListEntity = iprot.readString();
          struct.setBlackorwhiteListEntityIsSet(true);
        }
      }
    }

  }

  public static class delBlackorwhiteList_result implements org.apache.thrift.TBase<delBlackorwhiteList_result, delBlackorwhiteList_result._Fields>, java.io.Serializable, Cloneable, Comparable<delBlackorwhiteList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delBlackorwhiteList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delBlackorwhiteList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delBlackorwhiteList_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delBlackorwhiteList_result.class, metaDataMap);
    }

    public delBlackorwhiteList_result() {
    }

    public delBlackorwhiteList_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delBlackorwhiteList_result(delBlackorwhiteList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public delBlackorwhiteList_result deepCopy() {
      return new delBlackorwhiteList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public delBlackorwhiteList_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delBlackorwhiteList_result)
        return this.equals((delBlackorwhiteList_result)that);
      return false;
    }

    public boolean equals(delBlackorwhiteList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delBlackorwhiteList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delBlackorwhiteList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delBlackorwhiteList_resultStandardSchemeFactory implements SchemeFactory {
      public delBlackorwhiteList_resultStandardScheme getScheme() {
        return new delBlackorwhiteList_resultStandardScheme();
      }
    }

    private static class delBlackorwhiteList_resultStandardScheme extends StandardScheme<delBlackorwhiteList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delBlackorwhiteList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delBlackorwhiteList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delBlackorwhiteList_resultTupleSchemeFactory implements SchemeFactory {
      public delBlackorwhiteList_resultTupleScheme getScheme() {
        return new delBlackorwhiteList_resultTupleScheme();
      }
    }

    private static class delBlackorwhiteList_resultTupleScheme extends TupleScheme<delBlackorwhiteList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delBlackorwhiteList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delBlackorwhiteList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addRiskIncomeQuota_args implements org.apache.thrift.TBase<addRiskIncomeQuota_args, addRiskIncomeQuota_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRiskIncomeQuota_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRiskIncomeQuota_args");

    private static final org.apache.thrift.protocol.TField BLACKORWHITE_LIST_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("blackorwhiteListEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRiskIncomeQuota_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRiskIncomeQuota_argsTupleSchemeFactory());
    }

    public String blackorwhiteListEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLACKORWHITE_LIST_ENTITY((short)1, "blackorwhiteListEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLACKORWHITE_LIST_ENTITY
            return BLACKORWHITE_LIST_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLACKORWHITE_LIST_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("blackorwhiteListEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRiskIncomeQuota_args.class, metaDataMap);
    }

    public addRiskIncomeQuota_args() {
    }

    public addRiskIncomeQuota_args(
      String blackorwhiteListEntity)
    {
      this();
      this.blackorwhiteListEntity = blackorwhiteListEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRiskIncomeQuota_args(addRiskIncomeQuota_args other) {
      if (other.isSetBlackorwhiteListEntity()) {
        this.blackorwhiteListEntity = other.blackorwhiteListEntity;
      }
    }

    public addRiskIncomeQuota_args deepCopy() {
      return new addRiskIncomeQuota_args(this);
    }

    @Override
    public void clear() {
      this.blackorwhiteListEntity = null;
    }

    public String getBlackorwhiteListEntity() {
      return this.blackorwhiteListEntity;
    }

    public addRiskIncomeQuota_args setBlackorwhiteListEntity(String blackorwhiteListEntity) {
      this.blackorwhiteListEntity = blackorwhiteListEntity;
      return this;
    }

    public void unsetBlackorwhiteListEntity() {
      this.blackorwhiteListEntity = null;
    }

    /** Returns true if field blackorwhiteListEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetBlackorwhiteListEntity() {
      return this.blackorwhiteListEntity != null;
    }

    public void setBlackorwhiteListEntityIsSet(boolean value) {
      if (!value) {
        this.blackorwhiteListEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        if (value == null) {
          unsetBlackorwhiteListEntity();
        } else {
          setBlackorwhiteListEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        return getBlackorwhiteListEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        return isSetBlackorwhiteListEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRiskIncomeQuota_args)
        return this.equals((addRiskIncomeQuota_args)that);
      return false;
    }

    public boolean equals(addRiskIncomeQuota_args that) {
      if (that == null)
        return false;

      boolean this_present_blackorwhiteListEntity = true && this.isSetBlackorwhiteListEntity();
      boolean that_present_blackorwhiteListEntity = true && that.isSetBlackorwhiteListEntity();
      if (this_present_blackorwhiteListEntity || that_present_blackorwhiteListEntity) {
        if (!(this_present_blackorwhiteListEntity && that_present_blackorwhiteListEntity))
          return false;
        if (!this.blackorwhiteListEntity.equals(that.blackorwhiteListEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_blackorwhiteListEntity = true && (isSetBlackorwhiteListEntity());
      list.add(present_blackorwhiteListEntity);
      if (present_blackorwhiteListEntity)
        list.add(blackorwhiteListEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRiskIncomeQuota_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBlackorwhiteListEntity()).compareTo(other.isSetBlackorwhiteListEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlackorwhiteListEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blackorwhiteListEntity, other.blackorwhiteListEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRiskIncomeQuota_args(");
      boolean first = true;

      sb.append("blackorwhiteListEntity:");
      if (this.blackorwhiteListEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.blackorwhiteListEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRiskIncomeQuota_argsStandardSchemeFactory implements SchemeFactory {
      public addRiskIncomeQuota_argsStandardScheme getScheme() {
        return new addRiskIncomeQuota_argsStandardScheme();
      }
    }

    private static class addRiskIncomeQuota_argsStandardScheme extends StandardScheme<addRiskIncomeQuota_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRiskIncomeQuota_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLACKORWHITE_LIST_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.blackorwhiteListEntity = iprot.readString();
                struct.setBlackorwhiteListEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRiskIncomeQuota_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.blackorwhiteListEntity != null) {
          oprot.writeFieldBegin(BLACKORWHITE_LIST_ENTITY_FIELD_DESC);
          oprot.writeString(struct.blackorwhiteListEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRiskIncomeQuota_argsTupleSchemeFactory implements SchemeFactory {
      public addRiskIncomeQuota_argsTupleScheme getScheme() {
        return new addRiskIncomeQuota_argsTupleScheme();
      }
    }

    private static class addRiskIncomeQuota_argsTupleScheme extends TupleScheme<addRiskIncomeQuota_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRiskIncomeQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlackorwhiteListEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBlackorwhiteListEntity()) {
          oprot.writeString(struct.blackorwhiteListEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRiskIncomeQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.blackorwhiteListEntity = iprot.readString();
          struct.setBlackorwhiteListEntityIsSet(true);
        }
      }
    }

  }

  public static class addRiskIncomeQuota_result implements org.apache.thrift.TBase<addRiskIncomeQuota_result, addRiskIncomeQuota_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRiskIncomeQuota_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRiskIncomeQuota_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRiskIncomeQuota_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRiskIncomeQuota_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRiskIncomeQuota_result.class, metaDataMap);
    }

    public addRiskIncomeQuota_result() {
    }

    public addRiskIncomeQuota_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRiskIncomeQuota_result(addRiskIncomeQuota_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addRiskIncomeQuota_result deepCopy() {
      return new addRiskIncomeQuota_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addRiskIncomeQuota_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRiskIncomeQuota_result)
        return this.equals((addRiskIncomeQuota_result)that);
      return false;
    }

    public boolean equals(addRiskIncomeQuota_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRiskIncomeQuota_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRiskIncomeQuota_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRiskIncomeQuota_resultStandardSchemeFactory implements SchemeFactory {
      public addRiskIncomeQuota_resultStandardScheme getScheme() {
        return new addRiskIncomeQuota_resultStandardScheme();
      }
    }

    private static class addRiskIncomeQuota_resultStandardScheme extends StandardScheme<addRiskIncomeQuota_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRiskIncomeQuota_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRiskIncomeQuota_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRiskIncomeQuota_resultTupleSchemeFactory implements SchemeFactory {
      public addRiskIncomeQuota_resultTupleScheme getScheme() {
        return new addRiskIncomeQuota_resultTupleScheme();
      }
    }

    private static class addRiskIncomeQuota_resultTupleScheme extends TupleScheme<addRiskIncomeQuota_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRiskIncomeQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRiskIncomeQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editRiskIncomeQuota_args implements org.apache.thrift.TBase<editRiskIncomeQuota_args, editRiskIncomeQuota_args._Fields>, java.io.Serializable, Cloneable, Comparable<editRiskIncomeQuota_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editRiskIncomeQuota_args");

    private static final org.apache.thrift.protocol.TField BLACKORWHITE_LIST_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("blackorwhiteListEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editRiskIncomeQuota_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editRiskIncomeQuota_argsTupleSchemeFactory());
    }

    public String blackorwhiteListEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLACKORWHITE_LIST_ENTITY((short)1, "blackorwhiteListEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLACKORWHITE_LIST_ENTITY
            return BLACKORWHITE_LIST_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLACKORWHITE_LIST_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("blackorwhiteListEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editRiskIncomeQuota_args.class, metaDataMap);
    }

    public editRiskIncomeQuota_args() {
    }

    public editRiskIncomeQuota_args(
      String blackorwhiteListEntity)
    {
      this();
      this.blackorwhiteListEntity = blackorwhiteListEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editRiskIncomeQuota_args(editRiskIncomeQuota_args other) {
      if (other.isSetBlackorwhiteListEntity()) {
        this.blackorwhiteListEntity = other.blackorwhiteListEntity;
      }
    }

    public editRiskIncomeQuota_args deepCopy() {
      return new editRiskIncomeQuota_args(this);
    }

    @Override
    public void clear() {
      this.blackorwhiteListEntity = null;
    }

    public String getBlackorwhiteListEntity() {
      return this.blackorwhiteListEntity;
    }

    public editRiskIncomeQuota_args setBlackorwhiteListEntity(String blackorwhiteListEntity) {
      this.blackorwhiteListEntity = blackorwhiteListEntity;
      return this;
    }

    public void unsetBlackorwhiteListEntity() {
      this.blackorwhiteListEntity = null;
    }

    /** Returns true if field blackorwhiteListEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetBlackorwhiteListEntity() {
      return this.blackorwhiteListEntity != null;
    }

    public void setBlackorwhiteListEntityIsSet(boolean value) {
      if (!value) {
        this.blackorwhiteListEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        if (value == null) {
          unsetBlackorwhiteListEntity();
        } else {
          setBlackorwhiteListEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        return getBlackorwhiteListEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        return isSetBlackorwhiteListEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editRiskIncomeQuota_args)
        return this.equals((editRiskIncomeQuota_args)that);
      return false;
    }

    public boolean equals(editRiskIncomeQuota_args that) {
      if (that == null)
        return false;

      boolean this_present_blackorwhiteListEntity = true && this.isSetBlackorwhiteListEntity();
      boolean that_present_blackorwhiteListEntity = true && that.isSetBlackorwhiteListEntity();
      if (this_present_blackorwhiteListEntity || that_present_blackorwhiteListEntity) {
        if (!(this_present_blackorwhiteListEntity && that_present_blackorwhiteListEntity))
          return false;
        if (!this.blackorwhiteListEntity.equals(that.blackorwhiteListEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_blackorwhiteListEntity = true && (isSetBlackorwhiteListEntity());
      list.add(present_blackorwhiteListEntity);
      if (present_blackorwhiteListEntity)
        list.add(blackorwhiteListEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(editRiskIncomeQuota_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBlackorwhiteListEntity()).compareTo(other.isSetBlackorwhiteListEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlackorwhiteListEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blackorwhiteListEntity, other.blackorwhiteListEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editRiskIncomeQuota_args(");
      boolean first = true;

      sb.append("blackorwhiteListEntity:");
      if (this.blackorwhiteListEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.blackorwhiteListEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editRiskIncomeQuota_argsStandardSchemeFactory implements SchemeFactory {
      public editRiskIncomeQuota_argsStandardScheme getScheme() {
        return new editRiskIncomeQuota_argsStandardScheme();
      }
    }

    private static class editRiskIncomeQuota_argsStandardScheme extends StandardScheme<editRiskIncomeQuota_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editRiskIncomeQuota_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLACKORWHITE_LIST_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.blackorwhiteListEntity = iprot.readString();
                struct.setBlackorwhiteListEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editRiskIncomeQuota_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.blackorwhiteListEntity != null) {
          oprot.writeFieldBegin(BLACKORWHITE_LIST_ENTITY_FIELD_DESC);
          oprot.writeString(struct.blackorwhiteListEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editRiskIncomeQuota_argsTupleSchemeFactory implements SchemeFactory {
      public editRiskIncomeQuota_argsTupleScheme getScheme() {
        return new editRiskIncomeQuota_argsTupleScheme();
      }
    }

    private static class editRiskIncomeQuota_argsTupleScheme extends TupleScheme<editRiskIncomeQuota_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editRiskIncomeQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlackorwhiteListEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBlackorwhiteListEntity()) {
          oprot.writeString(struct.blackorwhiteListEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editRiskIncomeQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.blackorwhiteListEntity = iprot.readString();
          struct.setBlackorwhiteListEntityIsSet(true);
        }
      }
    }

  }

  public static class editRiskIncomeQuota_result implements org.apache.thrift.TBase<editRiskIncomeQuota_result, editRiskIncomeQuota_result._Fields>, java.io.Serializable, Cloneable, Comparable<editRiskIncomeQuota_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editRiskIncomeQuota_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editRiskIncomeQuota_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editRiskIncomeQuota_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editRiskIncomeQuota_result.class, metaDataMap);
    }

    public editRiskIncomeQuota_result() {
    }

    public editRiskIncomeQuota_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editRiskIncomeQuota_result(editRiskIncomeQuota_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editRiskIncomeQuota_result deepCopy() {
      return new editRiskIncomeQuota_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editRiskIncomeQuota_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editRiskIncomeQuota_result)
        return this.equals((editRiskIncomeQuota_result)that);
      return false;
    }

    public boolean equals(editRiskIncomeQuota_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editRiskIncomeQuota_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editRiskIncomeQuota_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editRiskIncomeQuota_resultStandardSchemeFactory implements SchemeFactory {
      public editRiskIncomeQuota_resultStandardScheme getScheme() {
        return new editRiskIncomeQuota_resultStandardScheme();
      }
    }

    private static class editRiskIncomeQuota_resultStandardScheme extends StandardScheme<editRiskIncomeQuota_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editRiskIncomeQuota_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editRiskIncomeQuota_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editRiskIncomeQuota_resultTupleSchemeFactory implements SchemeFactory {
      public editRiskIncomeQuota_resultTupleScheme getScheme() {
        return new editRiskIncomeQuota_resultTupleScheme();
      }
    }

    private static class editRiskIncomeQuota_resultTupleScheme extends TupleScheme<editRiskIncomeQuota_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editRiskIncomeQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editRiskIncomeQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delRiskIncomeQuota_args implements org.apache.thrift.TBase<delRiskIncomeQuota_args, delRiskIncomeQuota_args._Fields>, java.io.Serializable, Cloneable, Comparable<delRiskIncomeQuota_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delRiskIncomeQuota_args");

    private static final org.apache.thrift.protocol.TField BLACKORWHITE_LIST_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("blackorwhiteListEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delRiskIncomeQuota_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delRiskIncomeQuota_argsTupleSchemeFactory());
    }

    public String blackorwhiteListEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLACKORWHITE_LIST_ENTITY((short)1, "blackorwhiteListEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLACKORWHITE_LIST_ENTITY
            return BLACKORWHITE_LIST_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLACKORWHITE_LIST_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("blackorwhiteListEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRiskIncomeQuota_args.class, metaDataMap);
    }

    public delRiskIncomeQuota_args() {
    }

    public delRiskIncomeQuota_args(
      String blackorwhiteListEntity)
    {
      this();
      this.blackorwhiteListEntity = blackorwhiteListEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delRiskIncomeQuota_args(delRiskIncomeQuota_args other) {
      if (other.isSetBlackorwhiteListEntity()) {
        this.blackorwhiteListEntity = other.blackorwhiteListEntity;
      }
    }

    public delRiskIncomeQuota_args deepCopy() {
      return new delRiskIncomeQuota_args(this);
    }

    @Override
    public void clear() {
      this.blackorwhiteListEntity = null;
    }

    public String getBlackorwhiteListEntity() {
      return this.blackorwhiteListEntity;
    }

    public delRiskIncomeQuota_args setBlackorwhiteListEntity(String blackorwhiteListEntity) {
      this.blackorwhiteListEntity = blackorwhiteListEntity;
      return this;
    }

    public void unsetBlackorwhiteListEntity() {
      this.blackorwhiteListEntity = null;
    }

    /** Returns true if field blackorwhiteListEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetBlackorwhiteListEntity() {
      return this.blackorwhiteListEntity != null;
    }

    public void setBlackorwhiteListEntityIsSet(boolean value) {
      if (!value) {
        this.blackorwhiteListEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        if (value == null) {
          unsetBlackorwhiteListEntity();
        } else {
          setBlackorwhiteListEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        return getBlackorwhiteListEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BLACKORWHITE_LIST_ENTITY:
        return isSetBlackorwhiteListEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delRiskIncomeQuota_args)
        return this.equals((delRiskIncomeQuota_args)that);
      return false;
    }

    public boolean equals(delRiskIncomeQuota_args that) {
      if (that == null)
        return false;

      boolean this_present_blackorwhiteListEntity = true && this.isSetBlackorwhiteListEntity();
      boolean that_present_blackorwhiteListEntity = true && that.isSetBlackorwhiteListEntity();
      if (this_present_blackorwhiteListEntity || that_present_blackorwhiteListEntity) {
        if (!(this_present_blackorwhiteListEntity && that_present_blackorwhiteListEntity))
          return false;
        if (!this.blackorwhiteListEntity.equals(that.blackorwhiteListEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_blackorwhiteListEntity = true && (isSetBlackorwhiteListEntity());
      list.add(present_blackorwhiteListEntity);
      if (present_blackorwhiteListEntity)
        list.add(blackorwhiteListEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(delRiskIncomeQuota_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBlackorwhiteListEntity()).compareTo(other.isSetBlackorwhiteListEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlackorwhiteListEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blackorwhiteListEntity, other.blackorwhiteListEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delRiskIncomeQuota_args(");
      boolean first = true;

      sb.append("blackorwhiteListEntity:");
      if (this.blackorwhiteListEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.blackorwhiteListEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delRiskIncomeQuota_argsStandardSchemeFactory implements SchemeFactory {
      public delRiskIncomeQuota_argsStandardScheme getScheme() {
        return new delRiskIncomeQuota_argsStandardScheme();
      }
    }

    private static class delRiskIncomeQuota_argsStandardScheme extends StandardScheme<delRiskIncomeQuota_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delRiskIncomeQuota_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BLACKORWHITE_LIST_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.blackorwhiteListEntity = iprot.readString();
                struct.setBlackorwhiteListEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delRiskIncomeQuota_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.blackorwhiteListEntity != null) {
          oprot.writeFieldBegin(BLACKORWHITE_LIST_ENTITY_FIELD_DESC);
          oprot.writeString(struct.blackorwhiteListEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delRiskIncomeQuota_argsTupleSchemeFactory implements SchemeFactory {
      public delRiskIncomeQuota_argsTupleScheme getScheme() {
        return new delRiskIncomeQuota_argsTupleScheme();
      }
    }

    private static class delRiskIncomeQuota_argsTupleScheme extends TupleScheme<delRiskIncomeQuota_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delRiskIncomeQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlackorwhiteListEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBlackorwhiteListEntity()) {
          oprot.writeString(struct.blackorwhiteListEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delRiskIncomeQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.blackorwhiteListEntity = iprot.readString();
          struct.setBlackorwhiteListEntityIsSet(true);
        }
      }
    }

  }

  public static class delRiskIncomeQuota_result implements org.apache.thrift.TBase<delRiskIncomeQuota_result, delRiskIncomeQuota_result._Fields>, java.io.Serializable, Cloneable, Comparable<delRiskIncomeQuota_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delRiskIncomeQuota_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delRiskIncomeQuota_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delRiskIncomeQuota_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRiskIncomeQuota_result.class, metaDataMap);
    }

    public delRiskIncomeQuota_result() {
    }

    public delRiskIncomeQuota_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delRiskIncomeQuota_result(delRiskIncomeQuota_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public delRiskIncomeQuota_result deepCopy() {
      return new delRiskIncomeQuota_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public delRiskIncomeQuota_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delRiskIncomeQuota_result)
        return this.equals((delRiskIncomeQuota_result)that);
      return false;
    }

    public boolean equals(delRiskIncomeQuota_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delRiskIncomeQuota_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delRiskIncomeQuota_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delRiskIncomeQuota_resultStandardSchemeFactory implements SchemeFactory {
      public delRiskIncomeQuota_resultStandardScheme getScheme() {
        return new delRiskIncomeQuota_resultStandardScheme();
      }
    }

    private static class delRiskIncomeQuota_resultStandardScheme extends StandardScheme<delRiskIncomeQuota_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delRiskIncomeQuota_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delRiskIncomeQuota_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delRiskIncomeQuota_resultTupleSchemeFactory implements SchemeFactory {
      public delRiskIncomeQuota_resultTupleScheme getScheme() {
        return new delRiskIncomeQuota_resultTupleScheme();
      }
    }

    private static class delRiskIncomeQuota_resultTupleScheme extends TupleScheme<delRiskIncomeQuota_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delRiskIncomeQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delRiskIncomeQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addSettleIncomeInfo_args implements org.apache.thrift.TBase<addSettleIncomeInfo_args, addSettleIncomeInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSettleIncomeInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSettleIncomeInfo_args");

    private static final org.apache.thrift.protocol.TField SETTLE_INCOME_INFO_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("SettleIncomeInfoEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSettleIncomeInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSettleIncomeInfo_argsTupleSchemeFactory());
    }

    public String SettleIncomeInfoEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTLE_INCOME_INFO_ENTITY((short)1, "SettleIncomeInfoEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTLE_INCOME_INFO_ENTITY
            return SETTLE_INCOME_INFO_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTLE_INCOME_INFO_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("SettleIncomeInfoEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSettleIncomeInfo_args.class, metaDataMap);
    }

    public addSettleIncomeInfo_args() {
    }

    public addSettleIncomeInfo_args(
      String SettleIncomeInfoEntity)
    {
      this();
      this.SettleIncomeInfoEntity = SettleIncomeInfoEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSettleIncomeInfo_args(addSettleIncomeInfo_args other) {
      if (other.isSetSettleIncomeInfoEntity()) {
        this.SettleIncomeInfoEntity = other.SettleIncomeInfoEntity;
      }
    }

    public addSettleIncomeInfo_args deepCopy() {
      return new addSettleIncomeInfo_args(this);
    }

    @Override
    public void clear() {
      this.SettleIncomeInfoEntity = null;
    }

    public String getSettleIncomeInfoEntity() {
      return this.SettleIncomeInfoEntity;
    }

    public addSettleIncomeInfo_args setSettleIncomeInfoEntity(String SettleIncomeInfoEntity) {
      this.SettleIncomeInfoEntity = SettleIncomeInfoEntity;
      return this;
    }

    public void unsetSettleIncomeInfoEntity() {
      this.SettleIncomeInfoEntity = null;
    }

    /** Returns true if field SettleIncomeInfoEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetSettleIncomeInfoEntity() {
      return this.SettleIncomeInfoEntity != null;
    }

    public void setSettleIncomeInfoEntityIsSet(boolean value) {
      if (!value) {
        this.SettleIncomeInfoEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTLE_INCOME_INFO_ENTITY:
        if (value == null) {
          unsetSettleIncomeInfoEntity();
        } else {
          setSettleIncomeInfoEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTLE_INCOME_INFO_ENTITY:
        return getSettleIncomeInfoEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTLE_INCOME_INFO_ENTITY:
        return isSetSettleIncomeInfoEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSettleIncomeInfo_args)
        return this.equals((addSettleIncomeInfo_args)that);
      return false;
    }

    public boolean equals(addSettleIncomeInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_SettleIncomeInfoEntity = true && this.isSetSettleIncomeInfoEntity();
      boolean that_present_SettleIncomeInfoEntity = true && that.isSetSettleIncomeInfoEntity();
      if (this_present_SettleIncomeInfoEntity || that_present_SettleIncomeInfoEntity) {
        if (!(this_present_SettleIncomeInfoEntity && that_present_SettleIncomeInfoEntity))
          return false;
        if (!this.SettleIncomeInfoEntity.equals(that.SettleIncomeInfoEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_SettleIncomeInfoEntity = true && (isSetSettleIncomeInfoEntity());
      list.add(present_SettleIncomeInfoEntity);
      if (present_SettleIncomeInfoEntity)
        list.add(SettleIncomeInfoEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSettleIncomeInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettleIncomeInfoEntity()).compareTo(other.isSetSettleIncomeInfoEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettleIncomeInfoEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SettleIncomeInfoEntity, other.SettleIncomeInfoEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSettleIncomeInfo_args(");
      boolean first = true;

      sb.append("SettleIncomeInfoEntity:");
      if (this.SettleIncomeInfoEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.SettleIncomeInfoEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSettleIncomeInfo_argsStandardSchemeFactory implements SchemeFactory {
      public addSettleIncomeInfo_argsStandardScheme getScheme() {
        return new addSettleIncomeInfo_argsStandardScheme();
      }
    }

    private static class addSettleIncomeInfo_argsStandardScheme extends StandardScheme<addSettleIncomeInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSettleIncomeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTLE_INCOME_INFO_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.SettleIncomeInfoEntity = iprot.readString();
                struct.setSettleIncomeInfoEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSettleIncomeInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.SettleIncomeInfoEntity != null) {
          oprot.writeFieldBegin(SETTLE_INCOME_INFO_ENTITY_FIELD_DESC);
          oprot.writeString(struct.SettleIncomeInfoEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSettleIncomeInfo_argsTupleSchemeFactory implements SchemeFactory {
      public addSettleIncomeInfo_argsTupleScheme getScheme() {
        return new addSettleIncomeInfo_argsTupleScheme();
      }
    }

    private static class addSettleIncomeInfo_argsTupleScheme extends TupleScheme<addSettleIncomeInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSettleIncomeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettleIncomeInfoEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSettleIncomeInfoEntity()) {
          oprot.writeString(struct.SettleIncomeInfoEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSettleIncomeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.SettleIncomeInfoEntity = iprot.readString();
          struct.setSettleIncomeInfoEntityIsSet(true);
        }
      }
    }

  }

  public static class addSettleIncomeInfo_result implements org.apache.thrift.TBase<addSettleIncomeInfo_result, addSettleIncomeInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSettleIncomeInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSettleIncomeInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSettleIncomeInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSettleIncomeInfo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSettleIncomeInfo_result.class, metaDataMap);
    }

    public addSettleIncomeInfo_result() {
    }

    public addSettleIncomeInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSettleIncomeInfo_result(addSettleIncomeInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addSettleIncomeInfo_result deepCopy() {
      return new addSettleIncomeInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addSettleIncomeInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSettleIncomeInfo_result)
        return this.equals((addSettleIncomeInfo_result)that);
      return false;
    }

    public boolean equals(addSettleIncomeInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSettleIncomeInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSettleIncomeInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSettleIncomeInfo_resultStandardSchemeFactory implements SchemeFactory {
      public addSettleIncomeInfo_resultStandardScheme getScheme() {
        return new addSettleIncomeInfo_resultStandardScheme();
      }
    }

    private static class addSettleIncomeInfo_resultStandardScheme extends StandardScheme<addSettleIncomeInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSettleIncomeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSettleIncomeInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSettleIncomeInfo_resultTupleSchemeFactory implements SchemeFactory {
      public addSettleIncomeInfo_resultTupleScheme getScheme() {
        return new addSettleIncomeInfo_resultTupleScheme();
      }
    }

    private static class addSettleIncomeInfo_resultTupleScheme extends TupleScheme<addSettleIncomeInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSettleIncomeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSettleIncomeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editSettleIncomeInfo_args implements org.apache.thrift.TBase<editSettleIncomeInfo_args, editSettleIncomeInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<editSettleIncomeInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editSettleIncomeInfo_args");

    private static final org.apache.thrift.protocol.TField SETTLE_INCOME_INFO_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("SettleIncomeInfoEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editSettleIncomeInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editSettleIncomeInfo_argsTupleSchemeFactory());
    }

    public String SettleIncomeInfoEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTLE_INCOME_INFO_ENTITY((short)1, "SettleIncomeInfoEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTLE_INCOME_INFO_ENTITY
            return SETTLE_INCOME_INFO_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTLE_INCOME_INFO_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("SettleIncomeInfoEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editSettleIncomeInfo_args.class, metaDataMap);
    }

    public editSettleIncomeInfo_args() {
    }

    public editSettleIncomeInfo_args(
      String SettleIncomeInfoEntity)
    {
      this();
      this.SettleIncomeInfoEntity = SettleIncomeInfoEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editSettleIncomeInfo_args(editSettleIncomeInfo_args other) {
      if (other.isSetSettleIncomeInfoEntity()) {
        this.SettleIncomeInfoEntity = other.SettleIncomeInfoEntity;
      }
    }

    public editSettleIncomeInfo_args deepCopy() {
      return new editSettleIncomeInfo_args(this);
    }

    @Override
    public void clear() {
      this.SettleIncomeInfoEntity = null;
    }

    public String getSettleIncomeInfoEntity() {
      return this.SettleIncomeInfoEntity;
    }

    public editSettleIncomeInfo_args setSettleIncomeInfoEntity(String SettleIncomeInfoEntity) {
      this.SettleIncomeInfoEntity = SettleIncomeInfoEntity;
      return this;
    }

    public void unsetSettleIncomeInfoEntity() {
      this.SettleIncomeInfoEntity = null;
    }

    /** Returns true if field SettleIncomeInfoEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetSettleIncomeInfoEntity() {
      return this.SettleIncomeInfoEntity != null;
    }

    public void setSettleIncomeInfoEntityIsSet(boolean value) {
      if (!value) {
        this.SettleIncomeInfoEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTLE_INCOME_INFO_ENTITY:
        if (value == null) {
          unsetSettleIncomeInfoEntity();
        } else {
          setSettleIncomeInfoEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTLE_INCOME_INFO_ENTITY:
        return getSettleIncomeInfoEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTLE_INCOME_INFO_ENTITY:
        return isSetSettleIncomeInfoEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editSettleIncomeInfo_args)
        return this.equals((editSettleIncomeInfo_args)that);
      return false;
    }

    public boolean equals(editSettleIncomeInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_SettleIncomeInfoEntity = true && this.isSetSettleIncomeInfoEntity();
      boolean that_present_SettleIncomeInfoEntity = true && that.isSetSettleIncomeInfoEntity();
      if (this_present_SettleIncomeInfoEntity || that_present_SettleIncomeInfoEntity) {
        if (!(this_present_SettleIncomeInfoEntity && that_present_SettleIncomeInfoEntity))
          return false;
        if (!this.SettleIncomeInfoEntity.equals(that.SettleIncomeInfoEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_SettleIncomeInfoEntity = true && (isSetSettleIncomeInfoEntity());
      list.add(present_SettleIncomeInfoEntity);
      if (present_SettleIncomeInfoEntity)
        list.add(SettleIncomeInfoEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(editSettleIncomeInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettleIncomeInfoEntity()).compareTo(other.isSetSettleIncomeInfoEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettleIncomeInfoEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SettleIncomeInfoEntity, other.SettleIncomeInfoEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editSettleIncomeInfo_args(");
      boolean first = true;

      sb.append("SettleIncomeInfoEntity:");
      if (this.SettleIncomeInfoEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.SettleIncomeInfoEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editSettleIncomeInfo_argsStandardSchemeFactory implements SchemeFactory {
      public editSettleIncomeInfo_argsStandardScheme getScheme() {
        return new editSettleIncomeInfo_argsStandardScheme();
      }
    }

    private static class editSettleIncomeInfo_argsStandardScheme extends StandardScheme<editSettleIncomeInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editSettleIncomeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTLE_INCOME_INFO_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.SettleIncomeInfoEntity = iprot.readString();
                struct.setSettleIncomeInfoEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editSettleIncomeInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.SettleIncomeInfoEntity != null) {
          oprot.writeFieldBegin(SETTLE_INCOME_INFO_ENTITY_FIELD_DESC);
          oprot.writeString(struct.SettleIncomeInfoEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editSettleIncomeInfo_argsTupleSchemeFactory implements SchemeFactory {
      public editSettleIncomeInfo_argsTupleScheme getScheme() {
        return new editSettleIncomeInfo_argsTupleScheme();
      }
    }

    private static class editSettleIncomeInfo_argsTupleScheme extends TupleScheme<editSettleIncomeInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editSettleIncomeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettleIncomeInfoEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSettleIncomeInfoEntity()) {
          oprot.writeString(struct.SettleIncomeInfoEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editSettleIncomeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.SettleIncomeInfoEntity = iprot.readString();
          struct.setSettleIncomeInfoEntityIsSet(true);
        }
      }
    }

  }

  public static class editSettleIncomeInfo_result implements org.apache.thrift.TBase<editSettleIncomeInfo_result, editSettleIncomeInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<editSettleIncomeInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editSettleIncomeInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editSettleIncomeInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editSettleIncomeInfo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editSettleIncomeInfo_result.class, metaDataMap);
    }

    public editSettleIncomeInfo_result() {
    }

    public editSettleIncomeInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editSettleIncomeInfo_result(editSettleIncomeInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editSettleIncomeInfo_result deepCopy() {
      return new editSettleIncomeInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editSettleIncomeInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editSettleIncomeInfo_result)
        return this.equals((editSettleIncomeInfo_result)that);
      return false;
    }

    public boolean equals(editSettleIncomeInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editSettleIncomeInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editSettleIncomeInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editSettleIncomeInfo_resultStandardSchemeFactory implements SchemeFactory {
      public editSettleIncomeInfo_resultStandardScheme getScheme() {
        return new editSettleIncomeInfo_resultStandardScheme();
      }
    }

    private static class editSettleIncomeInfo_resultStandardScheme extends StandardScheme<editSettleIncomeInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editSettleIncomeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editSettleIncomeInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editSettleIncomeInfo_resultTupleSchemeFactory implements SchemeFactory {
      public editSettleIncomeInfo_resultTupleScheme getScheme() {
        return new editSettleIncomeInfo_resultTupleScheme();
      }
    }

    private static class editSettleIncomeInfo_resultTupleScheme extends TupleScheme<editSettleIncomeInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editSettleIncomeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editSettleIncomeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delSettleIncomeInfo_args implements org.apache.thrift.TBase<delSettleIncomeInfo_args, delSettleIncomeInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<delSettleIncomeInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSettleIncomeInfo_args");

    private static final org.apache.thrift.protocol.TField SETTLE_INCOME_INFO_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("SettleIncomeInfoEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSettleIncomeInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSettleIncomeInfo_argsTupleSchemeFactory());
    }

    public String SettleIncomeInfoEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTLE_INCOME_INFO_ENTITY((short)1, "SettleIncomeInfoEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTLE_INCOME_INFO_ENTITY
            return SETTLE_INCOME_INFO_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTLE_INCOME_INFO_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("SettleIncomeInfoEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSettleIncomeInfo_args.class, metaDataMap);
    }

    public delSettleIncomeInfo_args() {
    }

    public delSettleIncomeInfo_args(
      String SettleIncomeInfoEntity)
    {
      this();
      this.SettleIncomeInfoEntity = SettleIncomeInfoEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSettleIncomeInfo_args(delSettleIncomeInfo_args other) {
      if (other.isSetSettleIncomeInfoEntity()) {
        this.SettleIncomeInfoEntity = other.SettleIncomeInfoEntity;
      }
    }

    public delSettleIncomeInfo_args deepCopy() {
      return new delSettleIncomeInfo_args(this);
    }

    @Override
    public void clear() {
      this.SettleIncomeInfoEntity = null;
    }

    public String getSettleIncomeInfoEntity() {
      return this.SettleIncomeInfoEntity;
    }

    public delSettleIncomeInfo_args setSettleIncomeInfoEntity(String SettleIncomeInfoEntity) {
      this.SettleIncomeInfoEntity = SettleIncomeInfoEntity;
      return this;
    }

    public void unsetSettleIncomeInfoEntity() {
      this.SettleIncomeInfoEntity = null;
    }

    /** Returns true if field SettleIncomeInfoEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetSettleIncomeInfoEntity() {
      return this.SettleIncomeInfoEntity != null;
    }

    public void setSettleIncomeInfoEntityIsSet(boolean value) {
      if (!value) {
        this.SettleIncomeInfoEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTLE_INCOME_INFO_ENTITY:
        if (value == null) {
          unsetSettleIncomeInfoEntity();
        } else {
          setSettleIncomeInfoEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTLE_INCOME_INFO_ENTITY:
        return getSettleIncomeInfoEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTLE_INCOME_INFO_ENTITY:
        return isSetSettleIncomeInfoEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSettleIncomeInfo_args)
        return this.equals((delSettleIncomeInfo_args)that);
      return false;
    }

    public boolean equals(delSettleIncomeInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_SettleIncomeInfoEntity = true && this.isSetSettleIncomeInfoEntity();
      boolean that_present_SettleIncomeInfoEntity = true && that.isSetSettleIncomeInfoEntity();
      if (this_present_SettleIncomeInfoEntity || that_present_SettleIncomeInfoEntity) {
        if (!(this_present_SettleIncomeInfoEntity && that_present_SettleIncomeInfoEntity))
          return false;
        if (!this.SettleIncomeInfoEntity.equals(that.SettleIncomeInfoEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_SettleIncomeInfoEntity = true && (isSetSettleIncomeInfoEntity());
      list.add(present_SettleIncomeInfoEntity);
      if (present_SettleIncomeInfoEntity)
        list.add(SettleIncomeInfoEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(delSettleIncomeInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettleIncomeInfoEntity()).compareTo(other.isSetSettleIncomeInfoEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettleIncomeInfoEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SettleIncomeInfoEntity, other.SettleIncomeInfoEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSettleIncomeInfo_args(");
      boolean first = true;

      sb.append("SettleIncomeInfoEntity:");
      if (this.SettleIncomeInfoEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.SettleIncomeInfoEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSettleIncomeInfo_argsStandardSchemeFactory implements SchemeFactory {
      public delSettleIncomeInfo_argsStandardScheme getScheme() {
        return new delSettleIncomeInfo_argsStandardScheme();
      }
    }

    private static class delSettleIncomeInfo_argsStandardScheme extends StandardScheme<delSettleIncomeInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSettleIncomeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTLE_INCOME_INFO_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.SettleIncomeInfoEntity = iprot.readString();
                struct.setSettleIncomeInfoEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSettleIncomeInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.SettleIncomeInfoEntity != null) {
          oprot.writeFieldBegin(SETTLE_INCOME_INFO_ENTITY_FIELD_DESC);
          oprot.writeString(struct.SettleIncomeInfoEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSettleIncomeInfo_argsTupleSchemeFactory implements SchemeFactory {
      public delSettleIncomeInfo_argsTupleScheme getScheme() {
        return new delSettleIncomeInfo_argsTupleScheme();
      }
    }

    private static class delSettleIncomeInfo_argsTupleScheme extends TupleScheme<delSettleIncomeInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSettleIncomeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettleIncomeInfoEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSettleIncomeInfoEntity()) {
          oprot.writeString(struct.SettleIncomeInfoEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSettleIncomeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.SettleIncomeInfoEntity = iprot.readString();
          struct.setSettleIncomeInfoEntityIsSet(true);
        }
      }
    }

  }

  public static class delSettleIncomeInfo_result implements org.apache.thrift.TBase<delSettleIncomeInfo_result, delSettleIncomeInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<delSettleIncomeInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSettleIncomeInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSettleIncomeInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSettleIncomeInfo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSettleIncomeInfo_result.class, metaDataMap);
    }

    public delSettleIncomeInfo_result() {
    }

    public delSettleIncomeInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSettleIncomeInfo_result(delSettleIncomeInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public delSettleIncomeInfo_result deepCopy() {
      return new delSettleIncomeInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public delSettleIncomeInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSettleIncomeInfo_result)
        return this.equals((delSettleIncomeInfo_result)that);
      return false;
    }

    public boolean equals(delSettleIncomeInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delSettleIncomeInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSettleIncomeInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSettleIncomeInfo_resultStandardSchemeFactory implements SchemeFactory {
      public delSettleIncomeInfo_resultStandardScheme getScheme() {
        return new delSettleIncomeInfo_resultStandardScheme();
      }
    }

    private static class delSettleIncomeInfo_resultStandardScheme extends StandardScheme<delSettleIncomeInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSettleIncomeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSettleIncomeInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSettleIncomeInfo_resultTupleSchemeFactory implements SchemeFactory {
      public delSettleIncomeInfo_resultTupleScheme getScheme() {
        return new delSettleIncomeInfo_resultTupleScheme();
      }
    }

    private static class delSettleIncomeInfo_resultTupleScheme extends TupleScheme<delSettleIncomeInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSettleIncomeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSettleIncomeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addRiskLoginBlacklistInfo_args implements org.apache.thrift.TBase<addRiskLoginBlacklistInfo_args, addRiskLoginBlacklistInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRiskLoginBlacklistInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRiskLoginBlacklistInfo_args");

    private static final org.apache.thrift.protocol.TField RISK_LOGIN_BLACKLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("riskLoginBlacklist", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRiskLoginBlacklistInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRiskLoginBlacklistInfo_argsTupleSchemeFactory());
    }

    public String riskLoginBlacklist; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RISK_LOGIN_BLACKLIST((short)1, "riskLoginBlacklist");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RISK_LOGIN_BLACKLIST
            return RISK_LOGIN_BLACKLIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RISK_LOGIN_BLACKLIST, new org.apache.thrift.meta_data.FieldMetaData("riskLoginBlacklist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRiskLoginBlacklistInfo_args.class, metaDataMap);
    }

    public addRiskLoginBlacklistInfo_args() {
    }

    public addRiskLoginBlacklistInfo_args(
      String riskLoginBlacklist)
    {
      this();
      this.riskLoginBlacklist = riskLoginBlacklist;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRiskLoginBlacklistInfo_args(addRiskLoginBlacklistInfo_args other) {
      if (other.isSetRiskLoginBlacklist()) {
        this.riskLoginBlacklist = other.riskLoginBlacklist;
      }
    }

    public addRiskLoginBlacklistInfo_args deepCopy() {
      return new addRiskLoginBlacklistInfo_args(this);
    }

    @Override
    public void clear() {
      this.riskLoginBlacklist = null;
    }

    public String getRiskLoginBlacklist() {
      return this.riskLoginBlacklist;
    }

    public addRiskLoginBlacklistInfo_args setRiskLoginBlacklist(String riskLoginBlacklist) {
      this.riskLoginBlacklist = riskLoginBlacklist;
      return this;
    }

    public void unsetRiskLoginBlacklist() {
      this.riskLoginBlacklist = null;
    }

    /** Returns true if field riskLoginBlacklist is set (has been assigned a value) and false otherwise */
    public boolean isSetRiskLoginBlacklist() {
      return this.riskLoginBlacklist != null;
    }

    public void setRiskLoginBlacklistIsSet(boolean value) {
      if (!value) {
        this.riskLoginBlacklist = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RISK_LOGIN_BLACKLIST:
        if (value == null) {
          unsetRiskLoginBlacklist();
        } else {
          setRiskLoginBlacklist((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RISK_LOGIN_BLACKLIST:
        return getRiskLoginBlacklist();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RISK_LOGIN_BLACKLIST:
        return isSetRiskLoginBlacklist();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRiskLoginBlacklistInfo_args)
        return this.equals((addRiskLoginBlacklistInfo_args)that);
      return false;
    }

    public boolean equals(addRiskLoginBlacklistInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_riskLoginBlacklist = true && this.isSetRiskLoginBlacklist();
      boolean that_present_riskLoginBlacklist = true && that.isSetRiskLoginBlacklist();
      if (this_present_riskLoginBlacklist || that_present_riskLoginBlacklist) {
        if (!(this_present_riskLoginBlacklist && that_present_riskLoginBlacklist))
          return false;
        if (!this.riskLoginBlacklist.equals(that.riskLoginBlacklist))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_riskLoginBlacklist = true && (isSetRiskLoginBlacklist());
      list.add(present_riskLoginBlacklist);
      if (present_riskLoginBlacklist)
        list.add(riskLoginBlacklist);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRiskLoginBlacklistInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRiskLoginBlacklist()).compareTo(other.isSetRiskLoginBlacklist());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiskLoginBlacklist()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskLoginBlacklist, other.riskLoginBlacklist);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRiskLoginBlacklistInfo_args(");
      boolean first = true;

      sb.append("riskLoginBlacklist:");
      if (this.riskLoginBlacklist == null) {
        sb.append("null");
      } else {
        sb.append(this.riskLoginBlacklist);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRiskLoginBlacklistInfo_argsStandardSchemeFactory implements SchemeFactory {
      public addRiskLoginBlacklistInfo_argsStandardScheme getScheme() {
        return new addRiskLoginBlacklistInfo_argsStandardScheme();
      }
    }

    private static class addRiskLoginBlacklistInfo_argsStandardScheme extends StandardScheme<addRiskLoginBlacklistInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRiskLoginBlacklistInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RISK_LOGIN_BLACKLIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.riskLoginBlacklist = iprot.readString();
                struct.setRiskLoginBlacklistIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRiskLoginBlacklistInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.riskLoginBlacklist != null) {
          oprot.writeFieldBegin(RISK_LOGIN_BLACKLIST_FIELD_DESC);
          oprot.writeString(struct.riskLoginBlacklist);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRiskLoginBlacklistInfo_argsTupleSchemeFactory implements SchemeFactory {
      public addRiskLoginBlacklistInfo_argsTupleScheme getScheme() {
        return new addRiskLoginBlacklistInfo_argsTupleScheme();
      }
    }

    private static class addRiskLoginBlacklistInfo_argsTupleScheme extends TupleScheme<addRiskLoginBlacklistInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRiskLoginBlacklistInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRiskLoginBlacklist()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRiskLoginBlacklist()) {
          oprot.writeString(struct.riskLoginBlacklist);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRiskLoginBlacklistInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.riskLoginBlacklist = iprot.readString();
          struct.setRiskLoginBlacklistIsSet(true);
        }
      }
    }

  }

  public static class addRiskLoginBlacklistInfo_result implements org.apache.thrift.TBase<addRiskLoginBlacklistInfo_result, addRiskLoginBlacklistInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRiskLoginBlacklistInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRiskLoginBlacklistInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRiskLoginBlacklistInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRiskLoginBlacklistInfo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRiskLoginBlacklistInfo_result.class, metaDataMap);
    }

    public addRiskLoginBlacklistInfo_result() {
    }

    public addRiskLoginBlacklistInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRiskLoginBlacklistInfo_result(addRiskLoginBlacklistInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addRiskLoginBlacklistInfo_result deepCopy() {
      return new addRiskLoginBlacklistInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addRiskLoginBlacklistInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRiskLoginBlacklistInfo_result)
        return this.equals((addRiskLoginBlacklistInfo_result)that);
      return false;
    }

    public boolean equals(addRiskLoginBlacklistInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRiskLoginBlacklistInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRiskLoginBlacklistInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRiskLoginBlacklistInfo_resultStandardSchemeFactory implements SchemeFactory {
      public addRiskLoginBlacklistInfo_resultStandardScheme getScheme() {
        return new addRiskLoginBlacklistInfo_resultStandardScheme();
      }
    }

    private static class addRiskLoginBlacklistInfo_resultStandardScheme extends StandardScheme<addRiskLoginBlacklistInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRiskLoginBlacklistInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRiskLoginBlacklistInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRiskLoginBlacklistInfo_resultTupleSchemeFactory implements SchemeFactory {
      public addRiskLoginBlacklistInfo_resultTupleScheme getScheme() {
        return new addRiskLoginBlacklistInfo_resultTupleScheme();
      }
    }

    private static class addRiskLoginBlacklistInfo_resultTupleScheme extends TupleScheme<addRiskLoginBlacklistInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRiskLoginBlacklistInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRiskLoginBlacklistInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editRiskLoginBlacklistInfo_args implements org.apache.thrift.TBase<editRiskLoginBlacklistInfo_args, editRiskLoginBlacklistInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<editRiskLoginBlacklistInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editRiskLoginBlacklistInfo_args");

    private static final org.apache.thrift.protocol.TField RISK_LOGIN_BLACKLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("riskLoginBlacklist", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editRiskLoginBlacklistInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editRiskLoginBlacklistInfo_argsTupleSchemeFactory());
    }

    public String riskLoginBlacklist; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RISK_LOGIN_BLACKLIST((short)1, "riskLoginBlacklist");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RISK_LOGIN_BLACKLIST
            return RISK_LOGIN_BLACKLIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RISK_LOGIN_BLACKLIST, new org.apache.thrift.meta_data.FieldMetaData("riskLoginBlacklist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editRiskLoginBlacklistInfo_args.class, metaDataMap);
    }

    public editRiskLoginBlacklistInfo_args() {
    }

    public editRiskLoginBlacklistInfo_args(
      String riskLoginBlacklist)
    {
      this();
      this.riskLoginBlacklist = riskLoginBlacklist;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editRiskLoginBlacklistInfo_args(editRiskLoginBlacklistInfo_args other) {
      if (other.isSetRiskLoginBlacklist()) {
        this.riskLoginBlacklist = other.riskLoginBlacklist;
      }
    }

    public editRiskLoginBlacklistInfo_args deepCopy() {
      return new editRiskLoginBlacklistInfo_args(this);
    }

    @Override
    public void clear() {
      this.riskLoginBlacklist = null;
    }

    public String getRiskLoginBlacklist() {
      return this.riskLoginBlacklist;
    }

    public editRiskLoginBlacklistInfo_args setRiskLoginBlacklist(String riskLoginBlacklist) {
      this.riskLoginBlacklist = riskLoginBlacklist;
      return this;
    }

    public void unsetRiskLoginBlacklist() {
      this.riskLoginBlacklist = null;
    }

    /** Returns true if field riskLoginBlacklist is set (has been assigned a value) and false otherwise */
    public boolean isSetRiskLoginBlacklist() {
      return this.riskLoginBlacklist != null;
    }

    public void setRiskLoginBlacklistIsSet(boolean value) {
      if (!value) {
        this.riskLoginBlacklist = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RISK_LOGIN_BLACKLIST:
        if (value == null) {
          unsetRiskLoginBlacklist();
        } else {
          setRiskLoginBlacklist((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RISK_LOGIN_BLACKLIST:
        return getRiskLoginBlacklist();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RISK_LOGIN_BLACKLIST:
        return isSetRiskLoginBlacklist();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editRiskLoginBlacklistInfo_args)
        return this.equals((editRiskLoginBlacklistInfo_args)that);
      return false;
    }

    public boolean equals(editRiskLoginBlacklistInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_riskLoginBlacklist = true && this.isSetRiskLoginBlacklist();
      boolean that_present_riskLoginBlacklist = true && that.isSetRiskLoginBlacklist();
      if (this_present_riskLoginBlacklist || that_present_riskLoginBlacklist) {
        if (!(this_present_riskLoginBlacklist && that_present_riskLoginBlacklist))
          return false;
        if (!this.riskLoginBlacklist.equals(that.riskLoginBlacklist))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_riskLoginBlacklist = true && (isSetRiskLoginBlacklist());
      list.add(present_riskLoginBlacklist);
      if (present_riskLoginBlacklist)
        list.add(riskLoginBlacklist);

      return list.hashCode();
    }

    @Override
    public int compareTo(editRiskLoginBlacklistInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRiskLoginBlacklist()).compareTo(other.isSetRiskLoginBlacklist());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiskLoginBlacklist()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskLoginBlacklist, other.riskLoginBlacklist);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editRiskLoginBlacklistInfo_args(");
      boolean first = true;

      sb.append("riskLoginBlacklist:");
      if (this.riskLoginBlacklist == null) {
        sb.append("null");
      } else {
        sb.append(this.riskLoginBlacklist);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editRiskLoginBlacklistInfo_argsStandardSchemeFactory implements SchemeFactory {
      public editRiskLoginBlacklistInfo_argsStandardScheme getScheme() {
        return new editRiskLoginBlacklistInfo_argsStandardScheme();
      }
    }

    private static class editRiskLoginBlacklistInfo_argsStandardScheme extends StandardScheme<editRiskLoginBlacklistInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editRiskLoginBlacklistInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RISK_LOGIN_BLACKLIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.riskLoginBlacklist = iprot.readString();
                struct.setRiskLoginBlacklistIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editRiskLoginBlacklistInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.riskLoginBlacklist != null) {
          oprot.writeFieldBegin(RISK_LOGIN_BLACKLIST_FIELD_DESC);
          oprot.writeString(struct.riskLoginBlacklist);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editRiskLoginBlacklistInfo_argsTupleSchemeFactory implements SchemeFactory {
      public editRiskLoginBlacklistInfo_argsTupleScheme getScheme() {
        return new editRiskLoginBlacklistInfo_argsTupleScheme();
      }
    }

    private static class editRiskLoginBlacklistInfo_argsTupleScheme extends TupleScheme<editRiskLoginBlacklistInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editRiskLoginBlacklistInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRiskLoginBlacklist()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRiskLoginBlacklist()) {
          oprot.writeString(struct.riskLoginBlacklist);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editRiskLoginBlacklistInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.riskLoginBlacklist = iprot.readString();
          struct.setRiskLoginBlacklistIsSet(true);
        }
      }
    }

  }

  public static class editRiskLoginBlacklistInfo_result implements org.apache.thrift.TBase<editRiskLoginBlacklistInfo_result, editRiskLoginBlacklistInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<editRiskLoginBlacklistInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editRiskLoginBlacklistInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editRiskLoginBlacklistInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editRiskLoginBlacklistInfo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editRiskLoginBlacklistInfo_result.class, metaDataMap);
    }

    public editRiskLoginBlacklistInfo_result() {
    }

    public editRiskLoginBlacklistInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editRiskLoginBlacklistInfo_result(editRiskLoginBlacklistInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editRiskLoginBlacklistInfo_result deepCopy() {
      return new editRiskLoginBlacklistInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editRiskLoginBlacklistInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editRiskLoginBlacklistInfo_result)
        return this.equals((editRiskLoginBlacklistInfo_result)that);
      return false;
    }

    public boolean equals(editRiskLoginBlacklistInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editRiskLoginBlacklistInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editRiskLoginBlacklistInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editRiskLoginBlacklistInfo_resultStandardSchemeFactory implements SchemeFactory {
      public editRiskLoginBlacklistInfo_resultStandardScheme getScheme() {
        return new editRiskLoginBlacklistInfo_resultStandardScheme();
      }
    }

    private static class editRiskLoginBlacklistInfo_resultStandardScheme extends StandardScheme<editRiskLoginBlacklistInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editRiskLoginBlacklistInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editRiskLoginBlacklistInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editRiskLoginBlacklistInfo_resultTupleSchemeFactory implements SchemeFactory {
      public editRiskLoginBlacklistInfo_resultTupleScheme getScheme() {
        return new editRiskLoginBlacklistInfo_resultTupleScheme();
      }
    }

    private static class editRiskLoginBlacklistInfo_resultTupleScheme extends TupleScheme<editRiskLoginBlacklistInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editRiskLoginBlacklistInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editRiskLoginBlacklistInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delRiskLoginBlacklistInfo_args implements org.apache.thrift.TBase<delRiskLoginBlacklistInfo_args, delRiskLoginBlacklistInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<delRiskLoginBlacklistInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delRiskLoginBlacklistInfo_args");

    private static final org.apache.thrift.protocol.TField RISK_LOGIN_BLACKLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("riskLoginBlacklist", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delRiskLoginBlacklistInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delRiskLoginBlacklistInfo_argsTupleSchemeFactory());
    }

    public String riskLoginBlacklist; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RISK_LOGIN_BLACKLIST((short)1, "riskLoginBlacklist");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RISK_LOGIN_BLACKLIST
            return RISK_LOGIN_BLACKLIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RISK_LOGIN_BLACKLIST, new org.apache.thrift.meta_data.FieldMetaData("riskLoginBlacklist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRiskLoginBlacklistInfo_args.class, metaDataMap);
    }

    public delRiskLoginBlacklistInfo_args() {
    }

    public delRiskLoginBlacklistInfo_args(
      String riskLoginBlacklist)
    {
      this();
      this.riskLoginBlacklist = riskLoginBlacklist;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delRiskLoginBlacklistInfo_args(delRiskLoginBlacklistInfo_args other) {
      if (other.isSetRiskLoginBlacklist()) {
        this.riskLoginBlacklist = other.riskLoginBlacklist;
      }
    }

    public delRiskLoginBlacklistInfo_args deepCopy() {
      return new delRiskLoginBlacklistInfo_args(this);
    }

    @Override
    public void clear() {
      this.riskLoginBlacklist = null;
    }

    public String getRiskLoginBlacklist() {
      return this.riskLoginBlacklist;
    }

    public delRiskLoginBlacklistInfo_args setRiskLoginBlacklist(String riskLoginBlacklist) {
      this.riskLoginBlacklist = riskLoginBlacklist;
      return this;
    }

    public void unsetRiskLoginBlacklist() {
      this.riskLoginBlacklist = null;
    }

    /** Returns true if field riskLoginBlacklist is set (has been assigned a value) and false otherwise */
    public boolean isSetRiskLoginBlacklist() {
      return this.riskLoginBlacklist != null;
    }

    public void setRiskLoginBlacklistIsSet(boolean value) {
      if (!value) {
        this.riskLoginBlacklist = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RISK_LOGIN_BLACKLIST:
        if (value == null) {
          unsetRiskLoginBlacklist();
        } else {
          setRiskLoginBlacklist((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RISK_LOGIN_BLACKLIST:
        return getRiskLoginBlacklist();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RISK_LOGIN_BLACKLIST:
        return isSetRiskLoginBlacklist();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delRiskLoginBlacklistInfo_args)
        return this.equals((delRiskLoginBlacklistInfo_args)that);
      return false;
    }

    public boolean equals(delRiskLoginBlacklistInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_riskLoginBlacklist = true && this.isSetRiskLoginBlacklist();
      boolean that_present_riskLoginBlacklist = true && that.isSetRiskLoginBlacklist();
      if (this_present_riskLoginBlacklist || that_present_riskLoginBlacklist) {
        if (!(this_present_riskLoginBlacklist && that_present_riskLoginBlacklist))
          return false;
        if (!this.riskLoginBlacklist.equals(that.riskLoginBlacklist))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_riskLoginBlacklist = true && (isSetRiskLoginBlacklist());
      list.add(present_riskLoginBlacklist);
      if (present_riskLoginBlacklist)
        list.add(riskLoginBlacklist);

      return list.hashCode();
    }

    @Override
    public int compareTo(delRiskLoginBlacklistInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRiskLoginBlacklist()).compareTo(other.isSetRiskLoginBlacklist());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiskLoginBlacklist()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskLoginBlacklist, other.riskLoginBlacklist);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delRiskLoginBlacklistInfo_args(");
      boolean first = true;

      sb.append("riskLoginBlacklist:");
      if (this.riskLoginBlacklist == null) {
        sb.append("null");
      } else {
        sb.append(this.riskLoginBlacklist);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delRiskLoginBlacklistInfo_argsStandardSchemeFactory implements SchemeFactory {
      public delRiskLoginBlacklistInfo_argsStandardScheme getScheme() {
        return new delRiskLoginBlacklistInfo_argsStandardScheme();
      }
    }

    private static class delRiskLoginBlacklistInfo_argsStandardScheme extends StandardScheme<delRiskLoginBlacklistInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delRiskLoginBlacklistInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RISK_LOGIN_BLACKLIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.riskLoginBlacklist = iprot.readString();
                struct.setRiskLoginBlacklistIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delRiskLoginBlacklistInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.riskLoginBlacklist != null) {
          oprot.writeFieldBegin(RISK_LOGIN_BLACKLIST_FIELD_DESC);
          oprot.writeString(struct.riskLoginBlacklist);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delRiskLoginBlacklistInfo_argsTupleSchemeFactory implements SchemeFactory {
      public delRiskLoginBlacklistInfo_argsTupleScheme getScheme() {
        return new delRiskLoginBlacklistInfo_argsTupleScheme();
      }
    }

    private static class delRiskLoginBlacklistInfo_argsTupleScheme extends TupleScheme<delRiskLoginBlacklistInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delRiskLoginBlacklistInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRiskLoginBlacklist()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRiskLoginBlacklist()) {
          oprot.writeString(struct.riskLoginBlacklist);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delRiskLoginBlacklistInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.riskLoginBlacklist = iprot.readString();
          struct.setRiskLoginBlacklistIsSet(true);
        }
      }
    }

  }

  public static class delRiskLoginBlacklistInfo_result implements org.apache.thrift.TBase<delRiskLoginBlacklistInfo_result, delRiskLoginBlacklistInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<delRiskLoginBlacklistInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delRiskLoginBlacklistInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delRiskLoginBlacklistInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delRiskLoginBlacklistInfo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRiskLoginBlacklistInfo_result.class, metaDataMap);
    }

    public delRiskLoginBlacklistInfo_result() {
    }

    public delRiskLoginBlacklistInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delRiskLoginBlacklistInfo_result(delRiskLoginBlacklistInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public delRiskLoginBlacklistInfo_result deepCopy() {
      return new delRiskLoginBlacklistInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public delRiskLoginBlacklistInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delRiskLoginBlacklistInfo_result)
        return this.equals((delRiskLoginBlacklistInfo_result)that);
      return false;
    }

    public boolean equals(delRiskLoginBlacklistInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delRiskLoginBlacklistInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delRiskLoginBlacklistInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delRiskLoginBlacklistInfo_resultStandardSchemeFactory implements SchemeFactory {
      public delRiskLoginBlacklistInfo_resultStandardScheme getScheme() {
        return new delRiskLoginBlacklistInfo_resultStandardScheme();
      }
    }

    private static class delRiskLoginBlacklistInfo_resultStandardScheme extends StandardScheme<delRiskLoginBlacklistInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delRiskLoginBlacklistInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delRiskLoginBlacklistInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delRiskLoginBlacklistInfo_resultTupleSchemeFactory implements SchemeFactory {
      public delRiskLoginBlacklistInfo_resultTupleScheme getScheme() {
        return new delRiskLoginBlacklistInfo_resultTupleScheme();
      }
    }

    private static class delRiskLoginBlacklistInfo_resultTupleScheme extends TupleScheme<delRiskLoginBlacklistInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delRiskLoginBlacklistInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delRiskLoginBlacklistInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
