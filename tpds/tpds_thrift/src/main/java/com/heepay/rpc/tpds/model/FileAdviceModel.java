/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.tpds.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-07-18")
public class FileAdviceModel implements org.apache.thrift.TBase<FileAdviceModel, FileAdviceModel._Fields>, java.io.Serializable, Cloneable, Comparable<FileAdviceModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileAdviceModel");

  private static final org.apache.thrift.protocol.TField ADVICE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("adviceUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SYSTEM_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("systemNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileAdviceModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileAdviceModelTupleSchemeFactory());
  }

  public String adviceUrl; // required
  public String systemNo; // required
  public String fileName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADVICE_URL((short)1, "adviceUrl"),
    SYSTEM_NO((short)2, "systemNo"),
    FILE_NAME((short)3, "fileName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADVICE_URL
          return ADVICE_URL;
        case 2: // SYSTEM_NO
          return SYSTEM_NO;
        case 3: // FILE_NAME
          return FILE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADVICE_URL, new org.apache.thrift.meta_data.FieldMetaData("adviceUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYSTEM_NO, new org.apache.thrift.meta_data.FieldMetaData("systemNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileAdviceModel.class, metaDataMap);
  }

  public FileAdviceModel() {
  }

  public FileAdviceModel(
    String adviceUrl,
    String systemNo,
    String fileName)
  {
    this();
    this.adviceUrl = adviceUrl;
    this.systemNo = systemNo;
    this.fileName = fileName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileAdviceModel(FileAdviceModel other) {
    if (other.isSetAdviceUrl()) {
      this.adviceUrl = other.adviceUrl;
    }
    if (other.isSetSystemNo()) {
      this.systemNo = other.systemNo;
    }
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
  }

  public FileAdviceModel deepCopy() {
    return new FileAdviceModel(this);
  }

  @Override
  public void clear() {
    this.adviceUrl = null;
    this.systemNo = null;
    this.fileName = null;
  }

  public String getAdviceUrl() {
    return this.adviceUrl;
  }

  public FileAdviceModel setAdviceUrl(String adviceUrl) {
    this.adviceUrl = adviceUrl;
    return this;
  }

  public void unsetAdviceUrl() {
    this.adviceUrl = null;
  }

  /** Returns true if field adviceUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetAdviceUrl() {
    return this.adviceUrl != null;
  }

  public void setAdviceUrlIsSet(boolean value) {
    if (!value) {
      this.adviceUrl = null;
    }
  }

  public String getSystemNo() {
    return this.systemNo;
  }

  public FileAdviceModel setSystemNo(String systemNo) {
    this.systemNo = systemNo;
    return this;
  }

  public void unsetSystemNo() {
    this.systemNo = null;
  }

  /** Returns true if field systemNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemNo() {
    return this.systemNo != null;
  }

  public void setSystemNoIsSet(boolean value) {
    if (!value) {
      this.systemNo = null;
    }
  }

  public String getFileName() {
    return this.fileName;
  }

  public FileAdviceModel setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ADVICE_URL:
      if (value == null) {
        unsetAdviceUrl();
      } else {
        setAdviceUrl((String)value);
      }
      break;

    case SYSTEM_NO:
      if (value == null) {
        unsetSystemNo();
      } else {
        setSystemNo((String)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ADVICE_URL:
      return getAdviceUrl();

    case SYSTEM_NO:
      return getSystemNo();

    case FILE_NAME:
      return getFileName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ADVICE_URL:
      return isSetAdviceUrl();
    case SYSTEM_NO:
      return isSetSystemNo();
    case FILE_NAME:
      return isSetFileName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileAdviceModel)
      return this.equals((FileAdviceModel)that);
    return false;
  }

  public boolean equals(FileAdviceModel that) {
    if (that == null)
      return false;

    boolean this_present_adviceUrl = true && this.isSetAdviceUrl();
    boolean that_present_adviceUrl = true && that.isSetAdviceUrl();
    if (this_present_adviceUrl || that_present_adviceUrl) {
      if (!(this_present_adviceUrl && that_present_adviceUrl))
        return false;
      if (!this.adviceUrl.equals(that.adviceUrl))
        return false;
    }

    boolean this_present_systemNo = true && this.isSetSystemNo();
    boolean that_present_systemNo = true && that.isSetSystemNo();
    if (this_present_systemNo || that_present_systemNo) {
      if (!(this_present_systemNo && that_present_systemNo))
        return false;
      if (!this.systemNo.equals(that.systemNo))
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_adviceUrl = true && (isSetAdviceUrl());
    list.add(present_adviceUrl);
    if (present_adviceUrl)
      list.add(adviceUrl);

    boolean present_systemNo = true && (isSetSystemNo());
    list.add(present_systemNo);
    if (present_systemNo)
      list.add(systemNo);

    boolean present_fileName = true && (isSetFileName());
    list.add(present_fileName);
    if (present_fileName)
      list.add(fileName);

    return list.hashCode();
  }

  @Override
  public int compareTo(FileAdviceModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAdviceUrl()).compareTo(other.isSetAdviceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdviceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adviceUrl, other.adviceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemNo()).compareTo(other.isSetSystemNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemNo, other.systemNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileAdviceModel(");
    boolean first = true;

    sb.append("adviceUrl:");
    if (this.adviceUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.adviceUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemNo:");
    if (this.systemNo == null) {
      sb.append("null");
    } else {
      sb.append(this.systemNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileAdviceModelStandardSchemeFactory implements SchemeFactory {
    public FileAdviceModelStandardScheme getScheme() {
      return new FileAdviceModelStandardScheme();
    }
  }

  private static class FileAdviceModelStandardScheme extends StandardScheme<FileAdviceModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileAdviceModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADVICE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adviceUrl = iprot.readString();
              struct.setAdviceUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SYSTEM_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.systemNo = iprot.readString();
              struct.setSystemNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileAdviceModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.adviceUrl != null) {
        oprot.writeFieldBegin(ADVICE_URL_FIELD_DESC);
        oprot.writeString(struct.adviceUrl);
        oprot.writeFieldEnd();
      }
      if (struct.systemNo != null) {
        oprot.writeFieldBegin(SYSTEM_NO_FIELD_DESC);
        oprot.writeString(struct.systemNo);
        oprot.writeFieldEnd();
      }
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileAdviceModelTupleSchemeFactory implements SchemeFactory {
    public FileAdviceModelTupleScheme getScheme() {
      return new FileAdviceModelTupleScheme();
    }
  }

  private static class FileAdviceModelTupleScheme extends TupleScheme<FileAdviceModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileAdviceModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAdviceUrl()) {
        optionals.set(0);
      }
      if (struct.isSetSystemNo()) {
        optionals.set(1);
      }
      if (struct.isSetFileName()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAdviceUrl()) {
        oprot.writeString(struct.adviceUrl);
      }
      if (struct.isSetSystemNo()) {
        oprot.writeString(struct.systemNo);
      }
      if (struct.isSetFileName()) {
        oprot.writeString(struct.fileName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileAdviceModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.adviceUrl = iprot.readString();
        struct.setAdviceUrlIsSet(true);
      }
      if (incoming.get(1)) {
        struct.systemNo = iprot.readString();
        struct.setSystemNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fileName = iprot.readString();
        struct.setFileNameIsSet(true);
      }
    }
  }

}

