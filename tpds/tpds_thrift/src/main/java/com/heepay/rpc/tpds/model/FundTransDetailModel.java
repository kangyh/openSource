/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.tpds.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-15")
public class FundTransDetailModel implements org.apache.thrift.TBase<FundTransDetailModel, FundTransDetailModel._Fields>, java.io.Serializable, Cloneable, Comparable<FundTransDetailModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FundTransDetailModel");

  private static final org.apache.thrift.protocol.TField ODER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("oderNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DEBIT_ACCOUNT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("debitAccountNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CEBIT_ACCOUNT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cebitAccountNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OTHER_AMOUNTTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("otherAmounttype", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OTHER_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("otherAmount", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FundTransDetailModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FundTransDetailModelTupleSchemeFactory());
  }

  public String oderNo; // required
  public String debitAccountNo; // required
  public String cebitAccountNo; // required
  public String currency; // required
  public String amount; // required
  public String otherAmounttype; // required
  public String otherAmount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ODER_NO((short)1, "oderNo"),
    DEBIT_ACCOUNT_NO((short)2, "debitAccountNo"),
    CEBIT_ACCOUNT_NO((short)3, "cebitAccountNo"),
    CURRENCY((short)4, "currency"),
    AMOUNT((short)5, "amount"),
    OTHER_AMOUNTTYPE((short)6, "otherAmounttype"),
    OTHER_AMOUNT((short)7, "otherAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ODER_NO
          return ODER_NO;
        case 2: // DEBIT_ACCOUNT_NO
          return DEBIT_ACCOUNT_NO;
        case 3: // CEBIT_ACCOUNT_NO
          return CEBIT_ACCOUNT_NO;
        case 4: // CURRENCY
          return CURRENCY;
        case 5: // AMOUNT
          return AMOUNT;
        case 6: // OTHER_AMOUNTTYPE
          return OTHER_AMOUNTTYPE;
        case 7: // OTHER_AMOUNT
          return OTHER_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ODER_NO, new org.apache.thrift.meta_data.FieldMetaData("oderNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEBIT_ACCOUNT_NO, new org.apache.thrift.meta_data.FieldMetaData("debitAccountNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CEBIT_ACCOUNT_NO, new org.apache.thrift.meta_data.FieldMetaData("cebitAccountNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OTHER_AMOUNTTYPE, new org.apache.thrift.meta_data.FieldMetaData("otherAmounttype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OTHER_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("otherAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FundTransDetailModel.class, metaDataMap);
  }

  public FundTransDetailModel() {
  }

  public FundTransDetailModel(
    String oderNo,
    String debitAccountNo,
    String cebitAccountNo,
    String currency,
    String amount,
    String otherAmounttype,
    String otherAmount)
  {
    this();
    this.oderNo = oderNo;
    this.debitAccountNo = debitAccountNo;
    this.cebitAccountNo = cebitAccountNo;
    this.currency = currency;
    this.amount = amount;
    this.otherAmounttype = otherAmounttype;
    this.otherAmount = otherAmount;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FundTransDetailModel(FundTransDetailModel other) {
    if (other.isSetOderNo()) {
      this.oderNo = other.oderNo;
    }
    if (other.isSetDebitAccountNo()) {
      this.debitAccountNo = other.debitAccountNo;
    }
    if (other.isSetCebitAccountNo()) {
      this.cebitAccountNo = other.cebitAccountNo;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    if (other.isSetAmount()) {
      this.amount = other.amount;
    }
    if (other.isSetOtherAmounttype()) {
      this.otherAmounttype = other.otherAmounttype;
    }
    if (other.isSetOtherAmount()) {
      this.otherAmount = other.otherAmount;
    }
  }

  public FundTransDetailModel deepCopy() {
    return new FundTransDetailModel(this);
  }

  @Override
  public void clear() {
    this.oderNo = null;
    this.debitAccountNo = null;
    this.cebitAccountNo = null;
    this.currency = null;
    this.amount = null;
    this.otherAmounttype = null;
    this.otherAmount = null;
  }

  public String getOderNo() {
    return this.oderNo;
  }

  public FundTransDetailModel setOderNo(String oderNo) {
    this.oderNo = oderNo;
    return this;
  }

  public void unsetOderNo() {
    this.oderNo = null;
  }

  /** Returns true if field oderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOderNo() {
    return this.oderNo != null;
  }

  public void setOderNoIsSet(boolean value) {
    if (!value) {
      this.oderNo = null;
    }
  }

  public String getDebitAccountNo() {
    return this.debitAccountNo;
  }

  public FundTransDetailModel setDebitAccountNo(String debitAccountNo) {
    this.debitAccountNo = debitAccountNo;
    return this;
  }

  public void unsetDebitAccountNo() {
    this.debitAccountNo = null;
  }

  /** Returns true if field debitAccountNo is set (has been assigned a value) and false otherwise */
  public boolean isSetDebitAccountNo() {
    return this.debitAccountNo != null;
  }

  public void setDebitAccountNoIsSet(boolean value) {
    if (!value) {
      this.debitAccountNo = null;
    }
  }

  public String getCebitAccountNo() {
    return this.cebitAccountNo;
  }

  public FundTransDetailModel setCebitAccountNo(String cebitAccountNo) {
    this.cebitAccountNo = cebitAccountNo;
    return this;
  }

  public void unsetCebitAccountNo() {
    this.cebitAccountNo = null;
  }

  /** Returns true if field cebitAccountNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCebitAccountNo() {
    return this.cebitAccountNo != null;
  }

  public void setCebitAccountNoIsSet(boolean value) {
    if (!value) {
      this.cebitAccountNo = null;
    }
  }

  public String getCurrency() {
    return this.currency;
  }

  public FundTransDetailModel setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public String getAmount() {
    return this.amount;
  }

  public FundTransDetailModel setAmount(String amount) {
    this.amount = amount;
    return this;
  }

  public void unsetAmount() {
    this.amount = null;
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return this.amount != null;
  }

  public void setAmountIsSet(boolean value) {
    if (!value) {
      this.amount = null;
    }
  }

  public String getOtherAmounttype() {
    return this.otherAmounttype;
  }

  public FundTransDetailModel setOtherAmounttype(String otherAmounttype) {
    this.otherAmounttype = otherAmounttype;
    return this;
  }

  public void unsetOtherAmounttype() {
    this.otherAmounttype = null;
  }

  /** Returns true if field otherAmounttype is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherAmounttype() {
    return this.otherAmounttype != null;
  }

  public void setOtherAmounttypeIsSet(boolean value) {
    if (!value) {
      this.otherAmounttype = null;
    }
  }

  public String getOtherAmount() {
    return this.otherAmount;
  }

  public FundTransDetailModel setOtherAmount(String otherAmount) {
    this.otherAmount = otherAmount;
    return this;
  }

  public void unsetOtherAmount() {
    this.otherAmount = null;
  }

  /** Returns true if field otherAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherAmount() {
    return this.otherAmount != null;
  }

  public void setOtherAmountIsSet(boolean value) {
    if (!value) {
      this.otherAmount = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ODER_NO:
      if (value == null) {
        unsetOderNo();
      } else {
        setOderNo((String)value);
      }
      break;

    case DEBIT_ACCOUNT_NO:
      if (value == null) {
        unsetDebitAccountNo();
      } else {
        setDebitAccountNo((String)value);
      }
      break;

    case CEBIT_ACCOUNT_NO:
      if (value == null) {
        unsetCebitAccountNo();
      } else {
        setCebitAccountNo((String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((String)value);
      }
      break;

    case OTHER_AMOUNTTYPE:
      if (value == null) {
        unsetOtherAmounttype();
      } else {
        setOtherAmounttype((String)value);
      }
      break;

    case OTHER_AMOUNT:
      if (value == null) {
        unsetOtherAmount();
      } else {
        setOtherAmount((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ODER_NO:
      return getOderNo();

    case DEBIT_ACCOUNT_NO:
      return getDebitAccountNo();

    case CEBIT_ACCOUNT_NO:
      return getCebitAccountNo();

    case CURRENCY:
      return getCurrency();

    case AMOUNT:
      return getAmount();

    case OTHER_AMOUNTTYPE:
      return getOtherAmounttype();

    case OTHER_AMOUNT:
      return getOtherAmount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ODER_NO:
      return isSetOderNo();
    case DEBIT_ACCOUNT_NO:
      return isSetDebitAccountNo();
    case CEBIT_ACCOUNT_NO:
      return isSetCebitAccountNo();
    case CURRENCY:
      return isSetCurrency();
    case AMOUNT:
      return isSetAmount();
    case OTHER_AMOUNTTYPE:
      return isSetOtherAmounttype();
    case OTHER_AMOUNT:
      return isSetOtherAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FundTransDetailModel)
      return this.equals((FundTransDetailModel)that);
    return false;
  }

  public boolean equals(FundTransDetailModel that) {
    if (that == null)
      return false;

    boolean this_present_oderNo = true && this.isSetOderNo();
    boolean that_present_oderNo = true && that.isSetOderNo();
    if (this_present_oderNo || that_present_oderNo) {
      if (!(this_present_oderNo && that_present_oderNo))
        return false;
      if (!this.oderNo.equals(that.oderNo))
        return false;
    }

    boolean this_present_debitAccountNo = true && this.isSetDebitAccountNo();
    boolean that_present_debitAccountNo = true && that.isSetDebitAccountNo();
    if (this_present_debitAccountNo || that_present_debitAccountNo) {
      if (!(this_present_debitAccountNo && that_present_debitAccountNo))
        return false;
      if (!this.debitAccountNo.equals(that.debitAccountNo))
        return false;
    }

    boolean this_present_cebitAccountNo = true && this.isSetCebitAccountNo();
    boolean that_present_cebitAccountNo = true && that.isSetCebitAccountNo();
    if (this_present_cebitAccountNo || that_present_cebitAccountNo) {
      if (!(this_present_cebitAccountNo && that_present_cebitAccountNo))
        return false;
      if (!this.cebitAccountNo.equals(that.cebitAccountNo))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_amount = true && this.isSetAmount();
    boolean that_present_amount = true && that.isSetAmount();
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (!this.amount.equals(that.amount))
        return false;
    }

    boolean this_present_otherAmounttype = true && this.isSetOtherAmounttype();
    boolean that_present_otherAmounttype = true && that.isSetOtherAmounttype();
    if (this_present_otherAmounttype || that_present_otherAmounttype) {
      if (!(this_present_otherAmounttype && that_present_otherAmounttype))
        return false;
      if (!this.otherAmounttype.equals(that.otherAmounttype))
        return false;
    }

    boolean this_present_otherAmount = true && this.isSetOtherAmount();
    boolean that_present_otherAmount = true && that.isSetOtherAmount();
    if (this_present_otherAmount || that_present_otherAmount) {
      if (!(this_present_otherAmount && that_present_otherAmount))
        return false;
      if (!this.otherAmount.equals(that.otherAmount))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_oderNo = true && (isSetOderNo());
    list.add(present_oderNo);
    if (present_oderNo)
      list.add(oderNo);

    boolean present_debitAccountNo = true && (isSetDebitAccountNo());
    list.add(present_debitAccountNo);
    if (present_debitAccountNo)
      list.add(debitAccountNo);

    boolean present_cebitAccountNo = true && (isSetCebitAccountNo());
    list.add(present_cebitAccountNo);
    if (present_cebitAccountNo)
      list.add(cebitAccountNo);

    boolean present_currency = true && (isSetCurrency());
    list.add(present_currency);
    if (present_currency)
      list.add(currency);

    boolean present_amount = true && (isSetAmount());
    list.add(present_amount);
    if (present_amount)
      list.add(amount);

    boolean present_otherAmounttype = true && (isSetOtherAmounttype());
    list.add(present_otherAmounttype);
    if (present_otherAmounttype)
      list.add(otherAmounttype);

    boolean present_otherAmount = true && (isSetOtherAmount());
    list.add(present_otherAmount);
    if (present_otherAmount)
      list.add(otherAmount);

    return list.hashCode();
  }

  @Override
  public int compareTo(FundTransDetailModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOderNo()).compareTo(other.isSetOderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oderNo, other.oderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebitAccountNo()).compareTo(other.isSetDebitAccountNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebitAccountNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debitAccountNo, other.debitAccountNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCebitAccountNo()).compareTo(other.isSetCebitAccountNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCebitAccountNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cebitAccountNo, other.cebitAccountNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherAmounttype()).compareTo(other.isSetOtherAmounttype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherAmounttype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherAmounttype, other.otherAmounttype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherAmount()).compareTo(other.isSetOtherAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherAmount, other.otherAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FundTransDetailModel(");
    boolean first = true;

    sb.append("oderNo:");
    if (this.oderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.oderNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("debitAccountNo:");
    if (this.debitAccountNo == null) {
      sb.append("null");
    } else {
      sb.append(this.debitAccountNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cebitAccountNo:");
    if (this.cebitAccountNo == null) {
      sb.append("null");
    } else {
      sb.append(this.cebitAccountNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    if (this.amount == null) {
      sb.append("null");
    } else {
      sb.append(this.amount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("otherAmounttype:");
    if (this.otherAmounttype == null) {
      sb.append("null");
    } else {
      sb.append(this.otherAmounttype);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("otherAmount:");
    if (this.otherAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.otherAmount);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FundTransDetailModelStandardSchemeFactory implements SchemeFactory {
    public FundTransDetailModelStandardScheme getScheme() {
      return new FundTransDetailModelStandardScheme();
    }
  }

  private static class FundTransDetailModelStandardScheme extends StandardScheme<FundTransDetailModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FundTransDetailModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ODER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oderNo = iprot.readString();
              struct.setOderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEBIT_ACCOUNT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.debitAccountNo = iprot.readString();
              struct.setDebitAccountNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CEBIT_ACCOUNT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cebitAccountNo = iprot.readString();
              struct.setCebitAccountNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.amount = iprot.readString();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OTHER_AMOUNTTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.otherAmounttype = iprot.readString();
              struct.setOtherAmounttypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OTHER_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.otherAmount = iprot.readString();
              struct.setOtherAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FundTransDetailModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.oderNo != null) {
        oprot.writeFieldBegin(ODER_NO_FIELD_DESC);
        oprot.writeString(struct.oderNo);
        oprot.writeFieldEnd();
      }
      if (struct.debitAccountNo != null) {
        oprot.writeFieldBegin(DEBIT_ACCOUNT_NO_FIELD_DESC);
        oprot.writeString(struct.debitAccountNo);
        oprot.writeFieldEnd();
      }
      if (struct.cebitAccountNo != null) {
        oprot.writeFieldBegin(CEBIT_ACCOUNT_NO_FIELD_DESC);
        oprot.writeString(struct.cebitAccountNo);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.currency);
        oprot.writeFieldEnd();
      }
      if (struct.amount != null) {
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeString(struct.amount);
        oprot.writeFieldEnd();
      }
      if (struct.otherAmounttype != null) {
        oprot.writeFieldBegin(OTHER_AMOUNTTYPE_FIELD_DESC);
        oprot.writeString(struct.otherAmounttype);
        oprot.writeFieldEnd();
      }
      if (struct.otherAmount != null) {
        oprot.writeFieldBegin(OTHER_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.otherAmount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FundTransDetailModelTupleSchemeFactory implements SchemeFactory {
    public FundTransDetailModelTupleScheme getScheme() {
      return new FundTransDetailModelTupleScheme();
    }
  }

  private static class FundTransDetailModelTupleScheme extends TupleScheme<FundTransDetailModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FundTransDetailModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOderNo()) {
        optionals.set(0);
      }
      if (struct.isSetDebitAccountNo()) {
        optionals.set(1);
      }
      if (struct.isSetCebitAccountNo()) {
        optionals.set(2);
      }
      if (struct.isSetCurrency()) {
        optionals.set(3);
      }
      if (struct.isSetAmount()) {
        optionals.set(4);
      }
      if (struct.isSetOtherAmounttype()) {
        optionals.set(5);
      }
      if (struct.isSetOtherAmount()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetOderNo()) {
        oprot.writeString(struct.oderNo);
      }
      if (struct.isSetDebitAccountNo()) {
        oprot.writeString(struct.debitAccountNo);
      }
      if (struct.isSetCebitAccountNo()) {
        oprot.writeString(struct.cebitAccountNo);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetAmount()) {
        oprot.writeString(struct.amount);
      }
      if (struct.isSetOtherAmounttype()) {
        oprot.writeString(struct.otherAmounttype);
      }
      if (struct.isSetOtherAmount()) {
        oprot.writeString(struct.otherAmount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FundTransDetailModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.oderNo = iprot.readString();
        struct.setOderNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.debitAccountNo = iprot.readString();
        struct.setDebitAccountNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cebitAccountNo = iprot.readString();
        struct.setCebitAccountNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.amount = iprot.readString();
        struct.setAmountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.otherAmounttype = iprot.readString();
        struct.setOtherAmounttypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.otherAmount = iprot.readString();
        struct.setOtherAmountIsSet(true);
      }
    }
  }

}

