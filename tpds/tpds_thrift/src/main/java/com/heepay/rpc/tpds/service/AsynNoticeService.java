/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.tpds.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-18")
public class AsynNoticeService {

  public interface Iface {

    public String customerChargeAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException;

    public String customerWithdrawAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException;

    public String fileAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException;

    public String bankWithdrawAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException;

    public String cutDayAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException;

    public String setPasswordAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException;

    public String editPasswordAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException;

    public String resetPasswordAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void customerChargeAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void customerWithdrawAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void fileAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bankWithdrawAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cutDayAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setPasswordAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editPasswordAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resetPasswordAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String customerChargeAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      send_customerChargeAsynNotice(requestHeader, requestBody);
      return recv_customerChargeAsynNotice();
    }

    public void send_customerChargeAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      customerChargeAsynNotice_args args = new customerChargeAsynNotice_args();
      args.setRequestHeader(requestHeader);
      args.setRequestBody(requestBody);
      sendBase("customerChargeAsynNotice", args);
    }

    public String recv_customerChargeAsynNotice() throws org.apache.thrift.TException
    {
      customerChargeAsynNotice_result result = new customerChargeAsynNotice_result();
      receiveBase(result, "customerChargeAsynNotice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "customerChargeAsynNotice failed: unknown result");
    }

    public String customerWithdrawAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      send_customerWithdrawAsynNotice(requestHeader, requestBody);
      return recv_customerWithdrawAsynNotice();
    }

    public void send_customerWithdrawAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      customerWithdrawAsynNotice_args args = new customerWithdrawAsynNotice_args();
      args.setRequestHeader(requestHeader);
      args.setRequestBody(requestBody);
      sendBase("customerWithdrawAsynNotice", args);
    }

    public String recv_customerWithdrawAsynNotice() throws org.apache.thrift.TException
    {
      customerWithdrawAsynNotice_result result = new customerWithdrawAsynNotice_result();
      receiveBase(result, "customerWithdrawAsynNotice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "customerWithdrawAsynNotice failed: unknown result");
    }

    public String fileAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      send_fileAsynNotice(requestHeader, requestBody);
      return recv_fileAsynNotice();
    }

    public void send_fileAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      fileAsynNotice_args args = new fileAsynNotice_args();
      args.setRequestHeader(requestHeader);
      args.setRequestBody(requestBody);
      sendBase("fileAsynNotice", args);
    }

    public String recv_fileAsynNotice() throws org.apache.thrift.TException
    {
      fileAsynNotice_result result = new fileAsynNotice_result();
      receiveBase(result, "fileAsynNotice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fileAsynNotice failed: unknown result");
    }

    public String bankWithdrawAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      send_bankWithdrawAsynNotice(requestHeader, requestBody);
      return recv_bankWithdrawAsynNotice();
    }

    public void send_bankWithdrawAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      bankWithdrawAsynNotice_args args = new bankWithdrawAsynNotice_args();
      args.setRequestHeader(requestHeader);
      args.setRequestBody(requestBody);
      sendBase("bankWithdrawAsynNotice", args);
    }

    public String recv_bankWithdrawAsynNotice() throws org.apache.thrift.TException
    {
      bankWithdrawAsynNotice_result result = new bankWithdrawAsynNotice_result();
      receiveBase(result, "bankWithdrawAsynNotice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bankWithdrawAsynNotice failed: unknown result");
    }

    public String cutDayAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      send_cutDayAsynNotice(requestHeader, requestBody);
      return recv_cutDayAsynNotice();
    }

    public void send_cutDayAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      cutDayAsynNotice_args args = new cutDayAsynNotice_args();
      args.setRequestHeader(requestHeader);
      args.setRequestBody(requestBody);
      sendBase("cutDayAsynNotice", args);
    }

    public String recv_cutDayAsynNotice() throws org.apache.thrift.TException
    {
      cutDayAsynNotice_result result = new cutDayAsynNotice_result();
      receiveBase(result, "cutDayAsynNotice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cutDayAsynNotice failed: unknown result");
    }

    public String setPasswordAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      send_setPasswordAsynNotice(requestHeader, requestBody);
      return recv_setPasswordAsynNotice();
    }

    public void send_setPasswordAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      setPasswordAsynNotice_args args = new setPasswordAsynNotice_args();
      args.setRequestHeader(requestHeader);
      args.setRequestBody(requestBody);
      sendBase("setPasswordAsynNotice", args);
    }

    public String recv_setPasswordAsynNotice() throws org.apache.thrift.TException
    {
      setPasswordAsynNotice_result result = new setPasswordAsynNotice_result();
      receiveBase(result, "setPasswordAsynNotice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setPasswordAsynNotice failed: unknown result");
    }

    public String editPasswordAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      send_editPasswordAsynNotice(requestHeader, requestBody);
      return recv_editPasswordAsynNotice();
    }

    public void send_editPasswordAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      editPasswordAsynNotice_args args = new editPasswordAsynNotice_args();
      args.setRequestHeader(requestHeader);
      args.setRequestBody(requestBody);
      sendBase("editPasswordAsynNotice", args);
    }

    public String recv_editPasswordAsynNotice() throws org.apache.thrift.TException
    {
      editPasswordAsynNotice_result result = new editPasswordAsynNotice_result();
      receiveBase(result, "editPasswordAsynNotice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editPasswordAsynNotice failed: unknown result");
    }

    public String resetPasswordAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      send_resetPasswordAsynNotice(requestHeader, requestBody);
      return recv_resetPasswordAsynNotice();
    }

    public void send_resetPasswordAsynNotice(String requestHeader, String requestBody) throws org.apache.thrift.TException
    {
      resetPasswordAsynNotice_args args = new resetPasswordAsynNotice_args();
      args.setRequestHeader(requestHeader);
      args.setRequestBody(requestBody);
      sendBase("resetPasswordAsynNotice", args);
    }

    public String recv_resetPasswordAsynNotice() throws org.apache.thrift.TException
    {
      resetPasswordAsynNotice_result result = new resetPasswordAsynNotice_result();
      receiveBase(result, "resetPasswordAsynNotice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resetPasswordAsynNotice failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void customerChargeAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      customerChargeAsynNotice_call method_call = new customerChargeAsynNotice_call(requestHeader, requestBody, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class customerChargeAsynNotice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requestHeader;
      private String requestBody;
      public customerChargeAsynNotice_call(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestHeader = requestHeader;
        this.requestBody = requestBody;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("customerChargeAsynNotice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        customerChargeAsynNotice_args args = new customerChargeAsynNotice_args();
        args.setRequestHeader(requestHeader);
        args.setRequestBody(requestBody);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_customerChargeAsynNotice();
      }
    }

    public void customerWithdrawAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      customerWithdrawAsynNotice_call method_call = new customerWithdrawAsynNotice_call(requestHeader, requestBody, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class customerWithdrawAsynNotice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requestHeader;
      private String requestBody;
      public customerWithdrawAsynNotice_call(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestHeader = requestHeader;
        this.requestBody = requestBody;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("customerWithdrawAsynNotice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        customerWithdrawAsynNotice_args args = new customerWithdrawAsynNotice_args();
        args.setRequestHeader(requestHeader);
        args.setRequestBody(requestBody);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_customerWithdrawAsynNotice();
      }
    }

    public void fileAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fileAsynNotice_call method_call = new fileAsynNotice_call(requestHeader, requestBody, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fileAsynNotice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requestHeader;
      private String requestBody;
      public fileAsynNotice_call(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestHeader = requestHeader;
        this.requestBody = requestBody;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fileAsynNotice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fileAsynNotice_args args = new fileAsynNotice_args();
        args.setRequestHeader(requestHeader);
        args.setRequestBody(requestBody);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fileAsynNotice();
      }
    }

    public void bankWithdrawAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bankWithdrawAsynNotice_call method_call = new bankWithdrawAsynNotice_call(requestHeader, requestBody, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bankWithdrawAsynNotice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requestHeader;
      private String requestBody;
      public bankWithdrawAsynNotice_call(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestHeader = requestHeader;
        this.requestBody = requestBody;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bankWithdrawAsynNotice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bankWithdrawAsynNotice_args args = new bankWithdrawAsynNotice_args();
        args.setRequestHeader(requestHeader);
        args.setRequestBody(requestBody);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bankWithdrawAsynNotice();
      }
    }

    public void cutDayAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cutDayAsynNotice_call method_call = new cutDayAsynNotice_call(requestHeader, requestBody, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cutDayAsynNotice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requestHeader;
      private String requestBody;
      public cutDayAsynNotice_call(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestHeader = requestHeader;
        this.requestBody = requestBody;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cutDayAsynNotice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cutDayAsynNotice_args args = new cutDayAsynNotice_args();
        args.setRequestHeader(requestHeader);
        args.setRequestBody(requestBody);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cutDayAsynNotice();
      }
    }

    public void setPasswordAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPasswordAsynNotice_call method_call = new setPasswordAsynNotice_call(requestHeader, requestBody, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPasswordAsynNotice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requestHeader;
      private String requestBody;
      public setPasswordAsynNotice_call(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestHeader = requestHeader;
        this.requestBody = requestBody;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPasswordAsynNotice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPasswordAsynNotice_args args = new setPasswordAsynNotice_args();
        args.setRequestHeader(requestHeader);
        args.setRequestBody(requestBody);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setPasswordAsynNotice();
      }
    }

    public void editPasswordAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editPasswordAsynNotice_call method_call = new editPasswordAsynNotice_call(requestHeader, requestBody, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editPasswordAsynNotice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requestHeader;
      private String requestBody;
      public editPasswordAsynNotice_call(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestHeader = requestHeader;
        this.requestBody = requestBody;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editPasswordAsynNotice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editPasswordAsynNotice_args args = new editPasswordAsynNotice_args();
        args.setRequestHeader(requestHeader);
        args.setRequestBody(requestBody);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editPasswordAsynNotice();
      }
    }

    public void resetPasswordAsynNotice(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resetPasswordAsynNotice_call method_call = new resetPasswordAsynNotice_call(requestHeader, requestBody, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resetPasswordAsynNotice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requestHeader;
      private String requestBody;
      public resetPasswordAsynNotice_call(String requestHeader, String requestBody, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestHeader = requestHeader;
        this.requestBody = requestBody;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resetPasswordAsynNotice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resetPasswordAsynNotice_args args = new resetPasswordAsynNotice_args();
        args.setRequestHeader(requestHeader);
        args.setRequestBody(requestBody);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resetPasswordAsynNotice();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("customerChargeAsynNotice", new customerChargeAsynNotice());
      processMap.put("customerWithdrawAsynNotice", new customerWithdrawAsynNotice());
      processMap.put("fileAsynNotice", new fileAsynNotice());
      processMap.put("bankWithdrawAsynNotice", new bankWithdrawAsynNotice());
      processMap.put("cutDayAsynNotice", new cutDayAsynNotice());
      processMap.put("setPasswordAsynNotice", new setPasswordAsynNotice());
      processMap.put("editPasswordAsynNotice", new editPasswordAsynNotice());
      processMap.put("resetPasswordAsynNotice", new resetPasswordAsynNotice());
      return processMap;
    }

    public static class customerChargeAsynNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, customerChargeAsynNotice_args> {
      public customerChargeAsynNotice() {
        super("customerChargeAsynNotice");
      }

      public customerChargeAsynNotice_args getEmptyArgsInstance() {
        return new customerChargeAsynNotice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public customerChargeAsynNotice_result getResult(I iface, customerChargeAsynNotice_args args) throws org.apache.thrift.TException {
        customerChargeAsynNotice_result result = new customerChargeAsynNotice_result();
        result.success = iface.customerChargeAsynNotice(args.requestHeader, args.requestBody);
        return result;
      }
    }

    public static class customerWithdrawAsynNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, customerWithdrawAsynNotice_args> {
      public customerWithdrawAsynNotice() {
        super("customerWithdrawAsynNotice");
      }

      public customerWithdrawAsynNotice_args getEmptyArgsInstance() {
        return new customerWithdrawAsynNotice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public customerWithdrawAsynNotice_result getResult(I iface, customerWithdrawAsynNotice_args args) throws org.apache.thrift.TException {
        customerWithdrawAsynNotice_result result = new customerWithdrawAsynNotice_result();
        result.success = iface.customerWithdrawAsynNotice(args.requestHeader, args.requestBody);
        return result;
      }
    }

    public static class fileAsynNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fileAsynNotice_args> {
      public fileAsynNotice() {
        super("fileAsynNotice");
      }

      public fileAsynNotice_args getEmptyArgsInstance() {
        return new fileAsynNotice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fileAsynNotice_result getResult(I iface, fileAsynNotice_args args) throws org.apache.thrift.TException {
        fileAsynNotice_result result = new fileAsynNotice_result();
        result.success = iface.fileAsynNotice(args.requestHeader, args.requestBody);
        return result;
      }
    }

    public static class bankWithdrawAsynNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bankWithdrawAsynNotice_args> {
      public bankWithdrawAsynNotice() {
        super("bankWithdrawAsynNotice");
      }

      public bankWithdrawAsynNotice_args getEmptyArgsInstance() {
        return new bankWithdrawAsynNotice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bankWithdrawAsynNotice_result getResult(I iface, bankWithdrawAsynNotice_args args) throws org.apache.thrift.TException {
        bankWithdrawAsynNotice_result result = new bankWithdrawAsynNotice_result();
        result.success = iface.bankWithdrawAsynNotice(args.requestHeader, args.requestBody);
        return result;
      }
    }

    public static class cutDayAsynNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cutDayAsynNotice_args> {
      public cutDayAsynNotice() {
        super("cutDayAsynNotice");
      }

      public cutDayAsynNotice_args getEmptyArgsInstance() {
        return new cutDayAsynNotice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cutDayAsynNotice_result getResult(I iface, cutDayAsynNotice_args args) throws org.apache.thrift.TException {
        cutDayAsynNotice_result result = new cutDayAsynNotice_result();
        result.success = iface.cutDayAsynNotice(args.requestHeader, args.requestBody);
        return result;
      }
    }

    public static class setPasswordAsynNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPasswordAsynNotice_args> {
      public setPasswordAsynNotice() {
        super("setPasswordAsynNotice");
      }

      public setPasswordAsynNotice_args getEmptyArgsInstance() {
        return new setPasswordAsynNotice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setPasswordAsynNotice_result getResult(I iface, setPasswordAsynNotice_args args) throws org.apache.thrift.TException {
        setPasswordAsynNotice_result result = new setPasswordAsynNotice_result();
        result.success = iface.setPasswordAsynNotice(args.requestHeader, args.requestBody);
        return result;
      }
    }

    public static class editPasswordAsynNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editPasswordAsynNotice_args> {
      public editPasswordAsynNotice() {
        super("editPasswordAsynNotice");
      }

      public editPasswordAsynNotice_args getEmptyArgsInstance() {
        return new editPasswordAsynNotice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editPasswordAsynNotice_result getResult(I iface, editPasswordAsynNotice_args args) throws org.apache.thrift.TException {
        editPasswordAsynNotice_result result = new editPasswordAsynNotice_result();
        result.success = iface.editPasswordAsynNotice(args.requestHeader, args.requestBody);
        return result;
      }
    }

    public static class resetPasswordAsynNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resetPasswordAsynNotice_args> {
      public resetPasswordAsynNotice() {
        super("resetPasswordAsynNotice");
      }

      public resetPasswordAsynNotice_args getEmptyArgsInstance() {
        return new resetPasswordAsynNotice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resetPasswordAsynNotice_result getResult(I iface, resetPasswordAsynNotice_args args) throws org.apache.thrift.TException {
        resetPasswordAsynNotice_result result = new resetPasswordAsynNotice_result();
        result.success = iface.resetPasswordAsynNotice(args.requestHeader, args.requestBody);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("customerChargeAsynNotice", new customerChargeAsynNotice());
      processMap.put("customerWithdrawAsynNotice", new customerWithdrawAsynNotice());
      processMap.put("fileAsynNotice", new fileAsynNotice());
      processMap.put("bankWithdrawAsynNotice", new bankWithdrawAsynNotice());
      processMap.put("cutDayAsynNotice", new cutDayAsynNotice());
      processMap.put("setPasswordAsynNotice", new setPasswordAsynNotice());
      processMap.put("editPasswordAsynNotice", new editPasswordAsynNotice());
      processMap.put("resetPasswordAsynNotice", new resetPasswordAsynNotice());
      return processMap;
    }

    public static class customerChargeAsynNotice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, customerChargeAsynNotice_args, String> {
      public customerChargeAsynNotice() {
        super("customerChargeAsynNotice");
      }

      public customerChargeAsynNotice_args getEmptyArgsInstance() {
        return new customerChargeAsynNotice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            customerChargeAsynNotice_result result = new customerChargeAsynNotice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            customerChargeAsynNotice_result result = new customerChargeAsynNotice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, customerChargeAsynNotice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.customerChargeAsynNotice(args.requestHeader, args.requestBody,resultHandler);
      }
    }

    public static class customerWithdrawAsynNotice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, customerWithdrawAsynNotice_args, String> {
      public customerWithdrawAsynNotice() {
        super("customerWithdrawAsynNotice");
      }

      public customerWithdrawAsynNotice_args getEmptyArgsInstance() {
        return new customerWithdrawAsynNotice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            customerWithdrawAsynNotice_result result = new customerWithdrawAsynNotice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            customerWithdrawAsynNotice_result result = new customerWithdrawAsynNotice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, customerWithdrawAsynNotice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.customerWithdrawAsynNotice(args.requestHeader, args.requestBody,resultHandler);
      }
    }

    public static class fileAsynNotice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fileAsynNotice_args, String> {
      public fileAsynNotice() {
        super("fileAsynNotice");
      }

      public fileAsynNotice_args getEmptyArgsInstance() {
        return new fileAsynNotice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            fileAsynNotice_result result = new fileAsynNotice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            fileAsynNotice_result result = new fileAsynNotice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fileAsynNotice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.fileAsynNotice(args.requestHeader, args.requestBody,resultHandler);
      }
    }

    public static class bankWithdrawAsynNotice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bankWithdrawAsynNotice_args, String> {
      public bankWithdrawAsynNotice() {
        super("bankWithdrawAsynNotice");
      }

      public bankWithdrawAsynNotice_args getEmptyArgsInstance() {
        return new bankWithdrawAsynNotice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            bankWithdrawAsynNotice_result result = new bankWithdrawAsynNotice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bankWithdrawAsynNotice_result result = new bankWithdrawAsynNotice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bankWithdrawAsynNotice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.bankWithdrawAsynNotice(args.requestHeader, args.requestBody,resultHandler);
      }
    }

    public static class cutDayAsynNotice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cutDayAsynNotice_args, String> {
      public cutDayAsynNotice() {
        super("cutDayAsynNotice");
      }

      public cutDayAsynNotice_args getEmptyArgsInstance() {
        return new cutDayAsynNotice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            cutDayAsynNotice_result result = new cutDayAsynNotice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cutDayAsynNotice_result result = new cutDayAsynNotice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cutDayAsynNotice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.cutDayAsynNotice(args.requestHeader, args.requestBody,resultHandler);
      }
    }

    public static class setPasswordAsynNotice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setPasswordAsynNotice_args, String> {
      public setPasswordAsynNotice() {
        super("setPasswordAsynNotice");
      }

      public setPasswordAsynNotice_args getEmptyArgsInstance() {
        return new setPasswordAsynNotice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            setPasswordAsynNotice_result result = new setPasswordAsynNotice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setPasswordAsynNotice_result result = new setPasswordAsynNotice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setPasswordAsynNotice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.setPasswordAsynNotice(args.requestHeader, args.requestBody,resultHandler);
      }
    }

    public static class editPasswordAsynNotice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editPasswordAsynNotice_args, String> {
      public editPasswordAsynNotice() {
        super("editPasswordAsynNotice");
      }

      public editPasswordAsynNotice_args getEmptyArgsInstance() {
        return new editPasswordAsynNotice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editPasswordAsynNotice_result result = new editPasswordAsynNotice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editPasswordAsynNotice_result result = new editPasswordAsynNotice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editPasswordAsynNotice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editPasswordAsynNotice(args.requestHeader, args.requestBody,resultHandler);
      }
    }

    public static class resetPasswordAsynNotice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resetPasswordAsynNotice_args, String> {
      public resetPasswordAsynNotice() {
        super("resetPasswordAsynNotice");
      }

      public resetPasswordAsynNotice_args getEmptyArgsInstance() {
        return new resetPasswordAsynNotice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            resetPasswordAsynNotice_result result = new resetPasswordAsynNotice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resetPasswordAsynNotice_result result = new resetPasswordAsynNotice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resetPasswordAsynNotice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.resetPasswordAsynNotice(args.requestHeader, args.requestBody,resultHandler);
      }
    }

  }

  public static class customerChargeAsynNotice_args implements org.apache.thrift.TBase<customerChargeAsynNotice_args, customerChargeAsynNotice_args._Fields>, java.io.Serializable, Cloneable, Comparable<customerChargeAsynNotice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("customerChargeAsynNotice_args");

    private static final org.apache.thrift.protocol.TField REQUEST_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("requestHeader", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("requestBody", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new customerChargeAsynNotice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new customerChargeAsynNotice_argsTupleSchemeFactory());
    }

    public String requestHeader; // required
    public String requestBody; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_HEADER((short)1, "requestHeader"),
      REQUEST_BODY((short)2, "requestBody");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_HEADER
            return REQUEST_HEADER;
          case 2: // REQUEST_BODY
            return REQUEST_BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_HEADER, new org.apache.thrift.meta_data.FieldMetaData("requestHeader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST_BODY, new org.apache.thrift.meta_data.FieldMetaData("requestBody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(customerChargeAsynNotice_args.class, metaDataMap);
    }

    public customerChargeAsynNotice_args() {
    }

    public customerChargeAsynNotice_args(
      String requestHeader,
      String requestBody)
    {
      this();
      this.requestHeader = requestHeader;
      this.requestBody = requestBody;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public customerChargeAsynNotice_args(customerChargeAsynNotice_args other) {
      if (other.isSetRequestHeader()) {
        this.requestHeader = other.requestHeader;
      }
      if (other.isSetRequestBody()) {
        this.requestBody = other.requestBody;
      }
    }

    public customerChargeAsynNotice_args deepCopy() {
      return new customerChargeAsynNotice_args(this);
    }

    @Override
    public void clear() {
      this.requestHeader = null;
      this.requestBody = null;
    }

    public String getRequestHeader() {
      return this.requestHeader;
    }

    public customerChargeAsynNotice_args setRequestHeader(String requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }

    public void unsetRequestHeader() {
      this.requestHeader = null;
    }

    /** Returns true if field requestHeader is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestHeader() {
      return this.requestHeader != null;
    }

    public void setRequestHeaderIsSet(boolean value) {
      if (!value) {
        this.requestHeader = null;
      }
    }

    public String getRequestBody() {
      return this.requestBody;
    }

    public customerChargeAsynNotice_args setRequestBody(String requestBody) {
      this.requestBody = requestBody;
      return this;
    }

    public void unsetRequestBody() {
      this.requestBody = null;
    }

    /** Returns true if field requestBody is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestBody() {
      return this.requestBody != null;
    }

    public void setRequestBodyIsSet(boolean value) {
      if (!value) {
        this.requestBody = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_HEADER:
        if (value == null) {
          unsetRequestHeader();
        } else {
          setRequestHeader((String)value);
        }
        break;

      case REQUEST_BODY:
        if (value == null) {
          unsetRequestBody();
        } else {
          setRequestBody((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_HEADER:
        return getRequestHeader();

      case REQUEST_BODY:
        return getRequestBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_HEADER:
        return isSetRequestHeader();
      case REQUEST_BODY:
        return isSetRequestBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof customerChargeAsynNotice_args)
        return this.equals((customerChargeAsynNotice_args)that);
      return false;
    }

    public boolean equals(customerChargeAsynNotice_args that) {
      if (that == null)
        return false;

      boolean this_present_requestHeader = true && this.isSetRequestHeader();
      boolean that_present_requestHeader = true && that.isSetRequestHeader();
      if (this_present_requestHeader || that_present_requestHeader) {
        if (!(this_present_requestHeader && that_present_requestHeader))
          return false;
        if (!this.requestHeader.equals(that.requestHeader))
          return false;
      }

      boolean this_present_requestBody = true && this.isSetRequestBody();
      boolean that_present_requestBody = true && that.isSetRequestBody();
      if (this_present_requestBody || that_present_requestBody) {
        if (!(this_present_requestBody && that_present_requestBody))
          return false;
        if (!this.requestBody.equals(that.requestBody))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestHeader = true && (isSetRequestHeader());
      list.add(present_requestHeader);
      if (present_requestHeader)
        list.add(requestHeader);

      boolean present_requestBody = true && (isSetRequestBody());
      list.add(present_requestBody);
      if (present_requestBody)
        list.add(requestBody);

      return list.hashCode();
    }

    @Override
    public int compareTo(customerChargeAsynNotice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestHeader()).compareTo(other.isSetRequestHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestHeader, other.requestHeader);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestBody()).compareTo(other.isSetRequestBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestBody, other.requestBody);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("customerChargeAsynNotice_args(");
      boolean first = true;

      sb.append("requestHeader:");
      if (this.requestHeader == null) {
        sb.append("null");
      } else {
        sb.append(this.requestHeader);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestBody:");
      if (this.requestBody == null) {
        sb.append("null");
      } else {
        sb.append(this.requestBody);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class customerChargeAsynNotice_argsStandardSchemeFactory implements SchemeFactory {
      public customerChargeAsynNotice_argsStandardScheme getScheme() {
        return new customerChargeAsynNotice_argsStandardScheme();
      }
    }

    private static class customerChargeAsynNotice_argsStandardScheme extends StandardScheme<customerChargeAsynNotice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, customerChargeAsynNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestHeader = iprot.readString();
                struct.setRequestHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST_BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestBody = iprot.readString();
                struct.setRequestBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, customerChargeAsynNotice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestHeader != null) {
          oprot.writeFieldBegin(REQUEST_HEADER_FIELD_DESC);
          oprot.writeString(struct.requestHeader);
          oprot.writeFieldEnd();
        }
        if (struct.requestBody != null) {
          oprot.writeFieldBegin(REQUEST_BODY_FIELD_DESC);
          oprot.writeString(struct.requestBody);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class customerChargeAsynNotice_argsTupleSchemeFactory implements SchemeFactory {
      public customerChargeAsynNotice_argsTupleScheme getScheme() {
        return new customerChargeAsynNotice_argsTupleScheme();
      }
    }

    private static class customerChargeAsynNotice_argsTupleScheme extends TupleScheme<customerChargeAsynNotice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, customerChargeAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestHeader()) {
          optionals.set(0);
        }
        if (struct.isSetRequestBody()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestHeader()) {
          oprot.writeString(struct.requestHeader);
        }
        if (struct.isSetRequestBody()) {
          oprot.writeString(struct.requestBody);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, customerChargeAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestHeader = iprot.readString();
          struct.setRequestHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.requestBody = iprot.readString();
          struct.setRequestBodyIsSet(true);
        }
      }
    }

  }

  public static class customerChargeAsynNotice_result implements org.apache.thrift.TBase<customerChargeAsynNotice_result, customerChargeAsynNotice_result._Fields>, java.io.Serializable, Cloneable, Comparable<customerChargeAsynNotice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("customerChargeAsynNotice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new customerChargeAsynNotice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new customerChargeAsynNotice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(customerChargeAsynNotice_result.class, metaDataMap);
    }

    public customerChargeAsynNotice_result() {
    }

    public customerChargeAsynNotice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public customerChargeAsynNotice_result(customerChargeAsynNotice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public customerChargeAsynNotice_result deepCopy() {
      return new customerChargeAsynNotice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public customerChargeAsynNotice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof customerChargeAsynNotice_result)
        return this.equals((customerChargeAsynNotice_result)that);
      return false;
    }

    public boolean equals(customerChargeAsynNotice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(customerChargeAsynNotice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("customerChargeAsynNotice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class customerChargeAsynNotice_resultStandardSchemeFactory implements SchemeFactory {
      public customerChargeAsynNotice_resultStandardScheme getScheme() {
        return new customerChargeAsynNotice_resultStandardScheme();
      }
    }

    private static class customerChargeAsynNotice_resultStandardScheme extends StandardScheme<customerChargeAsynNotice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, customerChargeAsynNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, customerChargeAsynNotice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class customerChargeAsynNotice_resultTupleSchemeFactory implements SchemeFactory {
      public customerChargeAsynNotice_resultTupleScheme getScheme() {
        return new customerChargeAsynNotice_resultTupleScheme();
      }
    }

    private static class customerChargeAsynNotice_resultTupleScheme extends TupleScheme<customerChargeAsynNotice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, customerChargeAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, customerChargeAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class customerWithdrawAsynNotice_args implements org.apache.thrift.TBase<customerWithdrawAsynNotice_args, customerWithdrawAsynNotice_args._Fields>, java.io.Serializable, Cloneable, Comparable<customerWithdrawAsynNotice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("customerWithdrawAsynNotice_args");

    private static final org.apache.thrift.protocol.TField REQUEST_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("requestHeader", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("requestBody", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new customerWithdrawAsynNotice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new customerWithdrawAsynNotice_argsTupleSchemeFactory());
    }

    public String requestHeader; // required
    public String requestBody; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_HEADER((short)1, "requestHeader"),
      REQUEST_BODY((short)2, "requestBody");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_HEADER
            return REQUEST_HEADER;
          case 2: // REQUEST_BODY
            return REQUEST_BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_HEADER, new org.apache.thrift.meta_data.FieldMetaData("requestHeader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST_BODY, new org.apache.thrift.meta_data.FieldMetaData("requestBody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(customerWithdrawAsynNotice_args.class, metaDataMap);
    }

    public customerWithdrawAsynNotice_args() {
    }

    public customerWithdrawAsynNotice_args(
      String requestHeader,
      String requestBody)
    {
      this();
      this.requestHeader = requestHeader;
      this.requestBody = requestBody;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public customerWithdrawAsynNotice_args(customerWithdrawAsynNotice_args other) {
      if (other.isSetRequestHeader()) {
        this.requestHeader = other.requestHeader;
      }
      if (other.isSetRequestBody()) {
        this.requestBody = other.requestBody;
      }
    }

    public customerWithdrawAsynNotice_args deepCopy() {
      return new customerWithdrawAsynNotice_args(this);
    }

    @Override
    public void clear() {
      this.requestHeader = null;
      this.requestBody = null;
    }

    public String getRequestHeader() {
      return this.requestHeader;
    }

    public customerWithdrawAsynNotice_args setRequestHeader(String requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }

    public void unsetRequestHeader() {
      this.requestHeader = null;
    }

    /** Returns true if field requestHeader is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestHeader() {
      return this.requestHeader != null;
    }

    public void setRequestHeaderIsSet(boolean value) {
      if (!value) {
        this.requestHeader = null;
      }
    }

    public String getRequestBody() {
      return this.requestBody;
    }

    public customerWithdrawAsynNotice_args setRequestBody(String requestBody) {
      this.requestBody = requestBody;
      return this;
    }

    public void unsetRequestBody() {
      this.requestBody = null;
    }

    /** Returns true if field requestBody is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestBody() {
      return this.requestBody != null;
    }

    public void setRequestBodyIsSet(boolean value) {
      if (!value) {
        this.requestBody = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_HEADER:
        if (value == null) {
          unsetRequestHeader();
        } else {
          setRequestHeader((String)value);
        }
        break;

      case REQUEST_BODY:
        if (value == null) {
          unsetRequestBody();
        } else {
          setRequestBody((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_HEADER:
        return getRequestHeader();

      case REQUEST_BODY:
        return getRequestBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_HEADER:
        return isSetRequestHeader();
      case REQUEST_BODY:
        return isSetRequestBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof customerWithdrawAsynNotice_args)
        return this.equals((customerWithdrawAsynNotice_args)that);
      return false;
    }

    public boolean equals(customerWithdrawAsynNotice_args that) {
      if (that == null)
        return false;

      boolean this_present_requestHeader = true && this.isSetRequestHeader();
      boolean that_present_requestHeader = true && that.isSetRequestHeader();
      if (this_present_requestHeader || that_present_requestHeader) {
        if (!(this_present_requestHeader && that_present_requestHeader))
          return false;
        if (!this.requestHeader.equals(that.requestHeader))
          return false;
      }

      boolean this_present_requestBody = true && this.isSetRequestBody();
      boolean that_present_requestBody = true && that.isSetRequestBody();
      if (this_present_requestBody || that_present_requestBody) {
        if (!(this_present_requestBody && that_present_requestBody))
          return false;
        if (!this.requestBody.equals(that.requestBody))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestHeader = true && (isSetRequestHeader());
      list.add(present_requestHeader);
      if (present_requestHeader)
        list.add(requestHeader);

      boolean present_requestBody = true && (isSetRequestBody());
      list.add(present_requestBody);
      if (present_requestBody)
        list.add(requestBody);

      return list.hashCode();
    }

    @Override
    public int compareTo(customerWithdrawAsynNotice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestHeader()).compareTo(other.isSetRequestHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestHeader, other.requestHeader);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestBody()).compareTo(other.isSetRequestBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestBody, other.requestBody);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("customerWithdrawAsynNotice_args(");
      boolean first = true;

      sb.append("requestHeader:");
      if (this.requestHeader == null) {
        sb.append("null");
      } else {
        sb.append(this.requestHeader);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestBody:");
      if (this.requestBody == null) {
        sb.append("null");
      } else {
        sb.append(this.requestBody);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class customerWithdrawAsynNotice_argsStandardSchemeFactory implements SchemeFactory {
      public customerWithdrawAsynNotice_argsStandardScheme getScheme() {
        return new customerWithdrawAsynNotice_argsStandardScheme();
      }
    }

    private static class customerWithdrawAsynNotice_argsStandardScheme extends StandardScheme<customerWithdrawAsynNotice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, customerWithdrawAsynNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestHeader = iprot.readString();
                struct.setRequestHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST_BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestBody = iprot.readString();
                struct.setRequestBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, customerWithdrawAsynNotice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestHeader != null) {
          oprot.writeFieldBegin(REQUEST_HEADER_FIELD_DESC);
          oprot.writeString(struct.requestHeader);
          oprot.writeFieldEnd();
        }
        if (struct.requestBody != null) {
          oprot.writeFieldBegin(REQUEST_BODY_FIELD_DESC);
          oprot.writeString(struct.requestBody);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class customerWithdrawAsynNotice_argsTupleSchemeFactory implements SchemeFactory {
      public customerWithdrawAsynNotice_argsTupleScheme getScheme() {
        return new customerWithdrawAsynNotice_argsTupleScheme();
      }
    }

    private static class customerWithdrawAsynNotice_argsTupleScheme extends TupleScheme<customerWithdrawAsynNotice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, customerWithdrawAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestHeader()) {
          optionals.set(0);
        }
        if (struct.isSetRequestBody()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestHeader()) {
          oprot.writeString(struct.requestHeader);
        }
        if (struct.isSetRequestBody()) {
          oprot.writeString(struct.requestBody);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, customerWithdrawAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestHeader = iprot.readString();
          struct.setRequestHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.requestBody = iprot.readString();
          struct.setRequestBodyIsSet(true);
        }
      }
    }

  }

  public static class customerWithdrawAsynNotice_result implements org.apache.thrift.TBase<customerWithdrawAsynNotice_result, customerWithdrawAsynNotice_result._Fields>, java.io.Serializable, Cloneable, Comparable<customerWithdrawAsynNotice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("customerWithdrawAsynNotice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new customerWithdrawAsynNotice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new customerWithdrawAsynNotice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(customerWithdrawAsynNotice_result.class, metaDataMap);
    }

    public customerWithdrawAsynNotice_result() {
    }

    public customerWithdrawAsynNotice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public customerWithdrawAsynNotice_result(customerWithdrawAsynNotice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public customerWithdrawAsynNotice_result deepCopy() {
      return new customerWithdrawAsynNotice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public customerWithdrawAsynNotice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof customerWithdrawAsynNotice_result)
        return this.equals((customerWithdrawAsynNotice_result)that);
      return false;
    }

    public boolean equals(customerWithdrawAsynNotice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(customerWithdrawAsynNotice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("customerWithdrawAsynNotice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class customerWithdrawAsynNotice_resultStandardSchemeFactory implements SchemeFactory {
      public customerWithdrawAsynNotice_resultStandardScheme getScheme() {
        return new customerWithdrawAsynNotice_resultStandardScheme();
      }
    }

    private static class customerWithdrawAsynNotice_resultStandardScheme extends StandardScheme<customerWithdrawAsynNotice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, customerWithdrawAsynNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, customerWithdrawAsynNotice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class customerWithdrawAsynNotice_resultTupleSchemeFactory implements SchemeFactory {
      public customerWithdrawAsynNotice_resultTupleScheme getScheme() {
        return new customerWithdrawAsynNotice_resultTupleScheme();
      }
    }

    private static class customerWithdrawAsynNotice_resultTupleScheme extends TupleScheme<customerWithdrawAsynNotice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, customerWithdrawAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, customerWithdrawAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class fileAsynNotice_args implements org.apache.thrift.TBase<fileAsynNotice_args, fileAsynNotice_args._Fields>, java.io.Serializable, Cloneable, Comparable<fileAsynNotice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fileAsynNotice_args");

    private static final org.apache.thrift.protocol.TField REQUEST_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("requestHeader", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("requestBody", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fileAsynNotice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fileAsynNotice_argsTupleSchemeFactory());
    }

    public String requestHeader; // required
    public String requestBody; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_HEADER((short)1, "requestHeader"),
      REQUEST_BODY((short)2, "requestBody");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_HEADER
            return REQUEST_HEADER;
          case 2: // REQUEST_BODY
            return REQUEST_BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_HEADER, new org.apache.thrift.meta_data.FieldMetaData("requestHeader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST_BODY, new org.apache.thrift.meta_data.FieldMetaData("requestBody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fileAsynNotice_args.class, metaDataMap);
    }

    public fileAsynNotice_args() {
    }

    public fileAsynNotice_args(
      String requestHeader,
      String requestBody)
    {
      this();
      this.requestHeader = requestHeader;
      this.requestBody = requestBody;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fileAsynNotice_args(fileAsynNotice_args other) {
      if (other.isSetRequestHeader()) {
        this.requestHeader = other.requestHeader;
      }
      if (other.isSetRequestBody()) {
        this.requestBody = other.requestBody;
      }
    }

    public fileAsynNotice_args deepCopy() {
      return new fileAsynNotice_args(this);
    }

    @Override
    public void clear() {
      this.requestHeader = null;
      this.requestBody = null;
    }

    public String getRequestHeader() {
      return this.requestHeader;
    }

    public fileAsynNotice_args setRequestHeader(String requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }

    public void unsetRequestHeader() {
      this.requestHeader = null;
    }

    /** Returns true if field requestHeader is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestHeader() {
      return this.requestHeader != null;
    }

    public void setRequestHeaderIsSet(boolean value) {
      if (!value) {
        this.requestHeader = null;
      }
    }

    public String getRequestBody() {
      return this.requestBody;
    }

    public fileAsynNotice_args setRequestBody(String requestBody) {
      this.requestBody = requestBody;
      return this;
    }

    public void unsetRequestBody() {
      this.requestBody = null;
    }

    /** Returns true if field requestBody is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestBody() {
      return this.requestBody != null;
    }

    public void setRequestBodyIsSet(boolean value) {
      if (!value) {
        this.requestBody = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_HEADER:
        if (value == null) {
          unsetRequestHeader();
        } else {
          setRequestHeader((String)value);
        }
        break;

      case REQUEST_BODY:
        if (value == null) {
          unsetRequestBody();
        } else {
          setRequestBody((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_HEADER:
        return getRequestHeader();

      case REQUEST_BODY:
        return getRequestBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_HEADER:
        return isSetRequestHeader();
      case REQUEST_BODY:
        return isSetRequestBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fileAsynNotice_args)
        return this.equals((fileAsynNotice_args)that);
      return false;
    }

    public boolean equals(fileAsynNotice_args that) {
      if (that == null)
        return false;

      boolean this_present_requestHeader = true && this.isSetRequestHeader();
      boolean that_present_requestHeader = true && that.isSetRequestHeader();
      if (this_present_requestHeader || that_present_requestHeader) {
        if (!(this_present_requestHeader && that_present_requestHeader))
          return false;
        if (!this.requestHeader.equals(that.requestHeader))
          return false;
      }

      boolean this_present_requestBody = true && this.isSetRequestBody();
      boolean that_present_requestBody = true && that.isSetRequestBody();
      if (this_present_requestBody || that_present_requestBody) {
        if (!(this_present_requestBody && that_present_requestBody))
          return false;
        if (!this.requestBody.equals(that.requestBody))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestHeader = true && (isSetRequestHeader());
      list.add(present_requestHeader);
      if (present_requestHeader)
        list.add(requestHeader);

      boolean present_requestBody = true && (isSetRequestBody());
      list.add(present_requestBody);
      if (present_requestBody)
        list.add(requestBody);

      return list.hashCode();
    }

    @Override
    public int compareTo(fileAsynNotice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestHeader()).compareTo(other.isSetRequestHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestHeader, other.requestHeader);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestBody()).compareTo(other.isSetRequestBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestBody, other.requestBody);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fileAsynNotice_args(");
      boolean first = true;

      sb.append("requestHeader:");
      if (this.requestHeader == null) {
        sb.append("null");
      } else {
        sb.append(this.requestHeader);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestBody:");
      if (this.requestBody == null) {
        sb.append("null");
      } else {
        sb.append(this.requestBody);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fileAsynNotice_argsStandardSchemeFactory implements SchemeFactory {
      public fileAsynNotice_argsStandardScheme getScheme() {
        return new fileAsynNotice_argsStandardScheme();
      }
    }

    private static class fileAsynNotice_argsStandardScheme extends StandardScheme<fileAsynNotice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fileAsynNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestHeader = iprot.readString();
                struct.setRequestHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST_BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestBody = iprot.readString();
                struct.setRequestBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fileAsynNotice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestHeader != null) {
          oprot.writeFieldBegin(REQUEST_HEADER_FIELD_DESC);
          oprot.writeString(struct.requestHeader);
          oprot.writeFieldEnd();
        }
        if (struct.requestBody != null) {
          oprot.writeFieldBegin(REQUEST_BODY_FIELD_DESC);
          oprot.writeString(struct.requestBody);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fileAsynNotice_argsTupleSchemeFactory implements SchemeFactory {
      public fileAsynNotice_argsTupleScheme getScheme() {
        return new fileAsynNotice_argsTupleScheme();
      }
    }

    private static class fileAsynNotice_argsTupleScheme extends TupleScheme<fileAsynNotice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fileAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestHeader()) {
          optionals.set(0);
        }
        if (struct.isSetRequestBody()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestHeader()) {
          oprot.writeString(struct.requestHeader);
        }
        if (struct.isSetRequestBody()) {
          oprot.writeString(struct.requestBody);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fileAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestHeader = iprot.readString();
          struct.setRequestHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.requestBody = iprot.readString();
          struct.setRequestBodyIsSet(true);
        }
      }
    }

  }

  public static class fileAsynNotice_result implements org.apache.thrift.TBase<fileAsynNotice_result, fileAsynNotice_result._Fields>, java.io.Serializable, Cloneable, Comparable<fileAsynNotice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fileAsynNotice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fileAsynNotice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fileAsynNotice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fileAsynNotice_result.class, metaDataMap);
    }

    public fileAsynNotice_result() {
    }

    public fileAsynNotice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fileAsynNotice_result(fileAsynNotice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public fileAsynNotice_result deepCopy() {
      return new fileAsynNotice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public fileAsynNotice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fileAsynNotice_result)
        return this.equals((fileAsynNotice_result)that);
      return false;
    }

    public boolean equals(fileAsynNotice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(fileAsynNotice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fileAsynNotice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fileAsynNotice_resultStandardSchemeFactory implements SchemeFactory {
      public fileAsynNotice_resultStandardScheme getScheme() {
        return new fileAsynNotice_resultStandardScheme();
      }
    }

    private static class fileAsynNotice_resultStandardScheme extends StandardScheme<fileAsynNotice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fileAsynNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fileAsynNotice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fileAsynNotice_resultTupleSchemeFactory implements SchemeFactory {
      public fileAsynNotice_resultTupleScheme getScheme() {
        return new fileAsynNotice_resultTupleScheme();
      }
    }

    private static class fileAsynNotice_resultTupleScheme extends TupleScheme<fileAsynNotice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fileAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fileAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bankWithdrawAsynNotice_args implements org.apache.thrift.TBase<bankWithdrawAsynNotice_args, bankWithdrawAsynNotice_args._Fields>, java.io.Serializable, Cloneable, Comparable<bankWithdrawAsynNotice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bankWithdrawAsynNotice_args");

    private static final org.apache.thrift.protocol.TField REQUEST_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("requestHeader", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("requestBody", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bankWithdrawAsynNotice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bankWithdrawAsynNotice_argsTupleSchemeFactory());
    }

    public String requestHeader; // required
    public String requestBody; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_HEADER((short)1, "requestHeader"),
      REQUEST_BODY((short)2, "requestBody");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_HEADER
            return REQUEST_HEADER;
          case 2: // REQUEST_BODY
            return REQUEST_BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_HEADER, new org.apache.thrift.meta_data.FieldMetaData("requestHeader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST_BODY, new org.apache.thrift.meta_data.FieldMetaData("requestBody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bankWithdrawAsynNotice_args.class, metaDataMap);
    }

    public bankWithdrawAsynNotice_args() {
    }

    public bankWithdrawAsynNotice_args(
      String requestHeader,
      String requestBody)
    {
      this();
      this.requestHeader = requestHeader;
      this.requestBody = requestBody;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bankWithdrawAsynNotice_args(bankWithdrawAsynNotice_args other) {
      if (other.isSetRequestHeader()) {
        this.requestHeader = other.requestHeader;
      }
      if (other.isSetRequestBody()) {
        this.requestBody = other.requestBody;
      }
    }

    public bankWithdrawAsynNotice_args deepCopy() {
      return new bankWithdrawAsynNotice_args(this);
    }

    @Override
    public void clear() {
      this.requestHeader = null;
      this.requestBody = null;
    }

    public String getRequestHeader() {
      return this.requestHeader;
    }

    public bankWithdrawAsynNotice_args setRequestHeader(String requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }

    public void unsetRequestHeader() {
      this.requestHeader = null;
    }

    /** Returns true if field requestHeader is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestHeader() {
      return this.requestHeader != null;
    }

    public void setRequestHeaderIsSet(boolean value) {
      if (!value) {
        this.requestHeader = null;
      }
    }

    public String getRequestBody() {
      return this.requestBody;
    }

    public bankWithdrawAsynNotice_args setRequestBody(String requestBody) {
      this.requestBody = requestBody;
      return this;
    }

    public void unsetRequestBody() {
      this.requestBody = null;
    }

    /** Returns true if field requestBody is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestBody() {
      return this.requestBody != null;
    }

    public void setRequestBodyIsSet(boolean value) {
      if (!value) {
        this.requestBody = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_HEADER:
        if (value == null) {
          unsetRequestHeader();
        } else {
          setRequestHeader((String)value);
        }
        break;

      case REQUEST_BODY:
        if (value == null) {
          unsetRequestBody();
        } else {
          setRequestBody((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_HEADER:
        return getRequestHeader();

      case REQUEST_BODY:
        return getRequestBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_HEADER:
        return isSetRequestHeader();
      case REQUEST_BODY:
        return isSetRequestBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bankWithdrawAsynNotice_args)
        return this.equals((bankWithdrawAsynNotice_args)that);
      return false;
    }

    public boolean equals(bankWithdrawAsynNotice_args that) {
      if (that == null)
        return false;

      boolean this_present_requestHeader = true && this.isSetRequestHeader();
      boolean that_present_requestHeader = true && that.isSetRequestHeader();
      if (this_present_requestHeader || that_present_requestHeader) {
        if (!(this_present_requestHeader && that_present_requestHeader))
          return false;
        if (!this.requestHeader.equals(that.requestHeader))
          return false;
      }

      boolean this_present_requestBody = true && this.isSetRequestBody();
      boolean that_present_requestBody = true && that.isSetRequestBody();
      if (this_present_requestBody || that_present_requestBody) {
        if (!(this_present_requestBody && that_present_requestBody))
          return false;
        if (!this.requestBody.equals(that.requestBody))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestHeader = true && (isSetRequestHeader());
      list.add(present_requestHeader);
      if (present_requestHeader)
        list.add(requestHeader);

      boolean present_requestBody = true && (isSetRequestBody());
      list.add(present_requestBody);
      if (present_requestBody)
        list.add(requestBody);

      return list.hashCode();
    }

    @Override
    public int compareTo(bankWithdrawAsynNotice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestHeader()).compareTo(other.isSetRequestHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestHeader, other.requestHeader);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestBody()).compareTo(other.isSetRequestBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestBody, other.requestBody);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bankWithdrawAsynNotice_args(");
      boolean first = true;

      sb.append("requestHeader:");
      if (this.requestHeader == null) {
        sb.append("null");
      } else {
        sb.append(this.requestHeader);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestBody:");
      if (this.requestBody == null) {
        sb.append("null");
      } else {
        sb.append(this.requestBody);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bankWithdrawAsynNotice_argsStandardSchemeFactory implements SchemeFactory {
      public bankWithdrawAsynNotice_argsStandardScheme getScheme() {
        return new bankWithdrawAsynNotice_argsStandardScheme();
      }
    }

    private static class bankWithdrawAsynNotice_argsStandardScheme extends StandardScheme<bankWithdrawAsynNotice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bankWithdrawAsynNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestHeader = iprot.readString();
                struct.setRequestHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST_BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestBody = iprot.readString();
                struct.setRequestBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bankWithdrawAsynNotice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestHeader != null) {
          oprot.writeFieldBegin(REQUEST_HEADER_FIELD_DESC);
          oprot.writeString(struct.requestHeader);
          oprot.writeFieldEnd();
        }
        if (struct.requestBody != null) {
          oprot.writeFieldBegin(REQUEST_BODY_FIELD_DESC);
          oprot.writeString(struct.requestBody);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bankWithdrawAsynNotice_argsTupleSchemeFactory implements SchemeFactory {
      public bankWithdrawAsynNotice_argsTupleScheme getScheme() {
        return new bankWithdrawAsynNotice_argsTupleScheme();
      }
    }

    private static class bankWithdrawAsynNotice_argsTupleScheme extends TupleScheme<bankWithdrawAsynNotice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bankWithdrawAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestHeader()) {
          optionals.set(0);
        }
        if (struct.isSetRequestBody()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestHeader()) {
          oprot.writeString(struct.requestHeader);
        }
        if (struct.isSetRequestBody()) {
          oprot.writeString(struct.requestBody);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bankWithdrawAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestHeader = iprot.readString();
          struct.setRequestHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.requestBody = iprot.readString();
          struct.setRequestBodyIsSet(true);
        }
      }
    }

  }

  public static class bankWithdrawAsynNotice_result implements org.apache.thrift.TBase<bankWithdrawAsynNotice_result, bankWithdrawAsynNotice_result._Fields>, java.io.Serializable, Cloneable, Comparable<bankWithdrawAsynNotice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bankWithdrawAsynNotice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bankWithdrawAsynNotice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bankWithdrawAsynNotice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bankWithdrawAsynNotice_result.class, metaDataMap);
    }

    public bankWithdrawAsynNotice_result() {
    }

    public bankWithdrawAsynNotice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bankWithdrawAsynNotice_result(bankWithdrawAsynNotice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public bankWithdrawAsynNotice_result deepCopy() {
      return new bankWithdrawAsynNotice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public bankWithdrawAsynNotice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bankWithdrawAsynNotice_result)
        return this.equals((bankWithdrawAsynNotice_result)that);
      return false;
    }

    public boolean equals(bankWithdrawAsynNotice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(bankWithdrawAsynNotice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bankWithdrawAsynNotice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bankWithdrawAsynNotice_resultStandardSchemeFactory implements SchemeFactory {
      public bankWithdrawAsynNotice_resultStandardScheme getScheme() {
        return new bankWithdrawAsynNotice_resultStandardScheme();
      }
    }

    private static class bankWithdrawAsynNotice_resultStandardScheme extends StandardScheme<bankWithdrawAsynNotice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bankWithdrawAsynNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bankWithdrawAsynNotice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bankWithdrawAsynNotice_resultTupleSchemeFactory implements SchemeFactory {
      public bankWithdrawAsynNotice_resultTupleScheme getScheme() {
        return new bankWithdrawAsynNotice_resultTupleScheme();
      }
    }

    private static class bankWithdrawAsynNotice_resultTupleScheme extends TupleScheme<bankWithdrawAsynNotice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bankWithdrawAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bankWithdrawAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cutDayAsynNotice_args implements org.apache.thrift.TBase<cutDayAsynNotice_args, cutDayAsynNotice_args._Fields>, java.io.Serializable, Cloneable, Comparable<cutDayAsynNotice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cutDayAsynNotice_args");

    private static final org.apache.thrift.protocol.TField REQUEST_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("requestHeader", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("requestBody", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cutDayAsynNotice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cutDayAsynNotice_argsTupleSchemeFactory());
    }

    public String requestHeader; // required
    public String requestBody; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_HEADER((short)1, "requestHeader"),
      REQUEST_BODY((short)2, "requestBody");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_HEADER
            return REQUEST_HEADER;
          case 2: // REQUEST_BODY
            return REQUEST_BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_HEADER, new org.apache.thrift.meta_data.FieldMetaData("requestHeader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST_BODY, new org.apache.thrift.meta_data.FieldMetaData("requestBody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cutDayAsynNotice_args.class, metaDataMap);
    }

    public cutDayAsynNotice_args() {
    }

    public cutDayAsynNotice_args(
      String requestHeader,
      String requestBody)
    {
      this();
      this.requestHeader = requestHeader;
      this.requestBody = requestBody;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cutDayAsynNotice_args(cutDayAsynNotice_args other) {
      if (other.isSetRequestHeader()) {
        this.requestHeader = other.requestHeader;
      }
      if (other.isSetRequestBody()) {
        this.requestBody = other.requestBody;
      }
    }

    public cutDayAsynNotice_args deepCopy() {
      return new cutDayAsynNotice_args(this);
    }

    @Override
    public void clear() {
      this.requestHeader = null;
      this.requestBody = null;
    }

    public String getRequestHeader() {
      return this.requestHeader;
    }

    public cutDayAsynNotice_args setRequestHeader(String requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }

    public void unsetRequestHeader() {
      this.requestHeader = null;
    }

    /** Returns true if field requestHeader is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestHeader() {
      return this.requestHeader != null;
    }

    public void setRequestHeaderIsSet(boolean value) {
      if (!value) {
        this.requestHeader = null;
      }
    }

    public String getRequestBody() {
      return this.requestBody;
    }

    public cutDayAsynNotice_args setRequestBody(String requestBody) {
      this.requestBody = requestBody;
      return this;
    }

    public void unsetRequestBody() {
      this.requestBody = null;
    }

    /** Returns true if field requestBody is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestBody() {
      return this.requestBody != null;
    }

    public void setRequestBodyIsSet(boolean value) {
      if (!value) {
        this.requestBody = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_HEADER:
        if (value == null) {
          unsetRequestHeader();
        } else {
          setRequestHeader((String)value);
        }
        break;

      case REQUEST_BODY:
        if (value == null) {
          unsetRequestBody();
        } else {
          setRequestBody((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_HEADER:
        return getRequestHeader();

      case REQUEST_BODY:
        return getRequestBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_HEADER:
        return isSetRequestHeader();
      case REQUEST_BODY:
        return isSetRequestBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cutDayAsynNotice_args)
        return this.equals((cutDayAsynNotice_args)that);
      return false;
    }

    public boolean equals(cutDayAsynNotice_args that) {
      if (that == null)
        return false;

      boolean this_present_requestHeader = true && this.isSetRequestHeader();
      boolean that_present_requestHeader = true && that.isSetRequestHeader();
      if (this_present_requestHeader || that_present_requestHeader) {
        if (!(this_present_requestHeader && that_present_requestHeader))
          return false;
        if (!this.requestHeader.equals(that.requestHeader))
          return false;
      }

      boolean this_present_requestBody = true && this.isSetRequestBody();
      boolean that_present_requestBody = true && that.isSetRequestBody();
      if (this_present_requestBody || that_present_requestBody) {
        if (!(this_present_requestBody && that_present_requestBody))
          return false;
        if (!this.requestBody.equals(that.requestBody))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestHeader = true && (isSetRequestHeader());
      list.add(present_requestHeader);
      if (present_requestHeader)
        list.add(requestHeader);

      boolean present_requestBody = true && (isSetRequestBody());
      list.add(present_requestBody);
      if (present_requestBody)
        list.add(requestBody);

      return list.hashCode();
    }

    @Override
    public int compareTo(cutDayAsynNotice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestHeader()).compareTo(other.isSetRequestHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestHeader, other.requestHeader);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestBody()).compareTo(other.isSetRequestBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestBody, other.requestBody);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cutDayAsynNotice_args(");
      boolean first = true;

      sb.append("requestHeader:");
      if (this.requestHeader == null) {
        sb.append("null");
      } else {
        sb.append(this.requestHeader);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestBody:");
      if (this.requestBody == null) {
        sb.append("null");
      } else {
        sb.append(this.requestBody);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cutDayAsynNotice_argsStandardSchemeFactory implements SchemeFactory {
      public cutDayAsynNotice_argsStandardScheme getScheme() {
        return new cutDayAsynNotice_argsStandardScheme();
      }
    }

    private static class cutDayAsynNotice_argsStandardScheme extends StandardScheme<cutDayAsynNotice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cutDayAsynNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestHeader = iprot.readString();
                struct.setRequestHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST_BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestBody = iprot.readString();
                struct.setRequestBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cutDayAsynNotice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestHeader != null) {
          oprot.writeFieldBegin(REQUEST_HEADER_FIELD_DESC);
          oprot.writeString(struct.requestHeader);
          oprot.writeFieldEnd();
        }
        if (struct.requestBody != null) {
          oprot.writeFieldBegin(REQUEST_BODY_FIELD_DESC);
          oprot.writeString(struct.requestBody);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cutDayAsynNotice_argsTupleSchemeFactory implements SchemeFactory {
      public cutDayAsynNotice_argsTupleScheme getScheme() {
        return new cutDayAsynNotice_argsTupleScheme();
      }
    }

    private static class cutDayAsynNotice_argsTupleScheme extends TupleScheme<cutDayAsynNotice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cutDayAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestHeader()) {
          optionals.set(0);
        }
        if (struct.isSetRequestBody()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestHeader()) {
          oprot.writeString(struct.requestHeader);
        }
        if (struct.isSetRequestBody()) {
          oprot.writeString(struct.requestBody);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cutDayAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestHeader = iprot.readString();
          struct.setRequestHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.requestBody = iprot.readString();
          struct.setRequestBodyIsSet(true);
        }
      }
    }

  }

  public static class cutDayAsynNotice_result implements org.apache.thrift.TBase<cutDayAsynNotice_result, cutDayAsynNotice_result._Fields>, java.io.Serializable, Cloneable, Comparable<cutDayAsynNotice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cutDayAsynNotice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cutDayAsynNotice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cutDayAsynNotice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cutDayAsynNotice_result.class, metaDataMap);
    }

    public cutDayAsynNotice_result() {
    }

    public cutDayAsynNotice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cutDayAsynNotice_result(cutDayAsynNotice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public cutDayAsynNotice_result deepCopy() {
      return new cutDayAsynNotice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public cutDayAsynNotice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cutDayAsynNotice_result)
        return this.equals((cutDayAsynNotice_result)that);
      return false;
    }

    public boolean equals(cutDayAsynNotice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(cutDayAsynNotice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cutDayAsynNotice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cutDayAsynNotice_resultStandardSchemeFactory implements SchemeFactory {
      public cutDayAsynNotice_resultStandardScheme getScheme() {
        return new cutDayAsynNotice_resultStandardScheme();
      }
    }

    private static class cutDayAsynNotice_resultStandardScheme extends StandardScheme<cutDayAsynNotice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cutDayAsynNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cutDayAsynNotice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cutDayAsynNotice_resultTupleSchemeFactory implements SchemeFactory {
      public cutDayAsynNotice_resultTupleScheme getScheme() {
        return new cutDayAsynNotice_resultTupleScheme();
      }
    }

    private static class cutDayAsynNotice_resultTupleScheme extends TupleScheme<cutDayAsynNotice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cutDayAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cutDayAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setPasswordAsynNotice_args implements org.apache.thrift.TBase<setPasswordAsynNotice_args, setPasswordAsynNotice_args._Fields>, java.io.Serializable, Cloneable, Comparable<setPasswordAsynNotice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPasswordAsynNotice_args");

    private static final org.apache.thrift.protocol.TField REQUEST_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("requestHeader", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("requestBody", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPasswordAsynNotice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPasswordAsynNotice_argsTupleSchemeFactory());
    }

    public String requestHeader; // required
    public String requestBody; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_HEADER((short)1, "requestHeader"),
      REQUEST_BODY((short)2, "requestBody");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_HEADER
            return REQUEST_HEADER;
          case 2: // REQUEST_BODY
            return REQUEST_BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_HEADER, new org.apache.thrift.meta_data.FieldMetaData("requestHeader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST_BODY, new org.apache.thrift.meta_data.FieldMetaData("requestBody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPasswordAsynNotice_args.class, metaDataMap);
    }

    public setPasswordAsynNotice_args() {
    }

    public setPasswordAsynNotice_args(
      String requestHeader,
      String requestBody)
    {
      this();
      this.requestHeader = requestHeader;
      this.requestBody = requestBody;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPasswordAsynNotice_args(setPasswordAsynNotice_args other) {
      if (other.isSetRequestHeader()) {
        this.requestHeader = other.requestHeader;
      }
      if (other.isSetRequestBody()) {
        this.requestBody = other.requestBody;
      }
    }

    public setPasswordAsynNotice_args deepCopy() {
      return new setPasswordAsynNotice_args(this);
    }

    @Override
    public void clear() {
      this.requestHeader = null;
      this.requestBody = null;
    }

    public String getRequestHeader() {
      return this.requestHeader;
    }

    public setPasswordAsynNotice_args setRequestHeader(String requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }

    public void unsetRequestHeader() {
      this.requestHeader = null;
    }

    /** Returns true if field requestHeader is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestHeader() {
      return this.requestHeader != null;
    }

    public void setRequestHeaderIsSet(boolean value) {
      if (!value) {
        this.requestHeader = null;
      }
    }

    public String getRequestBody() {
      return this.requestBody;
    }

    public setPasswordAsynNotice_args setRequestBody(String requestBody) {
      this.requestBody = requestBody;
      return this;
    }

    public void unsetRequestBody() {
      this.requestBody = null;
    }

    /** Returns true if field requestBody is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestBody() {
      return this.requestBody != null;
    }

    public void setRequestBodyIsSet(boolean value) {
      if (!value) {
        this.requestBody = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_HEADER:
        if (value == null) {
          unsetRequestHeader();
        } else {
          setRequestHeader((String)value);
        }
        break;

      case REQUEST_BODY:
        if (value == null) {
          unsetRequestBody();
        } else {
          setRequestBody((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_HEADER:
        return getRequestHeader();

      case REQUEST_BODY:
        return getRequestBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_HEADER:
        return isSetRequestHeader();
      case REQUEST_BODY:
        return isSetRequestBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPasswordAsynNotice_args)
        return this.equals((setPasswordAsynNotice_args)that);
      return false;
    }

    public boolean equals(setPasswordAsynNotice_args that) {
      if (that == null)
        return false;

      boolean this_present_requestHeader = true && this.isSetRequestHeader();
      boolean that_present_requestHeader = true && that.isSetRequestHeader();
      if (this_present_requestHeader || that_present_requestHeader) {
        if (!(this_present_requestHeader && that_present_requestHeader))
          return false;
        if (!this.requestHeader.equals(that.requestHeader))
          return false;
      }

      boolean this_present_requestBody = true && this.isSetRequestBody();
      boolean that_present_requestBody = true && that.isSetRequestBody();
      if (this_present_requestBody || that_present_requestBody) {
        if (!(this_present_requestBody && that_present_requestBody))
          return false;
        if (!this.requestBody.equals(that.requestBody))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestHeader = true && (isSetRequestHeader());
      list.add(present_requestHeader);
      if (present_requestHeader)
        list.add(requestHeader);

      boolean present_requestBody = true && (isSetRequestBody());
      list.add(present_requestBody);
      if (present_requestBody)
        list.add(requestBody);

      return list.hashCode();
    }

    @Override
    public int compareTo(setPasswordAsynNotice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestHeader()).compareTo(other.isSetRequestHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestHeader, other.requestHeader);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestBody()).compareTo(other.isSetRequestBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestBody, other.requestBody);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPasswordAsynNotice_args(");
      boolean first = true;

      sb.append("requestHeader:");
      if (this.requestHeader == null) {
        sb.append("null");
      } else {
        sb.append(this.requestHeader);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestBody:");
      if (this.requestBody == null) {
        sb.append("null");
      } else {
        sb.append(this.requestBody);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPasswordAsynNotice_argsStandardSchemeFactory implements SchemeFactory {
      public setPasswordAsynNotice_argsStandardScheme getScheme() {
        return new setPasswordAsynNotice_argsStandardScheme();
      }
    }

    private static class setPasswordAsynNotice_argsStandardScheme extends StandardScheme<setPasswordAsynNotice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPasswordAsynNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestHeader = iprot.readString();
                struct.setRequestHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST_BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestBody = iprot.readString();
                struct.setRequestBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPasswordAsynNotice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestHeader != null) {
          oprot.writeFieldBegin(REQUEST_HEADER_FIELD_DESC);
          oprot.writeString(struct.requestHeader);
          oprot.writeFieldEnd();
        }
        if (struct.requestBody != null) {
          oprot.writeFieldBegin(REQUEST_BODY_FIELD_DESC);
          oprot.writeString(struct.requestBody);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPasswordAsynNotice_argsTupleSchemeFactory implements SchemeFactory {
      public setPasswordAsynNotice_argsTupleScheme getScheme() {
        return new setPasswordAsynNotice_argsTupleScheme();
      }
    }

    private static class setPasswordAsynNotice_argsTupleScheme extends TupleScheme<setPasswordAsynNotice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPasswordAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestHeader()) {
          optionals.set(0);
        }
        if (struct.isSetRequestBody()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestHeader()) {
          oprot.writeString(struct.requestHeader);
        }
        if (struct.isSetRequestBody()) {
          oprot.writeString(struct.requestBody);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPasswordAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestHeader = iprot.readString();
          struct.setRequestHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.requestBody = iprot.readString();
          struct.setRequestBodyIsSet(true);
        }
      }
    }

  }

  public static class setPasswordAsynNotice_result implements org.apache.thrift.TBase<setPasswordAsynNotice_result, setPasswordAsynNotice_result._Fields>, java.io.Serializable, Cloneable, Comparable<setPasswordAsynNotice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPasswordAsynNotice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPasswordAsynNotice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPasswordAsynNotice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPasswordAsynNotice_result.class, metaDataMap);
    }

    public setPasswordAsynNotice_result() {
    }

    public setPasswordAsynNotice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPasswordAsynNotice_result(setPasswordAsynNotice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public setPasswordAsynNotice_result deepCopy() {
      return new setPasswordAsynNotice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public setPasswordAsynNotice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPasswordAsynNotice_result)
        return this.equals((setPasswordAsynNotice_result)that);
      return false;
    }

    public boolean equals(setPasswordAsynNotice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setPasswordAsynNotice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPasswordAsynNotice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPasswordAsynNotice_resultStandardSchemeFactory implements SchemeFactory {
      public setPasswordAsynNotice_resultStandardScheme getScheme() {
        return new setPasswordAsynNotice_resultStandardScheme();
      }
    }

    private static class setPasswordAsynNotice_resultStandardScheme extends StandardScheme<setPasswordAsynNotice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPasswordAsynNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPasswordAsynNotice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPasswordAsynNotice_resultTupleSchemeFactory implements SchemeFactory {
      public setPasswordAsynNotice_resultTupleScheme getScheme() {
        return new setPasswordAsynNotice_resultTupleScheme();
      }
    }

    private static class setPasswordAsynNotice_resultTupleScheme extends TupleScheme<setPasswordAsynNotice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPasswordAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPasswordAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editPasswordAsynNotice_args implements org.apache.thrift.TBase<editPasswordAsynNotice_args, editPasswordAsynNotice_args._Fields>, java.io.Serializable, Cloneable, Comparable<editPasswordAsynNotice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editPasswordAsynNotice_args");

    private static final org.apache.thrift.protocol.TField REQUEST_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("requestHeader", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("requestBody", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editPasswordAsynNotice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editPasswordAsynNotice_argsTupleSchemeFactory());
    }

    public String requestHeader; // required
    public String requestBody; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_HEADER((short)1, "requestHeader"),
      REQUEST_BODY((short)2, "requestBody");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_HEADER
            return REQUEST_HEADER;
          case 2: // REQUEST_BODY
            return REQUEST_BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_HEADER, new org.apache.thrift.meta_data.FieldMetaData("requestHeader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST_BODY, new org.apache.thrift.meta_data.FieldMetaData("requestBody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editPasswordAsynNotice_args.class, metaDataMap);
    }

    public editPasswordAsynNotice_args() {
    }

    public editPasswordAsynNotice_args(
      String requestHeader,
      String requestBody)
    {
      this();
      this.requestHeader = requestHeader;
      this.requestBody = requestBody;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editPasswordAsynNotice_args(editPasswordAsynNotice_args other) {
      if (other.isSetRequestHeader()) {
        this.requestHeader = other.requestHeader;
      }
      if (other.isSetRequestBody()) {
        this.requestBody = other.requestBody;
      }
    }

    public editPasswordAsynNotice_args deepCopy() {
      return new editPasswordAsynNotice_args(this);
    }

    @Override
    public void clear() {
      this.requestHeader = null;
      this.requestBody = null;
    }

    public String getRequestHeader() {
      return this.requestHeader;
    }

    public editPasswordAsynNotice_args setRequestHeader(String requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }

    public void unsetRequestHeader() {
      this.requestHeader = null;
    }

    /** Returns true if field requestHeader is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestHeader() {
      return this.requestHeader != null;
    }

    public void setRequestHeaderIsSet(boolean value) {
      if (!value) {
        this.requestHeader = null;
      }
    }

    public String getRequestBody() {
      return this.requestBody;
    }

    public editPasswordAsynNotice_args setRequestBody(String requestBody) {
      this.requestBody = requestBody;
      return this;
    }

    public void unsetRequestBody() {
      this.requestBody = null;
    }

    /** Returns true if field requestBody is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestBody() {
      return this.requestBody != null;
    }

    public void setRequestBodyIsSet(boolean value) {
      if (!value) {
        this.requestBody = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_HEADER:
        if (value == null) {
          unsetRequestHeader();
        } else {
          setRequestHeader((String)value);
        }
        break;

      case REQUEST_BODY:
        if (value == null) {
          unsetRequestBody();
        } else {
          setRequestBody((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_HEADER:
        return getRequestHeader();

      case REQUEST_BODY:
        return getRequestBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_HEADER:
        return isSetRequestHeader();
      case REQUEST_BODY:
        return isSetRequestBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editPasswordAsynNotice_args)
        return this.equals((editPasswordAsynNotice_args)that);
      return false;
    }

    public boolean equals(editPasswordAsynNotice_args that) {
      if (that == null)
        return false;

      boolean this_present_requestHeader = true && this.isSetRequestHeader();
      boolean that_present_requestHeader = true && that.isSetRequestHeader();
      if (this_present_requestHeader || that_present_requestHeader) {
        if (!(this_present_requestHeader && that_present_requestHeader))
          return false;
        if (!this.requestHeader.equals(that.requestHeader))
          return false;
      }

      boolean this_present_requestBody = true && this.isSetRequestBody();
      boolean that_present_requestBody = true && that.isSetRequestBody();
      if (this_present_requestBody || that_present_requestBody) {
        if (!(this_present_requestBody && that_present_requestBody))
          return false;
        if (!this.requestBody.equals(that.requestBody))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestHeader = true && (isSetRequestHeader());
      list.add(present_requestHeader);
      if (present_requestHeader)
        list.add(requestHeader);

      boolean present_requestBody = true && (isSetRequestBody());
      list.add(present_requestBody);
      if (present_requestBody)
        list.add(requestBody);

      return list.hashCode();
    }

    @Override
    public int compareTo(editPasswordAsynNotice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestHeader()).compareTo(other.isSetRequestHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestHeader, other.requestHeader);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestBody()).compareTo(other.isSetRequestBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestBody, other.requestBody);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editPasswordAsynNotice_args(");
      boolean first = true;

      sb.append("requestHeader:");
      if (this.requestHeader == null) {
        sb.append("null");
      } else {
        sb.append(this.requestHeader);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestBody:");
      if (this.requestBody == null) {
        sb.append("null");
      } else {
        sb.append(this.requestBody);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editPasswordAsynNotice_argsStandardSchemeFactory implements SchemeFactory {
      public editPasswordAsynNotice_argsStandardScheme getScheme() {
        return new editPasswordAsynNotice_argsStandardScheme();
      }
    }

    private static class editPasswordAsynNotice_argsStandardScheme extends StandardScheme<editPasswordAsynNotice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editPasswordAsynNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestHeader = iprot.readString();
                struct.setRequestHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST_BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestBody = iprot.readString();
                struct.setRequestBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editPasswordAsynNotice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestHeader != null) {
          oprot.writeFieldBegin(REQUEST_HEADER_FIELD_DESC);
          oprot.writeString(struct.requestHeader);
          oprot.writeFieldEnd();
        }
        if (struct.requestBody != null) {
          oprot.writeFieldBegin(REQUEST_BODY_FIELD_DESC);
          oprot.writeString(struct.requestBody);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editPasswordAsynNotice_argsTupleSchemeFactory implements SchemeFactory {
      public editPasswordAsynNotice_argsTupleScheme getScheme() {
        return new editPasswordAsynNotice_argsTupleScheme();
      }
    }

    private static class editPasswordAsynNotice_argsTupleScheme extends TupleScheme<editPasswordAsynNotice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editPasswordAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestHeader()) {
          optionals.set(0);
        }
        if (struct.isSetRequestBody()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestHeader()) {
          oprot.writeString(struct.requestHeader);
        }
        if (struct.isSetRequestBody()) {
          oprot.writeString(struct.requestBody);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editPasswordAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestHeader = iprot.readString();
          struct.setRequestHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.requestBody = iprot.readString();
          struct.setRequestBodyIsSet(true);
        }
      }
    }

  }

  public static class editPasswordAsynNotice_result implements org.apache.thrift.TBase<editPasswordAsynNotice_result, editPasswordAsynNotice_result._Fields>, java.io.Serializable, Cloneable, Comparable<editPasswordAsynNotice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editPasswordAsynNotice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editPasswordAsynNotice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editPasswordAsynNotice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editPasswordAsynNotice_result.class, metaDataMap);
    }

    public editPasswordAsynNotice_result() {
    }

    public editPasswordAsynNotice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editPasswordAsynNotice_result(editPasswordAsynNotice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editPasswordAsynNotice_result deepCopy() {
      return new editPasswordAsynNotice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editPasswordAsynNotice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editPasswordAsynNotice_result)
        return this.equals((editPasswordAsynNotice_result)that);
      return false;
    }

    public boolean equals(editPasswordAsynNotice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editPasswordAsynNotice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editPasswordAsynNotice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editPasswordAsynNotice_resultStandardSchemeFactory implements SchemeFactory {
      public editPasswordAsynNotice_resultStandardScheme getScheme() {
        return new editPasswordAsynNotice_resultStandardScheme();
      }
    }

    private static class editPasswordAsynNotice_resultStandardScheme extends StandardScheme<editPasswordAsynNotice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editPasswordAsynNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editPasswordAsynNotice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editPasswordAsynNotice_resultTupleSchemeFactory implements SchemeFactory {
      public editPasswordAsynNotice_resultTupleScheme getScheme() {
        return new editPasswordAsynNotice_resultTupleScheme();
      }
    }

    private static class editPasswordAsynNotice_resultTupleScheme extends TupleScheme<editPasswordAsynNotice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editPasswordAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editPasswordAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class resetPasswordAsynNotice_args implements org.apache.thrift.TBase<resetPasswordAsynNotice_args, resetPasswordAsynNotice_args._Fields>, java.io.Serializable, Cloneable, Comparable<resetPasswordAsynNotice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resetPasswordAsynNotice_args");

    private static final org.apache.thrift.protocol.TField REQUEST_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("requestHeader", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("requestBody", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resetPasswordAsynNotice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resetPasswordAsynNotice_argsTupleSchemeFactory());
    }

    public String requestHeader; // required
    public String requestBody; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_HEADER((short)1, "requestHeader"),
      REQUEST_BODY((short)2, "requestBody");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_HEADER
            return REQUEST_HEADER;
          case 2: // REQUEST_BODY
            return REQUEST_BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_HEADER, new org.apache.thrift.meta_data.FieldMetaData("requestHeader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST_BODY, new org.apache.thrift.meta_data.FieldMetaData("requestBody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resetPasswordAsynNotice_args.class, metaDataMap);
    }

    public resetPasswordAsynNotice_args() {
    }

    public resetPasswordAsynNotice_args(
      String requestHeader,
      String requestBody)
    {
      this();
      this.requestHeader = requestHeader;
      this.requestBody = requestBody;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resetPasswordAsynNotice_args(resetPasswordAsynNotice_args other) {
      if (other.isSetRequestHeader()) {
        this.requestHeader = other.requestHeader;
      }
      if (other.isSetRequestBody()) {
        this.requestBody = other.requestBody;
      }
    }

    public resetPasswordAsynNotice_args deepCopy() {
      return new resetPasswordAsynNotice_args(this);
    }

    @Override
    public void clear() {
      this.requestHeader = null;
      this.requestBody = null;
    }

    public String getRequestHeader() {
      return this.requestHeader;
    }

    public resetPasswordAsynNotice_args setRequestHeader(String requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }

    public void unsetRequestHeader() {
      this.requestHeader = null;
    }

    /** Returns true if field requestHeader is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestHeader() {
      return this.requestHeader != null;
    }

    public void setRequestHeaderIsSet(boolean value) {
      if (!value) {
        this.requestHeader = null;
      }
    }

    public String getRequestBody() {
      return this.requestBody;
    }

    public resetPasswordAsynNotice_args setRequestBody(String requestBody) {
      this.requestBody = requestBody;
      return this;
    }

    public void unsetRequestBody() {
      this.requestBody = null;
    }

    /** Returns true if field requestBody is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestBody() {
      return this.requestBody != null;
    }

    public void setRequestBodyIsSet(boolean value) {
      if (!value) {
        this.requestBody = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_HEADER:
        if (value == null) {
          unsetRequestHeader();
        } else {
          setRequestHeader((String)value);
        }
        break;

      case REQUEST_BODY:
        if (value == null) {
          unsetRequestBody();
        } else {
          setRequestBody((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_HEADER:
        return getRequestHeader();

      case REQUEST_BODY:
        return getRequestBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_HEADER:
        return isSetRequestHeader();
      case REQUEST_BODY:
        return isSetRequestBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resetPasswordAsynNotice_args)
        return this.equals((resetPasswordAsynNotice_args)that);
      return false;
    }

    public boolean equals(resetPasswordAsynNotice_args that) {
      if (that == null)
        return false;

      boolean this_present_requestHeader = true && this.isSetRequestHeader();
      boolean that_present_requestHeader = true && that.isSetRequestHeader();
      if (this_present_requestHeader || that_present_requestHeader) {
        if (!(this_present_requestHeader && that_present_requestHeader))
          return false;
        if (!this.requestHeader.equals(that.requestHeader))
          return false;
      }

      boolean this_present_requestBody = true && this.isSetRequestBody();
      boolean that_present_requestBody = true && that.isSetRequestBody();
      if (this_present_requestBody || that_present_requestBody) {
        if (!(this_present_requestBody && that_present_requestBody))
          return false;
        if (!this.requestBody.equals(that.requestBody))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestHeader = true && (isSetRequestHeader());
      list.add(present_requestHeader);
      if (present_requestHeader)
        list.add(requestHeader);

      boolean present_requestBody = true && (isSetRequestBody());
      list.add(present_requestBody);
      if (present_requestBody)
        list.add(requestBody);

      return list.hashCode();
    }

    @Override
    public int compareTo(resetPasswordAsynNotice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestHeader()).compareTo(other.isSetRequestHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestHeader, other.requestHeader);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestBody()).compareTo(other.isSetRequestBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestBody, other.requestBody);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resetPasswordAsynNotice_args(");
      boolean first = true;

      sb.append("requestHeader:");
      if (this.requestHeader == null) {
        sb.append("null");
      } else {
        sb.append(this.requestHeader);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestBody:");
      if (this.requestBody == null) {
        sb.append("null");
      } else {
        sb.append(this.requestBody);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resetPasswordAsynNotice_argsStandardSchemeFactory implements SchemeFactory {
      public resetPasswordAsynNotice_argsStandardScheme getScheme() {
        return new resetPasswordAsynNotice_argsStandardScheme();
      }
    }

    private static class resetPasswordAsynNotice_argsStandardScheme extends StandardScheme<resetPasswordAsynNotice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resetPasswordAsynNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestHeader = iprot.readString();
                struct.setRequestHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST_BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestBody = iprot.readString();
                struct.setRequestBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resetPasswordAsynNotice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestHeader != null) {
          oprot.writeFieldBegin(REQUEST_HEADER_FIELD_DESC);
          oprot.writeString(struct.requestHeader);
          oprot.writeFieldEnd();
        }
        if (struct.requestBody != null) {
          oprot.writeFieldBegin(REQUEST_BODY_FIELD_DESC);
          oprot.writeString(struct.requestBody);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resetPasswordAsynNotice_argsTupleSchemeFactory implements SchemeFactory {
      public resetPasswordAsynNotice_argsTupleScheme getScheme() {
        return new resetPasswordAsynNotice_argsTupleScheme();
      }
    }

    private static class resetPasswordAsynNotice_argsTupleScheme extends TupleScheme<resetPasswordAsynNotice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resetPasswordAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestHeader()) {
          optionals.set(0);
        }
        if (struct.isSetRequestBody()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestHeader()) {
          oprot.writeString(struct.requestHeader);
        }
        if (struct.isSetRequestBody()) {
          oprot.writeString(struct.requestBody);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resetPasswordAsynNotice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestHeader = iprot.readString();
          struct.setRequestHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.requestBody = iprot.readString();
          struct.setRequestBodyIsSet(true);
        }
      }
    }

  }

  public static class resetPasswordAsynNotice_result implements org.apache.thrift.TBase<resetPasswordAsynNotice_result, resetPasswordAsynNotice_result._Fields>, java.io.Serializable, Cloneable, Comparable<resetPasswordAsynNotice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resetPasswordAsynNotice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resetPasswordAsynNotice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resetPasswordAsynNotice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resetPasswordAsynNotice_result.class, metaDataMap);
    }

    public resetPasswordAsynNotice_result() {
    }

    public resetPasswordAsynNotice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resetPasswordAsynNotice_result(resetPasswordAsynNotice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public resetPasswordAsynNotice_result deepCopy() {
      return new resetPasswordAsynNotice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public resetPasswordAsynNotice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resetPasswordAsynNotice_result)
        return this.equals((resetPasswordAsynNotice_result)that);
      return false;
    }

    public boolean equals(resetPasswordAsynNotice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(resetPasswordAsynNotice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resetPasswordAsynNotice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resetPasswordAsynNotice_resultStandardSchemeFactory implements SchemeFactory {
      public resetPasswordAsynNotice_resultStandardScheme getScheme() {
        return new resetPasswordAsynNotice_resultStandardScheme();
      }
    }

    private static class resetPasswordAsynNotice_resultStandardScheme extends StandardScheme<resetPasswordAsynNotice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resetPasswordAsynNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resetPasswordAsynNotice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resetPasswordAsynNotice_resultTupleSchemeFactory implements SchemeFactory {
      public resetPasswordAsynNotice_resultTupleScheme getScheme() {
        return new resetPasswordAsynNotice_resultTupleScheme();
      }
    }

    private static class resetPasswordAsynNotice_resultTupleScheme extends TupleScheme<resetPasswordAsynNotice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resetPasswordAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resetPasswordAsynNotice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
