/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.tpds.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-15")
public class DataInfoResponseDetailModel implements org.apache.thrift.TBase<DataInfoResponseDetailModel, DataInfoResponseDetailModel._Fields>, java.io.Serializable, Cloneable, Comparable<DataInfoResponseDetailModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataInfoResponseDetailModel");

  private static final org.apache.thrift.protocol.TField ODER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("oderNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIED_ACCNO_FIELD_DESC = new org.apache.thrift.protocol.TField("tiedAccno", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TIED_ACC_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("tiedAccStatus", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TIED_ACCTELNO_FIELD_DESC = new org.apache.thrift.protocol.TField("tiedAcctelno", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataInfoResponseDetailModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataInfoResponseDetailModelTupleSchemeFactory());
  }

  public String oderNo; // required
  public String tiedAccno; // required
  public String tiedAccStatus; // required
  public String tiedAcctelno; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ODER_NO((short)1, "oderNo"),
    TIED_ACCNO((short)2, "tiedAccno"),
    TIED_ACC_STATUS((short)3, "tiedAccStatus"),
    TIED_ACCTELNO((short)4, "tiedAcctelno");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ODER_NO
          return ODER_NO;
        case 2: // TIED_ACCNO
          return TIED_ACCNO;
        case 3: // TIED_ACC_STATUS
          return TIED_ACC_STATUS;
        case 4: // TIED_ACCTELNO
          return TIED_ACCTELNO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ODER_NO, new org.apache.thrift.meta_data.FieldMetaData("oderNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIED_ACCNO, new org.apache.thrift.meta_data.FieldMetaData("tiedAccno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIED_ACC_STATUS, new org.apache.thrift.meta_data.FieldMetaData("tiedAccStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIED_ACCTELNO, new org.apache.thrift.meta_data.FieldMetaData("tiedAcctelno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataInfoResponseDetailModel.class, metaDataMap);
  }

  public DataInfoResponseDetailModel() {
  }

  public DataInfoResponseDetailModel(
    String oderNo,
    String tiedAccno,
    String tiedAccStatus,
    String tiedAcctelno)
  {
    this();
    this.oderNo = oderNo;
    this.tiedAccno = tiedAccno;
    this.tiedAccStatus = tiedAccStatus;
    this.tiedAcctelno = tiedAcctelno;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataInfoResponseDetailModel(DataInfoResponseDetailModel other) {
    if (other.isSetOderNo()) {
      this.oderNo = other.oderNo;
    }
    if (other.isSetTiedAccno()) {
      this.tiedAccno = other.tiedAccno;
    }
    if (other.isSetTiedAccStatus()) {
      this.tiedAccStatus = other.tiedAccStatus;
    }
    if (other.isSetTiedAcctelno()) {
      this.tiedAcctelno = other.tiedAcctelno;
    }
  }

  public DataInfoResponseDetailModel deepCopy() {
    return new DataInfoResponseDetailModel(this);
  }

  @Override
  public void clear() {
    this.oderNo = null;
    this.tiedAccno = null;
    this.tiedAccStatus = null;
    this.tiedAcctelno = null;
  }

  public String getOderNo() {
    return this.oderNo;
  }

  public DataInfoResponseDetailModel setOderNo(String oderNo) {
    this.oderNo = oderNo;
    return this;
  }

  public void unsetOderNo() {
    this.oderNo = null;
  }

  /** Returns true if field oderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOderNo() {
    return this.oderNo != null;
  }

  public void setOderNoIsSet(boolean value) {
    if (!value) {
      this.oderNo = null;
    }
  }

  public String getTiedAccno() {
    return this.tiedAccno;
  }

  public DataInfoResponseDetailModel setTiedAccno(String tiedAccno) {
    this.tiedAccno = tiedAccno;
    return this;
  }

  public void unsetTiedAccno() {
    this.tiedAccno = null;
  }

  /** Returns true if field tiedAccno is set (has been assigned a value) and false otherwise */
  public boolean isSetTiedAccno() {
    return this.tiedAccno != null;
  }

  public void setTiedAccnoIsSet(boolean value) {
    if (!value) {
      this.tiedAccno = null;
    }
  }

  public String getTiedAccStatus() {
    return this.tiedAccStatus;
  }

  public DataInfoResponseDetailModel setTiedAccStatus(String tiedAccStatus) {
    this.tiedAccStatus = tiedAccStatus;
    return this;
  }

  public void unsetTiedAccStatus() {
    this.tiedAccStatus = null;
  }

  /** Returns true if field tiedAccStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTiedAccStatus() {
    return this.tiedAccStatus != null;
  }

  public void setTiedAccStatusIsSet(boolean value) {
    if (!value) {
      this.tiedAccStatus = null;
    }
  }

  public String getTiedAcctelno() {
    return this.tiedAcctelno;
  }

  public DataInfoResponseDetailModel setTiedAcctelno(String tiedAcctelno) {
    this.tiedAcctelno = tiedAcctelno;
    return this;
  }

  public void unsetTiedAcctelno() {
    this.tiedAcctelno = null;
  }

  /** Returns true if field tiedAcctelno is set (has been assigned a value) and false otherwise */
  public boolean isSetTiedAcctelno() {
    return this.tiedAcctelno != null;
  }

  public void setTiedAcctelnoIsSet(boolean value) {
    if (!value) {
      this.tiedAcctelno = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ODER_NO:
      if (value == null) {
        unsetOderNo();
      } else {
        setOderNo((String)value);
      }
      break;

    case TIED_ACCNO:
      if (value == null) {
        unsetTiedAccno();
      } else {
        setTiedAccno((String)value);
      }
      break;

    case TIED_ACC_STATUS:
      if (value == null) {
        unsetTiedAccStatus();
      } else {
        setTiedAccStatus((String)value);
      }
      break;

    case TIED_ACCTELNO:
      if (value == null) {
        unsetTiedAcctelno();
      } else {
        setTiedAcctelno((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ODER_NO:
      return getOderNo();

    case TIED_ACCNO:
      return getTiedAccno();

    case TIED_ACC_STATUS:
      return getTiedAccStatus();

    case TIED_ACCTELNO:
      return getTiedAcctelno();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ODER_NO:
      return isSetOderNo();
    case TIED_ACCNO:
      return isSetTiedAccno();
    case TIED_ACC_STATUS:
      return isSetTiedAccStatus();
    case TIED_ACCTELNO:
      return isSetTiedAcctelno();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataInfoResponseDetailModel)
      return this.equals((DataInfoResponseDetailModel)that);
    return false;
  }

  public boolean equals(DataInfoResponseDetailModel that) {
    if (that == null)
      return false;

    boolean this_present_oderNo = true && this.isSetOderNo();
    boolean that_present_oderNo = true && that.isSetOderNo();
    if (this_present_oderNo || that_present_oderNo) {
      if (!(this_present_oderNo && that_present_oderNo))
        return false;
      if (!this.oderNo.equals(that.oderNo))
        return false;
    }

    boolean this_present_tiedAccno = true && this.isSetTiedAccno();
    boolean that_present_tiedAccno = true && that.isSetTiedAccno();
    if (this_present_tiedAccno || that_present_tiedAccno) {
      if (!(this_present_tiedAccno && that_present_tiedAccno))
        return false;
      if (!this.tiedAccno.equals(that.tiedAccno))
        return false;
    }

    boolean this_present_tiedAccStatus = true && this.isSetTiedAccStatus();
    boolean that_present_tiedAccStatus = true && that.isSetTiedAccStatus();
    if (this_present_tiedAccStatus || that_present_tiedAccStatus) {
      if (!(this_present_tiedAccStatus && that_present_tiedAccStatus))
        return false;
      if (!this.tiedAccStatus.equals(that.tiedAccStatus))
        return false;
    }

    boolean this_present_tiedAcctelno = true && this.isSetTiedAcctelno();
    boolean that_present_tiedAcctelno = true && that.isSetTiedAcctelno();
    if (this_present_tiedAcctelno || that_present_tiedAcctelno) {
      if (!(this_present_tiedAcctelno && that_present_tiedAcctelno))
        return false;
      if (!this.tiedAcctelno.equals(that.tiedAcctelno))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_oderNo = true && (isSetOderNo());
    list.add(present_oderNo);
    if (present_oderNo)
      list.add(oderNo);

    boolean present_tiedAccno = true && (isSetTiedAccno());
    list.add(present_tiedAccno);
    if (present_tiedAccno)
      list.add(tiedAccno);

    boolean present_tiedAccStatus = true && (isSetTiedAccStatus());
    list.add(present_tiedAccStatus);
    if (present_tiedAccStatus)
      list.add(tiedAccStatus);

    boolean present_tiedAcctelno = true && (isSetTiedAcctelno());
    list.add(present_tiedAcctelno);
    if (present_tiedAcctelno)
      list.add(tiedAcctelno);

    return list.hashCode();
  }

  @Override
  public int compareTo(DataInfoResponseDetailModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOderNo()).compareTo(other.isSetOderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oderNo, other.oderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTiedAccno()).compareTo(other.isSetTiedAccno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTiedAccno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tiedAccno, other.tiedAccno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTiedAccStatus()).compareTo(other.isSetTiedAccStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTiedAccStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tiedAccStatus, other.tiedAccStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTiedAcctelno()).compareTo(other.isSetTiedAcctelno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTiedAcctelno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tiedAcctelno, other.tiedAcctelno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataInfoResponseDetailModel(");
    boolean first = true;

    sb.append("oderNo:");
    if (this.oderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.oderNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tiedAccno:");
    if (this.tiedAccno == null) {
      sb.append("null");
    } else {
      sb.append(this.tiedAccno);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tiedAccStatus:");
    if (this.tiedAccStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.tiedAccStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tiedAcctelno:");
    if (this.tiedAcctelno == null) {
      sb.append("null");
    } else {
      sb.append(this.tiedAcctelno);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataInfoResponseDetailModelStandardSchemeFactory implements SchemeFactory {
    public DataInfoResponseDetailModelStandardScheme getScheme() {
      return new DataInfoResponseDetailModelStandardScheme();
    }
  }

  private static class DataInfoResponseDetailModelStandardScheme extends StandardScheme<DataInfoResponseDetailModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataInfoResponseDetailModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ODER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oderNo = iprot.readString();
              struct.setOderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIED_ACCNO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tiedAccno = iprot.readString();
              struct.setTiedAccnoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIED_ACC_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tiedAccStatus = iprot.readString();
              struct.setTiedAccStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIED_ACCTELNO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tiedAcctelno = iprot.readString();
              struct.setTiedAcctelnoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataInfoResponseDetailModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.oderNo != null) {
        oprot.writeFieldBegin(ODER_NO_FIELD_DESC);
        oprot.writeString(struct.oderNo);
        oprot.writeFieldEnd();
      }
      if (struct.tiedAccno != null) {
        oprot.writeFieldBegin(TIED_ACCNO_FIELD_DESC);
        oprot.writeString(struct.tiedAccno);
        oprot.writeFieldEnd();
      }
      if (struct.tiedAccStatus != null) {
        oprot.writeFieldBegin(TIED_ACC_STATUS_FIELD_DESC);
        oprot.writeString(struct.tiedAccStatus);
        oprot.writeFieldEnd();
      }
      if (struct.tiedAcctelno != null) {
        oprot.writeFieldBegin(TIED_ACCTELNO_FIELD_DESC);
        oprot.writeString(struct.tiedAcctelno);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataInfoResponseDetailModelTupleSchemeFactory implements SchemeFactory {
    public DataInfoResponseDetailModelTupleScheme getScheme() {
      return new DataInfoResponseDetailModelTupleScheme();
    }
  }

  private static class DataInfoResponseDetailModelTupleScheme extends TupleScheme<DataInfoResponseDetailModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DataInfoResponseDetailModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOderNo()) {
        optionals.set(0);
      }
      if (struct.isSetTiedAccno()) {
        optionals.set(1);
      }
      if (struct.isSetTiedAccStatus()) {
        optionals.set(2);
      }
      if (struct.isSetTiedAcctelno()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetOderNo()) {
        oprot.writeString(struct.oderNo);
      }
      if (struct.isSetTiedAccno()) {
        oprot.writeString(struct.tiedAccno);
      }
      if (struct.isSetTiedAccStatus()) {
        oprot.writeString(struct.tiedAccStatus);
      }
      if (struct.isSetTiedAcctelno()) {
        oprot.writeString(struct.tiedAcctelno);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DataInfoResponseDetailModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.oderNo = iprot.readString();
        struct.setOderNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tiedAccno = iprot.readString();
        struct.setTiedAccnoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tiedAccStatus = iprot.readString();
        struct.setTiedAccStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tiedAcctelno = iprot.readString();
        struct.setTiedAcctelnoIsSet(true);
      }
    }
  }

}

