/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.tpds.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-21")
public class PasswordTransService {

  public interface Iface {

    public String passwordSetting(String reqHeader, String body) throws org.apache.thrift.TException;

    public String passwordModify(String reqHeader, String body) throws org.apache.thrift.TException;

    public String passwordResetting(String reqHeader, String body) throws org.apache.thrift.TException;

    public String passwordVerify(String reqHeader, String body) throws org.apache.thrift.TException;

    public String passwordVerifyBack(String reqHeader, String body) throws org.apache.thrift.TException;

    public String authCodeVerify(String reqHeader, String body) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void passwordSetting(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void passwordModify(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void passwordResetting(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void passwordVerify(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void passwordVerifyBack(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void authCodeVerify(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String passwordSetting(String reqHeader, String body) throws org.apache.thrift.TException
    {
      send_passwordSetting(reqHeader, body);
      return recv_passwordSetting();
    }

    public void send_passwordSetting(String reqHeader, String body) throws org.apache.thrift.TException
    {
      passwordSetting_args args = new passwordSetting_args();
      args.setReqHeader(reqHeader);
      args.setBody(body);
      sendBase("passwordSetting", args);
    }

    public String recv_passwordSetting() throws org.apache.thrift.TException
    {
      passwordSetting_result result = new passwordSetting_result();
      receiveBase(result, "passwordSetting");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "passwordSetting failed: unknown result");
    }

    public String passwordModify(String reqHeader, String body) throws org.apache.thrift.TException
    {
      send_passwordModify(reqHeader, body);
      return recv_passwordModify();
    }

    public void send_passwordModify(String reqHeader, String body) throws org.apache.thrift.TException
    {
      passwordModify_args args = new passwordModify_args();
      args.setReqHeader(reqHeader);
      args.setBody(body);
      sendBase("passwordModify", args);
    }

    public String recv_passwordModify() throws org.apache.thrift.TException
    {
      passwordModify_result result = new passwordModify_result();
      receiveBase(result, "passwordModify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "passwordModify failed: unknown result");
    }

    public String passwordResetting(String reqHeader, String body) throws org.apache.thrift.TException
    {
      send_passwordResetting(reqHeader, body);
      return recv_passwordResetting();
    }

    public void send_passwordResetting(String reqHeader, String body) throws org.apache.thrift.TException
    {
      passwordResetting_args args = new passwordResetting_args();
      args.setReqHeader(reqHeader);
      args.setBody(body);
      sendBase("passwordResetting", args);
    }

    public String recv_passwordResetting() throws org.apache.thrift.TException
    {
      passwordResetting_result result = new passwordResetting_result();
      receiveBase(result, "passwordResetting");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "passwordResetting failed: unknown result");
    }

    public String passwordVerify(String reqHeader, String body) throws org.apache.thrift.TException
    {
      send_passwordVerify(reqHeader, body);
      return recv_passwordVerify();
    }

    public void send_passwordVerify(String reqHeader, String body) throws org.apache.thrift.TException
    {
      passwordVerify_args args = new passwordVerify_args();
      args.setReqHeader(reqHeader);
      args.setBody(body);
      sendBase("passwordVerify", args);
    }

    public String recv_passwordVerify() throws org.apache.thrift.TException
    {
      passwordVerify_result result = new passwordVerify_result();
      receiveBase(result, "passwordVerify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "passwordVerify failed: unknown result");
    }

    public String passwordVerifyBack(String reqHeader, String body) throws org.apache.thrift.TException
    {
      send_passwordVerifyBack(reqHeader, body);
      return recv_passwordVerifyBack();
    }

    public void send_passwordVerifyBack(String reqHeader, String body) throws org.apache.thrift.TException
    {
      passwordVerifyBack_args args = new passwordVerifyBack_args();
      args.setReqHeader(reqHeader);
      args.setBody(body);
      sendBase("passwordVerifyBack", args);
    }

    public String recv_passwordVerifyBack() throws org.apache.thrift.TException
    {
      passwordVerifyBack_result result = new passwordVerifyBack_result();
      receiveBase(result, "passwordVerifyBack");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "passwordVerifyBack failed: unknown result");
    }

    public String authCodeVerify(String reqHeader, String body) throws org.apache.thrift.TException
    {
      send_authCodeVerify(reqHeader, body);
      return recv_authCodeVerify();
    }

    public void send_authCodeVerify(String reqHeader, String body) throws org.apache.thrift.TException
    {
      authCodeVerify_args args = new authCodeVerify_args();
      args.setReqHeader(reqHeader);
      args.setBody(body);
      sendBase("authCodeVerify", args);
    }

    public String recv_authCodeVerify() throws org.apache.thrift.TException
    {
      authCodeVerify_result result = new authCodeVerify_result();
      receiveBase(result, "authCodeVerify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "authCodeVerify failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void passwordSetting(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      passwordSetting_call method_call = new passwordSetting_call(reqHeader, body, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class passwordSetting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqHeader;
      private String body;
      public passwordSetting_call(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqHeader = reqHeader;
        this.body = body;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("passwordSetting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        passwordSetting_args args = new passwordSetting_args();
        args.setReqHeader(reqHeader);
        args.setBody(body);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_passwordSetting();
      }
    }

    public void passwordModify(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      passwordModify_call method_call = new passwordModify_call(reqHeader, body, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class passwordModify_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqHeader;
      private String body;
      public passwordModify_call(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqHeader = reqHeader;
        this.body = body;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("passwordModify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        passwordModify_args args = new passwordModify_args();
        args.setReqHeader(reqHeader);
        args.setBody(body);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_passwordModify();
      }
    }

    public void passwordResetting(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      passwordResetting_call method_call = new passwordResetting_call(reqHeader, body, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class passwordResetting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqHeader;
      private String body;
      public passwordResetting_call(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqHeader = reqHeader;
        this.body = body;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("passwordResetting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        passwordResetting_args args = new passwordResetting_args();
        args.setReqHeader(reqHeader);
        args.setBody(body);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_passwordResetting();
      }
    }

    public void passwordVerify(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      passwordVerify_call method_call = new passwordVerify_call(reqHeader, body, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class passwordVerify_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqHeader;
      private String body;
      public passwordVerify_call(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqHeader = reqHeader;
        this.body = body;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("passwordVerify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        passwordVerify_args args = new passwordVerify_args();
        args.setReqHeader(reqHeader);
        args.setBody(body);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_passwordVerify();
      }
    }

    public void passwordVerifyBack(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      passwordVerifyBack_call method_call = new passwordVerifyBack_call(reqHeader, body, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class passwordVerifyBack_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqHeader;
      private String body;
      public passwordVerifyBack_call(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqHeader = reqHeader;
        this.body = body;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("passwordVerifyBack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        passwordVerifyBack_args args = new passwordVerifyBack_args();
        args.setReqHeader(reqHeader);
        args.setBody(body);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_passwordVerifyBack();
      }
    }

    public void authCodeVerify(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      authCodeVerify_call method_call = new authCodeVerify_call(reqHeader, body, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class authCodeVerify_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqHeader;
      private String body;
      public authCodeVerify_call(String reqHeader, String body, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqHeader = reqHeader;
        this.body = body;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("authCodeVerify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        authCodeVerify_args args = new authCodeVerify_args();
        args.setReqHeader(reqHeader);
        args.setBody(body);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_authCodeVerify();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("passwordSetting", new passwordSetting());
      processMap.put("passwordModify", new passwordModify());
      processMap.put("passwordResetting", new passwordResetting());
      processMap.put("passwordVerify", new passwordVerify());
      processMap.put("passwordVerifyBack", new passwordVerifyBack());
      processMap.put("authCodeVerify", new authCodeVerify());
      return processMap;
    }

    public static class passwordSetting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, passwordSetting_args> {
      public passwordSetting() {
        super("passwordSetting");
      }

      public passwordSetting_args getEmptyArgsInstance() {
        return new passwordSetting_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public passwordSetting_result getResult(I iface, passwordSetting_args args) throws org.apache.thrift.TException {
        passwordSetting_result result = new passwordSetting_result();
        result.success = iface.passwordSetting(args.reqHeader, args.body);
        return result;
      }
    }

    public static class passwordModify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, passwordModify_args> {
      public passwordModify() {
        super("passwordModify");
      }

      public passwordModify_args getEmptyArgsInstance() {
        return new passwordModify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public passwordModify_result getResult(I iface, passwordModify_args args) throws org.apache.thrift.TException {
        passwordModify_result result = new passwordModify_result();
        result.success = iface.passwordModify(args.reqHeader, args.body);
        return result;
      }
    }

    public static class passwordResetting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, passwordResetting_args> {
      public passwordResetting() {
        super("passwordResetting");
      }

      public passwordResetting_args getEmptyArgsInstance() {
        return new passwordResetting_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public passwordResetting_result getResult(I iface, passwordResetting_args args) throws org.apache.thrift.TException {
        passwordResetting_result result = new passwordResetting_result();
        result.success = iface.passwordResetting(args.reqHeader, args.body);
        return result;
      }
    }

    public static class passwordVerify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, passwordVerify_args> {
      public passwordVerify() {
        super("passwordVerify");
      }

      public passwordVerify_args getEmptyArgsInstance() {
        return new passwordVerify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public passwordVerify_result getResult(I iface, passwordVerify_args args) throws org.apache.thrift.TException {
        passwordVerify_result result = new passwordVerify_result();
        result.success = iface.passwordVerify(args.reqHeader, args.body);
        return result;
      }
    }

    public static class passwordVerifyBack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, passwordVerifyBack_args> {
      public passwordVerifyBack() {
        super("passwordVerifyBack");
      }

      public passwordVerifyBack_args getEmptyArgsInstance() {
        return new passwordVerifyBack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public passwordVerifyBack_result getResult(I iface, passwordVerifyBack_args args) throws org.apache.thrift.TException {
        passwordVerifyBack_result result = new passwordVerifyBack_result();
        result.success = iface.passwordVerifyBack(args.reqHeader, args.body);
        return result;
      }
    }

    public static class authCodeVerify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, authCodeVerify_args> {
      public authCodeVerify() {
        super("authCodeVerify");
      }

      public authCodeVerify_args getEmptyArgsInstance() {
        return new authCodeVerify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public authCodeVerify_result getResult(I iface, authCodeVerify_args args) throws org.apache.thrift.TException {
        authCodeVerify_result result = new authCodeVerify_result();
        result.success = iface.authCodeVerify(args.reqHeader, args.body);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("passwordSetting", new passwordSetting());
      processMap.put("passwordModify", new passwordModify());
      processMap.put("passwordResetting", new passwordResetting());
      processMap.put("passwordVerify", new passwordVerify());
      processMap.put("passwordVerifyBack", new passwordVerifyBack());
      processMap.put("authCodeVerify", new authCodeVerify());
      return processMap;
    }

    public static class passwordSetting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, passwordSetting_args, String> {
      public passwordSetting() {
        super("passwordSetting");
      }

      public passwordSetting_args getEmptyArgsInstance() {
        return new passwordSetting_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            passwordSetting_result result = new passwordSetting_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            passwordSetting_result result = new passwordSetting_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, passwordSetting_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.passwordSetting(args.reqHeader, args.body,resultHandler);
      }
    }

    public static class passwordModify<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, passwordModify_args, String> {
      public passwordModify() {
        super("passwordModify");
      }

      public passwordModify_args getEmptyArgsInstance() {
        return new passwordModify_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            passwordModify_result result = new passwordModify_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            passwordModify_result result = new passwordModify_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, passwordModify_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.passwordModify(args.reqHeader, args.body,resultHandler);
      }
    }

    public static class passwordResetting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, passwordResetting_args, String> {
      public passwordResetting() {
        super("passwordResetting");
      }

      public passwordResetting_args getEmptyArgsInstance() {
        return new passwordResetting_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            passwordResetting_result result = new passwordResetting_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            passwordResetting_result result = new passwordResetting_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, passwordResetting_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.passwordResetting(args.reqHeader, args.body,resultHandler);
      }
    }

    public static class passwordVerify<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, passwordVerify_args, String> {
      public passwordVerify() {
        super("passwordVerify");
      }

      public passwordVerify_args getEmptyArgsInstance() {
        return new passwordVerify_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            passwordVerify_result result = new passwordVerify_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            passwordVerify_result result = new passwordVerify_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, passwordVerify_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.passwordVerify(args.reqHeader, args.body,resultHandler);
      }
    }

    public static class passwordVerifyBack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, passwordVerifyBack_args, String> {
      public passwordVerifyBack() {
        super("passwordVerifyBack");
      }

      public passwordVerifyBack_args getEmptyArgsInstance() {
        return new passwordVerifyBack_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            passwordVerifyBack_result result = new passwordVerifyBack_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            passwordVerifyBack_result result = new passwordVerifyBack_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, passwordVerifyBack_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.passwordVerifyBack(args.reqHeader, args.body,resultHandler);
      }
    }

    public static class authCodeVerify<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, authCodeVerify_args, String> {
      public authCodeVerify() {
        super("authCodeVerify");
      }

      public authCodeVerify_args getEmptyArgsInstance() {
        return new authCodeVerify_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            authCodeVerify_result result = new authCodeVerify_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            authCodeVerify_result result = new authCodeVerify_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, authCodeVerify_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.authCodeVerify(args.reqHeader, args.body,resultHandler);
      }
    }

  }

  public static class passwordSetting_args implements org.apache.thrift.TBase<passwordSetting_args, passwordSetting_args._Fields>, java.io.Serializable, Cloneable, Comparable<passwordSetting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("passwordSetting_args");

    private static final org.apache.thrift.protocol.TField REQ_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("reqHeader", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new passwordSetting_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new passwordSetting_argsTupleSchemeFactory());
    }

    public String reqHeader; // required
    public String body; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_HEADER((short)1, "reqHeader"),
      BODY((short)2, "body");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_HEADER
            return REQ_HEADER;
          case 2: // BODY
            return BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_HEADER, new org.apache.thrift.meta_data.FieldMetaData("reqHeader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(passwordSetting_args.class, metaDataMap);
    }

    public passwordSetting_args() {
    }

    public passwordSetting_args(
      String reqHeader,
      String body)
    {
      this();
      this.reqHeader = reqHeader;
      this.body = body;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public passwordSetting_args(passwordSetting_args other) {
      if (other.isSetReqHeader()) {
        this.reqHeader = other.reqHeader;
      }
      if (other.isSetBody()) {
        this.body = other.body;
      }
    }

    public passwordSetting_args deepCopy() {
      return new passwordSetting_args(this);
    }

    @Override
    public void clear() {
      this.reqHeader = null;
      this.body = null;
    }

    public String getReqHeader() {
      return this.reqHeader;
    }

    public passwordSetting_args setReqHeader(String reqHeader) {
      this.reqHeader = reqHeader;
      return this;
    }

    public void unsetReqHeader() {
      this.reqHeader = null;
    }

    /** Returns true if field reqHeader is set (has been assigned a value) and false otherwise */
    public boolean isSetReqHeader() {
      return this.reqHeader != null;
    }

    public void setReqHeaderIsSet(boolean value) {
      if (!value) {
        this.reqHeader = null;
      }
    }

    public String getBody() {
      return this.body;
    }

    public passwordSetting_args setBody(String body) {
      this.body = body;
      return this;
    }

    public void unsetBody() {
      this.body = null;
    }

    /** Returns true if field body is set (has been assigned a value) and false otherwise */
    public boolean isSetBody() {
      return this.body != null;
    }

    public void setBodyIsSet(boolean value) {
      if (!value) {
        this.body = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_HEADER:
        if (value == null) {
          unsetReqHeader();
        } else {
          setReqHeader((String)value);
        }
        break;

      case BODY:
        if (value == null) {
          unsetBody();
        } else {
          setBody((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_HEADER:
        return getReqHeader();

      case BODY:
        return getBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_HEADER:
        return isSetReqHeader();
      case BODY:
        return isSetBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof passwordSetting_args)
        return this.equals((passwordSetting_args)that);
      return false;
    }

    public boolean equals(passwordSetting_args that) {
      if (that == null)
        return false;

      boolean this_present_reqHeader = true && this.isSetReqHeader();
      boolean that_present_reqHeader = true && that.isSetReqHeader();
      if (this_present_reqHeader || that_present_reqHeader) {
        if (!(this_present_reqHeader && that_present_reqHeader))
          return false;
        if (!this.reqHeader.equals(that.reqHeader))
          return false;
      }

      boolean this_present_body = true && this.isSetBody();
      boolean that_present_body = true && that.isSetBody();
      if (this_present_body || that_present_body) {
        if (!(this_present_body && that_present_body))
          return false;
        if (!this.body.equals(that.body))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqHeader = true && (isSetReqHeader());
      list.add(present_reqHeader);
      if (present_reqHeader)
        list.add(reqHeader);

      boolean present_body = true && (isSetBody());
      list.add(present_body);
      if (present_body)
        list.add(body);

      return list.hashCode();
    }

    @Override
    public int compareTo(passwordSetting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqHeader()).compareTo(other.isSetReqHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqHeader, other.reqHeader);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("passwordSetting_args(");
      boolean first = true;

      sb.append("reqHeader:");
      if (this.reqHeader == null) {
        sb.append("null");
      } else {
        sb.append(this.reqHeader);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("body:");
      if (this.body == null) {
        sb.append("null");
      } else {
        sb.append(this.body);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class passwordSetting_argsStandardSchemeFactory implements SchemeFactory {
      public passwordSetting_argsStandardScheme getScheme() {
        return new passwordSetting_argsStandardScheme();
      }
    }

    private static class passwordSetting_argsStandardScheme extends StandardScheme<passwordSetting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, passwordSetting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqHeader = iprot.readString();
                struct.setReqHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.body = iprot.readString();
                struct.setBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, passwordSetting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqHeader != null) {
          oprot.writeFieldBegin(REQ_HEADER_FIELD_DESC);
          oprot.writeString(struct.reqHeader);
          oprot.writeFieldEnd();
        }
        if (struct.body != null) {
          oprot.writeFieldBegin(BODY_FIELD_DESC);
          oprot.writeString(struct.body);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class passwordSetting_argsTupleSchemeFactory implements SchemeFactory {
      public passwordSetting_argsTupleScheme getScheme() {
        return new passwordSetting_argsTupleScheme();
      }
    }

    private static class passwordSetting_argsTupleScheme extends TupleScheme<passwordSetting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, passwordSetting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqHeader()) {
          optionals.set(0);
        }
        if (struct.isSetBody()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqHeader()) {
          oprot.writeString(struct.reqHeader);
        }
        if (struct.isSetBody()) {
          oprot.writeString(struct.body);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, passwordSetting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqHeader = iprot.readString();
          struct.setReqHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.body = iprot.readString();
          struct.setBodyIsSet(true);
        }
      }
    }

  }

  public static class passwordSetting_result implements org.apache.thrift.TBase<passwordSetting_result, passwordSetting_result._Fields>, java.io.Serializable, Cloneable, Comparable<passwordSetting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("passwordSetting_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new passwordSetting_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new passwordSetting_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(passwordSetting_result.class, metaDataMap);
    }

    public passwordSetting_result() {
    }

    public passwordSetting_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public passwordSetting_result(passwordSetting_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public passwordSetting_result deepCopy() {
      return new passwordSetting_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public passwordSetting_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof passwordSetting_result)
        return this.equals((passwordSetting_result)that);
      return false;
    }

    public boolean equals(passwordSetting_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(passwordSetting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("passwordSetting_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class passwordSetting_resultStandardSchemeFactory implements SchemeFactory {
      public passwordSetting_resultStandardScheme getScheme() {
        return new passwordSetting_resultStandardScheme();
      }
    }

    private static class passwordSetting_resultStandardScheme extends StandardScheme<passwordSetting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, passwordSetting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, passwordSetting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class passwordSetting_resultTupleSchemeFactory implements SchemeFactory {
      public passwordSetting_resultTupleScheme getScheme() {
        return new passwordSetting_resultTupleScheme();
      }
    }

    private static class passwordSetting_resultTupleScheme extends TupleScheme<passwordSetting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, passwordSetting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, passwordSetting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class passwordModify_args implements org.apache.thrift.TBase<passwordModify_args, passwordModify_args._Fields>, java.io.Serializable, Cloneable, Comparable<passwordModify_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("passwordModify_args");

    private static final org.apache.thrift.protocol.TField REQ_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("reqHeader", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new passwordModify_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new passwordModify_argsTupleSchemeFactory());
    }

    public String reqHeader; // required
    public String body; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_HEADER((short)1, "reqHeader"),
      BODY((short)2, "body");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_HEADER
            return REQ_HEADER;
          case 2: // BODY
            return BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_HEADER, new org.apache.thrift.meta_data.FieldMetaData("reqHeader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(passwordModify_args.class, metaDataMap);
    }

    public passwordModify_args() {
    }

    public passwordModify_args(
      String reqHeader,
      String body)
    {
      this();
      this.reqHeader = reqHeader;
      this.body = body;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public passwordModify_args(passwordModify_args other) {
      if (other.isSetReqHeader()) {
        this.reqHeader = other.reqHeader;
      }
      if (other.isSetBody()) {
        this.body = other.body;
      }
    }

    public passwordModify_args deepCopy() {
      return new passwordModify_args(this);
    }

    @Override
    public void clear() {
      this.reqHeader = null;
      this.body = null;
    }

    public String getReqHeader() {
      return this.reqHeader;
    }

    public passwordModify_args setReqHeader(String reqHeader) {
      this.reqHeader = reqHeader;
      return this;
    }

    public void unsetReqHeader() {
      this.reqHeader = null;
    }

    /** Returns true if field reqHeader is set (has been assigned a value) and false otherwise */
    public boolean isSetReqHeader() {
      return this.reqHeader != null;
    }

    public void setReqHeaderIsSet(boolean value) {
      if (!value) {
        this.reqHeader = null;
      }
    }

    public String getBody() {
      return this.body;
    }

    public passwordModify_args setBody(String body) {
      this.body = body;
      return this;
    }

    public void unsetBody() {
      this.body = null;
    }

    /** Returns true if field body is set (has been assigned a value) and false otherwise */
    public boolean isSetBody() {
      return this.body != null;
    }

    public void setBodyIsSet(boolean value) {
      if (!value) {
        this.body = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_HEADER:
        if (value == null) {
          unsetReqHeader();
        } else {
          setReqHeader((String)value);
        }
        break;

      case BODY:
        if (value == null) {
          unsetBody();
        } else {
          setBody((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_HEADER:
        return getReqHeader();

      case BODY:
        return getBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_HEADER:
        return isSetReqHeader();
      case BODY:
        return isSetBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof passwordModify_args)
        return this.equals((passwordModify_args)that);
      return false;
    }

    public boolean equals(passwordModify_args that) {
      if (that == null)
        return false;

      boolean this_present_reqHeader = true && this.isSetReqHeader();
      boolean that_present_reqHeader = true && that.isSetReqHeader();
      if (this_present_reqHeader || that_present_reqHeader) {
        if (!(this_present_reqHeader && that_present_reqHeader))
          return false;
        if (!this.reqHeader.equals(that.reqHeader))
          return false;
      }

      boolean this_present_body = true && this.isSetBody();
      boolean that_present_body = true && that.isSetBody();
      if (this_present_body || that_present_body) {
        if (!(this_present_body && that_present_body))
          return false;
        if (!this.body.equals(that.body))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqHeader = true && (isSetReqHeader());
      list.add(present_reqHeader);
      if (present_reqHeader)
        list.add(reqHeader);

      boolean present_body = true && (isSetBody());
      list.add(present_body);
      if (present_body)
        list.add(body);

      return list.hashCode();
    }

    @Override
    public int compareTo(passwordModify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqHeader()).compareTo(other.isSetReqHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqHeader, other.reqHeader);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("passwordModify_args(");
      boolean first = true;

      sb.append("reqHeader:");
      if (this.reqHeader == null) {
        sb.append("null");
      } else {
        sb.append(this.reqHeader);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("body:");
      if (this.body == null) {
        sb.append("null");
      } else {
        sb.append(this.body);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class passwordModify_argsStandardSchemeFactory implements SchemeFactory {
      public passwordModify_argsStandardScheme getScheme() {
        return new passwordModify_argsStandardScheme();
      }
    }

    private static class passwordModify_argsStandardScheme extends StandardScheme<passwordModify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, passwordModify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqHeader = iprot.readString();
                struct.setReqHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.body = iprot.readString();
                struct.setBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, passwordModify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqHeader != null) {
          oprot.writeFieldBegin(REQ_HEADER_FIELD_DESC);
          oprot.writeString(struct.reqHeader);
          oprot.writeFieldEnd();
        }
        if (struct.body != null) {
          oprot.writeFieldBegin(BODY_FIELD_DESC);
          oprot.writeString(struct.body);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class passwordModify_argsTupleSchemeFactory implements SchemeFactory {
      public passwordModify_argsTupleScheme getScheme() {
        return new passwordModify_argsTupleScheme();
      }
    }

    private static class passwordModify_argsTupleScheme extends TupleScheme<passwordModify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, passwordModify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqHeader()) {
          optionals.set(0);
        }
        if (struct.isSetBody()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqHeader()) {
          oprot.writeString(struct.reqHeader);
        }
        if (struct.isSetBody()) {
          oprot.writeString(struct.body);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, passwordModify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqHeader = iprot.readString();
          struct.setReqHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.body = iprot.readString();
          struct.setBodyIsSet(true);
        }
      }
    }

  }

  public static class passwordModify_result implements org.apache.thrift.TBase<passwordModify_result, passwordModify_result._Fields>, java.io.Serializable, Cloneable, Comparable<passwordModify_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("passwordModify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new passwordModify_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new passwordModify_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(passwordModify_result.class, metaDataMap);
    }

    public passwordModify_result() {
    }

    public passwordModify_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public passwordModify_result(passwordModify_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public passwordModify_result deepCopy() {
      return new passwordModify_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public passwordModify_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof passwordModify_result)
        return this.equals((passwordModify_result)that);
      return false;
    }

    public boolean equals(passwordModify_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(passwordModify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("passwordModify_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class passwordModify_resultStandardSchemeFactory implements SchemeFactory {
      public passwordModify_resultStandardScheme getScheme() {
        return new passwordModify_resultStandardScheme();
      }
    }

    private static class passwordModify_resultStandardScheme extends StandardScheme<passwordModify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, passwordModify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, passwordModify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class passwordModify_resultTupleSchemeFactory implements SchemeFactory {
      public passwordModify_resultTupleScheme getScheme() {
        return new passwordModify_resultTupleScheme();
      }
    }

    private static class passwordModify_resultTupleScheme extends TupleScheme<passwordModify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, passwordModify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, passwordModify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class passwordResetting_args implements org.apache.thrift.TBase<passwordResetting_args, passwordResetting_args._Fields>, java.io.Serializable, Cloneable, Comparable<passwordResetting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("passwordResetting_args");

    private static final org.apache.thrift.protocol.TField REQ_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("reqHeader", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new passwordResetting_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new passwordResetting_argsTupleSchemeFactory());
    }

    public String reqHeader; // required
    public String body; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_HEADER((short)1, "reqHeader"),
      BODY((short)2, "body");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_HEADER
            return REQ_HEADER;
          case 2: // BODY
            return BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_HEADER, new org.apache.thrift.meta_data.FieldMetaData("reqHeader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(passwordResetting_args.class, metaDataMap);
    }

    public passwordResetting_args() {
    }

    public passwordResetting_args(
      String reqHeader,
      String body)
    {
      this();
      this.reqHeader = reqHeader;
      this.body = body;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public passwordResetting_args(passwordResetting_args other) {
      if (other.isSetReqHeader()) {
        this.reqHeader = other.reqHeader;
      }
      if (other.isSetBody()) {
        this.body = other.body;
      }
    }

    public passwordResetting_args deepCopy() {
      return new passwordResetting_args(this);
    }

    @Override
    public void clear() {
      this.reqHeader = null;
      this.body = null;
    }

    public String getReqHeader() {
      return this.reqHeader;
    }

    public passwordResetting_args setReqHeader(String reqHeader) {
      this.reqHeader = reqHeader;
      return this;
    }

    public void unsetReqHeader() {
      this.reqHeader = null;
    }

    /** Returns true if field reqHeader is set (has been assigned a value) and false otherwise */
    public boolean isSetReqHeader() {
      return this.reqHeader != null;
    }

    public void setReqHeaderIsSet(boolean value) {
      if (!value) {
        this.reqHeader = null;
      }
    }

    public String getBody() {
      return this.body;
    }

    public passwordResetting_args setBody(String body) {
      this.body = body;
      return this;
    }

    public void unsetBody() {
      this.body = null;
    }

    /** Returns true if field body is set (has been assigned a value) and false otherwise */
    public boolean isSetBody() {
      return this.body != null;
    }

    public void setBodyIsSet(boolean value) {
      if (!value) {
        this.body = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_HEADER:
        if (value == null) {
          unsetReqHeader();
        } else {
          setReqHeader((String)value);
        }
        break;

      case BODY:
        if (value == null) {
          unsetBody();
        } else {
          setBody((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_HEADER:
        return getReqHeader();

      case BODY:
        return getBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_HEADER:
        return isSetReqHeader();
      case BODY:
        return isSetBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof passwordResetting_args)
        return this.equals((passwordResetting_args)that);
      return false;
    }

    public boolean equals(passwordResetting_args that) {
      if (that == null)
        return false;

      boolean this_present_reqHeader = true && this.isSetReqHeader();
      boolean that_present_reqHeader = true && that.isSetReqHeader();
      if (this_present_reqHeader || that_present_reqHeader) {
        if (!(this_present_reqHeader && that_present_reqHeader))
          return false;
        if (!this.reqHeader.equals(that.reqHeader))
          return false;
      }

      boolean this_present_body = true && this.isSetBody();
      boolean that_present_body = true && that.isSetBody();
      if (this_present_body || that_present_body) {
        if (!(this_present_body && that_present_body))
          return false;
        if (!this.body.equals(that.body))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqHeader = true && (isSetReqHeader());
      list.add(present_reqHeader);
      if (present_reqHeader)
        list.add(reqHeader);

      boolean present_body = true && (isSetBody());
      list.add(present_body);
      if (present_body)
        list.add(body);

      return list.hashCode();
    }

    @Override
    public int compareTo(passwordResetting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqHeader()).compareTo(other.isSetReqHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqHeader, other.reqHeader);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("passwordResetting_args(");
      boolean first = true;

      sb.append("reqHeader:");
      if (this.reqHeader == null) {
        sb.append("null");
      } else {
        sb.append(this.reqHeader);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("body:");
      if (this.body == null) {
        sb.append("null");
      } else {
        sb.append(this.body);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class passwordResetting_argsStandardSchemeFactory implements SchemeFactory {
      public passwordResetting_argsStandardScheme getScheme() {
        return new passwordResetting_argsStandardScheme();
      }
    }

    private static class passwordResetting_argsStandardScheme extends StandardScheme<passwordResetting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, passwordResetting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqHeader = iprot.readString();
                struct.setReqHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.body = iprot.readString();
                struct.setBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, passwordResetting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqHeader != null) {
          oprot.writeFieldBegin(REQ_HEADER_FIELD_DESC);
          oprot.writeString(struct.reqHeader);
          oprot.writeFieldEnd();
        }
        if (struct.body != null) {
          oprot.writeFieldBegin(BODY_FIELD_DESC);
          oprot.writeString(struct.body);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class passwordResetting_argsTupleSchemeFactory implements SchemeFactory {
      public passwordResetting_argsTupleScheme getScheme() {
        return new passwordResetting_argsTupleScheme();
      }
    }

    private static class passwordResetting_argsTupleScheme extends TupleScheme<passwordResetting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, passwordResetting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqHeader()) {
          optionals.set(0);
        }
        if (struct.isSetBody()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqHeader()) {
          oprot.writeString(struct.reqHeader);
        }
        if (struct.isSetBody()) {
          oprot.writeString(struct.body);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, passwordResetting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqHeader = iprot.readString();
          struct.setReqHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.body = iprot.readString();
          struct.setBodyIsSet(true);
        }
      }
    }

  }

  public static class passwordResetting_result implements org.apache.thrift.TBase<passwordResetting_result, passwordResetting_result._Fields>, java.io.Serializable, Cloneable, Comparable<passwordResetting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("passwordResetting_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new passwordResetting_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new passwordResetting_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(passwordResetting_result.class, metaDataMap);
    }

    public passwordResetting_result() {
    }

    public passwordResetting_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public passwordResetting_result(passwordResetting_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public passwordResetting_result deepCopy() {
      return new passwordResetting_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public passwordResetting_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof passwordResetting_result)
        return this.equals((passwordResetting_result)that);
      return false;
    }

    public boolean equals(passwordResetting_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(passwordResetting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("passwordResetting_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class passwordResetting_resultStandardSchemeFactory implements SchemeFactory {
      public passwordResetting_resultStandardScheme getScheme() {
        return new passwordResetting_resultStandardScheme();
      }
    }

    private static class passwordResetting_resultStandardScheme extends StandardScheme<passwordResetting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, passwordResetting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, passwordResetting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class passwordResetting_resultTupleSchemeFactory implements SchemeFactory {
      public passwordResetting_resultTupleScheme getScheme() {
        return new passwordResetting_resultTupleScheme();
      }
    }

    private static class passwordResetting_resultTupleScheme extends TupleScheme<passwordResetting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, passwordResetting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, passwordResetting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class passwordVerify_args implements org.apache.thrift.TBase<passwordVerify_args, passwordVerify_args._Fields>, java.io.Serializable, Cloneable, Comparable<passwordVerify_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("passwordVerify_args");

    private static final org.apache.thrift.protocol.TField REQ_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("reqHeader", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new passwordVerify_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new passwordVerify_argsTupleSchemeFactory());
    }

    public String reqHeader; // required
    public String body; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_HEADER((short)1, "reqHeader"),
      BODY((short)2, "body");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_HEADER
            return REQ_HEADER;
          case 2: // BODY
            return BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_HEADER, new org.apache.thrift.meta_data.FieldMetaData("reqHeader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(passwordVerify_args.class, metaDataMap);
    }

    public passwordVerify_args() {
    }

    public passwordVerify_args(
      String reqHeader,
      String body)
    {
      this();
      this.reqHeader = reqHeader;
      this.body = body;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public passwordVerify_args(passwordVerify_args other) {
      if (other.isSetReqHeader()) {
        this.reqHeader = other.reqHeader;
      }
      if (other.isSetBody()) {
        this.body = other.body;
      }
    }

    public passwordVerify_args deepCopy() {
      return new passwordVerify_args(this);
    }

    @Override
    public void clear() {
      this.reqHeader = null;
      this.body = null;
    }

    public String getReqHeader() {
      return this.reqHeader;
    }

    public passwordVerify_args setReqHeader(String reqHeader) {
      this.reqHeader = reqHeader;
      return this;
    }

    public void unsetReqHeader() {
      this.reqHeader = null;
    }

    /** Returns true if field reqHeader is set (has been assigned a value) and false otherwise */
    public boolean isSetReqHeader() {
      return this.reqHeader != null;
    }

    public void setReqHeaderIsSet(boolean value) {
      if (!value) {
        this.reqHeader = null;
      }
    }

    public String getBody() {
      return this.body;
    }

    public passwordVerify_args setBody(String body) {
      this.body = body;
      return this;
    }

    public void unsetBody() {
      this.body = null;
    }

    /** Returns true if field body is set (has been assigned a value) and false otherwise */
    public boolean isSetBody() {
      return this.body != null;
    }

    public void setBodyIsSet(boolean value) {
      if (!value) {
        this.body = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_HEADER:
        if (value == null) {
          unsetReqHeader();
        } else {
          setReqHeader((String)value);
        }
        break;

      case BODY:
        if (value == null) {
          unsetBody();
        } else {
          setBody((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_HEADER:
        return getReqHeader();

      case BODY:
        return getBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_HEADER:
        return isSetReqHeader();
      case BODY:
        return isSetBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof passwordVerify_args)
        return this.equals((passwordVerify_args)that);
      return false;
    }

    public boolean equals(passwordVerify_args that) {
      if (that == null)
        return false;

      boolean this_present_reqHeader = true && this.isSetReqHeader();
      boolean that_present_reqHeader = true && that.isSetReqHeader();
      if (this_present_reqHeader || that_present_reqHeader) {
        if (!(this_present_reqHeader && that_present_reqHeader))
          return false;
        if (!this.reqHeader.equals(that.reqHeader))
          return false;
      }

      boolean this_present_body = true && this.isSetBody();
      boolean that_present_body = true && that.isSetBody();
      if (this_present_body || that_present_body) {
        if (!(this_present_body && that_present_body))
          return false;
        if (!this.body.equals(that.body))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqHeader = true && (isSetReqHeader());
      list.add(present_reqHeader);
      if (present_reqHeader)
        list.add(reqHeader);

      boolean present_body = true && (isSetBody());
      list.add(present_body);
      if (present_body)
        list.add(body);

      return list.hashCode();
    }

    @Override
    public int compareTo(passwordVerify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqHeader()).compareTo(other.isSetReqHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqHeader, other.reqHeader);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("passwordVerify_args(");
      boolean first = true;

      sb.append("reqHeader:");
      if (this.reqHeader == null) {
        sb.append("null");
      } else {
        sb.append(this.reqHeader);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("body:");
      if (this.body == null) {
        sb.append("null");
      } else {
        sb.append(this.body);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class passwordVerify_argsStandardSchemeFactory implements SchemeFactory {
      public passwordVerify_argsStandardScheme getScheme() {
        return new passwordVerify_argsStandardScheme();
      }
    }

    private static class passwordVerify_argsStandardScheme extends StandardScheme<passwordVerify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, passwordVerify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqHeader = iprot.readString();
                struct.setReqHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.body = iprot.readString();
                struct.setBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, passwordVerify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqHeader != null) {
          oprot.writeFieldBegin(REQ_HEADER_FIELD_DESC);
          oprot.writeString(struct.reqHeader);
          oprot.writeFieldEnd();
        }
        if (struct.body != null) {
          oprot.writeFieldBegin(BODY_FIELD_DESC);
          oprot.writeString(struct.body);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class passwordVerify_argsTupleSchemeFactory implements SchemeFactory {
      public passwordVerify_argsTupleScheme getScheme() {
        return new passwordVerify_argsTupleScheme();
      }
    }

    private static class passwordVerify_argsTupleScheme extends TupleScheme<passwordVerify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, passwordVerify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqHeader()) {
          optionals.set(0);
        }
        if (struct.isSetBody()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqHeader()) {
          oprot.writeString(struct.reqHeader);
        }
        if (struct.isSetBody()) {
          oprot.writeString(struct.body);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, passwordVerify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqHeader = iprot.readString();
          struct.setReqHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.body = iprot.readString();
          struct.setBodyIsSet(true);
        }
      }
    }

  }

  public static class passwordVerify_result implements org.apache.thrift.TBase<passwordVerify_result, passwordVerify_result._Fields>, java.io.Serializable, Cloneable, Comparable<passwordVerify_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("passwordVerify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new passwordVerify_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new passwordVerify_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(passwordVerify_result.class, metaDataMap);
    }

    public passwordVerify_result() {
    }

    public passwordVerify_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public passwordVerify_result(passwordVerify_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public passwordVerify_result deepCopy() {
      return new passwordVerify_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public passwordVerify_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof passwordVerify_result)
        return this.equals((passwordVerify_result)that);
      return false;
    }

    public boolean equals(passwordVerify_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(passwordVerify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("passwordVerify_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class passwordVerify_resultStandardSchemeFactory implements SchemeFactory {
      public passwordVerify_resultStandardScheme getScheme() {
        return new passwordVerify_resultStandardScheme();
      }
    }

    private static class passwordVerify_resultStandardScheme extends StandardScheme<passwordVerify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, passwordVerify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, passwordVerify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class passwordVerify_resultTupleSchemeFactory implements SchemeFactory {
      public passwordVerify_resultTupleScheme getScheme() {
        return new passwordVerify_resultTupleScheme();
      }
    }

    private static class passwordVerify_resultTupleScheme extends TupleScheme<passwordVerify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, passwordVerify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, passwordVerify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class passwordVerifyBack_args implements org.apache.thrift.TBase<passwordVerifyBack_args, passwordVerifyBack_args._Fields>, java.io.Serializable, Cloneable, Comparable<passwordVerifyBack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("passwordVerifyBack_args");

    private static final org.apache.thrift.protocol.TField REQ_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("reqHeader", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new passwordVerifyBack_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new passwordVerifyBack_argsTupleSchemeFactory());
    }

    public String reqHeader; // required
    public String body; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_HEADER((short)1, "reqHeader"),
      BODY((short)2, "body");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_HEADER
            return REQ_HEADER;
          case 2: // BODY
            return BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_HEADER, new org.apache.thrift.meta_data.FieldMetaData("reqHeader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(passwordVerifyBack_args.class, metaDataMap);
    }

    public passwordVerifyBack_args() {
    }

    public passwordVerifyBack_args(
      String reqHeader,
      String body)
    {
      this();
      this.reqHeader = reqHeader;
      this.body = body;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public passwordVerifyBack_args(passwordVerifyBack_args other) {
      if (other.isSetReqHeader()) {
        this.reqHeader = other.reqHeader;
      }
      if (other.isSetBody()) {
        this.body = other.body;
      }
    }

    public passwordVerifyBack_args deepCopy() {
      return new passwordVerifyBack_args(this);
    }

    @Override
    public void clear() {
      this.reqHeader = null;
      this.body = null;
    }

    public String getReqHeader() {
      return this.reqHeader;
    }

    public passwordVerifyBack_args setReqHeader(String reqHeader) {
      this.reqHeader = reqHeader;
      return this;
    }

    public void unsetReqHeader() {
      this.reqHeader = null;
    }

    /** Returns true if field reqHeader is set (has been assigned a value) and false otherwise */
    public boolean isSetReqHeader() {
      return this.reqHeader != null;
    }

    public void setReqHeaderIsSet(boolean value) {
      if (!value) {
        this.reqHeader = null;
      }
    }

    public String getBody() {
      return this.body;
    }

    public passwordVerifyBack_args setBody(String body) {
      this.body = body;
      return this;
    }

    public void unsetBody() {
      this.body = null;
    }

    /** Returns true if field body is set (has been assigned a value) and false otherwise */
    public boolean isSetBody() {
      return this.body != null;
    }

    public void setBodyIsSet(boolean value) {
      if (!value) {
        this.body = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_HEADER:
        if (value == null) {
          unsetReqHeader();
        } else {
          setReqHeader((String)value);
        }
        break;

      case BODY:
        if (value == null) {
          unsetBody();
        } else {
          setBody((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_HEADER:
        return getReqHeader();

      case BODY:
        return getBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_HEADER:
        return isSetReqHeader();
      case BODY:
        return isSetBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof passwordVerifyBack_args)
        return this.equals((passwordVerifyBack_args)that);
      return false;
    }

    public boolean equals(passwordVerifyBack_args that) {
      if (that == null)
        return false;

      boolean this_present_reqHeader = true && this.isSetReqHeader();
      boolean that_present_reqHeader = true && that.isSetReqHeader();
      if (this_present_reqHeader || that_present_reqHeader) {
        if (!(this_present_reqHeader && that_present_reqHeader))
          return false;
        if (!this.reqHeader.equals(that.reqHeader))
          return false;
      }

      boolean this_present_body = true && this.isSetBody();
      boolean that_present_body = true && that.isSetBody();
      if (this_present_body || that_present_body) {
        if (!(this_present_body && that_present_body))
          return false;
        if (!this.body.equals(that.body))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqHeader = true && (isSetReqHeader());
      list.add(present_reqHeader);
      if (present_reqHeader)
        list.add(reqHeader);

      boolean present_body = true && (isSetBody());
      list.add(present_body);
      if (present_body)
        list.add(body);

      return list.hashCode();
    }

    @Override
    public int compareTo(passwordVerifyBack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqHeader()).compareTo(other.isSetReqHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqHeader, other.reqHeader);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("passwordVerifyBack_args(");
      boolean first = true;

      sb.append("reqHeader:");
      if (this.reqHeader == null) {
        sb.append("null");
      } else {
        sb.append(this.reqHeader);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("body:");
      if (this.body == null) {
        sb.append("null");
      } else {
        sb.append(this.body);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class passwordVerifyBack_argsStandardSchemeFactory implements SchemeFactory {
      public passwordVerifyBack_argsStandardScheme getScheme() {
        return new passwordVerifyBack_argsStandardScheme();
      }
    }

    private static class passwordVerifyBack_argsStandardScheme extends StandardScheme<passwordVerifyBack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, passwordVerifyBack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqHeader = iprot.readString();
                struct.setReqHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.body = iprot.readString();
                struct.setBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, passwordVerifyBack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqHeader != null) {
          oprot.writeFieldBegin(REQ_HEADER_FIELD_DESC);
          oprot.writeString(struct.reqHeader);
          oprot.writeFieldEnd();
        }
        if (struct.body != null) {
          oprot.writeFieldBegin(BODY_FIELD_DESC);
          oprot.writeString(struct.body);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class passwordVerifyBack_argsTupleSchemeFactory implements SchemeFactory {
      public passwordVerifyBack_argsTupleScheme getScheme() {
        return new passwordVerifyBack_argsTupleScheme();
      }
    }

    private static class passwordVerifyBack_argsTupleScheme extends TupleScheme<passwordVerifyBack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, passwordVerifyBack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqHeader()) {
          optionals.set(0);
        }
        if (struct.isSetBody()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqHeader()) {
          oprot.writeString(struct.reqHeader);
        }
        if (struct.isSetBody()) {
          oprot.writeString(struct.body);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, passwordVerifyBack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqHeader = iprot.readString();
          struct.setReqHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.body = iprot.readString();
          struct.setBodyIsSet(true);
        }
      }
    }

  }

  public static class passwordVerifyBack_result implements org.apache.thrift.TBase<passwordVerifyBack_result, passwordVerifyBack_result._Fields>, java.io.Serializable, Cloneable, Comparable<passwordVerifyBack_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("passwordVerifyBack_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new passwordVerifyBack_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new passwordVerifyBack_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(passwordVerifyBack_result.class, metaDataMap);
    }

    public passwordVerifyBack_result() {
    }

    public passwordVerifyBack_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public passwordVerifyBack_result(passwordVerifyBack_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public passwordVerifyBack_result deepCopy() {
      return new passwordVerifyBack_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public passwordVerifyBack_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof passwordVerifyBack_result)
        return this.equals((passwordVerifyBack_result)that);
      return false;
    }

    public boolean equals(passwordVerifyBack_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(passwordVerifyBack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("passwordVerifyBack_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class passwordVerifyBack_resultStandardSchemeFactory implements SchemeFactory {
      public passwordVerifyBack_resultStandardScheme getScheme() {
        return new passwordVerifyBack_resultStandardScheme();
      }
    }

    private static class passwordVerifyBack_resultStandardScheme extends StandardScheme<passwordVerifyBack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, passwordVerifyBack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, passwordVerifyBack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class passwordVerifyBack_resultTupleSchemeFactory implements SchemeFactory {
      public passwordVerifyBack_resultTupleScheme getScheme() {
        return new passwordVerifyBack_resultTupleScheme();
      }
    }

    private static class passwordVerifyBack_resultTupleScheme extends TupleScheme<passwordVerifyBack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, passwordVerifyBack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, passwordVerifyBack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class authCodeVerify_args implements org.apache.thrift.TBase<authCodeVerify_args, authCodeVerify_args._Fields>, java.io.Serializable, Cloneable, Comparable<authCodeVerify_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authCodeVerify_args");

    private static final org.apache.thrift.protocol.TField REQ_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("reqHeader", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authCodeVerify_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authCodeVerify_argsTupleSchemeFactory());
    }

    public String reqHeader; // required
    public String body; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_HEADER((short)1, "reqHeader"),
      BODY((short)2, "body");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_HEADER
            return REQ_HEADER;
          case 2: // BODY
            return BODY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_HEADER, new org.apache.thrift.meta_data.FieldMetaData("reqHeader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authCodeVerify_args.class, metaDataMap);
    }

    public authCodeVerify_args() {
    }

    public authCodeVerify_args(
      String reqHeader,
      String body)
    {
      this();
      this.reqHeader = reqHeader;
      this.body = body;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authCodeVerify_args(authCodeVerify_args other) {
      if (other.isSetReqHeader()) {
        this.reqHeader = other.reqHeader;
      }
      if (other.isSetBody()) {
        this.body = other.body;
      }
    }

    public authCodeVerify_args deepCopy() {
      return new authCodeVerify_args(this);
    }

    @Override
    public void clear() {
      this.reqHeader = null;
      this.body = null;
    }

    public String getReqHeader() {
      return this.reqHeader;
    }

    public authCodeVerify_args setReqHeader(String reqHeader) {
      this.reqHeader = reqHeader;
      return this;
    }

    public void unsetReqHeader() {
      this.reqHeader = null;
    }

    /** Returns true if field reqHeader is set (has been assigned a value) and false otherwise */
    public boolean isSetReqHeader() {
      return this.reqHeader != null;
    }

    public void setReqHeaderIsSet(boolean value) {
      if (!value) {
        this.reqHeader = null;
      }
    }

    public String getBody() {
      return this.body;
    }

    public authCodeVerify_args setBody(String body) {
      this.body = body;
      return this;
    }

    public void unsetBody() {
      this.body = null;
    }

    /** Returns true if field body is set (has been assigned a value) and false otherwise */
    public boolean isSetBody() {
      return this.body != null;
    }

    public void setBodyIsSet(boolean value) {
      if (!value) {
        this.body = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_HEADER:
        if (value == null) {
          unsetReqHeader();
        } else {
          setReqHeader((String)value);
        }
        break;

      case BODY:
        if (value == null) {
          unsetBody();
        } else {
          setBody((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_HEADER:
        return getReqHeader();

      case BODY:
        return getBody();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_HEADER:
        return isSetReqHeader();
      case BODY:
        return isSetBody();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authCodeVerify_args)
        return this.equals((authCodeVerify_args)that);
      return false;
    }

    public boolean equals(authCodeVerify_args that) {
      if (that == null)
        return false;

      boolean this_present_reqHeader = true && this.isSetReqHeader();
      boolean that_present_reqHeader = true && that.isSetReqHeader();
      if (this_present_reqHeader || that_present_reqHeader) {
        if (!(this_present_reqHeader && that_present_reqHeader))
          return false;
        if (!this.reqHeader.equals(that.reqHeader))
          return false;
      }

      boolean this_present_body = true && this.isSetBody();
      boolean that_present_body = true && that.isSetBody();
      if (this_present_body || that_present_body) {
        if (!(this_present_body && that_present_body))
          return false;
        if (!this.body.equals(that.body))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqHeader = true && (isSetReqHeader());
      list.add(present_reqHeader);
      if (present_reqHeader)
        list.add(reqHeader);

      boolean present_body = true && (isSetBody());
      list.add(present_body);
      if (present_body)
        list.add(body);

      return list.hashCode();
    }

    @Override
    public int compareTo(authCodeVerify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqHeader()).compareTo(other.isSetReqHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqHeader, other.reqHeader);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authCodeVerify_args(");
      boolean first = true;

      sb.append("reqHeader:");
      if (this.reqHeader == null) {
        sb.append("null");
      } else {
        sb.append(this.reqHeader);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("body:");
      if (this.body == null) {
        sb.append("null");
      } else {
        sb.append(this.body);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authCodeVerify_argsStandardSchemeFactory implements SchemeFactory {
      public authCodeVerify_argsStandardScheme getScheme() {
        return new authCodeVerify_argsStandardScheme();
      }
    }

    private static class authCodeVerify_argsStandardScheme extends StandardScheme<authCodeVerify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authCodeVerify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqHeader = iprot.readString();
                struct.setReqHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.body = iprot.readString();
                struct.setBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authCodeVerify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqHeader != null) {
          oprot.writeFieldBegin(REQ_HEADER_FIELD_DESC);
          oprot.writeString(struct.reqHeader);
          oprot.writeFieldEnd();
        }
        if (struct.body != null) {
          oprot.writeFieldBegin(BODY_FIELD_DESC);
          oprot.writeString(struct.body);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authCodeVerify_argsTupleSchemeFactory implements SchemeFactory {
      public authCodeVerify_argsTupleScheme getScheme() {
        return new authCodeVerify_argsTupleScheme();
      }
    }

    private static class authCodeVerify_argsTupleScheme extends TupleScheme<authCodeVerify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authCodeVerify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqHeader()) {
          optionals.set(0);
        }
        if (struct.isSetBody()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqHeader()) {
          oprot.writeString(struct.reqHeader);
        }
        if (struct.isSetBody()) {
          oprot.writeString(struct.body);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authCodeVerify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqHeader = iprot.readString();
          struct.setReqHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.body = iprot.readString();
          struct.setBodyIsSet(true);
        }
      }
    }

  }

  public static class authCodeVerify_result implements org.apache.thrift.TBase<authCodeVerify_result, authCodeVerify_result._Fields>, java.io.Serializable, Cloneable, Comparable<authCodeVerify_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authCodeVerify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authCodeVerify_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authCodeVerify_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authCodeVerify_result.class, metaDataMap);
    }

    public authCodeVerify_result() {
    }

    public authCodeVerify_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authCodeVerify_result(authCodeVerify_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public authCodeVerify_result deepCopy() {
      return new authCodeVerify_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public authCodeVerify_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authCodeVerify_result)
        return this.equals((authCodeVerify_result)that);
      return false;
    }

    public boolean equals(authCodeVerify_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(authCodeVerify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authCodeVerify_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authCodeVerify_resultStandardSchemeFactory implements SchemeFactory {
      public authCodeVerify_resultStandardScheme getScheme() {
        return new authCodeVerify_resultStandardScheme();
      }
    }

    private static class authCodeVerify_resultStandardScheme extends StandardScheme<authCodeVerify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authCodeVerify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authCodeVerify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authCodeVerify_resultTupleSchemeFactory implements SchemeFactory {
      public authCodeVerify_resultTupleScheme getScheme() {
        return new authCodeVerify_resultTupleScheme();
      }
    }

    private static class authCodeVerify_resultTupleScheme extends TupleScheme<authCodeVerify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authCodeVerify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authCodeVerify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
