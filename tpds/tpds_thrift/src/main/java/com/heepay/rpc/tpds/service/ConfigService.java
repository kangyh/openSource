/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.tpds.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-20")
public class ConfigService {

  public interface Iface {

    public String addMerchantAccount(String MerchantAccountEntity) throws org.apache.thrift.TException;

    public String editMerchantAccount(String MerchantAccountEntity) throws org.apache.thrift.TException;

    public String addBindInterface(String BindInterfaceEntity) throws org.apache.thrift.TException;

    public String editBindInterface(String BindInterfaceEntity) throws org.apache.thrift.TException;

    public String addproductKey(String productKeyEntity) throws org.apache.thrift.TException;

    public String editproductKey(String productKeyEntity) throws org.apache.thrift.TException;

    public String addBankCer(String BankCerEntity) throws org.apache.thrift.TException;

    public String editBankCer(String BankCerEntity) throws org.apache.thrift.TException;

    public String delBankCer(String bankNo) throws org.apache.thrift.TException;

    public String getBankCerByBankNo(String bankNo) throws org.apache.thrift.TException;

    public String getMerchantCerByMerchantNo(String merchantNo) throws org.apache.thrift.TException;

    public String getProductKey(String merchantNo, String productCode) throws org.apache.thrift.TException;

    public String addMerchantCer(String MerchantCerEntity) throws org.apache.thrift.TException;

    public String editMerchantCer(String MerchantCerEntity) throws org.apache.thrift.TException;

    public String delMerchantCer(String merchantNo) throws org.apache.thrift.TException;

    public String addCutDay(String CutDayEntity) throws org.apache.thrift.TException;

    public String editCutDay(String CutDayEntity) throws org.apache.thrift.TException;

    public String checksysNo(String sysNo) throws org.apache.thrift.TException;

    public String addMerchantH5(String merchantH5Entity) throws org.apache.thrift.TException;

    public String getMerchantBySeqNo(String businessSeqNo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addMerchantAccount(String MerchantAccountEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editMerchantAccount(String MerchantAccountEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addBindInterface(String BindInterfaceEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editBindInterface(String BindInterfaceEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addproductKey(String productKeyEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editproductKey(String productKeyEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addBankCer(String BankCerEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editBankCer(String BankCerEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delBankCer(String bankNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBankCerByBankNo(String bankNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantCerByMerchantNo(String merchantNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductKey(String merchantNo, String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addMerchantCer(String MerchantCerEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editMerchantCer(String MerchantCerEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delMerchantCer(String merchantNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addCutDay(String CutDayEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editCutDay(String CutDayEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checksysNo(String sysNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addMerchantH5(String merchantH5Entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantBySeqNo(String businessSeqNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String addMerchantAccount(String MerchantAccountEntity) throws org.apache.thrift.TException
    {
      send_addMerchantAccount(MerchantAccountEntity);
      return recv_addMerchantAccount();
    }

    public void send_addMerchantAccount(String MerchantAccountEntity) throws org.apache.thrift.TException
    {
      addMerchantAccount_args args = new addMerchantAccount_args();
      args.setMerchantAccountEntity(MerchantAccountEntity);
      sendBase("addMerchantAccount", args);
    }

    public String recv_addMerchantAccount() throws org.apache.thrift.TException
    {
      addMerchantAccount_result result = new addMerchantAccount_result();
      receiveBase(result, "addMerchantAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMerchantAccount failed: unknown result");
    }

    public String editMerchantAccount(String MerchantAccountEntity) throws org.apache.thrift.TException
    {
      send_editMerchantAccount(MerchantAccountEntity);
      return recv_editMerchantAccount();
    }

    public void send_editMerchantAccount(String MerchantAccountEntity) throws org.apache.thrift.TException
    {
      editMerchantAccount_args args = new editMerchantAccount_args();
      args.setMerchantAccountEntity(MerchantAccountEntity);
      sendBase("editMerchantAccount", args);
    }

    public String recv_editMerchantAccount() throws org.apache.thrift.TException
    {
      editMerchantAccount_result result = new editMerchantAccount_result();
      receiveBase(result, "editMerchantAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editMerchantAccount failed: unknown result");
    }

    public String addBindInterface(String BindInterfaceEntity) throws org.apache.thrift.TException
    {
      send_addBindInterface(BindInterfaceEntity);
      return recv_addBindInterface();
    }

    public void send_addBindInterface(String BindInterfaceEntity) throws org.apache.thrift.TException
    {
      addBindInterface_args args = new addBindInterface_args();
      args.setBindInterfaceEntity(BindInterfaceEntity);
      sendBase("addBindInterface", args);
    }

    public String recv_addBindInterface() throws org.apache.thrift.TException
    {
      addBindInterface_result result = new addBindInterface_result();
      receiveBase(result, "addBindInterface");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addBindInterface failed: unknown result");
    }

    public String editBindInterface(String BindInterfaceEntity) throws org.apache.thrift.TException
    {
      send_editBindInterface(BindInterfaceEntity);
      return recv_editBindInterface();
    }

    public void send_editBindInterface(String BindInterfaceEntity) throws org.apache.thrift.TException
    {
      editBindInterface_args args = new editBindInterface_args();
      args.setBindInterfaceEntity(BindInterfaceEntity);
      sendBase("editBindInterface", args);
    }

    public String recv_editBindInterface() throws org.apache.thrift.TException
    {
      editBindInterface_result result = new editBindInterface_result();
      receiveBase(result, "editBindInterface");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editBindInterface failed: unknown result");
    }

    public String addproductKey(String productKeyEntity) throws org.apache.thrift.TException
    {
      send_addproductKey(productKeyEntity);
      return recv_addproductKey();
    }

    public void send_addproductKey(String productKeyEntity) throws org.apache.thrift.TException
    {
      addproductKey_args args = new addproductKey_args();
      args.setProductKeyEntity(productKeyEntity);
      sendBase("addproductKey", args);
    }

    public String recv_addproductKey() throws org.apache.thrift.TException
    {
      addproductKey_result result = new addproductKey_result();
      receiveBase(result, "addproductKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addproductKey failed: unknown result");
    }

    public String editproductKey(String productKeyEntity) throws org.apache.thrift.TException
    {
      send_editproductKey(productKeyEntity);
      return recv_editproductKey();
    }

    public void send_editproductKey(String productKeyEntity) throws org.apache.thrift.TException
    {
      editproductKey_args args = new editproductKey_args();
      args.setProductKeyEntity(productKeyEntity);
      sendBase("editproductKey", args);
    }

    public String recv_editproductKey() throws org.apache.thrift.TException
    {
      editproductKey_result result = new editproductKey_result();
      receiveBase(result, "editproductKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editproductKey failed: unknown result");
    }

    public String addBankCer(String BankCerEntity) throws org.apache.thrift.TException
    {
      send_addBankCer(BankCerEntity);
      return recv_addBankCer();
    }

    public void send_addBankCer(String BankCerEntity) throws org.apache.thrift.TException
    {
      addBankCer_args args = new addBankCer_args();
      args.setBankCerEntity(BankCerEntity);
      sendBase("addBankCer", args);
    }

    public String recv_addBankCer() throws org.apache.thrift.TException
    {
      addBankCer_result result = new addBankCer_result();
      receiveBase(result, "addBankCer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addBankCer failed: unknown result");
    }

    public String editBankCer(String BankCerEntity) throws org.apache.thrift.TException
    {
      send_editBankCer(BankCerEntity);
      return recv_editBankCer();
    }

    public void send_editBankCer(String BankCerEntity) throws org.apache.thrift.TException
    {
      editBankCer_args args = new editBankCer_args();
      args.setBankCerEntity(BankCerEntity);
      sendBase("editBankCer", args);
    }

    public String recv_editBankCer() throws org.apache.thrift.TException
    {
      editBankCer_result result = new editBankCer_result();
      receiveBase(result, "editBankCer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editBankCer failed: unknown result");
    }

    public String delBankCer(String bankNo) throws org.apache.thrift.TException
    {
      send_delBankCer(bankNo);
      return recv_delBankCer();
    }

    public void send_delBankCer(String bankNo) throws org.apache.thrift.TException
    {
      delBankCer_args args = new delBankCer_args();
      args.setBankNo(bankNo);
      sendBase("delBankCer", args);
    }

    public String recv_delBankCer() throws org.apache.thrift.TException
    {
      delBankCer_result result = new delBankCer_result();
      receiveBase(result, "delBankCer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delBankCer failed: unknown result");
    }

    public String getBankCerByBankNo(String bankNo) throws org.apache.thrift.TException
    {
      send_getBankCerByBankNo(bankNo);
      return recv_getBankCerByBankNo();
    }

    public void send_getBankCerByBankNo(String bankNo) throws org.apache.thrift.TException
    {
      getBankCerByBankNo_args args = new getBankCerByBankNo_args();
      args.setBankNo(bankNo);
      sendBase("getBankCerByBankNo", args);
    }

    public String recv_getBankCerByBankNo() throws org.apache.thrift.TException
    {
      getBankCerByBankNo_result result = new getBankCerByBankNo_result();
      receiveBase(result, "getBankCerByBankNo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBankCerByBankNo failed: unknown result");
    }

    public String getMerchantCerByMerchantNo(String merchantNo) throws org.apache.thrift.TException
    {
      send_getMerchantCerByMerchantNo(merchantNo);
      return recv_getMerchantCerByMerchantNo();
    }

    public void send_getMerchantCerByMerchantNo(String merchantNo) throws org.apache.thrift.TException
    {
      getMerchantCerByMerchantNo_args args = new getMerchantCerByMerchantNo_args();
      args.setMerchantNo(merchantNo);
      sendBase("getMerchantCerByMerchantNo", args);
    }

    public String recv_getMerchantCerByMerchantNo() throws org.apache.thrift.TException
    {
      getMerchantCerByMerchantNo_result result = new getMerchantCerByMerchantNo_result();
      receiveBase(result, "getMerchantCerByMerchantNo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantCerByMerchantNo failed: unknown result");
    }

    public String getProductKey(String merchantNo, String productCode) throws org.apache.thrift.TException
    {
      send_getProductKey(merchantNo, productCode);
      return recv_getProductKey();
    }

    public void send_getProductKey(String merchantNo, String productCode) throws org.apache.thrift.TException
    {
      getProductKey_args args = new getProductKey_args();
      args.setMerchantNo(merchantNo);
      args.setProductCode(productCode);
      sendBase("getProductKey", args);
    }

    public String recv_getProductKey() throws org.apache.thrift.TException
    {
      getProductKey_result result = new getProductKey_result();
      receiveBase(result, "getProductKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductKey failed: unknown result");
    }

    public String addMerchantCer(String MerchantCerEntity) throws org.apache.thrift.TException
    {
      send_addMerchantCer(MerchantCerEntity);
      return recv_addMerchantCer();
    }

    public void send_addMerchantCer(String MerchantCerEntity) throws org.apache.thrift.TException
    {
      addMerchantCer_args args = new addMerchantCer_args();
      args.setMerchantCerEntity(MerchantCerEntity);
      sendBase("addMerchantCer", args);
    }

    public String recv_addMerchantCer() throws org.apache.thrift.TException
    {
      addMerchantCer_result result = new addMerchantCer_result();
      receiveBase(result, "addMerchantCer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMerchantCer failed: unknown result");
    }

    public String editMerchantCer(String MerchantCerEntity) throws org.apache.thrift.TException
    {
      send_editMerchantCer(MerchantCerEntity);
      return recv_editMerchantCer();
    }

    public void send_editMerchantCer(String MerchantCerEntity) throws org.apache.thrift.TException
    {
      editMerchantCer_args args = new editMerchantCer_args();
      args.setMerchantCerEntity(MerchantCerEntity);
      sendBase("editMerchantCer", args);
    }

    public String recv_editMerchantCer() throws org.apache.thrift.TException
    {
      editMerchantCer_result result = new editMerchantCer_result();
      receiveBase(result, "editMerchantCer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editMerchantCer failed: unknown result");
    }

    public String delMerchantCer(String merchantNo) throws org.apache.thrift.TException
    {
      send_delMerchantCer(merchantNo);
      return recv_delMerchantCer();
    }

    public void send_delMerchantCer(String merchantNo) throws org.apache.thrift.TException
    {
      delMerchantCer_args args = new delMerchantCer_args();
      args.setMerchantNo(merchantNo);
      sendBase("delMerchantCer", args);
    }

    public String recv_delMerchantCer() throws org.apache.thrift.TException
    {
      delMerchantCer_result result = new delMerchantCer_result();
      receiveBase(result, "delMerchantCer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delMerchantCer failed: unknown result");
    }

    public String addCutDay(String CutDayEntity) throws org.apache.thrift.TException
    {
      send_addCutDay(CutDayEntity);
      return recv_addCutDay();
    }

    public void send_addCutDay(String CutDayEntity) throws org.apache.thrift.TException
    {
      addCutDay_args args = new addCutDay_args();
      args.setCutDayEntity(CutDayEntity);
      sendBase("addCutDay", args);
    }

    public String recv_addCutDay() throws org.apache.thrift.TException
    {
      addCutDay_result result = new addCutDay_result();
      receiveBase(result, "addCutDay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addCutDay failed: unknown result");
    }

    public String editCutDay(String CutDayEntity) throws org.apache.thrift.TException
    {
      send_editCutDay(CutDayEntity);
      return recv_editCutDay();
    }

    public void send_editCutDay(String CutDayEntity) throws org.apache.thrift.TException
    {
      editCutDay_args args = new editCutDay_args();
      args.setCutDayEntity(CutDayEntity);
      sendBase("editCutDay", args);
    }

    public String recv_editCutDay() throws org.apache.thrift.TException
    {
      editCutDay_result result = new editCutDay_result();
      receiveBase(result, "editCutDay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "editCutDay failed: unknown result");
    }

    public String checksysNo(String sysNo) throws org.apache.thrift.TException
    {
      send_checksysNo(sysNo);
      return recv_checksysNo();
    }

    public void send_checksysNo(String sysNo) throws org.apache.thrift.TException
    {
      checksysNo_args args = new checksysNo_args();
      args.setSysNo(sysNo);
      sendBase("checksysNo", args);
    }

    public String recv_checksysNo() throws org.apache.thrift.TException
    {
      checksysNo_result result = new checksysNo_result();
      receiveBase(result, "checksysNo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checksysNo failed: unknown result");
    }

    public String addMerchantH5(String merchantH5Entity) throws org.apache.thrift.TException
    {
      send_addMerchantH5(merchantH5Entity);
      return recv_addMerchantH5();
    }

    public void send_addMerchantH5(String merchantH5Entity) throws org.apache.thrift.TException
    {
      addMerchantH5_args args = new addMerchantH5_args();
      args.setMerchantH5Entity(merchantH5Entity);
      sendBase("addMerchantH5", args);
    }

    public String recv_addMerchantH5() throws org.apache.thrift.TException
    {
      addMerchantH5_result result = new addMerchantH5_result();
      receiveBase(result, "addMerchantH5");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMerchantH5 failed: unknown result");
    }

    public String getMerchantBySeqNo(String businessSeqNo) throws org.apache.thrift.TException
    {
      send_getMerchantBySeqNo(businessSeqNo);
      return recv_getMerchantBySeqNo();
    }

    public void send_getMerchantBySeqNo(String businessSeqNo) throws org.apache.thrift.TException
    {
      getMerchantBySeqNo_args args = new getMerchantBySeqNo_args();
      args.setBusinessSeqNo(businessSeqNo);
      sendBase("getMerchantBySeqNo", args);
    }

    public String recv_getMerchantBySeqNo() throws org.apache.thrift.TException
    {
      getMerchantBySeqNo_result result = new getMerchantBySeqNo_result();
      receiveBase(result, "getMerchantBySeqNo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantBySeqNo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addMerchantAccount(String MerchantAccountEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMerchantAccount_call method_call = new addMerchantAccount_call(MerchantAccountEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMerchantAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String MerchantAccountEntity;
      public addMerchantAccount_call(String MerchantAccountEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.MerchantAccountEntity = MerchantAccountEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMerchantAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMerchantAccount_args args = new addMerchantAccount_args();
        args.setMerchantAccountEntity(MerchantAccountEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addMerchantAccount();
      }
    }

    public void editMerchantAccount(String MerchantAccountEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editMerchantAccount_call method_call = new editMerchantAccount_call(MerchantAccountEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editMerchantAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String MerchantAccountEntity;
      public editMerchantAccount_call(String MerchantAccountEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.MerchantAccountEntity = MerchantAccountEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editMerchantAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editMerchantAccount_args args = new editMerchantAccount_args();
        args.setMerchantAccountEntity(MerchantAccountEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editMerchantAccount();
      }
    }

    public void addBindInterface(String BindInterfaceEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBindInterface_call method_call = new addBindInterface_call(BindInterfaceEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBindInterface_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String BindInterfaceEntity;
      public addBindInterface_call(String BindInterfaceEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.BindInterfaceEntity = BindInterfaceEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBindInterface", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBindInterface_args args = new addBindInterface_args();
        args.setBindInterfaceEntity(BindInterfaceEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addBindInterface();
      }
    }

    public void editBindInterface(String BindInterfaceEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editBindInterface_call method_call = new editBindInterface_call(BindInterfaceEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editBindInterface_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String BindInterfaceEntity;
      public editBindInterface_call(String BindInterfaceEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.BindInterfaceEntity = BindInterfaceEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editBindInterface", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editBindInterface_args args = new editBindInterface_args();
        args.setBindInterfaceEntity(BindInterfaceEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editBindInterface();
      }
    }

    public void addproductKey(String productKeyEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addproductKey_call method_call = new addproductKey_call(productKeyEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addproductKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productKeyEntity;
      public addproductKey_call(String productKeyEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productKeyEntity = productKeyEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addproductKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addproductKey_args args = new addproductKey_args();
        args.setProductKeyEntity(productKeyEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addproductKey();
      }
    }

    public void editproductKey(String productKeyEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editproductKey_call method_call = new editproductKey_call(productKeyEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editproductKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productKeyEntity;
      public editproductKey_call(String productKeyEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productKeyEntity = productKeyEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editproductKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editproductKey_args args = new editproductKey_args();
        args.setProductKeyEntity(productKeyEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editproductKey();
      }
    }

    public void addBankCer(String BankCerEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBankCer_call method_call = new addBankCer_call(BankCerEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBankCer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String BankCerEntity;
      public addBankCer_call(String BankCerEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.BankCerEntity = BankCerEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBankCer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBankCer_args args = new addBankCer_args();
        args.setBankCerEntity(BankCerEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addBankCer();
      }
    }

    public void editBankCer(String BankCerEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editBankCer_call method_call = new editBankCer_call(BankCerEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editBankCer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String BankCerEntity;
      public editBankCer_call(String BankCerEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.BankCerEntity = BankCerEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editBankCer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editBankCer_args args = new editBankCer_args();
        args.setBankCerEntity(BankCerEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editBankCer();
      }
    }

    public void delBankCer(String bankNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delBankCer_call method_call = new delBankCer_call(bankNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delBankCer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bankNo;
      public delBankCer_call(String bankNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankNo = bankNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delBankCer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delBankCer_args args = new delBankCer_args();
        args.setBankNo(bankNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delBankCer();
      }
    }

    public void getBankCerByBankNo(String bankNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBankCerByBankNo_call method_call = new getBankCerByBankNo_call(bankNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBankCerByBankNo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bankNo;
      public getBankCerByBankNo_call(String bankNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankNo = bankNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBankCerByBankNo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBankCerByBankNo_args args = new getBankCerByBankNo_args();
        args.setBankNo(bankNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBankCerByBankNo();
      }
    }

    public void getMerchantCerByMerchantNo(String merchantNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantCerByMerchantNo_call method_call = new getMerchantCerByMerchantNo_call(merchantNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantCerByMerchantNo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantNo;
      public getMerchantCerByMerchantNo_call(String merchantNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantNo = merchantNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantCerByMerchantNo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantCerByMerchantNo_args args = new getMerchantCerByMerchantNo_args();
        args.setMerchantNo(merchantNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantCerByMerchantNo();
      }
    }

    public void getProductKey(String merchantNo, String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductKey_call method_call = new getProductKey_call(merchantNo, productCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantNo;
      private String productCode;
      public getProductKey_call(String merchantNo, String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantNo = merchantNo;
        this.productCode = productCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductKey_args args = new getProductKey_args();
        args.setMerchantNo(merchantNo);
        args.setProductCode(productCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductKey();
      }
    }

    public void addMerchantCer(String MerchantCerEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMerchantCer_call method_call = new addMerchantCer_call(MerchantCerEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMerchantCer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String MerchantCerEntity;
      public addMerchantCer_call(String MerchantCerEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.MerchantCerEntity = MerchantCerEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMerchantCer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMerchantCer_args args = new addMerchantCer_args();
        args.setMerchantCerEntity(MerchantCerEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addMerchantCer();
      }
    }

    public void editMerchantCer(String MerchantCerEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editMerchantCer_call method_call = new editMerchantCer_call(MerchantCerEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editMerchantCer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String MerchantCerEntity;
      public editMerchantCer_call(String MerchantCerEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.MerchantCerEntity = MerchantCerEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editMerchantCer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editMerchantCer_args args = new editMerchantCer_args();
        args.setMerchantCerEntity(MerchantCerEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editMerchantCer();
      }
    }

    public void delMerchantCer(String merchantNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delMerchantCer_call method_call = new delMerchantCer_call(merchantNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delMerchantCer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantNo;
      public delMerchantCer_call(String merchantNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantNo = merchantNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delMerchantCer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delMerchantCer_args args = new delMerchantCer_args();
        args.setMerchantNo(merchantNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delMerchantCer();
      }
    }

    public void addCutDay(String CutDayEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addCutDay_call method_call = new addCutDay_call(CutDayEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addCutDay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String CutDayEntity;
      public addCutDay_call(String CutDayEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.CutDayEntity = CutDayEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addCutDay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addCutDay_args args = new addCutDay_args();
        args.setCutDayEntity(CutDayEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addCutDay();
      }
    }

    public void editCutDay(String CutDayEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editCutDay_call method_call = new editCutDay_call(CutDayEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editCutDay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String CutDayEntity;
      public editCutDay_call(String CutDayEntity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.CutDayEntity = CutDayEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editCutDay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editCutDay_args args = new editCutDay_args();
        args.setCutDayEntity(CutDayEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_editCutDay();
      }
    }

    public void checksysNo(String sysNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checksysNo_call method_call = new checksysNo_call(sysNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checksysNo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sysNo;
      public checksysNo_call(String sysNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysNo = sysNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checksysNo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checksysNo_args args = new checksysNo_args();
        args.setSysNo(sysNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checksysNo();
      }
    }

    public void addMerchantH5(String merchantH5Entity, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMerchantH5_call method_call = new addMerchantH5_call(merchantH5Entity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMerchantH5_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantH5Entity;
      public addMerchantH5_call(String merchantH5Entity, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantH5Entity = merchantH5Entity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMerchantH5", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMerchantH5_args args = new addMerchantH5_args();
        args.setMerchantH5Entity(merchantH5Entity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addMerchantH5();
      }
    }

    public void getMerchantBySeqNo(String businessSeqNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantBySeqNo_call method_call = new getMerchantBySeqNo_call(businessSeqNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantBySeqNo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String businessSeqNo;
      public getMerchantBySeqNo_call(String businessSeqNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.businessSeqNo = businessSeqNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantBySeqNo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantBySeqNo_args args = new getMerchantBySeqNo_args();
        args.setBusinessSeqNo(businessSeqNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantBySeqNo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addMerchantAccount", new addMerchantAccount());
      processMap.put("editMerchantAccount", new editMerchantAccount());
      processMap.put("addBindInterface", new addBindInterface());
      processMap.put("editBindInterface", new editBindInterface());
      processMap.put("addproductKey", new addproductKey());
      processMap.put("editproductKey", new editproductKey());
      processMap.put("addBankCer", new addBankCer());
      processMap.put("editBankCer", new editBankCer());
      processMap.put("delBankCer", new delBankCer());
      processMap.put("getBankCerByBankNo", new getBankCerByBankNo());
      processMap.put("getMerchantCerByMerchantNo", new getMerchantCerByMerchantNo());
      processMap.put("getProductKey", new getProductKey());
      processMap.put("addMerchantCer", new addMerchantCer());
      processMap.put("editMerchantCer", new editMerchantCer());
      processMap.put("delMerchantCer", new delMerchantCer());
      processMap.put("addCutDay", new addCutDay());
      processMap.put("editCutDay", new editCutDay());
      processMap.put("checksysNo", new checksysNo());
      processMap.put("addMerchantH5", new addMerchantH5());
      processMap.put("getMerchantBySeqNo", new getMerchantBySeqNo());
      return processMap;
    }

    public static class addMerchantAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMerchantAccount_args> {
      public addMerchantAccount() {
        super("addMerchantAccount");
      }

      public addMerchantAccount_args getEmptyArgsInstance() {
        return new addMerchantAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addMerchantAccount_result getResult(I iface, addMerchantAccount_args args) throws org.apache.thrift.TException {
        addMerchantAccount_result result = new addMerchantAccount_result();
        result.success = iface.addMerchantAccount(args.MerchantAccountEntity);
        return result;
      }
    }

    public static class editMerchantAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editMerchantAccount_args> {
      public editMerchantAccount() {
        super("editMerchantAccount");
      }

      public editMerchantAccount_args getEmptyArgsInstance() {
        return new editMerchantAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editMerchantAccount_result getResult(I iface, editMerchantAccount_args args) throws org.apache.thrift.TException {
        editMerchantAccount_result result = new editMerchantAccount_result();
        result.success = iface.editMerchantAccount(args.MerchantAccountEntity);
        return result;
      }
    }

    public static class addBindInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBindInterface_args> {
      public addBindInterface() {
        super("addBindInterface");
      }

      public addBindInterface_args getEmptyArgsInstance() {
        return new addBindInterface_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addBindInterface_result getResult(I iface, addBindInterface_args args) throws org.apache.thrift.TException {
        addBindInterface_result result = new addBindInterface_result();
        result.success = iface.addBindInterface(args.BindInterfaceEntity);
        return result;
      }
    }

    public static class editBindInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editBindInterface_args> {
      public editBindInterface() {
        super("editBindInterface");
      }

      public editBindInterface_args getEmptyArgsInstance() {
        return new editBindInterface_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editBindInterface_result getResult(I iface, editBindInterface_args args) throws org.apache.thrift.TException {
        editBindInterface_result result = new editBindInterface_result();
        result.success = iface.editBindInterface(args.BindInterfaceEntity);
        return result;
      }
    }

    public static class addproductKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addproductKey_args> {
      public addproductKey() {
        super("addproductKey");
      }

      public addproductKey_args getEmptyArgsInstance() {
        return new addproductKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addproductKey_result getResult(I iface, addproductKey_args args) throws org.apache.thrift.TException {
        addproductKey_result result = new addproductKey_result();
        result.success = iface.addproductKey(args.productKeyEntity);
        return result;
      }
    }

    public static class editproductKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editproductKey_args> {
      public editproductKey() {
        super("editproductKey");
      }

      public editproductKey_args getEmptyArgsInstance() {
        return new editproductKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editproductKey_result getResult(I iface, editproductKey_args args) throws org.apache.thrift.TException {
        editproductKey_result result = new editproductKey_result();
        result.success = iface.editproductKey(args.productKeyEntity);
        return result;
      }
    }

    public static class addBankCer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBankCer_args> {
      public addBankCer() {
        super("addBankCer");
      }

      public addBankCer_args getEmptyArgsInstance() {
        return new addBankCer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addBankCer_result getResult(I iface, addBankCer_args args) throws org.apache.thrift.TException {
        addBankCer_result result = new addBankCer_result();
        result.success = iface.addBankCer(args.BankCerEntity);
        return result;
      }
    }

    public static class editBankCer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editBankCer_args> {
      public editBankCer() {
        super("editBankCer");
      }

      public editBankCer_args getEmptyArgsInstance() {
        return new editBankCer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editBankCer_result getResult(I iface, editBankCer_args args) throws org.apache.thrift.TException {
        editBankCer_result result = new editBankCer_result();
        result.success = iface.editBankCer(args.BankCerEntity);
        return result;
      }
    }

    public static class delBankCer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delBankCer_args> {
      public delBankCer() {
        super("delBankCer");
      }

      public delBankCer_args getEmptyArgsInstance() {
        return new delBankCer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delBankCer_result getResult(I iface, delBankCer_args args) throws org.apache.thrift.TException {
        delBankCer_result result = new delBankCer_result();
        result.success = iface.delBankCer(args.bankNo);
        return result;
      }
    }

    public static class getBankCerByBankNo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBankCerByBankNo_args> {
      public getBankCerByBankNo() {
        super("getBankCerByBankNo");
      }

      public getBankCerByBankNo_args getEmptyArgsInstance() {
        return new getBankCerByBankNo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBankCerByBankNo_result getResult(I iface, getBankCerByBankNo_args args) throws org.apache.thrift.TException {
        getBankCerByBankNo_result result = new getBankCerByBankNo_result();
        result.success = iface.getBankCerByBankNo(args.bankNo);
        return result;
      }
    }

    public static class getMerchantCerByMerchantNo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantCerByMerchantNo_args> {
      public getMerchantCerByMerchantNo() {
        super("getMerchantCerByMerchantNo");
      }

      public getMerchantCerByMerchantNo_args getEmptyArgsInstance() {
        return new getMerchantCerByMerchantNo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantCerByMerchantNo_result getResult(I iface, getMerchantCerByMerchantNo_args args) throws org.apache.thrift.TException {
        getMerchantCerByMerchantNo_result result = new getMerchantCerByMerchantNo_result();
        result.success = iface.getMerchantCerByMerchantNo(args.merchantNo);
        return result;
      }
    }

    public static class getProductKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductKey_args> {
      public getProductKey() {
        super("getProductKey");
      }

      public getProductKey_args getEmptyArgsInstance() {
        return new getProductKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductKey_result getResult(I iface, getProductKey_args args) throws org.apache.thrift.TException {
        getProductKey_result result = new getProductKey_result();
        result.success = iface.getProductKey(args.merchantNo, args.productCode);
        return result;
      }
    }

    public static class addMerchantCer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMerchantCer_args> {
      public addMerchantCer() {
        super("addMerchantCer");
      }

      public addMerchantCer_args getEmptyArgsInstance() {
        return new addMerchantCer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addMerchantCer_result getResult(I iface, addMerchantCer_args args) throws org.apache.thrift.TException {
        addMerchantCer_result result = new addMerchantCer_result();
        result.success = iface.addMerchantCer(args.MerchantCerEntity);
        return result;
      }
    }

    public static class editMerchantCer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editMerchantCer_args> {
      public editMerchantCer() {
        super("editMerchantCer");
      }

      public editMerchantCer_args getEmptyArgsInstance() {
        return new editMerchantCer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editMerchantCer_result getResult(I iface, editMerchantCer_args args) throws org.apache.thrift.TException {
        editMerchantCer_result result = new editMerchantCer_result();
        result.success = iface.editMerchantCer(args.MerchantCerEntity);
        return result;
      }
    }

    public static class delMerchantCer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delMerchantCer_args> {
      public delMerchantCer() {
        super("delMerchantCer");
      }

      public delMerchantCer_args getEmptyArgsInstance() {
        return new delMerchantCer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delMerchantCer_result getResult(I iface, delMerchantCer_args args) throws org.apache.thrift.TException {
        delMerchantCer_result result = new delMerchantCer_result();
        result.success = iface.delMerchantCer(args.merchantNo);
        return result;
      }
    }

    public static class addCutDay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addCutDay_args> {
      public addCutDay() {
        super("addCutDay");
      }

      public addCutDay_args getEmptyArgsInstance() {
        return new addCutDay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addCutDay_result getResult(I iface, addCutDay_args args) throws org.apache.thrift.TException {
        addCutDay_result result = new addCutDay_result();
        result.success = iface.addCutDay(args.CutDayEntity);
        return result;
      }
    }

    public static class editCutDay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editCutDay_args> {
      public editCutDay() {
        super("editCutDay");
      }

      public editCutDay_args getEmptyArgsInstance() {
        return new editCutDay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editCutDay_result getResult(I iface, editCutDay_args args) throws org.apache.thrift.TException {
        editCutDay_result result = new editCutDay_result();
        result.success = iface.editCutDay(args.CutDayEntity);
        return result;
      }
    }

    public static class checksysNo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checksysNo_args> {
      public checksysNo() {
        super("checksysNo");
      }

      public checksysNo_args getEmptyArgsInstance() {
        return new checksysNo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checksysNo_result getResult(I iface, checksysNo_args args) throws org.apache.thrift.TException {
        checksysNo_result result = new checksysNo_result();
        result.success = iface.checksysNo(args.sysNo);
        return result;
      }
    }

    public static class addMerchantH5<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMerchantH5_args> {
      public addMerchantH5() {
        super("addMerchantH5");
      }

      public addMerchantH5_args getEmptyArgsInstance() {
        return new addMerchantH5_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addMerchantH5_result getResult(I iface, addMerchantH5_args args) throws org.apache.thrift.TException {
        addMerchantH5_result result = new addMerchantH5_result();
        result.success = iface.addMerchantH5(args.merchantH5Entity);
        return result;
      }
    }

    public static class getMerchantBySeqNo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantBySeqNo_args> {
      public getMerchantBySeqNo() {
        super("getMerchantBySeqNo");
      }

      public getMerchantBySeqNo_args getEmptyArgsInstance() {
        return new getMerchantBySeqNo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantBySeqNo_result getResult(I iface, getMerchantBySeqNo_args args) throws org.apache.thrift.TException {
        getMerchantBySeqNo_result result = new getMerchantBySeqNo_result();
        result.success = iface.getMerchantBySeqNo(args.businessSeqNo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addMerchantAccount", new addMerchantAccount());
      processMap.put("editMerchantAccount", new editMerchantAccount());
      processMap.put("addBindInterface", new addBindInterface());
      processMap.put("editBindInterface", new editBindInterface());
      processMap.put("addproductKey", new addproductKey());
      processMap.put("editproductKey", new editproductKey());
      processMap.put("addBankCer", new addBankCer());
      processMap.put("editBankCer", new editBankCer());
      processMap.put("delBankCer", new delBankCer());
      processMap.put("getBankCerByBankNo", new getBankCerByBankNo());
      processMap.put("getMerchantCerByMerchantNo", new getMerchantCerByMerchantNo());
      processMap.put("getProductKey", new getProductKey());
      processMap.put("addMerchantCer", new addMerchantCer());
      processMap.put("editMerchantCer", new editMerchantCer());
      processMap.put("delMerchantCer", new delMerchantCer());
      processMap.put("addCutDay", new addCutDay());
      processMap.put("editCutDay", new editCutDay());
      processMap.put("checksysNo", new checksysNo());
      processMap.put("addMerchantH5", new addMerchantH5());
      processMap.put("getMerchantBySeqNo", new getMerchantBySeqNo());
      return processMap;
    }

    public static class addMerchantAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMerchantAccount_args, String> {
      public addMerchantAccount() {
        super("addMerchantAccount");
      }

      public addMerchantAccount_args getEmptyArgsInstance() {
        return new addMerchantAccount_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addMerchantAccount_result result = new addMerchantAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addMerchantAccount_result result = new addMerchantAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addMerchantAccount_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addMerchantAccount(args.MerchantAccountEntity,resultHandler);
      }
    }

    public static class editMerchantAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editMerchantAccount_args, String> {
      public editMerchantAccount() {
        super("editMerchantAccount");
      }

      public editMerchantAccount_args getEmptyArgsInstance() {
        return new editMerchantAccount_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editMerchantAccount_result result = new editMerchantAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editMerchantAccount_result result = new editMerchantAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editMerchantAccount_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editMerchantAccount(args.MerchantAccountEntity,resultHandler);
      }
    }

    public static class addBindInterface<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBindInterface_args, String> {
      public addBindInterface() {
        super("addBindInterface");
      }

      public addBindInterface_args getEmptyArgsInstance() {
        return new addBindInterface_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addBindInterface_result result = new addBindInterface_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addBindInterface_result result = new addBindInterface_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBindInterface_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addBindInterface(args.BindInterfaceEntity,resultHandler);
      }
    }

    public static class editBindInterface<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editBindInterface_args, String> {
      public editBindInterface() {
        super("editBindInterface");
      }

      public editBindInterface_args getEmptyArgsInstance() {
        return new editBindInterface_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editBindInterface_result result = new editBindInterface_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editBindInterface_result result = new editBindInterface_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editBindInterface_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editBindInterface(args.BindInterfaceEntity,resultHandler);
      }
    }

    public static class addproductKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addproductKey_args, String> {
      public addproductKey() {
        super("addproductKey");
      }

      public addproductKey_args getEmptyArgsInstance() {
        return new addproductKey_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addproductKey_result result = new addproductKey_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addproductKey_result result = new addproductKey_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addproductKey_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addproductKey(args.productKeyEntity,resultHandler);
      }
    }

    public static class editproductKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editproductKey_args, String> {
      public editproductKey() {
        super("editproductKey");
      }

      public editproductKey_args getEmptyArgsInstance() {
        return new editproductKey_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editproductKey_result result = new editproductKey_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editproductKey_result result = new editproductKey_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editproductKey_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editproductKey(args.productKeyEntity,resultHandler);
      }
    }

    public static class addBankCer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBankCer_args, String> {
      public addBankCer() {
        super("addBankCer");
      }

      public addBankCer_args getEmptyArgsInstance() {
        return new addBankCer_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addBankCer_result result = new addBankCer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addBankCer_result result = new addBankCer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBankCer_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addBankCer(args.BankCerEntity,resultHandler);
      }
    }

    public static class editBankCer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editBankCer_args, String> {
      public editBankCer() {
        super("editBankCer");
      }

      public editBankCer_args getEmptyArgsInstance() {
        return new editBankCer_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editBankCer_result result = new editBankCer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editBankCer_result result = new editBankCer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editBankCer_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editBankCer(args.BankCerEntity,resultHandler);
      }
    }

    public static class delBankCer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delBankCer_args, String> {
      public delBankCer() {
        super("delBankCer");
      }

      public delBankCer_args getEmptyArgsInstance() {
        return new delBankCer_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            delBankCer_result result = new delBankCer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delBankCer_result result = new delBankCer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delBankCer_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.delBankCer(args.bankNo,resultHandler);
      }
    }

    public static class getBankCerByBankNo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBankCerByBankNo_args, String> {
      public getBankCerByBankNo() {
        super("getBankCerByBankNo");
      }

      public getBankCerByBankNo_args getEmptyArgsInstance() {
        return new getBankCerByBankNo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getBankCerByBankNo_result result = new getBankCerByBankNo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBankCerByBankNo_result result = new getBankCerByBankNo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBankCerByBankNo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getBankCerByBankNo(args.bankNo,resultHandler);
      }
    }

    public static class getMerchantCerByMerchantNo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantCerByMerchantNo_args, String> {
      public getMerchantCerByMerchantNo() {
        super("getMerchantCerByMerchantNo");
      }

      public getMerchantCerByMerchantNo_args getEmptyArgsInstance() {
        return new getMerchantCerByMerchantNo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getMerchantCerByMerchantNo_result result = new getMerchantCerByMerchantNo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantCerByMerchantNo_result result = new getMerchantCerByMerchantNo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantCerByMerchantNo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getMerchantCerByMerchantNo(args.merchantNo,resultHandler);
      }
    }

    public static class getProductKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductKey_args, String> {
      public getProductKey() {
        super("getProductKey");
      }

      public getProductKey_args getEmptyArgsInstance() {
        return new getProductKey_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getProductKey_result result = new getProductKey_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductKey_result result = new getProductKey_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductKey_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getProductKey(args.merchantNo, args.productCode,resultHandler);
      }
    }

    public static class addMerchantCer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMerchantCer_args, String> {
      public addMerchantCer() {
        super("addMerchantCer");
      }

      public addMerchantCer_args getEmptyArgsInstance() {
        return new addMerchantCer_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addMerchantCer_result result = new addMerchantCer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addMerchantCer_result result = new addMerchantCer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addMerchantCer_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addMerchantCer(args.MerchantCerEntity,resultHandler);
      }
    }

    public static class editMerchantCer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editMerchantCer_args, String> {
      public editMerchantCer() {
        super("editMerchantCer");
      }

      public editMerchantCer_args getEmptyArgsInstance() {
        return new editMerchantCer_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editMerchantCer_result result = new editMerchantCer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editMerchantCer_result result = new editMerchantCer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editMerchantCer_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editMerchantCer(args.MerchantCerEntity,resultHandler);
      }
    }

    public static class delMerchantCer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delMerchantCer_args, String> {
      public delMerchantCer() {
        super("delMerchantCer");
      }

      public delMerchantCer_args getEmptyArgsInstance() {
        return new delMerchantCer_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            delMerchantCer_result result = new delMerchantCer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delMerchantCer_result result = new delMerchantCer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delMerchantCer_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.delMerchantCer(args.merchantNo,resultHandler);
      }
    }

    public static class addCutDay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addCutDay_args, String> {
      public addCutDay() {
        super("addCutDay");
      }

      public addCutDay_args getEmptyArgsInstance() {
        return new addCutDay_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addCutDay_result result = new addCutDay_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addCutDay_result result = new addCutDay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addCutDay_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addCutDay(args.CutDayEntity,resultHandler);
      }
    }

    public static class editCutDay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editCutDay_args, String> {
      public editCutDay() {
        super("editCutDay");
      }

      public editCutDay_args getEmptyArgsInstance() {
        return new editCutDay_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            editCutDay_result result = new editCutDay_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editCutDay_result result = new editCutDay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editCutDay_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.editCutDay(args.CutDayEntity,resultHandler);
      }
    }

    public static class checksysNo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checksysNo_args, String> {
      public checksysNo() {
        super("checksysNo");
      }

      public checksysNo_args getEmptyArgsInstance() {
        return new checksysNo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            checksysNo_result result = new checksysNo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checksysNo_result result = new checksysNo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checksysNo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.checksysNo(args.sysNo,resultHandler);
      }
    }

    public static class addMerchantH5<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMerchantH5_args, String> {
      public addMerchantH5() {
        super("addMerchantH5");
      }

      public addMerchantH5_args getEmptyArgsInstance() {
        return new addMerchantH5_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addMerchantH5_result result = new addMerchantH5_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addMerchantH5_result result = new addMerchantH5_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addMerchantH5_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addMerchantH5(args.merchantH5Entity,resultHandler);
      }
    }

    public static class getMerchantBySeqNo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantBySeqNo_args, String> {
      public getMerchantBySeqNo() {
        super("getMerchantBySeqNo");
      }

      public getMerchantBySeqNo_args getEmptyArgsInstance() {
        return new getMerchantBySeqNo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getMerchantBySeqNo_result result = new getMerchantBySeqNo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantBySeqNo_result result = new getMerchantBySeqNo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantBySeqNo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getMerchantBySeqNo(args.businessSeqNo,resultHandler);
      }
    }

  }

  public static class addMerchantAccount_args implements org.apache.thrift.TBase<addMerchantAccount_args, addMerchantAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantAccount_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ACCOUNT_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("MerchantAccountEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantAccount_argsTupleSchemeFactory());
    }

    public String MerchantAccountEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ACCOUNT_ENTITY((short)1, "MerchantAccountEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ACCOUNT_ENTITY
            return MERCHANT_ACCOUNT_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ACCOUNT_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("MerchantAccountEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantAccount_args.class, metaDataMap);
    }

    public addMerchantAccount_args() {
    }

    public addMerchantAccount_args(
      String MerchantAccountEntity)
    {
      this();
      this.MerchantAccountEntity = MerchantAccountEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantAccount_args(addMerchantAccount_args other) {
      if (other.isSetMerchantAccountEntity()) {
        this.MerchantAccountEntity = other.MerchantAccountEntity;
      }
    }

    public addMerchantAccount_args deepCopy() {
      return new addMerchantAccount_args(this);
    }

    @Override
    public void clear() {
      this.MerchantAccountEntity = null;
    }

    public String getMerchantAccountEntity() {
      return this.MerchantAccountEntity;
    }

    public addMerchantAccount_args setMerchantAccountEntity(String MerchantAccountEntity) {
      this.MerchantAccountEntity = MerchantAccountEntity;
      return this;
    }

    public void unsetMerchantAccountEntity() {
      this.MerchantAccountEntity = null;
    }

    /** Returns true if field MerchantAccountEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantAccountEntity() {
      return this.MerchantAccountEntity != null;
    }

    public void setMerchantAccountEntityIsSet(boolean value) {
      if (!value) {
        this.MerchantAccountEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ACCOUNT_ENTITY:
        if (value == null) {
          unsetMerchantAccountEntity();
        } else {
          setMerchantAccountEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ACCOUNT_ENTITY:
        return getMerchantAccountEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ACCOUNT_ENTITY:
        return isSetMerchantAccountEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantAccount_args)
        return this.equals((addMerchantAccount_args)that);
      return false;
    }

    public boolean equals(addMerchantAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_MerchantAccountEntity = true && this.isSetMerchantAccountEntity();
      boolean that_present_MerchantAccountEntity = true && that.isSetMerchantAccountEntity();
      if (this_present_MerchantAccountEntity || that_present_MerchantAccountEntity) {
        if (!(this_present_MerchantAccountEntity && that_present_MerchantAccountEntity))
          return false;
        if (!this.MerchantAccountEntity.equals(that.MerchantAccountEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_MerchantAccountEntity = true && (isSetMerchantAccountEntity());
      list.add(present_MerchantAccountEntity);
      if (present_MerchantAccountEntity)
        list.add(MerchantAccountEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantAccountEntity()).compareTo(other.isSetMerchantAccountEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantAccountEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MerchantAccountEntity, other.MerchantAccountEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantAccount_args(");
      boolean first = true;

      sb.append("MerchantAccountEntity:");
      if (this.MerchantAccountEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.MerchantAccountEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantAccount_argsStandardSchemeFactory implements SchemeFactory {
      public addMerchantAccount_argsStandardScheme getScheme() {
        return new addMerchantAccount_argsStandardScheme();
      }
    }

    private static class addMerchantAccount_argsStandardScheme extends StandardScheme<addMerchantAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ACCOUNT_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.MerchantAccountEntity = iprot.readString();
                struct.setMerchantAccountEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.MerchantAccountEntity != null) {
          oprot.writeFieldBegin(MERCHANT_ACCOUNT_ENTITY_FIELD_DESC);
          oprot.writeString(struct.MerchantAccountEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantAccount_argsTupleSchemeFactory implements SchemeFactory {
      public addMerchantAccount_argsTupleScheme getScheme() {
        return new addMerchantAccount_argsTupleScheme();
      }
    }

    private static class addMerchantAccount_argsTupleScheme extends TupleScheme<addMerchantAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantAccountEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantAccountEntity()) {
          oprot.writeString(struct.MerchantAccountEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.MerchantAccountEntity = iprot.readString();
          struct.setMerchantAccountEntityIsSet(true);
        }
      }
    }

  }

  public static class addMerchantAccount_result implements org.apache.thrift.TBase<addMerchantAccount_result, addMerchantAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantAccount_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantAccount_result.class, metaDataMap);
    }

    public addMerchantAccount_result() {
    }

    public addMerchantAccount_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantAccount_result(addMerchantAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addMerchantAccount_result deepCopy() {
      return new addMerchantAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addMerchantAccount_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantAccount_result)
        return this.equals((addMerchantAccount_result)that);
      return false;
    }

    public boolean equals(addMerchantAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantAccount_resultStandardSchemeFactory implements SchemeFactory {
      public addMerchantAccount_resultStandardScheme getScheme() {
        return new addMerchantAccount_resultStandardScheme();
      }
    }

    private static class addMerchantAccount_resultStandardScheme extends StandardScheme<addMerchantAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantAccount_resultTupleSchemeFactory implements SchemeFactory {
      public addMerchantAccount_resultTupleScheme getScheme() {
        return new addMerchantAccount_resultTupleScheme();
      }
    }

    private static class addMerchantAccount_resultTupleScheme extends TupleScheme<addMerchantAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editMerchantAccount_args implements org.apache.thrift.TBase<editMerchantAccount_args, editMerchantAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<editMerchantAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editMerchantAccount_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ACCOUNT_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("MerchantAccountEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editMerchantAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editMerchantAccount_argsTupleSchemeFactory());
    }

    public String MerchantAccountEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ACCOUNT_ENTITY((short)1, "MerchantAccountEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ACCOUNT_ENTITY
            return MERCHANT_ACCOUNT_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ACCOUNT_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("MerchantAccountEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editMerchantAccount_args.class, metaDataMap);
    }

    public editMerchantAccount_args() {
    }

    public editMerchantAccount_args(
      String MerchantAccountEntity)
    {
      this();
      this.MerchantAccountEntity = MerchantAccountEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editMerchantAccount_args(editMerchantAccount_args other) {
      if (other.isSetMerchantAccountEntity()) {
        this.MerchantAccountEntity = other.MerchantAccountEntity;
      }
    }

    public editMerchantAccount_args deepCopy() {
      return new editMerchantAccount_args(this);
    }

    @Override
    public void clear() {
      this.MerchantAccountEntity = null;
    }

    public String getMerchantAccountEntity() {
      return this.MerchantAccountEntity;
    }

    public editMerchantAccount_args setMerchantAccountEntity(String MerchantAccountEntity) {
      this.MerchantAccountEntity = MerchantAccountEntity;
      return this;
    }

    public void unsetMerchantAccountEntity() {
      this.MerchantAccountEntity = null;
    }

    /** Returns true if field MerchantAccountEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantAccountEntity() {
      return this.MerchantAccountEntity != null;
    }

    public void setMerchantAccountEntityIsSet(boolean value) {
      if (!value) {
        this.MerchantAccountEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ACCOUNT_ENTITY:
        if (value == null) {
          unsetMerchantAccountEntity();
        } else {
          setMerchantAccountEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ACCOUNT_ENTITY:
        return getMerchantAccountEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ACCOUNT_ENTITY:
        return isSetMerchantAccountEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editMerchantAccount_args)
        return this.equals((editMerchantAccount_args)that);
      return false;
    }

    public boolean equals(editMerchantAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_MerchantAccountEntity = true && this.isSetMerchantAccountEntity();
      boolean that_present_MerchantAccountEntity = true && that.isSetMerchantAccountEntity();
      if (this_present_MerchantAccountEntity || that_present_MerchantAccountEntity) {
        if (!(this_present_MerchantAccountEntity && that_present_MerchantAccountEntity))
          return false;
        if (!this.MerchantAccountEntity.equals(that.MerchantAccountEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_MerchantAccountEntity = true && (isSetMerchantAccountEntity());
      list.add(present_MerchantAccountEntity);
      if (present_MerchantAccountEntity)
        list.add(MerchantAccountEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(editMerchantAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantAccountEntity()).compareTo(other.isSetMerchantAccountEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantAccountEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MerchantAccountEntity, other.MerchantAccountEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editMerchantAccount_args(");
      boolean first = true;

      sb.append("MerchantAccountEntity:");
      if (this.MerchantAccountEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.MerchantAccountEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editMerchantAccount_argsStandardSchemeFactory implements SchemeFactory {
      public editMerchantAccount_argsStandardScheme getScheme() {
        return new editMerchantAccount_argsStandardScheme();
      }
    }

    private static class editMerchantAccount_argsStandardScheme extends StandardScheme<editMerchantAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editMerchantAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ACCOUNT_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.MerchantAccountEntity = iprot.readString();
                struct.setMerchantAccountEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editMerchantAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.MerchantAccountEntity != null) {
          oprot.writeFieldBegin(MERCHANT_ACCOUNT_ENTITY_FIELD_DESC);
          oprot.writeString(struct.MerchantAccountEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editMerchantAccount_argsTupleSchemeFactory implements SchemeFactory {
      public editMerchantAccount_argsTupleScheme getScheme() {
        return new editMerchantAccount_argsTupleScheme();
      }
    }

    private static class editMerchantAccount_argsTupleScheme extends TupleScheme<editMerchantAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editMerchantAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantAccountEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantAccountEntity()) {
          oprot.writeString(struct.MerchantAccountEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editMerchantAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.MerchantAccountEntity = iprot.readString();
          struct.setMerchantAccountEntityIsSet(true);
        }
      }
    }

  }

  public static class editMerchantAccount_result implements org.apache.thrift.TBase<editMerchantAccount_result, editMerchantAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<editMerchantAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editMerchantAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editMerchantAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editMerchantAccount_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editMerchantAccount_result.class, metaDataMap);
    }

    public editMerchantAccount_result() {
    }

    public editMerchantAccount_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editMerchantAccount_result(editMerchantAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editMerchantAccount_result deepCopy() {
      return new editMerchantAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editMerchantAccount_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editMerchantAccount_result)
        return this.equals((editMerchantAccount_result)that);
      return false;
    }

    public boolean equals(editMerchantAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editMerchantAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editMerchantAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editMerchantAccount_resultStandardSchemeFactory implements SchemeFactory {
      public editMerchantAccount_resultStandardScheme getScheme() {
        return new editMerchantAccount_resultStandardScheme();
      }
    }

    private static class editMerchantAccount_resultStandardScheme extends StandardScheme<editMerchantAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editMerchantAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editMerchantAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editMerchantAccount_resultTupleSchemeFactory implements SchemeFactory {
      public editMerchantAccount_resultTupleScheme getScheme() {
        return new editMerchantAccount_resultTupleScheme();
      }
    }

    private static class editMerchantAccount_resultTupleScheme extends TupleScheme<editMerchantAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editMerchantAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editMerchantAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addBindInterface_args implements org.apache.thrift.TBase<addBindInterface_args, addBindInterface_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBindInterface_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBindInterface_args");

    private static final org.apache.thrift.protocol.TField BIND_INTERFACE_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("BindInterfaceEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBindInterface_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBindInterface_argsTupleSchemeFactory());
    }

    public String BindInterfaceEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIND_INTERFACE_ENTITY((short)1, "BindInterfaceEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIND_INTERFACE_ENTITY
            return BIND_INTERFACE_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIND_INTERFACE_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("BindInterfaceEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBindInterface_args.class, metaDataMap);
    }

    public addBindInterface_args() {
    }

    public addBindInterface_args(
      String BindInterfaceEntity)
    {
      this();
      this.BindInterfaceEntity = BindInterfaceEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBindInterface_args(addBindInterface_args other) {
      if (other.isSetBindInterfaceEntity()) {
        this.BindInterfaceEntity = other.BindInterfaceEntity;
      }
    }

    public addBindInterface_args deepCopy() {
      return new addBindInterface_args(this);
    }

    @Override
    public void clear() {
      this.BindInterfaceEntity = null;
    }

    public String getBindInterfaceEntity() {
      return this.BindInterfaceEntity;
    }

    public addBindInterface_args setBindInterfaceEntity(String BindInterfaceEntity) {
      this.BindInterfaceEntity = BindInterfaceEntity;
      return this;
    }

    public void unsetBindInterfaceEntity() {
      this.BindInterfaceEntity = null;
    }

    /** Returns true if field BindInterfaceEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetBindInterfaceEntity() {
      return this.BindInterfaceEntity != null;
    }

    public void setBindInterfaceEntityIsSet(boolean value) {
      if (!value) {
        this.BindInterfaceEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIND_INTERFACE_ENTITY:
        if (value == null) {
          unsetBindInterfaceEntity();
        } else {
          setBindInterfaceEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIND_INTERFACE_ENTITY:
        return getBindInterfaceEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIND_INTERFACE_ENTITY:
        return isSetBindInterfaceEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBindInterface_args)
        return this.equals((addBindInterface_args)that);
      return false;
    }

    public boolean equals(addBindInterface_args that) {
      if (that == null)
        return false;

      boolean this_present_BindInterfaceEntity = true && this.isSetBindInterfaceEntity();
      boolean that_present_BindInterfaceEntity = true && that.isSetBindInterfaceEntity();
      if (this_present_BindInterfaceEntity || that_present_BindInterfaceEntity) {
        if (!(this_present_BindInterfaceEntity && that_present_BindInterfaceEntity))
          return false;
        if (!this.BindInterfaceEntity.equals(that.BindInterfaceEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_BindInterfaceEntity = true && (isSetBindInterfaceEntity());
      list.add(present_BindInterfaceEntity);
      if (present_BindInterfaceEntity)
        list.add(BindInterfaceEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBindInterface_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBindInterfaceEntity()).compareTo(other.isSetBindInterfaceEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBindInterfaceEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BindInterfaceEntity, other.BindInterfaceEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBindInterface_args(");
      boolean first = true;

      sb.append("BindInterfaceEntity:");
      if (this.BindInterfaceEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.BindInterfaceEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBindInterface_argsStandardSchemeFactory implements SchemeFactory {
      public addBindInterface_argsStandardScheme getScheme() {
        return new addBindInterface_argsStandardScheme();
      }
    }

    private static class addBindInterface_argsStandardScheme extends StandardScheme<addBindInterface_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBindInterface_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIND_INTERFACE_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.BindInterfaceEntity = iprot.readString();
                struct.setBindInterfaceEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBindInterface_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.BindInterfaceEntity != null) {
          oprot.writeFieldBegin(BIND_INTERFACE_ENTITY_FIELD_DESC);
          oprot.writeString(struct.BindInterfaceEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBindInterface_argsTupleSchemeFactory implements SchemeFactory {
      public addBindInterface_argsTupleScheme getScheme() {
        return new addBindInterface_argsTupleScheme();
      }
    }

    private static class addBindInterface_argsTupleScheme extends TupleScheme<addBindInterface_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBindInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBindInterfaceEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBindInterfaceEntity()) {
          oprot.writeString(struct.BindInterfaceEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBindInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.BindInterfaceEntity = iprot.readString();
          struct.setBindInterfaceEntityIsSet(true);
        }
      }
    }

  }

  public static class addBindInterface_result implements org.apache.thrift.TBase<addBindInterface_result, addBindInterface_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBindInterface_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBindInterface_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBindInterface_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBindInterface_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBindInterface_result.class, metaDataMap);
    }

    public addBindInterface_result() {
    }

    public addBindInterface_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBindInterface_result(addBindInterface_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addBindInterface_result deepCopy() {
      return new addBindInterface_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addBindInterface_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBindInterface_result)
        return this.equals((addBindInterface_result)that);
      return false;
    }

    public boolean equals(addBindInterface_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBindInterface_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBindInterface_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBindInterface_resultStandardSchemeFactory implements SchemeFactory {
      public addBindInterface_resultStandardScheme getScheme() {
        return new addBindInterface_resultStandardScheme();
      }
    }

    private static class addBindInterface_resultStandardScheme extends StandardScheme<addBindInterface_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBindInterface_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBindInterface_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBindInterface_resultTupleSchemeFactory implements SchemeFactory {
      public addBindInterface_resultTupleScheme getScheme() {
        return new addBindInterface_resultTupleScheme();
      }
    }

    private static class addBindInterface_resultTupleScheme extends TupleScheme<addBindInterface_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBindInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBindInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editBindInterface_args implements org.apache.thrift.TBase<editBindInterface_args, editBindInterface_args._Fields>, java.io.Serializable, Cloneable, Comparable<editBindInterface_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editBindInterface_args");

    private static final org.apache.thrift.protocol.TField BIND_INTERFACE_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("BindInterfaceEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editBindInterface_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editBindInterface_argsTupleSchemeFactory());
    }

    public String BindInterfaceEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIND_INTERFACE_ENTITY((short)1, "BindInterfaceEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIND_INTERFACE_ENTITY
            return BIND_INTERFACE_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIND_INTERFACE_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("BindInterfaceEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editBindInterface_args.class, metaDataMap);
    }

    public editBindInterface_args() {
    }

    public editBindInterface_args(
      String BindInterfaceEntity)
    {
      this();
      this.BindInterfaceEntity = BindInterfaceEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editBindInterface_args(editBindInterface_args other) {
      if (other.isSetBindInterfaceEntity()) {
        this.BindInterfaceEntity = other.BindInterfaceEntity;
      }
    }

    public editBindInterface_args deepCopy() {
      return new editBindInterface_args(this);
    }

    @Override
    public void clear() {
      this.BindInterfaceEntity = null;
    }

    public String getBindInterfaceEntity() {
      return this.BindInterfaceEntity;
    }

    public editBindInterface_args setBindInterfaceEntity(String BindInterfaceEntity) {
      this.BindInterfaceEntity = BindInterfaceEntity;
      return this;
    }

    public void unsetBindInterfaceEntity() {
      this.BindInterfaceEntity = null;
    }

    /** Returns true if field BindInterfaceEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetBindInterfaceEntity() {
      return this.BindInterfaceEntity != null;
    }

    public void setBindInterfaceEntityIsSet(boolean value) {
      if (!value) {
        this.BindInterfaceEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIND_INTERFACE_ENTITY:
        if (value == null) {
          unsetBindInterfaceEntity();
        } else {
          setBindInterfaceEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIND_INTERFACE_ENTITY:
        return getBindInterfaceEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIND_INTERFACE_ENTITY:
        return isSetBindInterfaceEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editBindInterface_args)
        return this.equals((editBindInterface_args)that);
      return false;
    }

    public boolean equals(editBindInterface_args that) {
      if (that == null)
        return false;

      boolean this_present_BindInterfaceEntity = true && this.isSetBindInterfaceEntity();
      boolean that_present_BindInterfaceEntity = true && that.isSetBindInterfaceEntity();
      if (this_present_BindInterfaceEntity || that_present_BindInterfaceEntity) {
        if (!(this_present_BindInterfaceEntity && that_present_BindInterfaceEntity))
          return false;
        if (!this.BindInterfaceEntity.equals(that.BindInterfaceEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_BindInterfaceEntity = true && (isSetBindInterfaceEntity());
      list.add(present_BindInterfaceEntity);
      if (present_BindInterfaceEntity)
        list.add(BindInterfaceEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(editBindInterface_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBindInterfaceEntity()).compareTo(other.isSetBindInterfaceEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBindInterfaceEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BindInterfaceEntity, other.BindInterfaceEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editBindInterface_args(");
      boolean first = true;

      sb.append("BindInterfaceEntity:");
      if (this.BindInterfaceEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.BindInterfaceEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editBindInterface_argsStandardSchemeFactory implements SchemeFactory {
      public editBindInterface_argsStandardScheme getScheme() {
        return new editBindInterface_argsStandardScheme();
      }
    }

    private static class editBindInterface_argsStandardScheme extends StandardScheme<editBindInterface_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editBindInterface_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIND_INTERFACE_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.BindInterfaceEntity = iprot.readString();
                struct.setBindInterfaceEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editBindInterface_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.BindInterfaceEntity != null) {
          oprot.writeFieldBegin(BIND_INTERFACE_ENTITY_FIELD_DESC);
          oprot.writeString(struct.BindInterfaceEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editBindInterface_argsTupleSchemeFactory implements SchemeFactory {
      public editBindInterface_argsTupleScheme getScheme() {
        return new editBindInterface_argsTupleScheme();
      }
    }

    private static class editBindInterface_argsTupleScheme extends TupleScheme<editBindInterface_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editBindInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBindInterfaceEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBindInterfaceEntity()) {
          oprot.writeString(struct.BindInterfaceEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editBindInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.BindInterfaceEntity = iprot.readString();
          struct.setBindInterfaceEntityIsSet(true);
        }
      }
    }

  }

  public static class editBindInterface_result implements org.apache.thrift.TBase<editBindInterface_result, editBindInterface_result._Fields>, java.io.Serializable, Cloneable, Comparable<editBindInterface_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editBindInterface_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editBindInterface_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editBindInterface_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editBindInterface_result.class, metaDataMap);
    }

    public editBindInterface_result() {
    }

    public editBindInterface_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editBindInterface_result(editBindInterface_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editBindInterface_result deepCopy() {
      return new editBindInterface_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editBindInterface_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editBindInterface_result)
        return this.equals((editBindInterface_result)that);
      return false;
    }

    public boolean equals(editBindInterface_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editBindInterface_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editBindInterface_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editBindInterface_resultStandardSchemeFactory implements SchemeFactory {
      public editBindInterface_resultStandardScheme getScheme() {
        return new editBindInterface_resultStandardScheme();
      }
    }

    private static class editBindInterface_resultStandardScheme extends StandardScheme<editBindInterface_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editBindInterface_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editBindInterface_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editBindInterface_resultTupleSchemeFactory implements SchemeFactory {
      public editBindInterface_resultTupleScheme getScheme() {
        return new editBindInterface_resultTupleScheme();
      }
    }

    private static class editBindInterface_resultTupleScheme extends TupleScheme<editBindInterface_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editBindInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editBindInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addproductKey_args implements org.apache.thrift.TBase<addproductKey_args, addproductKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<addproductKey_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addproductKey_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_KEY_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("productKeyEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addproductKey_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addproductKey_argsTupleSchemeFactory());
    }

    public String productKeyEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_KEY_ENTITY((short)1, "productKeyEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_KEY_ENTITY
            return PRODUCT_KEY_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_KEY_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("productKeyEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addproductKey_args.class, metaDataMap);
    }

    public addproductKey_args() {
    }

    public addproductKey_args(
      String productKeyEntity)
    {
      this();
      this.productKeyEntity = productKeyEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addproductKey_args(addproductKey_args other) {
      if (other.isSetProductKeyEntity()) {
        this.productKeyEntity = other.productKeyEntity;
      }
    }

    public addproductKey_args deepCopy() {
      return new addproductKey_args(this);
    }

    @Override
    public void clear() {
      this.productKeyEntity = null;
    }

    public String getProductKeyEntity() {
      return this.productKeyEntity;
    }

    public addproductKey_args setProductKeyEntity(String productKeyEntity) {
      this.productKeyEntity = productKeyEntity;
      return this;
    }

    public void unsetProductKeyEntity() {
      this.productKeyEntity = null;
    }

    /** Returns true if field productKeyEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetProductKeyEntity() {
      return this.productKeyEntity != null;
    }

    public void setProductKeyEntityIsSet(boolean value) {
      if (!value) {
        this.productKeyEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_KEY_ENTITY:
        if (value == null) {
          unsetProductKeyEntity();
        } else {
          setProductKeyEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_KEY_ENTITY:
        return getProductKeyEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_KEY_ENTITY:
        return isSetProductKeyEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addproductKey_args)
        return this.equals((addproductKey_args)that);
      return false;
    }

    public boolean equals(addproductKey_args that) {
      if (that == null)
        return false;

      boolean this_present_productKeyEntity = true && this.isSetProductKeyEntity();
      boolean that_present_productKeyEntity = true && that.isSetProductKeyEntity();
      if (this_present_productKeyEntity || that_present_productKeyEntity) {
        if (!(this_present_productKeyEntity && that_present_productKeyEntity))
          return false;
        if (!this.productKeyEntity.equals(that.productKeyEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productKeyEntity = true && (isSetProductKeyEntity());
      list.add(present_productKeyEntity);
      if (present_productKeyEntity)
        list.add(productKeyEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(addproductKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductKeyEntity()).compareTo(other.isSetProductKeyEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductKeyEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productKeyEntity, other.productKeyEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addproductKey_args(");
      boolean first = true;

      sb.append("productKeyEntity:");
      if (this.productKeyEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.productKeyEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addproductKey_argsStandardSchemeFactory implements SchemeFactory {
      public addproductKey_argsStandardScheme getScheme() {
        return new addproductKey_argsStandardScheme();
      }
    }

    private static class addproductKey_argsStandardScheme extends StandardScheme<addproductKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addproductKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_KEY_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productKeyEntity = iprot.readString();
                struct.setProductKeyEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addproductKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productKeyEntity != null) {
          oprot.writeFieldBegin(PRODUCT_KEY_ENTITY_FIELD_DESC);
          oprot.writeString(struct.productKeyEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addproductKey_argsTupleSchemeFactory implements SchemeFactory {
      public addproductKey_argsTupleScheme getScheme() {
        return new addproductKey_argsTupleScheme();
      }
    }

    private static class addproductKey_argsTupleScheme extends TupleScheme<addproductKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addproductKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductKeyEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductKeyEntity()) {
          oprot.writeString(struct.productKeyEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addproductKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productKeyEntity = iprot.readString();
          struct.setProductKeyEntityIsSet(true);
        }
      }
    }

  }

  public static class addproductKey_result implements org.apache.thrift.TBase<addproductKey_result, addproductKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<addproductKey_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addproductKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addproductKey_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addproductKey_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addproductKey_result.class, metaDataMap);
    }

    public addproductKey_result() {
    }

    public addproductKey_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addproductKey_result(addproductKey_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addproductKey_result deepCopy() {
      return new addproductKey_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addproductKey_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addproductKey_result)
        return this.equals((addproductKey_result)that);
      return false;
    }

    public boolean equals(addproductKey_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addproductKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addproductKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addproductKey_resultStandardSchemeFactory implements SchemeFactory {
      public addproductKey_resultStandardScheme getScheme() {
        return new addproductKey_resultStandardScheme();
      }
    }

    private static class addproductKey_resultStandardScheme extends StandardScheme<addproductKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addproductKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addproductKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addproductKey_resultTupleSchemeFactory implements SchemeFactory {
      public addproductKey_resultTupleScheme getScheme() {
        return new addproductKey_resultTupleScheme();
      }
    }

    private static class addproductKey_resultTupleScheme extends TupleScheme<addproductKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addproductKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addproductKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editproductKey_args implements org.apache.thrift.TBase<editproductKey_args, editproductKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<editproductKey_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editproductKey_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_KEY_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("productKeyEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editproductKey_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editproductKey_argsTupleSchemeFactory());
    }

    public String productKeyEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_KEY_ENTITY((short)1, "productKeyEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_KEY_ENTITY
            return PRODUCT_KEY_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_KEY_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("productKeyEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editproductKey_args.class, metaDataMap);
    }

    public editproductKey_args() {
    }

    public editproductKey_args(
      String productKeyEntity)
    {
      this();
      this.productKeyEntity = productKeyEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editproductKey_args(editproductKey_args other) {
      if (other.isSetProductKeyEntity()) {
        this.productKeyEntity = other.productKeyEntity;
      }
    }

    public editproductKey_args deepCopy() {
      return new editproductKey_args(this);
    }

    @Override
    public void clear() {
      this.productKeyEntity = null;
    }

    public String getProductKeyEntity() {
      return this.productKeyEntity;
    }

    public editproductKey_args setProductKeyEntity(String productKeyEntity) {
      this.productKeyEntity = productKeyEntity;
      return this;
    }

    public void unsetProductKeyEntity() {
      this.productKeyEntity = null;
    }

    /** Returns true if field productKeyEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetProductKeyEntity() {
      return this.productKeyEntity != null;
    }

    public void setProductKeyEntityIsSet(boolean value) {
      if (!value) {
        this.productKeyEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_KEY_ENTITY:
        if (value == null) {
          unsetProductKeyEntity();
        } else {
          setProductKeyEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_KEY_ENTITY:
        return getProductKeyEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_KEY_ENTITY:
        return isSetProductKeyEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editproductKey_args)
        return this.equals((editproductKey_args)that);
      return false;
    }

    public boolean equals(editproductKey_args that) {
      if (that == null)
        return false;

      boolean this_present_productKeyEntity = true && this.isSetProductKeyEntity();
      boolean that_present_productKeyEntity = true && that.isSetProductKeyEntity();
      if (this_present_productKeyEntity || that_present_productKeyEntity) {
        if (!(this_present_productKeyEntity && that_present_productKeyEntity))
          return false;
        if (!this.productKeyEntity.equals(that.productKeyEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productKeyEntity = true && (isSetProductKeyEntity());
      list.add(present_productKeyEntity);
      if (present_productKeyEntity)
        list.add(productKeyEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(editproductKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductKeyEntity()).compareTo(other.isSetProductKeyEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductKeyEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productKeyEntity, other.productKeyEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editproductKey_args(");
      boolean first = true;

      sb.append("productKeyEntity:");
      if (this.productKeyEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.productKeyEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editproductKey_argsStandardSchemeFactory implements SchemeFactory {
      public editproductKey_argsStandardScheme getScheme() {
        return new editproductKey_argsStandardScheme();
      }
    }

    private static class editproductKey_argsStandardScheme extends StandardScheme<editproductKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editproductKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_KEY_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productKeyEntity = iprot.readString();
                struct.setProductKeyEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editproductKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productKeyEntity != null) {
          oprot.writeFieldBegin(PRODUCT_KEY_ENTITY_FIELD_DESC);
          oprot.writeString(struct.productKeyEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editproductKey_argsTupleSchemeFactory implements SchemeFactory {
      public editproductKey_argsTupleScheme getScheme() {
        return new editproductKey_argsTupleScheme();
      }
    }

    private static class editproductKey_argsTupleScheme extends TupleScheme<editproductKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editproductKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductKeyEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductKeyEntity()) {
          oprot.writeString(struct.productKeyEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editproductKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productKeyEntity = iprot.readString();
          struct.setProductKeyEntityIsSet(true);
        }
      }
    }

  }

  public static class editproductKey_result implements org.apache.thrift.TBase<editproductKey_result, editproductKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<editproductKey_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editproductKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editproductKey_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editproductKey_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editproductKey_result.class, metaDataMap);
    }

    public editproductKey_result() {
    }

    public editproductKey_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editproductKey_result(editproductKey_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editproductKey_result deepCopy() {
      return new editproductKey_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editproductKey_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editproductKey_result)
        return this.equals((editproductKey_result)that);
      return false;
    }

    public boolean equals(editproductKey_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editproductKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editproductKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editproductKey_resultStandardSchemeFactory implements SchemeFactory {
      public editproductKey_resultStandardScheme getScheme() {
        return new editproductKey_resultStandardScheme();
      }
    }

    private static class editproductKey_resultStandardScheme extends StandardScheme<editproductKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editproductKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editproductKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editproductKey_resultTupleSchemeFactory implements SchemeFactory {
      public editproductKey_resultTupleScheme getScheme() {
        return new editproductKey_resultTupleScheme();
      }
    }

    private static class editproductKey_resultTupleScheme extends TupleScheme<editproductKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editproductKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editproductKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addBankCer_args implements org.apache.thrift.TBase<addBankCer_args, addBankCer_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBankCer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBankCer_args");

    private static final org.apache.thrift.protocol.TField BANK_CER_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("BankCerEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBankCer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBankCer_argsTupleSchemeFactory());
    }

    public String BankCerEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_CER_ENTITY((short)1, "BankCerEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_CER_ENTITY
            return BANK_CER_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_CER_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("BankCerEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBankCer_args.class, metaDataMap);
    }

    public addBankCer_args() {
    }

    public addBankCer_args(
      String BankCerEntity)
    {
      this();
      this.BankCerEntity = BankCerEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBankCer_args(addBankCer_args other) {
      if (other.isSetBankCerEntity()) {
        this.BankCerEntity = other.BankCerEntity;
      }
    }

    public addBankCer_args deepCopy() {
      return new addBankCer_args(this);
    }

    @Override
    public void clear() {
      this.BankCerEntity = null;
    }

    public String getBankCerEntity() {
      return this.BankCerEntity;
    }

    public addBankCer_args setBankCerEntity(String BankCerEntity) {
      this.BankCerEntity = BankCerEntity;
      return this;
    }

    public void unsetBankCerEntity() {
      this.BankCerEntity = null;
    }

    /** Returns true if field BankCerEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetBankCerEntity() {
      return this.BankCerEntity != null;
    }

    public void setBankCerEntityIsSet(boolean value) {
      if (!value) {
        this.BankCerEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_CER_ENTITY:
        if (value == null) {
          unsetBankCerEntity();
        } else {
          setBankCerEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_CER_ENTITY:
        return getBankCerEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_CER_ENTITY:
        return isSetBankCerEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBankCer_args)
        return this.equals((addBankCer_args)that);
      return false;
    }

    public boolean equals(addBankCer_args that) {
      if (that == null)
        return false;

      boolean this_present_BankCerEntity = true && this.isSetBankCerEntity();
      boolean that_present_BankCerEntity = true && that.isSetBankCerEntity();
      if (this_present_BankCerEntity || that_present_BankCerEntity) {
        if (!(this_present_BankCerEntity && that_present_BankCerEntity))
          return false;
        if (!this.BankCerEntity.equals(that.BankCerEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_BankCerEntity = true && (isSetBankCerEntity());
      list.add(present_BankCerEntity);
      if (present_BankCerEntity)
        list.add(BankCerEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBankCer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankCerEntity()).compareTo(other.isSetBankCerEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankCerEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BankCerEntity, other.BankCerEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBankCer_args(");
      boolean first = true;

      sb.append("BankCerEntity:");
      if (this.BankCerEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.BankCerEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBankCer_argsStandardSchemeFactory implements SchemeFactory {
      public addBankCer_argsStandardScheme getScheme() {
        return new addBankCer_argsStandardScheme();
      }
    }

    private static class addBankCer_argsStandardScheme extends StandardScheme<addBankCer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBankCer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_CER_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.BankCerEntity = iprot.readString();
                struct.setBankCerEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBankCer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.BankCerEntity != null) {
          oprot.writeFieldBegin(BANK_CER_ENTITY_FIELD_DESC);
          oprot.writeString(struct.BankCerEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBankCer_argsTupleSchemeFactory implements SchemeFactory {
      public addBankCer_argsTupleScheme getScheme() {
        return new addBankCer_argsTupleScheme();
      }
    }

    private static class addBankCer_argsTupleScheme extends TupleScheme<addBankCer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBankCer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankCerEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBankCerEntity()) {
          oprot.writeString(struct.BankCerEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBankCer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.BankCerEntity = iprot.readString();
          struct.setBankCerEntityIsSet(true);
        }
      }
    }

  }

  public static class addBankCer_result implements org.apache.thrift.TBase<addBankCer_result, addBankCer_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBankCer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBankCer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBankCer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBankCer_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBankCer_result.class, metaDataMap);
    }

    public addBankCer_result() {
    }

    public addBankCer_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBankCer_result(addBankCer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addBankCer_result deepCopy() {
      return new addBankCer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addBankCer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBankCer_result)
        return this.equals((addBankCer_result)that);
      return false;
    }

    public boolean equals(addBankCer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBankCer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBankCer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBankCer_resultStandardSchemeFactory implements SchemeFactory {
      public addBankCer_resultStandardScheme getScheme() {
        return new addBankCer_resultStandardScheme();
      }
    }

    private static class addBankCer_resultStandardScheme extends StandardScheme<addBankCer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBankCer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBankCer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBankCer_resultTupleSchemeFactory implements SchemeFactory {
      public addBankCer_resultTupleScheme getScheme() {
        return new addBankCer_resultTupleScheme();
      }
    }

    private static class addBankCer_resultTupleScheme extends TupleScheme<addBankCer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBankCer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBankCer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editBankCer_args implements org.apache.thrift.TBase<editBankCer_args, editBankCer_args._Fields>, java.io.Serializable, Cloneable, Comparable<editBankCer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editBankCer_args");

    private static final org.apache.thrift.protocol.TField BANK_CER_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("BankCerEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editBankCer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editBankCer_argsTupleSchemeFactory());
    }

    public String BankCerEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_CER_ENTITY((short)1, "BankCerEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_CER_ENTITY
            return BANK_CER_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_CER_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("BankCerEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editBankCer_args.class, metaDataMap);
    }

    public editBankCer_args() {
    }

    public editBankCer_args(
      String BankCerEntity)
    {
      this();
      this.BankCerEntity = BankCerEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editBankCer_args(editBankCer_args other) {
      if (other.isSetBankCerEntity()) {
        this.BankCerEntity = other.BankCerEntity;
      }
    }

    public editBankCer_args deepCopy() {
      return new editBankCer_args(this);
    }

    @Override
    public void clear() {
      this.BankCerEntity = null;
    }

    public String getBankCerEntity() {
      return this.BankCerEntity;
    }

    public editBankCer_args setBankCerEntity(String BankCerEntity) {
      this.BankCerEntity = BankCerEntity;
      return this;
    }

    public void unsetBankCerEntity() {
      this.BankCerEntity = null;
    }

    /** Returns true if field BankCerEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetBankCerEntity() {
      return this.BankCerEntity != null;
    }

    public void setBankCerEntityIsSet(boolean value) {
      if (!value) {
        this.BankCerEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_CER_ENTITY:
        if (value == null) {
          unsetBankCerEntity();
        } else {
          setBankCerEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_CER_ENTITY:
        return getBankCerEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_CER_ENTITY:
        return isSetBankCerEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editBankCer_args)
        return this.equals((editBankCer_args)that);
      return false;
    }

    public boolean equals(editBankCer_args that) {
      if (that == null)
        return false;

      boolean this_present_BankCerEntity = true && this.isSetBankCerEntity();
      boolean that_present_BankCerEntity = true && that.isSetBankCerEntity();
      if (this_present_BankCerEntity || that_present_BankCerEntity) {
        if (!(this_present_BankCerEntity && that_present_BankCerEntity))
          return false;
        if (!this.BankCerEntity.equals(that.BankCerEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_BankCerEntity = true && (isSetBankCerEntity());
      list.add(present_BankCerEntity);
      if (present_BankCerEntity)
        list.add(BankCerEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(editBankCer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankCerEntity()).compareTo(other.isSetBankCerEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankCerEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BankCerEntity, other.BankCerEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editBankCer_args(");
      boolean first = true;

      sb.append("BankCerEntity:");
      if (this.BankCerEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.BankCerEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editBankCer_argsStandardSchemeFactory implements SchemeFactory {
      public editBankCer_argsStandardScheme getScheme() {
        return new editBankCer_argsStandardScheme();
      }
    }

    private static class editBankCer_argsStandardScheme extends StandardScheme<editBankCer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editBankCer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_CER_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.BankCerEntity = iprot.readString();
                struct.setBankCerEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editBankCer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.BankCerEntity != null) {
          oprot.writeFieldBegin(BANK_CER_ENTITY_FIELD_DESC);
          oprot.writeString(struct.BankCerEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editBankCer_argsTupleSchemeFactory implements SchemeFactory {
      public editBankCer_argsTupleScheme getScheme() {
        return new editBankCer_argsTupleScheme();
      }
    }

    private static class editBankCer_argsTupleScheme extends TupleScheme<editBankCer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editBankCer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankCerEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBankCerEntity()) {
          oprot.writeString(struct.BankCerEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editBankCer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.BankCerEntity = iprot.readString();
          struct.setBankCerEntityIsSet(true);
        }
      }
    }

  }

  public static class editBankCer_result implements org.apache.thrift.TBase<editBankCer_result, editBankCer_result._Fields>, java.io.Serializable, Cloneable, Comparable<editBankCer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editBankCer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editBankCer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editBankCer_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editBankCer_result.class, metaDataMap);
    }

    public editBankCer_result() {
    }

    public editBankCer_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editBankCer_result(editBankCer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editBankCer_result deepCopy() {
      return new editBankCer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editBankCer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editBankCer_result)
        return this.equals((editBankCer_result)that);
      return false;
    }

    public boolean equals(editBankCer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editBankCer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editBankCer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editBankCer_resultStandardSchemeFactory implements SchemeFactory {
      public editBankCer_resultStandardScheme getScheme() {
        return new editBankCer_resultStandardScheme();
      }
    }

    private static class editBankCer_resultStandardScheme extends StandardScheme<editBankCer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editBankCer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editBankCer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editBankCer_resultTupleSchemeFactory implements SchemeFactory {
      public editBankCer_resultTupleScheme getScheme() {
        return new editBankCer_resultTupleScheme();
      }
    }

    private static class editBankCer_resultTupleScheme extends TupleScheme<editBankCer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editBankCer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editBankCer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delBankCer_args implements org.apache.thrift.TBase<delBankCer_args, delBankCer_args._Fields>, java.io.Serializable, Cloneable, Comparable<delBankCer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delBankCer_args");

    private static final org.apache.thrift.protocol.TField BANK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delBankCer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delBankCer_argsTupleSchemeFactory());
    }

    public String bankNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_NO((short)1, "bankNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_NO
            return BANK_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_NO, new org.apache.thrift.meta_data.FieldMetaData("bankNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delBankCer_args.class, metaDataMap);
    }

    public delBankCer_args() {
    }

    public delBankCer_args(
      String bankNo)
    {
      this();
      this.bankNo = bankNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delBankCer_args(delBankCer_args other) {
      if (other.isSetBankNo()) {
        this.bankNo = other.bankNo;
      }
    }

    public delBankCer_args deepCopy() {
      return new delBankCer_args(this);
    }

    @Override
    public void clear() {
      this.bankNo = null;
    }

    public String getBankNo() {
      return this.bankNo;
    }

    public delBankCer_args setBankNo(String bankNo) {
      this.bankNo = bankNo;
      return this;
    }

    public void unsetBankNo() {
      this.bankNo = null;
    }

    /** Returns true if field bankNo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankNo() {
      return this.bankNo != null;
    }

    public void setBankNoIsSet(boolean value) {
      if (!value) {
        this.bankNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_NO:
        if (value == null) {
          unsetBankNo();
        } else {
          setBankNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_NO:
        return getBankNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_NO:
        return isSetBankNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delBankCer_args)
        return this.equals((delBankCer_args)that);
      return false;
    }

    public boolean equals(delBankCer_args that) {
      if (that == null)
        return false;

      boolean this_present_bankNo = true && this.isSetBankNo();
      boolean that_present_bankNo = true && that.isSetBankNo();
      if (this_present_bankNo || that_present_bankNo) {
        if (!(this_present_bankNo && that_present_bankNo))
          return false;
        if (!this.bankNo.equals(that.bankNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bankNo = true && (isSetBankNo());
      list.add(present_bankNo);
      if (present_bankNo)
        list.add(bankNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(delBankCer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankNo()).compareTo(other.isSetBankNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNo, other.bankNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delBankCer_args(");
      boolean first = true;

      sb.append("bankNo:");
      if (this.bankNo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delBankCer_argsStandardSchemeFactory implements SchemeFactory {
      public delBankCer_argsStandardScheme getScheme() {
        return new delBankCer_argsStandardScheme();
      }
    }

    private static class delBankCer_argsStandardScheme extends StandardScheme<delBankCer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delBankCer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankNo = iprot.readString();
                struct.setBankNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delBankCer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankNo != null) {
          oprot.writeFieldBegin(BANK_NO_FIELD_DESC);
          oprot.writeString(struct.bankNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delBankCer_argsTupleSchemeFactory implements SchemeFactory {
      public delBankCer_argsTupleScheme getScheme() {
        return new delBankCer_argsTupleScheme();
      }
    }

    private static class delBankCer_argsTupleScheme extends TupleScheme<delBankCer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delBankCer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankNo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBankNo()) {
          oprot.writeString(struct.bankNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delBankCer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bankNo = iprot.readString();
          struct.setBankNoIsSet(true);
        }
      }
    }

  }

  public static class delBankCer_result implements org.apache.thrift.TBase<delBankCer_result, delBankCer_result._Fields>, java.io.Serializable, Cloneable, Comparable<delBankCer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delBankCer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delBankCer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delBankCer_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delBankCer_result.class, metaDataMap);
    }

    public delBankCer_result() {
    }

    public delBankCer_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delBankCer_result(delBankCer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public delBankCer_result deepCopy() {
      return new delBankCer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public delBankCer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delBankCer_result)
        return this.equals((delBankCer_result)that);
      return false;
    }

    public boolean equals(delBankCer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delBankCer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delBankCer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delBankCer_resultStandardSchemeFactory implements SchemeFactory {
      public delBankCer_resultStandardScheme getScheme() {
        return new delBankCer_resultStandardScheme();
      }
    }

    private static class delBankCer_resultStandardScheme extends StandardScheme<delBankCer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delBankCer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delBankCer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delBankCer_resultTupleSchemeFactory implements SchemeFactory {
      public delBankCer_resultTupleScheme getScheme() {
        return new delBankCer_resultTupleScheme();
      }
    }

    private static class delBankCer_resultTupleScheme extends TupleScheme<delBankCer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delBankCer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delBankCer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBankCerByBankNo_args implements org.apache.thrift.TBase<getBankCerByBankNo_args, getBankCerByBankNo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBankCerByBankNo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankCerByBankNo_args");

    private static final org.apache.thrift.protocol.TField BANK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankCerByBankNo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankCerByBankNo_argsTupleSchemeFactory());
    }

    public String bankNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_NO((short)1, "bankNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_NO
            return BANK_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_NO, new org.apache.thrift.meta_data.FieldMetaData("bankNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankCerByBankNo_args.class, metaDataMap);
    }

    public getBankCerByBankNo_args() {
    }

    public getBankCerByBankNo_args(
      String bankNo)
    {
      this();
      this.bankNo = bankNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankCerByBankNo_args(getBankCerByBankNo_args other) {
      if (other.isSetBankNo()) {
        this.bankNo = other.bankNo;
      }
    }

    public getBankCerByBankNo_args deepCopy() {
      return new getBankCerByBankNo_args(this);
    }

    @Override
    public void clear() {
      this.bankNo = null;
    }

    public String getBankNo() {
      return this.bankNo;
    }

    public getBankCerByBankNo_args setBankNo(String bankNo) {
      this.bankNo = bankNo;
      return this;
    }

    public void unsetBankNo() {
      this.bankNo = null;
    }

    /** Returns true if field bankNo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankNo() {
      return this.bankNo != null;
    }

    public void setBankNoIsSet(boolean value) {
      if (!value) {
        this.bankNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_NO:
        if (value == null) {
          unsetBankNo();
        } else {
          setBankNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_NO:
        return getBankNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_NO:
        return isSetBankNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankCerByBankNo_args)
        return this.equals((getBankCerByBankNo_args)that);
      return false;
    }

    public boolean equals(getBankCerByBankNo_args that) {
      if (that == null)
        return false;

      boolean this_present_bankNo = true && this.isSetBankNo();
      boolean that_present_bankNo = true && that.isSetBankNo();
      if (this_present_bankNo || that_present_bankNo) {
        if (!(this_present_bankNo && that_present_bankNo))
          return false;
        if (!this.bankNo.equals(that.bankNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bankNo = true && (isSetBankNo());
      list.add(present_bankNo);
      if (present_bankNo)
        list.add(bankNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankCerByBankNo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankNo()).compareTo(other.isSetBankNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNo, other.bankNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankCerByBankNo_args(");
      boolean first = true;

      sb.append("bankNo:");
      if (this.bankNo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankCerByBankNo_argsStandardSchemeFactory implements SchemeFactory {
      public getBankCerByBankNo_argsStandardScheme getScheme() {
        return new getBankCerByBankNo_argsStandardScheme();
      }
    }

    private static class getBankCerByBankNo_argsStandardScheme extends StandardScheme<getBankCerByBankNo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankCerByBankNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankNo = iprot.readString();
                struct.setBankNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankCerByBankNo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankNo != null) {
          oprot.writeFieldBegin(BANK_NO_FIELD_DESC);
          oprot.writeString(struct.bankNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankCerByBankNo_argsTupleSchemeFactory implements SchemeFactory {
      public getBankCerByBankNo_argsTupleScheme getScheme() {
        return new getBankCerByBankNo_argsTupleScheme();
      }
    }

    private static class getBankCerByBankNo_argsTupleScheme extends TupleScheme<getBankCerByBankNo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankCerByBankNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankNo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBankNo()) {
          oprot.writeString(struct.bankNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankCerByBankNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bankNo = iprot.readString();
          struct.setBankNoIsSet(true);
        }
      }
    }

  }

  public static class getBankCerByBankNo_result implements org.apache.thrift.TBase<getBankCerByBankNo_result, getBankCerByBankNo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBankCerByBankNo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankCerByBankNo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankCerByBankNo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankCerByBankNo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankCerByBankNo_result.class, metaDataMap);
    }

    public getBankCerByBankNo_result() {
    }

    public getBankCerByBankNo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankCerByBankNo_result(getBankCerByBankNo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getBankCerByBankNo_result deepCopy() {
      return new getBankCerByBankNo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getBankCerByBankNo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankCerByBankNo_result)
        return this.equals((getBankCerByBankNo_result)that);
      return false;
    }

    public boolean equals(getBankCerByBankNo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankCerByBankNo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankCerByBankNo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankCerByBankNo_resultStandardSchemeFactory implements SchemeFactory {
      public getBankCerByBankNo_resultStandardScheme getScheme() {
        return new getBankCerByBankNo_resultStandardScheme();
      }
    }

    private static class getBankCerByBankNo_resultStandardScheme extends StandardScheme<getBankCerByBankNo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankCerByBankNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankCerByBankNo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankCerByBankNo_resultTupleSchemeFactory implements SchemeFactory {
      public getBankCerByBankNo_resultTupleScheme getScheme() {
        return new getBankCerByBankNo_resultTupleScheme();
      }
    }

    private static class getBankCerByBankNo_resultTupleScheme extends TupleScheme<getBankCerByBankNo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankCerByBankNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankCerByBankNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantCerByMerchantNo_args implements org.apache.thrift.TBase<getMerchantCerByMerchantNo_args, getMerchantCerByMerchantNo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantCerByMerchantNo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantCerByMerchantNo_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantNo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantCerByMerchantNo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantCerByMerchantNo_argsTupleSchemeFactory());
    }

    public String merchantNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_NO((short)1, "merchantNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_NO
            return MERCHANT_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_NO, new org.apache.thrift.meta_data.FieldMetaData("merchantNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantCerByMerchantNo_args.class, metaDataMap);
    }

    public getMerchantCerByMerchantNo_args() {
    }

    public getMerchantCerByMerchantNo_args(
      String merchantNo)
    {
      this();
      this.merchantNo = merchantNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantCerByMerchantNo_args(getMerchantCerByMerchantNo_args other) {
      if (other.isSetMerchantNo()) {
        this.merchantNo = other.merchantNo;
      }
    }

    public getMerchantCerByMerchantNo_args deepCopy() {
      return new getMerchantCerByMerchantNo_args(this);
    }

    @Override
    public void clear() {
      this.merchantNo = null;
    }

    public String getMerchantNo() {
      return this.merchantNo;
    }

    public getMerchantCerByMerchantNo_args setMerchantNo(String merchantNo) {
      this.merchantNo = merchantNo;
      return this;
    }

    public void unsetMerchantNo() {
      this.merchantNo = null;
    }

    /** Returns true if field merchantNo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantNo() {
      return this.merchantNo != null;
    }

    public void setMerchantNoIsSet(boolean value) {
      if (!value) {
        this.merchantNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_NO:
        if (value == null) {
          unsetMerchantNo();
        } else {
          setMerchantNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_NO:
        return getMerchantNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_NO:
        return isSetMerchantNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantCerByMerchantNo_args)
        return this.equals((getMerchantCerByMerchantNo_args)that);
      return false;
    }

    public boolean equals(getMerchantCerByMerchantNo_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantNo = true && this.isSetMerchantNo();
      boolean that_present_merchantNo = true && that.isSetMerchantNo();
      if (this_present_merchantNo || that_present_merchantNo) {
        if (!(this_present_merchantNo && that_present_merchantNo))
          return false;
        if (!this.merchantNo.equals(that.merchantNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantNo = true && (isSetMerchantNo());
      list.add(present_merchantNo);
      if (present_merchantNo)
        list.add(merchantNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantCerByMerchantNo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantNo()).compareTo(other.isSetMerchantNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantNo, other.merchantNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantCerByMerchantNo_args(");
      boolean first = true;

      sb.append("merchantNo:");
      if (this.merchantNo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantCerByMerchantNo_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantCerByMerchantNo_argsStandardScheme getScheme() {
        return new getMerchantCerByMerchantNo_argsStandardScheme();
      }
    }

    private static class getMerchantCerByMerchantNo_argsStandardScheme extends StandardScheme<getMerchantCerByMerchantNo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantCerByMerchantNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantNo = iprot.readString();
                struct.setMerchantNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantCerByMerchantNo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantNo != null) {
          oprot.writeFieldBegin(MERCHANT_NO_FIELD_DESC);
          oprot.writeString(struct.merchantNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantCerByMerchantNo_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantCerByMerchantNo_argsTupleScheme getScheme() {
        return new getMerchantCerByMerchantNo_argsTupleScheme();
      }
    }

    private static class getMerchantCerByMerchantNo_argsTupleScheme extends TupleScheme<getMerchantCerByMerchantNo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantCerByMerchantNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantNo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantNo()) {
          oprot.writeString(struct.merchantNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantCerByMerchantNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantNo = iprot.readString();
          struct.setMerchantNoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantCerByMerchantNo_result implements org.apache.thrift.TBase<getMerchantCerByMerchantNo_result, getMerchantCerByMerchantNo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantCerByMerchantNo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantCerByMerchantNo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantCerByMerchantNo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantCerByMerchantNo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantCerByMerchantNo_result.class, metaDataMap);
    }

    public getMerchantCerByMerchantNo_result() {
    }

    public getMerchantCerByMerchantNo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantCerByMerchantNo_result(getMerchantCerByMerchantNo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getMerchantCerByMerchantNo_result deepCopy() {
      return new getMerchantCerByMerchantNo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getMerchantCerByMerchantNo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantCerByMerchantNo_result)
        return this.equals((getMerchantCerByMerchantNo_result)that);
      return false;
    }

    public boolean equals(getMerchantCerByMerchantNo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantCerByMerchantNo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantCerByMerchantNo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantCerByMerchantNo_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantCerByMerchantNo_resultStandardScheme getScheme() {
        return new getMerchantCerByMerchantNo_resultStandardScheme();
      }
    }

    private static class getMerchantCerByMerchantNo_resultStandardScheme extends StandardScheme<getMerchantCerByMerchantNo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantCerByMerchantNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantCerByMerchantNo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantCerByMerchantNo_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantCerByMerchantNo_resultTupleScheme getScheme() {
        return new getMerchantCerByMerchantNo_resultTupleScheme();
      }
    }

    private static class getMerchantCerByMerchantNo_resultTupleScheme extends TupleScheme<getMerchantCerByMerchantNo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantCerByMerchantNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantCerByMerchantNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductKey_args implements org.apache.thrift.TBase<getProductKey_args, getProductKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductKey_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductKey_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantNo", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("productCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductKey_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductKey_argsTupleSchemeFactory());
    }

    public String merchantNo; // required
    public String productCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_NO((short)1, "merchantNo"),
      PRODUCT_CODE((short)2, "productCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_NO
            return MERCHANT_NO;
          case 2: // PRODUCT_CODE
            return PRODUCT_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_NO, new org.apache.thrift.meta_data.FieldMetaData("merchantNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("productCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductKey_args.class, metaDataMap);
    }

    public getProductKey_args() {
    }

    public getProductKey_args(
      String merchantNo,
      String productCode)
    {
      this();
      this.merchantNo = merchantNo;
      this.productCode = productCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductKey_args(getProductKey_args other) {
      if (other.isSetMerchantNo()) {
        this.merchantNo = other.merchantNo;
      }
      if (other.isSetProductCode()) {
        this.productCode = other.productCode;
      }
    }

    public getProductKey_args deepCopy() {
      return new getProductKey_args(this);
    }

    @Override
    public void clear() {
      this.merchantNo = null;
      this.productCode = null;
    }

    public String getMerchantNo() {
      return this.merchantNo;
    }

    public getProductKey_args setMerchantNo(String merchantNo) {
      this.merchantNo = merchantNo;
      return this;
    }

    public void unsetMerchantNo() {
      this.merchantNo = null;
    }

    /** Returns true if field merchantNo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantNo() {
      return this.merchantNo != null;
    }

    public void setMerchantNoIsSet(boolean value) {
      if (!value) {
        this.merchantNo = null;
      }
    }

    public String getProductCode() {
      return this.productCode;
    }

    public getProductKey_args setProductCode(String productCode) {
      this.productCode = productCode;
      return this;
    }

    public void unsetProductCode() {
      this.productCode = null;
    }

    /** Returns true if field productCode is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCode() {
      return this.productCode != null;
    }

    public void setProductCodeIsSet(boolean value) {
      if (!value) {
        this.productCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_NO:
        if (value == null) {
          unsetMerchantNo();
        } else {
          setMerchantNo((String)value);
        }
        break;

      case PRODUCT_CODE:
        if (value == null) {
          unsetProductCode();
        } else {
          setProductCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_NO:
        return getMerchantNo();

      case PRODUCT_CODE:
        return getProductCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_NO:
        return isSetMerchantNo();
      case PRODUCT_CODE:
        return isSetProductCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductKey_args)
        return this.equals((getProductKey_args)that);
      return false;
    }

    public boolean equals(getProductKey_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantNo = true && this.isSetMerchantNo();
      boolean that_present_merchantNo = true && that.isSetMerchantNo();
      if (this_present_merchantNo || that_present_merchantNo) {
        if (!(this_present_merchantNo && that_present_merchantNo))
          return false;
        if (!this.merchantNo.equals(that.merchantNo))
          return false;
      }

      boolean this_present_productCode = true && this.isSetProductCode();
      boolean that_present_productCode = true && that.isSetProductCode();
      if (this_present_productCode || that_present_productCode) {
        if (!(this_present_productCode && that_present_productCode))
          return false;
        if (!this.productCode.equals(that.productCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantNo = true && (isSetMerchantNo());
      list.add(present_merchantNo);
      if (present_merchantNo)
        list.add(merchantNo);

      boolean present_productCode = true && (isSetProductCode());
      list.add(present_productCode);
      if (present_productCode)
        list.add(productCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantNo()).compareTo(other.isSetMerchantNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantNo, other.merchantNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductCode()).compareTo(other.isSetProductCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCode, other.productCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductKey_args(");
      boolean first = true;

      sb.append("merchantNo:");
      if (this.merchantNo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productCode:");
      if (this.productCode == null) {
        sb.append("null");
      } else {
        sb.append(this.productCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductKey_argsStandardSchemeFactory implements SchemeFactory {
      public getProductKey_argsStandardScheme getScheme() {
        return new getProductKey_argsStandardScheme();
      }
    }

    private static class getProductKey_argsStandardScheme extends StandardScheme<getProductKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantNo = iprot.readString();
                struct.setMerchantNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productCode = iprot.readString();
                struct.setProductCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantNo != null) {
          oprot.writeFieldBegin(MERCHANT_NO_FIELD_DESC);
          oprot.writeString(struct.merchantNo);
          oprot.writeFieldEnd();
        }
        if (struct.productCode != null) {
          oprot.writeFieldBegin(PRODUCT_CODE_FIELD_DESC);
          oprot.writeString(struct.productCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductKey_argsTupleSchemeFactory implements SchemeFactory {
      public getProductKey_argsTupleScheme getScheme() {
        return new getProductKey_argsTupleScheme();
      }
    }

    private static class getProductKey_argsTupleScheme extends TupleScheme<getProductKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantNo()) {
          optionals.set(0);
        }
        if (struct.isSetProductCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMerchantNo()) {
          oprot.writeString(struct.merchantNo);
        }
        if (struct.isSetProductCode()) {
          oprot.writeString(struct.productCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.merchantNo = iprot.readString();
          struct.setMerchantNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productCode = iprot.readString();
          struct.setProductCodeIsSet(true);
        }
      }
    }

  }

  public static class getProductKey_result implements org.apache.thrift.TBase<getProductKey_result, getProductKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductKey_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductKey_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductKey_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductKey_result.class, metaDataMap);
    }

    public getProductKey_result() {
    }

    public getProductKey_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductKey_result(getProductKey_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getProductKey_result deepCopy() {
      return new getProductKey_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getProductKey_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductKey_result)
        return this.equals((getProductKey_result)that);
      return false;
    }

    public boolean equals(getProductKey_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductKey_resultStandardSchemeFactory implements SchemeFactory {
      public getProductKey_resultStandardScheme getScheme() {
        return new getProductKey_resultStandardScheme();
      }
    }

    private static class getProductKey_resultStandardScheme extends StandardScheme<getProductKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductKey_resultTupleSchemeFactory implements SchemeFactory {
      public getProductKey_resultTupleScheme getScheme() {
        return new getProductKey_resultTupleScheme();
      }
    }

    private static class getProductKey_resultTupleScheme extends TupleScheme<getProductKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addMerchantCer_args implements org.apache.thrift.TBase<addMerchantCer_args, addMerchantCer_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantCer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantCer_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_CER_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("MerchantCerEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantCer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantCer_argsTupleSchemeFactory());
    }

    public String MerchantCerEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_CER_ENTITY((short)1, "MerchantCerEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_CER_ENTITY
            return MERCHANT_CER_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_CER_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("MerchantCerEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantCer_args.class, metaDataMap);
    }

    public addMerchantCer_args() {
    }

    public addMerchantCer_args(
      String MerchantCerEntity)
    {
      this();
      this.MerchantCerEntity = MerchantCerEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantCer_args(addMerchantCer_args other) {
      if (other.isSetMerchantCerEntity()) {
        this.MerchantCerEntity = other.MerchantCerEntity;
      }
    }

    public addMerchantCer_args deepCopy() {
      return new addMerchantCer_args(this);
    }

    @Override
    public void clear() {
      this.MerchantCerEntity = null;
    }

    public String getMerchantCerEntity() {
      return this.MerchantCerEntity;
    }

    public addMerchantCer_args setMerchantCerEntity(String MerchantCerEntity) {
      this.MerchantCerEntity = MerchantCerEntity;
      return this;
    }

    public void unsetMerchantCerEntity() {
      this.MerchantCerEntity = null;
    }

    /** Returns true if field MerchantCerEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantCerEntity() {
      return this.MerchantCerEntity != null;
    }

    public void setMerchantCerEntityIsSet(boolean value) {
      if (!value) {
        this.MerchantCerEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_CER_ENTITY:
        if (value == null) {
          unsetMerchantCerEntity();
        } else {
          setMerchantCerEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_CER_ENTITY:
        return getMerchantCerEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_CER_ENTITY:
        return isSetMerchantCerEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantCer_args)
        return this.equals((addMerchantCer_args)that);
      return false;
    }

    public boolean equals(addMerchantCer_args that) {
      if (that == null)
        return false;

      boolean this_present_MerchantCerEntity = true && this.isSetMerchantCerEntity();
      boolean that_present_MerchantCerEntity = true && that.isSetMerchantCerEntity();
      if (this_present_MerchantCerEntity || that_present_MerchantCerEntity) {
        if (!(this_present_MerchantCerEntity && that_present_MerchantCerEntity))
          return false;
        if (!this.MerchantCerEntity.equals(that.MerchantCerEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_MerchantCerEntity = true && (isSetMerchantCerEntity());
      list.add(present_MerchantCerEntity);
      if (present_MerchantCerEntity)
        list.add(MerchantCerEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantCer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantCerEntity()).compareTo(other.isSetMerchantCerEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantCerEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MerchantCerEntity, other.MerchantCerEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantCer_args(");
      boolean first = true;

      sb.append("MerchantCerEntity:");
      if (this.MerchantCerEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.MerchantCerEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantCer_argsStandardSchemeFactory implements SchemeFactory {
      public addMerchantCer_argsStandardScheme getScheme() {
        return new addMerchantCer_argsStandardScheme();
      }
    }

    private static class addMerchantCer_argsStandardScheme extends StandardScheme<addMerchantCer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantCer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_CER_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.MerchantCerEntity = iprot.readString();
                struct.setMerchantCerEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantCer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.MerchantCerEntity != null) {
          oprot.writeFieldBegin(MERCHANT_CER_ENTITY_FIELD_DESC);
          oprot.writeString(struct.MerchantCerEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantCer_argsTupleSchemeFactory implements SchemeFactory {
      public addMerchantCer_argsTupleScheme getScheme() {
        return new addMerchantCer_argsTupleScheme();
      }
    }

    private static class addMerchantCer_argsTupleScheme extends TupleScheme<addMerchantCer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantCer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantCerEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantCerEntity()) {
          oprot.writeString(struct.MerchantCerEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantCer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.MerchantCerEntity = iprot.readString();
          struct.setMerchantCerEntityIsSet(true);
        }
      }
    }

  }

  public static class addMerchantCer_result implements org.apache.thrift.TBase<addMerchantCer_result, addMerchantCer_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantCer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantCer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantCer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantCer_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantCer_result.class, metaDataMap);
    }

    public addMerchantCer_result() {
    }

    public addMerchantCer_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantCer_result(addMerchantCer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addMerchantCer_result deepCopy() {
      return new addMerchantCer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addMerchantCer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantCer_result)
        return this.equals((addMerchantCer_result)that);
      return false;
    }

    public boolean equals(addMerchantCer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantCer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantCer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantCer_resultStandardSchemeFactory implements SchemeFactory {
      public addMerchantCer_resultStandardScheme getScheme() {
        return new addMerchantCer_resultStandardScheme();
      }
    }

    private static class addMerchantCer_resultStandardScheme extends StandardScheme<addMerchantCer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantCer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantCer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantCer_resultTupleSchemeFactory implements SchemeFactory {
      public addMerchantCer_resultTupleScheme getScheme() {
        return new addMerchantCer_resultTupleScheme();
      }
    }

    private static class addMerchantCer_resultTupleScheme extends TupleScheme<addMerchantCer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantCer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantCer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editMerchantCer_args implements org.apache.thrift.TBase<editMerchantCer_args, editMerchantCer_args._Fields>, java.io.Serializable, Cloneable, Comparable<editMerchantCer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editMerchantCer_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_CER_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("MerchantCerEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editMerchantCer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editMerchantCer_argsTupleSchemeFactory());
    }

    public String MerchantCerEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_CER_ENTITY((short)1, "MerchantCerEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_CER_ENTITY
            return MERCHANT_CER_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_CER_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("MerchantCerEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editMerchantCer_args.class, metaDataMap);
    }

    public editMerchantCer_args() {
    }

    public editMerchantCer_args(
      String MerchantCerEntity)
    {
      this();
      this.MerchantCerEntity = MerchantCerEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editMerchantCer_args(editMerchantCer_args other) {
      if (other.isSetMerchantCerEntity()) {
        this.MerchantCerEntity = other.MerchantCerEntity;
      }
    }

    public editMerchantCer_args deepCopy() {
      return new editMerchantCer_args(this);
    }

    @Override
    public void clear() {
      this.MerchantCerEntity = null;
    }

    public String getMerchantCerEntity() {
      return this.MerchantCerEntity;
    }

    public editMerchantCer_args setMerchantCerEntity(String MerchantCerEntity) {
      this.MerchantCerEntity = MerchantCerEntity;
      return this;
    }

    public void unsetMerchantCerEntity() {
      this.MerchantCerEntity = null;
    }

    /** Returns true if field MerchantCerEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantCerEntity() {
      return this.MerchantCerEntity != null;
    }

    public void setMerchantCerEntityIsSet(boolean value) {
      if (!value) {
        this.MerchantCerEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_CER_ENTITY:
        if (value == null) {
          unsetMerchantCerEntity();
        } else {
          setMerchantCerEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_CER_ENTITY:
        return getMerchantCerEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_CER_ENTITY:
        return isSetMerchantCerEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editMerchantCer_args)
        return this.equals((editMerchantCer_args)that);
      return false;
    }

    public boolean equals(editMerchantCer_args that) {
      if (that == null)
        return false;

      boolean this_present_MerchantCerEntity = true && this.isSetMerchantCerEntity();
      boolean that_present_MerchantCerEntity = true && that.isSetMerchantCerEntity();
      if (this_present_MerchantCerEntity || that_present_MerchantCerEntity) {
        if (!(this_present_MerchantCerEntity && that_present_MerchantCerEntity))
          return false;
        if (!this.MerchantCerEntity.equals(that.MerchantCerEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_MerchantCerEntity = true && (isSetMerchantCerEntity());
      list.add(present_MerchantCerEntity);
      if (present_MerchantCerEntity)
        list.add(MerchantCerEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(editMerchantCer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantCerEntity()).compareTo(other.isSetMerchantCerEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantCerEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MerchantCerEntity, other.MerchantCerEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editMerchantCer_args(");
      boolean first = true;

      sb.append("MerchantCerEntity:");
      if (this.MerchantCerEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.MerchantCerEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editMerchantCer_argsStandardSchemeFactory implements SchemeFactory {
      public editMerchantCer_argsStandardScheme getScheme() {
        return new editMerchantCer_argsStandardScheme();
      }
    }

    private static class editMerchantCer_argsStandardScheme extends StandardScheme<editMerchantCer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editMerchantCer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_CER_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.MerchantCerEntity = iprot.readString();
                struct.setMerchantCerEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editMerchantCer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.MerchantCerEntity != null) {
          oprot.writeFieldBegin(MERCHANT_CER_ENTITY_FIELD_DESC);
          oprot.writeString(struct.MerchantCerEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editMerchantCer_argsTupleSchemeFactory implements SchemeFactory {
      public editMerchantCer_argsTupleScheme getScheme() {
        return new editMerchantCer_argsTupleScheme();
      }
    }

    private static class editMerchantCer_argsTupleScheme extends TupleScheme<editMerchantCer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editMerchantCer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantCerEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantCerEntity()) {
          oprot.writeString(struct.MerchantCerEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editMerchantCer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.MerchantCerEntity = iprot.readString();
          struct.setMerchantCerEntityIsSet(true);
        }
      }
    }

  }

  public static class editMerchantCer_result implements org.apache.thrift.TBase<editMerchantCer_result, editMerchantCer_result._Fields>, java.io.Serializable, Cloneable, Comparable<editMerchantCer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editMerchantCer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editMerchantCer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editMerchantCer_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editMerchantCer_result.class, metaDataMap);
    }

    public editMerchantCer_result() {
    }

    public editMerchantCer_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editMerchantCer_result(editMerchantCer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editMerchantCer_result deepCopy() {
      return new editMerchantCer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editMerchantCer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editMerchantCer_result)
        return this.equals((editMerchantCer_result)that);
      return false;
    }

    public boolean equals(editMerchantCer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editMerchantCer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editMerchantCer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editMerchantCer_resultStandardSchemeFactory implements SchemeFactory {
      public editMerchantCer_resultStandardScheme getScheme() {
        return new editMerchantCer_resultStandardScheme();
      }
    }

    private static class editMerchantCer_resultStandardScheme extends StandardScheme<editMerchantCer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editMerchantCer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editMerchantCer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editMerchantCer_resultTupleSchemeFactory implements SchemeFactory {
      public editMerchantCer_resultTupleScheme getScheme() {
        return new editMerchantCer_resultTupleScheme();
      }
    }

    private static class editMerchantCer_resultTupleScheme extends TupleScheme<editMerchantCer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editMerchantCer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editMerchantCer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delMerchantCer_args implements org.apache.thrift.TBase<delMerchantCer_args, delMerchantCer_args._Fields>, java.io.Serializable, Cloneable, Comparable<delMerchantCer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delMerchantCer_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantNo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delMerchantCer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delMerchantCer_argsTupleSchemeFactory());
    }

    public String merchantNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_NO((short)1, "merchantNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_NO
            return MERCHANT_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_NO, new org.apache.thrift.meta_data.FieldMetaData("merchantNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delMerchantCer_args.class, metaDataMap);
    }

    public delMerchantCer_args() {
    }

    public delMerchantCer_args(
      String merchantNo)
    {
      this();
      this.merchantNo = merchantNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delMerchantCer_args(delMerchantCer_args other) {
      if (other.isSetMerchantNo()) {
        this.merchantNo = other.merchantNo;
      }
    }

    public delMerchantCer_args deepCopy() {
      return new delMerchantCer_args(this);
    }

    @Override
    public void clear() {
      this.merchantNo = null;
    }

    public String getMerchantNo() {
      return this.merchantNo;
    }

    public delMerchantCer_args setMerchantNo(String merchantNo) {
      this.merchantNo = merchantNo;
      return this;
    }

    public void unsetMerchantNo() {
      this.merchantNo = null;
    }

    /** Returns true if field merchantNo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantNo() {
      return this.merchantNo != null;
    }

    public void setMerchantNoIsSet(boolean value) {
      if (!value) {
        this.merchantNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_NO:
        if (value == null) {
          unsetMerchantNo();
        } else {
          setMerchantNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_NO:
        return getMerchantNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_NO:
        return isSetMerchantNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delMerchantCer_args)
        return this.equals((delMerchantCer_args)that);
      return false;
    }

    public boolean equals(delMerchantCer_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantNo = true && this.isSetMerchantNo();
      boolean that_present_merchantNo = true && that.isSetMerchantNo();
      if (this_present_merchantNo || that_present_merchantNo) {
        if (!(this_present_merchantNo && that_present_merchantNo))
          return false;
        if (!this.merchantNo.equals(that.merchantNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantNo = true && (isSetMerchantNo());
      list.add(present_merchantNo);
      if (present_merchantNo)
        list.add(merchantNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(delMerchantCer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantNo()).compareTo(other.isSetMerchantNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantNo, other.merchantNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delMerchantCer_args(");
      boolean first = true;

      sb.append("merchantNo:");
      if (this.merchantNo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delMerchantCer_argsStandardSchemeFactory implements SchemeFactory {
      public delMerchantCer_argsStandardScheme getScheme() {
        return new delMerchantCer_argsStandardScheme();
      }
    }

    private static class delMerchantCer_argsStandardScheme extends StandardScheme<delMerchantCer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delMerchantCer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantNo = iprot.readString();
                struct.setMerchantNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delMerchantCer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantNo != null) {
          oprot.writeFieldBegin(MERCHANT_NO_FIELD_DESC);
          oprot.writeString(struct.merchantNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delMerchantCer_argsTupleSchemeFactory implements SchemeFactory {
      public delMerchantCer_argsTupleScheme getScheme() {
        return new delMerchantCer_argsTupleScheme();
      }
    }

    private static class delMerchantCer_argsTupleScheme extends TupleScheme<delMerchantCer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delMerchantCer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantNo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantNo()) {
          oprot.writeString(struct.merchantNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delMerchantCer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantNo = iprot.readString();
          struct.setMerchantNoIsSet(true);
        }
      }
    }

  }

  public static class delMerchantCer_result implements org.apache.thrift.TBase<delMerchantCer_result, delMerchantCer_result._Fields>, java.io.Serializable, Cloneable, Comparable<delMerchantCer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delMerchantCer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delMerchantCer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delMerchantCer_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delMerchantCer_result.class, metaDataMap);
    }

    public delMerchantCer_result() {
    }

    public delMerchantCer_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delMerchantCer_result(delMerchantCer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public delMerchantCer_result deepCopy() {
      return new delMerchantCer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public delMerchantCer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delMerchantCer_result)
        return this.equals((delMerchantCer_result)that);
      return false;
    }

    public boolean equals(delMerchantCer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delMerchantCer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delMerchantCer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delMerchantCer_resultStandardSchemeFactory implements SchemeFactory {
      public delMerchantCer_resultStandardScheme getScheme() {
        return new delMerchantCer_resultStandardScheme();
      }
    }

    private static class delMerchantCer_resultStandardScheme extends StandardScheme<delMerchantCer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delMerchantCer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delMerchantCer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delMerchantCer_resultTupleSchemeFactory implements SchemeFactory {
      public delMerchantCer_resultTupleScheme getScheme() {
        return new delMerchantCer_resultTupleScheme();
      }
    }

    private static class delMerchantCer_resultTupleScheme extends TupleScheme<delMerchantCer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delMerchantCer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delMerchantCer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addCutDay_args implements org.apache.thrift.TBase<addCutDay_args, addCutDay_args._Fields>, java.io.Serializable, Cloneable, Comparable<addCutDay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCutDay_args");

    private static final org.apache.thrift.protocol.TField CUT_DAY_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("CutDayEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCutDay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCutDay_argsTupleSchemeFactory());
    }

    public String CutDayEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CUT_DAY_ENTITY((short)1, "CutDayEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CUT_DAY_ENTITY
            return CUT_DAY_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CUT_DAY_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("CutDayEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCutDay_args.class, metaDataMap);
    }

    public addCutDay_args() {
    }

    public addCutDay_args(
      String CutDayEntity)
    {
      this();
      this.CutDayEntity = CutDayEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCutDay_args(addCutDay_args other) {
      if (other.isSetCutDayEntity()) {
        this.CutDayEntity = other.CutDayEntity;
      }
    }

    public addCutDay_args deepCopy() {
      return new addCutDay_args(this);
    }

    @Override
    public void clear() {
      this.CutDayEntity = null;
    }

    public String getCutDayEntity() {
      return this.CutDayEntity;
    }

    public addCutDay_args setCutDayEntity(String CutDayEntity) {
      this.CutDayEntity = CutDayEntity;
      return this;
    }

    public void unsetCutDayEntity() {
      this.CutDayEntity = null;
    }

    /** Returns true if field CutDayEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetCutDayEntity() {
      return this.CutDayEntity != null;
    }

    public void setCutDayEntityIsSet(boolean value) {
      if (!value) {
        this.CutDayEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CUT_DAY_ENTITY:
        if (value == null) {
          unsetCutDayEntity();
        } else {
          setCutDayEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CUT_DAY_ENTITY:
        return getCutDayEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CUT_DAY_ENTITY:
        return isSetCutDayEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCutDay_args)
        return this.equals((addCutDay_args)that);
      return false;
    }

    public boolean equals(addCutDay_args that) {
      if (that == null)
        return false;

      boolean this_present_CutDayEntity = true && this.isSetCutDayEntity();
      boolean that_present_CutDayEntity = true && that.isSetCutDayEntity();
      if (this_present_CutDayEntity || that_present_CutDayEntity) {
        if (!(this_present_CutDayEntity && that_present_CutDayEntity))
          return false;
        if (!this.CutDayEntity.equals(that.CutDayEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_CutDayEntity = true && (isSetCutDayEntity());
      list.add(present_CutDayEntity);
      if (present_CutDayEntity)
        list.add(CutDayEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(addCutDay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCutDayEntity()).compareTo(other.isSetCutDayEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCutDayEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CutDayEntity, other.CutDayEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCutDay_args(");
      boolean first = true;

      sb.append("CutDayEntity:");
      if (this.CutDayEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.CutDayEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCutDay_argsStandardSchemeFactory implements SchemeFactory {
      public addCutDay_argsStandardScheme getScheme() {
        return new addCutDay_argsStandardScheme();
      }
    }

    private static class addCutDay_argsStandardScheme extends StandardScheme<addCutDay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCutDay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CUT_DAY_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.CutDayEntity = iprot.readString();
                struct.setCutDayEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCutDay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.CutDayEntity != null) {
          oprot.writeFieldBegin(CUT_DAY_ENTITY_FIELD_DESC);
          oprot.writeString(struct.CutDayEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCutDay_argsTupleSchemeFactory implements SchemeFactory {
      public addCutDay_argsTupleScheme getScheme() {
        return new addCutDay_argsTupleScheme();
      }
    }

    private static class addCutDay_argsTupleScheme extends TupleScheme<addCutDay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCutDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCutDayEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCutDayEntity()) {
          oprot.writeString(struct.CutDayEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCutDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.CutDayEntity = iprot.readString();
          struct.setCutDayEntityIsSet(true);
        }
      }
    }

  }

  public static class addCutDay_result implements org.apache.thrift.TBase<addCutDay_result, addCutDay_result._Fields>, java.io.Serializable, Cloneable, Comparable<addCutDay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCutDay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCutDay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCutDay_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCutDay_result.class, metaDataMap);
    }

    public addCutDay_result() {
    }

    public addCutDay_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCutDay_result(addCutDay_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addCutDay_result deepCopy() {
      return new addCutDay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addCutDay_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCutDay_result)
        return this.equals((addCutDay_result)that);
      return false;
    }

    public boolean equals(addCutDay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addCutDay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCutDay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCutDay_resultStandardSchemeFactory implements SchemeFactory {
      public addCutDay_resultStandardScheme getScheme() {
        return new addCutDay_resultStandardScheme();
      }
    }

    private static class addCutDay_resultStandardScheme extends StandardScheme<addCutDay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCutDay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCutDay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCutDay_resultTupleSchemeFactory implements SchemeFactory {
      public addCutDay_resultTupleScheme getScheme() {
        return new addCutDay_resultTupleScheme();
      }
    }

    private static class addCutDay_resultTupleScheme extends TupleScheme<addCutDay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCutDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCutDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class editCutDay_args implements org.apache.thrift.TBase<editCutDay_args, editCutDay_args._Fields>, java.io.Serializable, Cloneable, Comparable<editCutDay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editCutDay_args");

    private static final org.apache.thrift.protocol.TField CUT_DAY_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("CutDayEntity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editCutDay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editCutDay_argsTupleSchemeFactory());
    }

    public String CutDayEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CUT_DAY_ENTITY((short)1, "CutDayEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CUT_DAY_ENTITY
            return CUT_DAY_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CUT_DAY_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("CutDayEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editCutDay_args.class, metaDataMap);
    }

    public editCutDay_args() {
    }

    public editCutDay_args(
      String CutDayEntity)
    {
      this();
      this.CutDayEntity = CutDayEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editCutDay_args(editCutDay_args other) {
      if (other.isSetCutDayEntity()) {
        this.CutDayEntity = other.CutDayEntity;
      }
    }

    public editCutDay_args deepCopy() {
      return new editCutDay_args(this);
    }

    @Override
    public void clear() {
      this.CutDayEntity = null;
    }

    public String getCutDayEntity() {
      return this.CutDayEntity;
    }

    public editCutDay_args setCutDayEntity(String CutDayEntity) {
      this.CutDayEntity = CutDayEntity;
      return this;
    }

    public void unsetCutDayEntity() {
      this.CutDayEntity = null;
    }

    /** Returns true if field CutDayEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetCutDayEntity() {
      return this.CutDayEntity != null;
    }

    public void setCutDayEntityIsSet(boolean value) {
      if (!value) {
        this.CutDayEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CUT_DAY_ENTITY:
        if (value == null) {
          unsetCutDayEntity();
        } else {
          setCutDayEntity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CUT_DAY_ENTITY:
        return getCutDayEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CUT_DAY_ENTITY:
        return isSetCutDayEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editCutDay_args)
        return this.equals((editCutDay_args)that);
      return false;
    }

    public boolean equals(editCutDay_args that) {
      if (that == null)
        return false;

      boolean this_present_CutDayEntity = true && this.isSetCutDayEntity();
      boolean that_present_CutDayEntity = true && that.isSetCutDayEntity();
      if (this_present_CutDayEntity || that_present_CutDayEntity) {
        if (!(this_present_CutDayEntity && that_present_CutDayEntity))
          return false;
        if (!this.CutDayEntity.equals(that.CutDayEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_CutDayEntity = true && (isSetCutDayEntity());
      list.add(present_CutDayEntity);
      if (present_CutDayEntity)
        list.add(CutDayEntity);

      return list.hashCode();
    }

    @Override
    public int compareTo(editCutDay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCutDayEntity()).compareTo(other.isSetCutDayEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCutDayEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CutDayEntity, other.CutDayEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editCutDay_args(");
      boolean first = true;

      sb.append("CutDayEntity:");
      if (this.CutDayEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.CutDayEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editCutDay_argsStandardSchemeFactory implements SchemeFactory {
      public editCutDay_argsStandardScheme getScheme() {
        return new editCutDay_argsStandardScheme();
      }
    }

    private static class editCutDay_argsStandardScheme extends StandardScheme<editCutDay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editCutDay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CUT_DAY_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.CutDayEntity = iprot.readString();
                struct.setCutDayEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editCutDay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.CutDayEntity != null) {
          oprot.writeFieldBegin(CUT_DAY_ENTITY_FIELD_DESC);
          oprot.writeString(struct.CutDayEntity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editCutDay_argsTupleSchemeFactory implements SchemeFactory {
      public editCutDay_argsTupleScheme getScheme() {
        return new editCutDay_argsTupleScheme();
      }
    }

    private static class editCutDay_argsTupleScheme extends TupleScheme<editCutDay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editCutDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCutDayEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCutDayEntity()) {
          oprot.writeString(struct.CutDayEntity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editCutDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.CutDayEntity = iprot.readString();
          struct.setCutDayEntityIsSet(true);
        }
      }
    }

  }

  public static class editCutDay_result implements org.apache.thrift.TBase<editCutDay_result, editCutDay_result._Fields>, java.io.Serializable, Cloneable, Comparable<editCutDay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editCutDay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editCutDay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editCutDay_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editCutDay_result.class, metaDataMap);
    }

    public editCutDay_result() {
    }

    public editCutDay_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editCutDay_result(editCutDay_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public editCutDay_result deepCopy() {
      return new editCutDay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public editCutDay_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editCutDay_result)
        return this.equals((editCutDay_result)that);
      return false;
    }

    public boolean equals(editCutDay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(editCutDay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editCutDay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editCutDay_resultStandardSchemeFactory implements SchemeFactory {
      public editCutDay_resultStandardScheme getScheme() {
        return new editCutDay_resultStandardScheme();
      }
    }

    private static class editCutDay_resultStandardScheme extends StandardScheme<editCutDay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editCutDay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editCutDay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editCutDay_resultTupleSchemeFactory implements SchemeFactory {
      public editCutDay_resultTupleScheme getScheme() {
        return new editCutDay_resultTupleScheme();
      }
    }

    private static class editCutDay_resultTupleScheme extends TupleScheme<editCutDay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editCutDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editCutDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checksysNo_args implements org.apache.thrift.TBase<checksysNo_args, checksysNo_args._Fields>, java.io.Serializable, Cloneable, Comparable<checksysNo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checksysNo_args");

    private static final org.apache.thrift.protocol.TField SYS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("sysNo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checksysNo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checksysNo_argsTupleSchemeFactory());
    }

    public String sysNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_NO((short)1, "sysNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_NO
            return SYS_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_NO, new org.apache.thrift.meta_data.FieldMetaData("sysNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checksysNo_args.class, metaDataMap);
    }

    public checksysNo_args() {
    }

    public checksysNo_args(
      String sysNo)
    {
      this();
      this.sysNo = sysNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checksysNo_args(checksysNo_args other) {
      if (other.isSetSysNo()) {
        this.sysNo = other.sysNo;
      }
    }

    public checksysNo_args deepCopy() {
      return new checksysNo_args(this);
    }

    @Override
    public void clear() {
      this.sysNo = null;
    }

    public String getSysNo() {
      return this.sysNo;
    }

    public checksysNo_args setSysNo(String sysNo) {
      this.sysNo = sysNo;
      return this;
    }

    public void unsetSysNo() {
      this.sysNo = null;
    }

    /** Returns true if field sysNo is set (has been assigned a value) and false otherwise */
    public boolean isSetSysNo() {
      return this.sysNo != null;
    }

    public void setSysNoIsSet(boolean value) {
      if (!value) {
        this.sysNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_NO:
        if (value == null) {
          unsetSysNo();
        } else {
          setSysNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_NO:
        return getSysNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_NO:
        return isSetSysNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checksysNo_args)
        return this.equals((checksysNo_args)that);
      return false;
    }

    public boolean equals(checksysNo_args that) {
      if (that == null)
        return false;

      boolean this_present_sysNo = true && this.isSetSysNo();
      boolean that_present_sysNo = true && that.isSetSysNo();
      if (this_present_sysNo || that_present_sysNo) {
        if (!(this_present_sysNo && that_present_sysNo))
          return false;
        if (!this.sysNo.equals(that.sysNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysNo = true && (isSetSysNo());
      list.add(present_sysNo);
      if (present_sysNo)
        list.add(sysNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(checksysNo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysNo()).compareTo(other.isSetSysNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysNo, other.sysNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checksysNo_args(");
      boolean first = true;

      sb.append("sysNo:");
      if (this.sysNo == null) {
        sb.append("null");
      } else {
        sb.append(this.sysNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checksysNo_argsStandardSchemeFactory implements SchemeFactory {
      public checksysNo_argsStandardScheme getScheme() {
        return new checksysNo_argsStandardScheme();
      }
    }

    private static class checksysNo_argsStandardScheme extends StandardScheme<checksysNo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checksysNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sysNo = iprot.readString();
                struct.setSysNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checksysNo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysNo != null) {
          oprot.writeFieldBegin(SYS_NO_FIELD_DESC);
          oprot.writeString(struct.sysNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checksysNo_argsTupleSchemeFactory implements SchemeFactory {
      public checksysNo_argsTupleScheme getScheme() {
        return new checksysNo_argsTupleScheme();
      }
    }

    private static class checksysNo_argsTupleScheme extends TupleScheme<checksysNo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checksysNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysNo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysNo()) {
          oprot.writeString(struct.sysNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checksysNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysNo = iprot.readString();
          struct.setSysNoIsSet(true);
        }
      }
    }

  }

  public static class checksysNo_result implements org.apache.thrift.TBase<checksysNo_result, checksysNo_result._Fields>, java.io.Serializable, Cloneable, Comparable<checksysNo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checksysNo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checksysNo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checksysNo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checksysNo_result.class, metaDataMap);
    }

    public checksysNo_result() {
    }

    public checksysNo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checksysNo_result(checksysNo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public checksysNo_result deepCopy() {
      return new checksysNo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public checksysNo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checksysNo_result)
        return this.equals((checksysNo_result)that);
      return false;
    }

    public boolean equals(checksysNo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checksysNo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checksysNo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checksysNo_resultStandardSchemeFactory implements SchemeFactory {
      public checksysNo_resultStandardScheme getScheme() {
        return new checksysNo_resultStandardScheme();
      }
    }

    private static class checksysNo_resultStandardScheme extends StandardScheme<checksysNo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checksysNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checksysNo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checksysNo_resultTupleSchemeFactory implements SchemeFactory {
      public checksysNo_resultTupleScheme getScheme() {
        return new checksysNo_resultTupleScheme();
      }
    }

    private static class checksysNo_resultTupleScheme extends TupleScheme<checksysNo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checksysNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checksysNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addMerchantH5_args implements org.apache.thrift.TBase<addMerchantH5_args, addMerchantH5_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantH5_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantH5_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_H5_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantH5Entity", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantH5_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantH5_argsTupleSchemeFactory());
    }

    public String merchantH5Entity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_H5_ENTITY((short)1, "merchantH5Entity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_H5_ENTITY
            return MERCHANT_H5_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_H5_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("merchantH5Entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantH5_args.class, metaDataMap);
    }

    public addMerchantH5_args() {
    }

    public addMerchantH5_args(
      String merchantH5Entity)
    {
      this();
      this.merchantH5Entity = merchantH5Entity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantH5_args(addMerchantH5_args other) {
      if (other.isSetMerchantH5Entity()) {
        this.merchantH5Entity = other.merchantH5Entity;
      }
    }

    public addMerchantH5_args deepCopy() {
      return new addMerchantH5_args(this);
    }

    @Override
    public void clear() {
      this.merchantH5Entity = null;
    }

    public String getMerchantH5Entity() {
      return this.merchantH5Entity;
    }

    public addMerchantH5_args setMerchantH5Entity(String merchantH5Entity) {
      this.merchantH5Entity = merchantH5Entity;
      return this;
    }

    public void unsetMerchantH5Entity() {
      this.merchantH5Entity = null;
    }

    /** Returns true if field merchantH5Entity is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantH5Entity() {
      return this.merchantH5Entity != null;
    }

    public void setMerchantH5EntityIsSet(boolean value) {
      if (!value) {
        this.merchantH5Entity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_H5_ENTITY:
        if (value == null) {
          unsetMerchantH5Entity();
        } else {
          setMerchantH5Entity((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_H5_ENTITY:
        return getMerchantH5Entity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_H5_ENTITY:
        return isSetMerchantH5Entity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantH5_args)
        return this.equals((addMerchantH5_args)that);
      return false;
    }

    public boolean equals(addMerchantH5_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantH5Entity = true && this.isSetMerchantH5Entity();
      boolean that_present_merchantH5Entity = true && that.isSetMerchantH5Entity();
      if (this_present_merchantH5Entity || that_present_merchantH5Entity) {
        if (!(this_present_merchantH5Entity && that_present_merchantH5Entity))
          return false;
        if (!this.merchantH5Entity.equals(that.merchantH5Entity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantH5Entity = true && (isSetMerchantH5Entity());
      list.add(present_merchantH5Entity);
      if (present_merchantH5Entity)
        list.add(merchantH5Entity);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantH5_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantH5Entity()).compareTo(other.isSetMerchantH5Entity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantH5Entity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantH5Entity, other.merchantH5Entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantH5_args(");
      boolean first = true;

      sb.append("merchantH5Entity:");
      if (this.merchantH5Entity == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantH5Entity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantH5_argsStandardSchemeFactory implements SchemeFactory {
      public addMerchantH5_argsStandardScheme getScheme() {
        return new addMerchantH5_argsStandardScheme();
      }
    }

    private static class addMerchantH5_argsStandardScheme extends StandardScheme<addMerchantH5_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantH5_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_H5_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantH5Entity = iprot.readString();
                struct.setMerchantH5EntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantH5_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantH5Entity != null) {
          oprot.writeFieldBegin(MERCHANT_H5_ENTITY_FIELD_DESC);
          oprot.writeString(struct.merchantH5Entity);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantH5_argsTupleSchemeFactory implements SchemeFactory {
      public addMerchantH5_argsTupleScheme getScheme() {
        return new addMerchantH5_argsTupleScheme();
      }
    }

    private static class addMerchantH5_argsTupleScheme extends TupleScheme<addMerchantH5_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantH5_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantH5Entity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantH5Entity()) {
          oprot.writeString(struct.merchantH5Entity);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantH5_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantH5Entity = iprot.readString();
          struct.setMerchantH5EntityIsSet(true);
        }
      }
    }

  }

  public static class addMerchantH5_result implements org.apache.thrift.TBase<addMerchantH5_result, addMerchantH5_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantH5_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantH5_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantH5_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantH5_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantH5_result.class, metaDataMap);
    }

    public addMerchantH5_result() {
    }

    public addMerchantH5_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantH5_result(addMerchantH5_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addMerchantH5_result deepCopy() {
      return new addMerchantH5_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addMerchantH5_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantH5_result)
        return this.equals((addMerchantH5_result)that);
      return false;
    }

    public boolean equals(addMerchantH5_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantH5_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantH5_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantH5_resultStandardSchemeFactory implements SchemeFactory {
      public addMerchantH5_resultStandardScheme getScheme() {
        return new addMerchantH5_resultStandardScheme();
      }
    }

    private static class addMerchantH5_resultStandardScheme extends StandardScheme<addMerchantH5_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantH5_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantH5_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantH5_resultTupleSchemeFactory implements SchemeFactory {
      public addMerchantH5_resultTupleScheme getScheme() {
        return new addMerchantH5_resultTupleScheme();
      }
    }

    private static class addMerchantH5_resultTupleScheme extends TupleScheme<addMerchantH5_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantH5_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantH5_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantBySeqNo_args implements org.apache.thrift.TBase<getMerchantBySeqNo_args, getMerchantBySeqNo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantBySeqNo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantBySeqNo_args");

    private static final org.apache.thrift.protocol.TField BUSINESS_SEQ_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSeqNo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantBySeqNo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantBySeqNo_argsTupleSchemeFactory());
    }

    public String businessSeqNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUSINESS_SEQ_NO((short)1, "businessSeqNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUSINESS_SEQ_NO
            return BUSINESS_SEQ_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUSINESS_SEQ_NO, new org.apache.thrift.meta_data.FieldMetaData("businessSeqNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantBySeqNo_args.class, metaDataMap);
    }

    public getMerchantBySeqNo_args() {
    }

    public getMerchantBySeqNo_args(
      String businessSeqNo)
    {
      this();
      this.businessSeqNo = businessSeqNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantBySeqNo_args(getMerchantBySeqNo_args other) {
      if (other.isSetBusinessSeqNo()) {
        this.businessSeqNo = other.businessSeqNo;
      }
    }

    public getMerchantBySeqNo_args deepCopy() {
      return new getMerchantBySeqNo_args(this);
    }

    @Override
    public void clear() {
      this.businessSeqNo = null;
    }

    public String getBusinessSeqNo() {
      return this.businessSeqNo;
    }

    public getMerchantBySeqNo_args setBusinessSeqNo(String businessSeqNo) {
      this.businessSeqNo = businessSeqNo;
      return this;
    }

    public void unsetBusinessSeqNo() {
      this.businessSeqNo = null;
    }

    /** Returns true if field businessSeqNo is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessSeqNo() {
      return this.businessSeqNo != null;
    }

    public void setBusinessSeqNoIsSet(boolean value) {
      if (!value) {
        this.businessSeqNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUSINESS_SEQ_NO:
        if (value == null) {
          unsetBusinessSeqNo();
        } else {
          setBusinessSeqNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUSINESS_SEQ_NO:
        return getBusinessSeqNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUSINESS_SEQ_NO:
        return isSetBusinessSeqNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantBySeqNo_args)
        return this.equals((getMerchantBySeqNo_args)that);
      return false;
    }

    public boolean equals(getMerchantBySeqNo_args that) {
      if (that == null)
        return false;

      boolean this_present_businessSeqNo = true && this.isSetBusinessSeqNo();
      boolean that_present_businessSeqNo = true && that.isSetBusinessSeqNo();
      if (this_present_businessSeqNo || that_present_businessSeqNo) {
        if (!(this_present_businessSeqNo && that_present_businessSeqNo))
          return false;
        if (!this.businessSeqNo.equals(that.businessSeqNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_businessSeqNo = true && (isSetBusinessSeqNo());
      list.add(present_businessSeqNo);
      if (present_businessSeqNo)
        list.add(businessSeqNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantBySeqNo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBusinessSeqNo()).compareTo(other.isSetBusinessSeqNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessSeqNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSeqNo, other.businessSeqNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantBySeqNo_args(");
      boolean first = true;

      sb.append("businessSeqNo:");
      if (this.businessSeqNo == null) {
        sb.append("null");
      } else {
        sb.append(this.businessSeqNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantBySeqNo_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantBySeqNo_argsStandardScheme getScheme() {
        return new getMerchantBySeqNo_argsStandardScheme();
      }
    }

    private static class getMerchantBySeqNo_argsStandardScheme extends StandardScheme<getMerchantBySeqNo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantBySeqNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUSINESS_SEQ_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.businessSeqNo = iprot.readString();
                struct.setBusinessSeqNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantBySeqNo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.businessSeqNo != null) {
          oprot.writeFieldBegin(BUSINESS_SEQ_NO_FIELD_DESC);
          oprot.writeString(struct.businessSeqNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantBySeqNo_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantBySeqNo_argsTupleScheme getScheme() {
        return new getMerchantBySeqNo_argsTupleScheme();
      }
    }

    private static class getMerchantBySeqNo_argsTupleScheme extends TupleScheme<getMerchantBySeqNo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantBySeqNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBusinessSeqNo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBusinessSeqNo()) {
          oprot.writeString(struct.businessSeqNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantBySeqNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.businessSeqNo = iprot.readString();
          struct.setBusinessSeqNoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantBySeqNo_result implements org.apache.thrift.TBase<getMerchantBySeqNo_result, getMerchantBySeqNo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantBySeqNo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantBySeqNo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantBySeqNo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantBySeqNo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantBySeqNo_result.class, metaDataMap);
    }

    public getMerchantBySeqNo_result() {
    }

    public getMerchantBySeqNo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantBySeqNo_result(getMerchantBySeqNo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getMerchantBySeqNo_result deepCopy() {
      return new getMerchantBySeqNo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getMerchantBySeqNo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantBySeqNo_result)
        return this.equals((getMerchantBySeqNo_result)that);
      return false;
    }

    public boolean equals(getMerchantBySeqNo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantBySeqNo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantBySeqNo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantBySeqNo_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantBySeqNo_resultStandardScheme getScheme() {
        return new getMerchantBySeqNo_resultStandardScheme();
      }
    }

    private static class getMerchantBySeqNo_resultStandardScheme extends StandardScheme<getMerchantBySeqNo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantBySeqNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantBySeqNo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantBySeqNo_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantBySeqNo_resultTupleScheme getScheme() {
        return new getMerchantBySeqNo_resultTupleScheme();
      }
    }

    private static class getMerchantBySeqNo_resultTupleScheme extends TupleScheme<getMerchantBySeqNo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantBySeqNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantBySeqNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
