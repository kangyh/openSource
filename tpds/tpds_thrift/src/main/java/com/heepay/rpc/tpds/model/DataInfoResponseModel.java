/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.tpds.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-15")
public class DataInfoResponseModel implements org.apache.thrift.TBase<DataInfoResponseModel, DataInfoResponseModel._Fields>, java.io.Serializable, Cloneable, Comparable<DataInfoResponseModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataInfoResponseModel");

  private static final org.apache.thrift.protocol.TField TOTAL_PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPageNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_CHK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("totalChkNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CUSTOMER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("customerId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PHONE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IDENTITY_CHECK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("identityCheckStatus", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXTANT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("extantStatus", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ACCOUNT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("accountNo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACCOUNT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("accountStatus", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField AVAILABLEAMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("availableamount", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TRANSITAMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("transitamount", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField WITHDRAWALAMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawalamount", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ASSETAMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("assetamount", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SEC_BANKACC_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("secBankaccNo", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SEC_BANKACC_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("secBankaccStatus", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CARD_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("CardList", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField SERVICE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceDate", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataInfoResponseModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataInfoResponseModelTupleSchemeFactory());
  }

  public String totalPageNo; // required
  public String totalChkNo; // required
  public String customerId; // required
  public String phoneNo; // required
  public String identityCheckStatus; // required
  public String extantStatus; // required
  public String accountNo; // required
  public String accountStatus; // required
  public String availableamount; // required
  public String transitamount; // required
  public String withdrawalamount; // required
  public String assetamount; // required
  public String secBankaccNo; // required
  public String secBankaccStatus; // required
  public List<DataInfoResponseDetailModel> CardList; // required
  public String serviceDate; // required
  public String note; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_PAGE_NO((short)1, "totalPageNo"),
    TOTAL_CHK_NO((short)2, "totalChkNo"),
    CUSTOMER_ID((short)3, "customerId"),
    PHONE_NO((short)4, "phoneNo"),
    IDENTITY_CHECK_STATUS((short)5, "identityCheckStatus"),
    EXTANT_STATUS((short)6, "extantStatus"),
    ACCOUNT_NO((short)7, "accountNo"),
    ACCOUNT_STATUS((short)8, "accountStatus"),
    AVAILABLEAMOUNT((short)9, "availableamount"),
    TRANSITAMOUNT((short)10, "transitamount"),
    WITHDRAWALAMOUNT((short)11, "withdrawalamount"),
    ASSETAMOUNT((short)12, "assetamount"),
    SEC_BANKACC_NO((short)13, "secBankaccNo"),
    SEC_BANKACC_STATUS((short)14, "secBankaccStatus"),
    CARD_LIST((short)15, "CardList"),
    SERVICE_DATE((short)16, "serviceDate"),
    NOTE((short)17, "note");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_PAGE_NO
          return TOTAL_PAGE_NO;
        case 2: // TOTAL_CHK_NO
          return TOTAL_CHK_NO;
        case 3: // CUSTOMER_ID
          return CUSTOMER_ID;
        case 4: // PHONE_NO
          return PHONE_NO;
        case 5: // IDENTITY_CHECK_STATUS
          return IDENTITY_CHECK_STATUS;
        case 6: // EXTANT_STATUS
          return EXTANT_STATUS;
        case 7: // ACCOUNT_NO
          return ACCOUNT_NO;
        case 8: // ACCOUNT_STATUS
          return ACCOUNT_STATUS;
        case 9: // AVAILABLEAMOUNT
          return AVAILABLEAMOUNT;
        case 10: // TRANSITAMOUNT
          return TRANSITAMOUNT;
        case 11: // WITHDRAWALAMOUNT
          return WITHDRAWALAMOUNT;
        case 12: // ASSETAMOUNT
          return ASSETAMOUNT;
        case 13: // SEC_BANKACC_NO
          return SEC_BANKACC_NO;
        case 14: // SEC_BANKACC_STATUS
          return SEC_BANKACC_STATUS;
        case 15: // CARD_LIST
          return CARD_LIST;
        case 16: // SERVICE_DATE
          return SERVICE_DATE;
        case 17: // NOTE
          return NOTE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("totalPageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_CHK_NO, new org.apache.thrift.meta_data.FieldMetaData("totalChkNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMER_ID, new org.apache.thrift.meta_data.FieldMetaData("customerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE_NO, new org.apache.thrift.meta_data.FieldMetaData("phoneNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_CHECK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("identityCheckStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTANT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("extantStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_NO, new org.apache.thrift.meta_data.FieldMetaData("accountNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("accountStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVAILABLEAMOUNT, new org.apache.thrift.meta_data.FieldMetaData("availableamount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSITAMOUNT, new org.apache.thrift.meta_data.FieldMetaData("transitamount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WITHDRAWALAMOUNT, new org.apache.thrift.meta_data.FieldMetaData("withdrawalamount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSETAMOUNT, new org.apache.thrift.meta_data.FieldMetaData("assetamount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEC_BANKACC_NO, new org.apache.thrift.meta_data.FieldMetaData("secBankaccNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEC_BANKACC_STATUS, new org.apache.thrift.meta_data.FieldMetaData("secBankaccStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_LIST, new org.apache.thrift.meta_data.FieldMetaData("CardList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "DataInfoResponseDetailModel"))));
    tmpMap.put(_Fields.SERVICE_DATE, new org.apache.thrift.meta_data.FieldMetaData("serviceDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataInfoResponseModel.class, metaDataMap);
  }

  public DataInfoResponseModel() {
  }

  public DataInfoResponseModel(
    String totalPageNo,
    String totalChkNo,
    String customerId,
    String phoneNo,
    String identityCheckStatus,
    String extantStatus,
    String accountNo,
    String accountStatus,
    String availableamount,
    String transitamount,
    String withdrawalamount,
    String assetamount,
    String secBankaccNo,
    String secBankaccStatus,
    List<DataInfoResponseDetailModel> CardList,
    String serviceDate,
    String note)
  {
    this();
    this.totalPageNo = totalPageNo;
    this.totalChkNo = totalChkNo;
    this.customerId = customerId;
    this.phoneNo = phoneNo;
    this.identityCheckStatus = identityCheckStatus;
    this.extantStatus = extantStatus;
    this.accountNo = accountNo;
    this.accountStatus = accountStatus;
    this.availableamount = availableamount;
    this.transitamount = transitamount;
    this.withdrawalamount = withdrawalamount;
    this.assetamount = assetamount;
    this.secBankaccNo = secBankaccNo;
    this.secBankaccStatus = secBankaccStatus;
    this.CardList = CardList;
    this.serviceDate = serviceDate;
    this.note = note;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataInfoResponseModel(DataInfoResponseModel other) {
    if (other.isSetTotalPageNo()) {
      this.totalPageNo = other.totalPageNo;
    }
    if (other.isSetTotalChkNo()) {
      this.totalChkNo = other.totalChkNo;
    }
    if (other.isSetCustomerId()) {
      this.customerId = other.customerId;
    }
    if (other.isSetPhoneNo()) {
      this.phoneNo = other.phoneNo;
    }
    if (other.isSetIdentityCheckStatus()) {
      this.identityCheckStatus = other.identityCheckStatus;
    }
    if (other.isSetExtantStatus()) {
      this.extantStatus = other.extantStatus;
    }
    if (other.isSetAccountNo()) {
      this.accountNo = other.accountNo;
    }
    if (other.isSetAccountStatus()) {
      this.accountStatus = other.accountStatus;
    }
    if (other.isSetAvailableamount()) {
      this.availableamount = other.availableamount;
    }
    if (other.isSetTransitamount()) {
      this.transitamount = other.transitamount;
    }
    if (other.isSetWithdrawalamount()) {
      this.withdrawalamount = other.withdrawalamount;
    }
    if (other.isSetAssetamount()) {
      this.assetamount = other.assetamount;
    }
    if (other.isSetSecBankaccNo()) {
      this.secBankaccNo = other.secBankaccNo;
    }
    if (other.isSetSecBankaccStatus()) {
      this.secBankaccStatus = other.secBankaccStatus;
    }
    if (other.isSetCardList()) {
      List<DataInfoResponseDetailModel> __this__CardList = new ArrayList<DataInfoResponseDetailModel>(other.CardList.size());
      for (DataInfoResponseDetailModel other_element : other.CardList) {
        __this__CardList.add(other_element);
      }
      this.CardList = __this__CardList;
    }
    if (other.isSetServiceDate()) {
      this.serviceDate = other.serviceDate;
    }
    if (other.isSetNote()) {
      this.note = other.note;
    }
  }

  public DataInfoResponseModel deepCopy() {
    return new DataInfoResponseModel(this);
  }

  @Override
  public void clear() {
    this.totalPageNo = null;
    this.totalChkNo = null;
    this.customerId = null;
    this.phoneNo = null;
    this.identityCheckStatus = null;
    this.extantStatus = null;
    this.accountNo = null;
    this.accountStatus = null;
    this.availableamount = null;
    this.transitamount = null;
    this.withdrawalamount = null;
    this.assetamount = null;
    this.secBankaccNo = null;
    this.secBankaccStatus = null;
    this.CardList = null;
    this.serviceDate = null;
    this.note = null;
  }

  public String getTotalPageNo() {
    return this.totalPageNo;
  }

  public DataInfoResponseModel setTotalPageNo(String totalPageNo) {
    this.totalPageNo = totalPageNo;
    return this;
  }

  public void unsetTotalPageNo() {
    this.totalPageNo = null;
  }

  /** Returns true if field totalPageNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPageNo() {
    return this.totalPageNo != null;
  }

  public void setTotalPageNoIsSet(boolean value) {
    if (!value) {
      this.totalPageNo = null;
    }
  }

  public String getTotalChkNo() {
    return this.totalChkNo;
  }

  public DataInfoResponseModel setTotalChkNo(String totalChkNo) {
    this.totalChkNo = totalChkNo;
    return this;
  }

  public void unsetTotalChkNo() {
    this.totalChkNo = null;
  }

  /** Returns true if field totalChkNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalChkNo() {
    return this.totalChkNo != null;
  }

  public void setTotalChkNoIsSet(boolean value) {
    if (!value) {
      this.totalChkNo = null;
    }
  }

  public String getCustomerId() {
    return this.customerId;
  }

  public DataInfoResponseModel setCustomerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  public void unsetCustomerId() {
    this.customerId = null;
  }

  /** Returns true if field customerId is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerId() {
    return this.customerId != null;
  }

  public void setCustomerIdIsSet(boolean value) {
    if (!value) {
      this.customerId = null;
    }
  }

  public String getPhoneNo() {
    return this.phoneNo;
  }

  public DataInfoResponseModel setPhoneNo(String phoneNo) {
    this.phoneNo = phoneNo;
    return this;
  }

  public void unsetPhoneNo() {
    this.phoneNo = null;
  }

  /** Returns true if field phoneNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneNo() {
    return this.phoneNo != null;
  }

  public void setPhoneNoIsSet(boolean value) {
    if (!value) {
      this.phoneNo = null;
    }
  }

  public String getIdentityCheckStatus() {
    return this.identityCheckStatus;
  }

  public DataInfoResponseModel setIdentityCheckStatus(String identityCheckStatus) {
    this.identityCheckStatus = identityCheckStatus;
    return this;
  }

  public void unsetIdentityCheckStatus() {
    this.identityCheckStatus = null;
  }

  /** Returns true if field identityCheckStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityCheckStatus() {
    return this.identityCheckStatus != null;
  }

  public void setIdentityCheckStatusIsSet(boolean value) {
    if (!value) {
      this.identityCheckStatus = null;
    }
  }

  public String getExtantStatus() {
    return this.extantStatus;
  }

  public DataInfoResponseModel setExtantStatus(String extantStatus) {
    this.extantStatus = extantStatus;
    return this;
  }

  public void unsetExtantStatus() {
    this.extantStatus = null;
  }

  /** Returns true if field extantStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetExtantStatus() {
    return this.extantStatus != null;
  }

  public void setExtantStatusIsSet(boolean value) {
    if (!value) {
      this.extantStatus = null;
    }
  }

  public String getAccountNo() {
    return this.accountNo;
  }

  public DataInfoResponseModel setAccountNo(String accountNo) {
    this.accountNo = accountNo;
    return this;
  }

  public void unsetAccountNo() {
    this.accountNo = null;
  }

  /** Returns true if field accountNo is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountNo() {
    return this.accountNo != null;
  }

  public void setAccountNoIsSet(boolean value) {
    if (!value) {
      this.accountNo = null;
    }
  }

  public String getAccountStatus() {
    return this.accountStatus;
  }

  public DataInfoResponseModel setAccountStatus(String accountStatus) {
    this.accountStatus = accountStatus;
    return this;
  }

  public void unsetAccountStatus() {
    this.accountStatus = null;
  }

  /** Returns true if field accountStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountStatus() {
    return this.accountStatus != null;
  }

  public void setAccountStatusIsSet(boolean value) {
    if (!value) {
      this.accountStatus = null;
    }
  }

  public String getAvailableamount() {
    return this.availableamount;
  }

  public DataInfoResponseModel setAvailableamount(String availableamount) {
    this.availableamount = availableamount;
    return this;
  }

  public void unsetAvailableamount() {
    this.availableamount = null;
  }

  /** Returns true if field availableamount is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableamount() {
    return this.availableamount != null;
  }

  public void setAvailableamountIsSet(boolean value) {
    if (!value) {
      this.availableamount = null;
    }
  }

  public String getTransitamount() {
    return this.transitamount;
  }

  public DataInfoResponseModel setTransitamount(String transitamount) {
    this.transitamount = transitamount;
    return this;
  }

  public void unsetTransitamount() {
    this.transitamount = null;
  }

  /** Returns true if field transitamount is set (has been assigned a value) and false otherwise */
  public boolean isSetTransitamount() {
    return this.transitamount != null;
  }

  public void setTransitamountIsSet(boolean value) {
    if (!value) {
      this.transitamount = null;
    }
  }

  public String getWithdrawalamount() {
    return this.withdrawalamount;
  }

  public DataInfoResponseModel setWithdrawalamount(String withdrawalamount) {
    this.withdrawalamount = withdrawalamount;
    return this;
  }

  public void unsetWithdrawalamount() {
    this.withdrawalamount = null;
  }

  /** Returns true if field withdrawalamount is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawalamount() {
    return this.withdrawalamount != null;
  }

  public void setWithdrawalamountIsSet(boolean value) {
    if (!value) {
      this.withdrawalamount = null;
    }
  }

  public String getAssetamount() {
    return this.assetamount;
  }

  public DataInfoResponseModel setAssetamount(String assetamount) {
    this.assetamount = assetamount;
    return this;
  }

  public void unsetAssetamount() {
    this.assetamount = null;
  }

  /** Returns true if field assetamount is set (has been assigned a value) and false otherwise */
  public boolean isSetAssetamount() {
    return this.assetamount != null;
  }

  public void setAssetamountIsSet(boolean value) {
    if (!value) {
      this.assetamount = null;
    }
  }

  public String getSecBankaccNo() {
    return this.secBankaccNo;
  }

  public DataInfoResponseModel setSecBankaccNo(String secBankaccNo) {
    this.secBankaccNo = secBankaccNo;
    return this;
  }

  public void unsetSecBankaccNo() {
    this.secBankaccNo = null;
  }

  /** Returns true if field secBankaccNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSecBankaccNo() {
    return this.secBankaccNo != null;
  }

  public void setSecBankaccNoIsSet(boolean value) {
    if (!value) {
      this.secBankaccNo = null;
    }
  }

  public String getSecBankaccStatus() {
    return this.secBankaccStatus;
  }

  public DataInfoResponseModel setSecBankaccStatus(String secBankaccStatus) {
    this.secBankaccStatus = secBankaccStatus;
    return this;
  }

  public void unsetSecBankaccStatus() {
    this.secBankaccStatus = null;
  }

  /** Returns true if field secBankaccStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetSecBankaccStatus() {
    return this.secBankaccStatus != null;
  }

  public void setSecBankaccStatusIsSet(boolean value) {
    if (!value) {
      this.secBankaccStatus = null;
    }
  }

  public int getCardListSize() {
    return (this.CardList == null) ? 0 : this.CardList.size();
  }

  public java.util.Iterator<DataInfoResponseDetailModel> getCardListIterator() {
    return (this.CardList == null) ? null : this.CardList.iterator();
  }

  public void addToCardList(DataInfoResponseDetailModel elem) {
    if (this.CardList == null) {
      this.CardList = new ArrayList<DataInfoResponseDetailModel>();
    }
    this.CardList.add(elem);
  }

  public List<DataInfoResponseDetailModel> getCardList() {
    return this.CardList;
  }

  public DataInfoResponseModel setCardList(List<DataInfoResponseDetailModel> CardList) {
    this.CardList = CardList;
    return this;
  }

  public void unsetCardList() {
    this.CardList = null;
  }

  /** Returns true if field CardList is set (has been assigned a value) and false otherwise */
  public boolean isSetCardList() {
    return this.CardList != null;
  }

  public void setCardListIsSet(boolean value) {
    if (!value) {
      this.CardList = null;
    }
  }

  public String getServiceDate() {
    return this.serviceDate;
  }

  public DataInfoResponseModel setServiceDate(String serviceDate) {
    this.serviceDate = serviceDate;
    return this;
  }

  public void unsetServiceDate() {
    this.serviceDate = null;
  }

  /** Returns true if field serviceDate is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceDate() {
    return this.serviceDate != null;
  }

  public void setServiceDateIsSet(boolean value) {
    if (!value) {
      this.serviceDate = null;
    }
  }

  public String getNote() {
    return this.note;
  }

  public DataInfoResponseModel setNote(String note) {
    this.note = note;
    return this;
  }

  public void unsetNote() {
    this.note = null;
  }

  /** Returns true if field note is set (has been assigned a value) and false otherwise */
  public boolean isSetNote() {
    return this.note != null;
  }

  public void setNoteIsSet(boolean value) {
    if (!value) {
      this.note = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_PAGE_NO:
      if (value == null) {
        unsetTotalPageNo();
      } else {
        setTotalPageNo((String)value);
      }
      break;

    case TOTAL_CHK_NO:
      if (value == null) {
        unsetTotalChkNo();
      } else {
        setTotalChkNo((String)value);
      }
      break;

    case CUSTOMER_ID:
      if (value == null) {
        unsetCustomerId();
      } else {
        setCustomerId((String)value);
      }
      break;

    case PHONE_NO:
      if (value == null) {
        unsetPhoneNo();
      } else {
        setPhoneNo((String)value);
      }
      break;

    case IDENTITY_CHECK_STATUS:
      if (value == null) {
        unsetIdentityCheckStatus();
      } else {
        setIdentityCheckStatus((String)value);
      }
      break;

    case EXTANT_STATUS:
      if (value == null) {
        unsetExtantStatus();
      } else {
        setExtantStatus((String)value);
      }
      break;

    case ACCOUNT_NO:
      if (value == null) {
        unsetAccountNo();
      } else {
        setAccountNo((String)value);
      }
      break;

    case ACCOUNT_STATUS:
      if (value == null) {
        unsetAccountStatus();
      } else {
        setAccountStatus((String)value);
      }
      break;

    case AVAILABLEAMOUNT:
      if (value == null) {
        unsetAvailableamount();
      } else {
        setAvailableamount((String)value);
      }
      break;

    case TRANSITAMOUNT:
      if (value == null) {
        unsetTransitamount();
      } else {
        setTransitamount((String)value);
      }
      break;

    case WITHDRAWALAMOUNT:
      if (value == null) {
        unsetWithdrawalamount();
      } else {
        setWithdrawalamount((String)value);
      }
      break;

    case ASSETAMOUNT:
      if (value == null) {
        unsetAssetamount();
      } else {
        setAssetamount((String)value);
      }
      break;

    case SEC_BANKACC_NO:
      if (value == null) {
        unsetSecBankaccNo();
      } else {
        setSecBankaccNo((String)value);
      }
      break;

    case SEC_BANKACC_STATUS:
      if (value == null) {
        unsetSecBankaccStatus();
      } else {
        setSecBankaccStatus((String)value);
      }
      break;

    case CARD_LIST:
      if (value == null) {
        unsetCardList();
      } else {
        setCardList((List<DataInfoResponseDetailModel>)value);
      }
      break;

    case SERVICE_DATE:
      if (value == null) {
        unsetServiceDate();
      } else {
        setServiceDate((String)value);
      }
      break;

    case NOTE:
      if (value == null) {
        unsetNote();
      } else {
        setNote((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_PAGE_NO:
      return getTotalPageNo();

    case TOTAL_CHK_NO:
      return getTotalChkNo();

    case CUSTOMER_ID:
      return getCustomerId();

    case PHONE_NO:
      return getPhoneNo();

    case IDENTITY_CHECK_STATUS:
      return getIdentityCheckStatus();

    case EXTANT_STATUS:
      return getExtantStatus();

    case ACCOUNT_NO:
      return getAccountNo();

    case ACCOUNT_STATUS:
      return getAccountStatus();

    case AVAILABLEAMOUNT:
      return getAvailableamount();

    case TRANSITAMOUNT:
      return getTransitamount();

    case WITHDRAWALAMOUNT:
      return getWithdrawalamount();

    case ASSETAMOUNT:
      return getAssetamount();

    case SEC_BANKACC_NO:
      return getSecBankaccNo();

    case SEC_BANKACC_STATUS:
      return getSecBankaccStatus();

    case CARD_LIST:
      return getCardList();

    case SERVICE_DATE:
      return getServiceDate();

    case NOTE:
      return getNote();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_PAGE_NO:
      return isSetTotalPageNo();
    case TOTAL_CHK_NO:
      return isSetTotalChkNo();
    case CUSTOMER_ID:
      return isSetCustomerId();
    case PHONE_NO:
      return isSetPhoneNo();
    case IDENTITY_CHECK_STATUS:
      return isSetIdentityCheckStatus();
    case EXTANT_STATUS:
      return isSetExtantStatus();
    case ACCOUNT_NO:
      return isSetAccountNo();
    case ACCOUNT_STATUS:
      return isSetAccountStatus();
    case AVAILABLEAMOUNT:
      return isSetAvailableamount();
    case TRANSITAMOUNT:
      return isSetTransitamount();
    case WITHDRAWALAMOUNT:
      return isSetWithdrawalamount();
    case ASSETAMOUNT:
      return isSetAssetamount();
    case SEC_BANKACC_NO:
      return isSetSecBankaccNo();
    case SEC_BANKACC_STATUS:
      return isSetSecBankaccStatus();
    case CARD_LIST:
      return isSetCardList();
    case SERVICE_DATE:
      return isSetServiceDate();
    case NOTE:
      return isSetNote();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataInfoResponseModel)
      return this.equals((DataInfoResponseModel)that);
    return false;
  }

  public boolean equals(DataInfoResponseModel that) {
    if (that == null)
      return false;

    boolean this_present_totalPageNo = true && this.isSetTotalPageNo();
    boolean that_present_totalPageNo = true && that.isSetTotalPageNo();
    if (this_present_totalPageNo || that_present_totalPageNo) {
      if (!(this_present_totalPageNo && that_present_totalPageNo))
        return false;
      if (!this.totalPageNo.equals(that.totalPageNo))
        return false;
    }

    boolean this_present_totalChkNo = true && this.isSetTotalChkNo();
    boolean that_present_totalChkNo = true && that.isSetTotalChkNo();
    if (this_present_totalChkNo || that_present_totalChkNo) {
      if (!(this_present_totalChkNo && that_present_totalChkNo))
        return false;
      if (!this.totalChkNo.equals(that.totalChkNo))
        return false;
    }

    boolean this_present_customerId = true && this.isSetCustomerId();
    boolean that_present_customerId = true && that.isSetCustomerId();
    if (this_present_customerId || that_present_customerId) {
      if (!(this_present_customerId && that_present_customerId))
        return false;
      if (!this.customerId.equals(that.customerId))
        return false;
    }

    boolean this_present_phoneNo = true && this.isSetPhoneNo();
    boolean that_present_phoneNo = true && that.isSetPhoneNo();
    if (this_present_phoneNo || that_present_phoneNo) {
      if (!(this_present_phoneNo && that_present_phoneNo))
        return false;
      if (!this.phoneNo.equals(that.phoneNo))
        return false;
    }

    boolean this_present_identityCheckStatus = true && this.isSetIdentityCheckStatus();
    boolean that_present_identityCheckStatus = true && that.isSetIdentityCheckStatus();
    if (this_present_identityCheckStatus || that_present_identityCheckStatus) {
      if (!(this_present_identityCheckStatus && that_present_identityCheckStatus))
        return false;
      if (!this.identityCheckStatus.equals(that.identityCheckStatus))
        return false;
    }

    boolean this_present_extantStatus = true && this.isSetExtantStatus();
    boolean that_present_extantStatus = true && that.isSetExtantStatus();
    if (this_present_extantStatus || that_present_extantStatus) {
      if (!(this_present_extantStatus && that_present_extantStatus))
        return false;
      if (!this.extantStatus.equals(that.extantStatus))
        return false;
    }

    boolean this_present_accountNo = true && this.isSetAccountNo();
    boolean that_present_accountNo = true && that.isSetAccountNo();
    if (this_present_accountNo || that_present_accountNo) {
      if (!(this_present_accountNo && that_present_accountNo))
        return false;
      if (!this.accountNo.equals(that.accountNo))
        return false;
    }

    boolean this_present_accountStatus = true && this.isSetAccountStatus();
    boolean that_present_accountStatus = true && that.isSetAccountStatus();
    if (this_present_accountStatus || that_present_accountStatus) {
      if (!(this_present_accountStatus && that_present_accountStatus))
        return false;
      if (!this.accountStatus.equals(that.accountStatus))
        return false;
    }

    boolean this_present_availableamount = true && this.isSetAvailableamount();
    boolean that_present_availableamount = true && that.isSetAvailableamount();
    if (this_present_availableamount || that_present_availableamount) {
      if (!(this_present_availableamount && that_present_availableamount))
        return false;
      if (!this.availableamount.equals(that.availableamount))
        return false;
    }

    boolean this_present_transitamount = true && this.isSetTransitamount();
    boolean that_present_transitamount = true && that.isSetTransitamount();
    if (this_present_transitamount || that_present_transitamount) {
      if (!(this_present_transitamount && that_present_transitamount))
        return false;
      if (!this.transitamount.equals(that.transitamount))
        return false;
    }

    boolean this_present_withdrawalamount = true && this.isSetWithdrawalamount();
    boolean that_present_withdrawalamount = true && that.isSetWithdrawalamount();
    if (this_present_withdrawalamount || that_present_withdrawalamount) {
      if (!(this_present_withdrawalamount && that_present_withdrawalamount))
        return false;
      if (!this.withdrawalamount.equals(that.withdrawalamount))
        return false;
    }

    boolean this_present_assetamount = true && this.isSetAssetamount();
    boolean that_present_assetamount = true && that.isSetAssetamount();
    if (this_present_assetamount || that_present_assetamount) {
      if (!(this_present_assetamount && that_present_assetamount))
        return false;
      if (!this.assetamount.equals(that.assetamount))
        return false;
    }

    boolean this_present_secBankaccNo = true && this.isSetSecBankaccNo();
    boolean that_present_secBankaccNo = true && that.isSetSecBankaccNo();
    if (this_present_secBankaccNo || that_present_secBankaccNo) {
      if (!(this_present_secBankaccNo && that_present_secBankaccNo))
        return false;
      if (!this.secBankaccNo.equals(that.secBankaccNo))
        return false;
    }

    boolean this_present_secBankaccStatus = true && this.isSetSecBankaccStatus();
    boolean that_present_secBankaccStatus = true && that.isSetSecBankaccStatus();
    if (this_present_secBankaccStatus || that_present_secBankaccStatus) {
      if (!(this_present_secBankaccStatus && that_present_secBankaccStatus))
        return false;
      if (!this.secBankaccStatus.equals(that.secBankaccStatus))
        return false;
    }

    boolean this_present_CardList = true && this.isSetCardList();
    boolean that_present_CardList = true && that.isSetCardList();
    if (this_present_CardList || that_present_CardList) {
      if (!(this_present_CardList && that_present_CardList))
        return false;
      if (!this.CardList.equals(that.CardList))
        return false;
    }

    boolean this_present_serviceDate = true && this.isSetServiceDate();
    boolean that_present_serviceDate = true && that.isSetServiceDate();
    if (this_present_serviceDate || that_present_serviceDate) {
      if (!(this_present_serviceDate && that_present_serviceDate))
        return false;
      if (!this.serviceDate.equals(that.serviceDate))
        return false;
    }

    boolean this_present_note = true && this.isSetNote();
    boolean that_present_note = true && that.isSetNote();
    if (this_present_note || that_present_note) {
      if (!(this_present_note && that_present_note))
        return false;
      if (!this.note.equals(that.note))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_totalPageNo = true && (isSetTotalPageNo());
    list.add(present_totalPageNo);
    if (present_totalPageNo)
      list.add(totalPageNo);

    boolean present_totalChkNo = true && (isSetTotalChkNo());
    list.add(present_totalChkNo);
    if (present_totalChkNo)
      list.add(totalChkNo);

    boolean present_customerId = true && (isSetCustomerId());
    list.add(present_customerId);
    if (present_customerId)
      list.add(customerId);

    boolean present_phoneNo = true && (isSetPhoneNo());
    list.add(present_phoneNo);
    if (present_phoneNo)
      list.add(phoneNo);

    boolean present_identityCheckStatus = true && (isSetIdentityCheckStatus());
    list.add(present_identityCheckStatus);
    if (present_identityCheckStatus)
      list.add(identityCheckStatus);

    boolean present_extantStatus = true && (isSetExtantStatus());
    list.add(present_extantStatus);
    if (present_extantStatus)
      list.add(extantStatus);

    boolean present_accountNo = true && (isSetAccountNo());
    list.add(present_accountNo);
    if (present_accountNo)
      list.add(accountNo);

    boolean present_accountStatus = true && (isSetAccountStatus());
    list.add(present_accountStatus);
    if (present_accountStatus)
      list.add(accountStatus);

    boolean present_availableamount = true && (isSetAvailableamount());
    list.add(present_availableamount);
    if (present_availableamount)
      list.add(availableamount);

    boolean present_transitamount = true && (isSetTransitamount());
    list.add(present_transitamount);
    if (present_transitamount)
      list.add(transitamount);

    boolean present_withdrawalamount = true && (isSetWithdrawalamount());
    list.add(present_withdrawalamount);
    if (present_withdrawalamount)
      list.add(withdrawalamount);

    boolean present_assetamount = true && (isSetAssetamount());
    list.add(present_assetamount);
    if (present_assetamount)
      list.add(assetamount);

    boolean present_secBankaccNo = true && (isSetSecBankaccNo());
    list.add(present_secBankaccNo);
    if (present_secBankaccNo)
      list.add(secBankaccNo);

    boolean present_secBankaccStatus = true && (isSetSecBankaccStatus());
    list.add(present_secBankaccStatus);
    if (present_secBankaccStatus)
      list.add(secBankaccStatus);

    boolean present_CardList = true && (isSetCardList());
    list.add(present_CardList);
    if (present_CardList)
      list.add(CardList);

    boolean present_serviceDate = true && (isSetServiceDate());
    list.add(present_serviceDate);
    if (present_serviceDate)
      list.add(serviceDate);

    boolean present_note = true && (isSetNote());
    list.add(present_note);
    if (present_note)
      list.add(note);

    return list.hashCode();
  }

  @Override
  public int compareTo(DataInfoResponseModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTotalPageNo()).compareTo(other.isSetTotalPageNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPageNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPageNo, other.totalPageNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalChkNo()).compareTo(other.isSetTotalChkNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalChkNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalChkNo, other.totalChkNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerId()).compareTo(other.isSetCustomerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerId, other.customerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneNo()).compareTo(other.isSetPhoneNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNo, other.phoneNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityCheckStatus()).compareTo(other.isSetIdentityCheckStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityCheckStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityCheckStatus, other.identityCheckStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtantStatus()).compareTo(other.isSetExtantStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtantStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extantStatus, other.extantStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountNo()).compareTo(other.isSetAccountNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountNo, other.accountNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountStatus()).compareTo(other.isSetAccountStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountStatus, other.accountStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableamount()).compareTo(other.isSetAvailableamount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableamount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableamount, other.availableamount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransitamount()).compareTo(other.isSetTransitamount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransitamount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transitamount, other.transitamount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawalamount()).compareTo(other.isSetWithdrawalamount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawalamount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawalamount, other.withdrawalamount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssetamount()).compareTo(other.isSetAssetamount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssetamount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assetamount, other.assetamount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecBankaccNo()).compareTo(other.isSetSecBankaccNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecBankaccNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secBankaccNo, other.secBankaccNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecBankaccStatus()).compareTo(other.isSetSecBankaccStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecBankaccStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secBankaccStatus, other.secBankaccStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardList()).compareTo(other.isSetCardList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CardList, other.CardList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceDate()).compareTo(other.isSetServiceDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceDate, other.serviceDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNote()).compareTo(other.isSetNote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, other.note);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataInfoResponseModel(");
    boolean first = true;

    sb.append("totalPageNo:");
    if (this.totalPageNo == null) {
      sb.append("null");
    } else {
      sb.append(this.totalPageNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalChkNo:");
    if (this.totalChkNo == null) {
      sb.append("null");
    } else {
      sb.append(this.totalChkNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerId:");
    if (this.customerId == null) {
      sb.append("null");
    } else {
      sb.append(this.customerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneNo:");
    if (this.phoneNo == null) {
      sb.append("null");
    } else {
      sb.append(this.phoneNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityCheckStatus:");
    if (this.identityCheckStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.identityCheckStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extantStatus:");
    if (this.extantStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.extantStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountNo:");
    if (this.accountNo == null) {
      sb.append("null");
    } else {
      sb.append(this.accountNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountStatus:");
    if (this.accountStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.accountStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableamount:");
    if (this.availableamount == null) {
      sb.append("null");
    } else {
      sb.append(this.availableamount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transitamount:");
    if (this.transitamount == null) {
      sb.append("null");
    } else {
      sb.append(this.transitamount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("withdrawalamount:");
    if (this.withdrawalamount == null) {
      sb.append("null");
    } else {
      sb.append(this.withdrawalamount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assetamount:");
    if (this.assetamount == null) {
      sb.append("null");
    } else {
      sb.append(this.assetamount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secBankaccNo:");
    if (this.secBankaccNo == null) {
      sb.append("null");
    } else {
      sb.append(this.secBankaccNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secBankaccStatus:");
    if (this.secBankaccStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.secBankaccStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CardList:");
    if (this.CardList == null) {
      sb.append("null");
    } else {
      sb.append(this.CardList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceDate:");
    if (this.serviceDate == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("note:");
    if (this.note == null) {
      sb.append("null");
    } else {
      sb.append(this.note);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataInfoResponseModelStandardSchemeFactory implements SchemeFactory {
    public DataInfoResponseModelStandardScheme getScheme() {
      return new DataInfoResponseModelStandardScheme();
    }
  }

  private static class DataInfoResponseModelStandardScheme extends StandardScheme<DataInfoResponseModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataInfoResponseModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_PAGE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalPageNo = iprot.readString();
              struct.setTotalPageNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_CHK_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalChkNo = iprot.readString();
              struct.setTotalChkNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CUSTOMER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customerId = iprot.readString();
              struct.setCustomerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PHONE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phoneNo = iprot.readString();
              struct.setPhoneNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IDENTITY_CHECK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityCheckStatus = iprot.readString();
              struct.setIdentityCheckStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXTANT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extantStatus = iprot.readString();
              struct.setExtantStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACCOUNT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountNo = iprot.readString();
              struct.setAccountNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACCOUNT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountStatus = iprot.readString();
              struct.setAccountStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AVAILABLEAMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.availableamount = iprot.readString();
              struct.setAvailableamountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TRANSITAMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transitamount = iprot.readString();
              struct.setTransitamountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WITHDRAWALAMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.withdrawalamount = iprot.readString();
              struct.setWithdrawalamountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ASSETAMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assetamount = iprot.readString();
              struct.setAssetamountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SEC_BANKACC_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secBankaccNo = iprot.readString();
              struct.setSecBankaccNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SEC_BANKACC_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secBankaccStatus = iprot.readString();
              struct.setSecBankaccStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CARD_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.CardList = new ArrayList<DataInfoResponseDetailModel>(_list0.size);
                DataInfoResponseDetailModel _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new DataInfoResponseDetailModel();
                  _elem1.read(iprot);
                  struct.CardList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCardListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SERVICE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceDate = iprot.readString();
              struct.setServiceDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // NOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.note = iprot.readString();
              struct.setNoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataInfoResponseModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.totalPageNo != null) {
        oprot.writeFieldBegin(TOTAL_PAGE_NO_FIELD_DESC);
        oprot.writeString(struct.totalPageNo);
        oprot.writeFieldEnd();
      }
      if (struct.totalChkNo != null) {
        oprot.writeFieldBegin(TOTAL_CHK_NO_FIELD_DESC);
        oprot.writeString(struct.totalChkNo);
        oprot.writeFieldEnd();
      }
      if (struct.customerId != null) {
        oprot.writeFieldBegin(CUSTOMER_ID_FIELD_DESC);
        oprot.writeString(struct.customerId);
        oprot.writeFieldEnd();
      }
      if (struct.phoneNo != null) {
        oprot.writeFieldBegin(PHONE_NO_FIELD_DESC);
        oprot.writeString(struct.phoneNo);
        oprot.writeFieldEnd();
      }
      if (struct.identityCheckStatus != null) {
        oprot.writeFieldBegin(IDENTITY_CHECK_STATUS_FIELD_DESC);
        oprot.writeString(struct.identityCheckStatus);
        oprot.writeFieldEnd();
      }
      if (struct.extantStatus != null) {
        oprot.writeFieldBegin(EXTANT_STATUS_FIELD_DESC);
        oprot.writeString(struct.extantStatus);
        oprot.writeFieldEnd();
      }
      if (struct.accountNo != null) {
        oprot.writeFieldBegin(ACCOUNT_NO_FIELD_DESC);
        oprot.writeString(struct.accountNo);
        oprot.writeFieldEnd();
      }
      if (struct.accountStatus != null) {
        oprot.writeFieldBegin(ACCOUNT_STATUS_FIELD_DESC);
        oprot.writeString(struct.accountStatus);
        oprot.writeFieldEnd();
      }
      if (struct.availableamount != null) {
        oprot.writeFieldBegin(AVAILABLEAMOUNT_FIELD_DESC);
        oprot.writeString(struct.availableamount);
        oprot.writeFieldEnd();
      }
      if (struct.transitamount != null) {
        oprot.writeFieldBegin(TRANSITAMOUNT_FIELD_DESC);
        oprot.writeString(struct.transitamount);
        oprot.writeFieldEnd();
      }
      if (struct.withdrawalamount != null) {
        oprot.writeFieldBegin(WITHDRAWALAMOUNT_FIELD_DESC);
        oprot.writeString(struct.withdrawalamount);
        oprot.writeFieldEnd();
      }
      if (struct.assetamount != null) {
        oprot.writeFieldBegin(ASSETAMOUNT_FIELD_DESC);
        oprot.writeString(struct.assetamount);
        oprot.writeFieldEnd();
      }
      if (struct.secBankaccNo != null) {
        oprot.writeFieldBegin(SEC_BANKACC_NO_FIELD_DESC);
        oprot.writeString(struct.secBankaccNo);
        oprot.writeFieldEnd();
      }
      if (struct.secBankaccStatus != null) {
        oprot.writeFieldBegin(SEC_BANKACC_STATUS_FIELD_DESC);
        oprot.writeString(struct.secBankaccStatus);
        oprot.writeFieldEnd();
      }
      if (struct.CardList != null) {
        oprot.writeFieldBegin(CARD_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.CardList.size()));
          for (DataInfoResponseDetailModel _iter3 : struct.CardList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.serviceDate != null) {
        oprot.writeFieldBegin(SERVICE_DATE_FIELD_DESC);
        oprot.writeString(struct.serviceDate);
        oprot.writeFieldEnd();
      }
      if (struct.note != null) {
        oprot.writeFieldBegin(NOTE_FIELD_DESC);
        oprot.writeString(struct.note);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataInfoResponseModelTupleSchemeFactory implements SchemeFactory {
    public DataInfoResponseModelTupleScheme getScheme() {
      return new DataInfoResponseModelTupleScheme();
    }
  }

  private static class DataInfoResponseModelTupleScheme extends TupleScheme<DataInfoResponseModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DataInfoResponseModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTotalPageNo()) {
        optionals.set(0);
      }
      if (struct.isSetTotalChkNo()) {
        optionals.set(1);
      }
      if (struct.isSetCustomerId()) {
        optionals.set(2);
      }
      if (struct.isSetPhoneNo()) {
        optionals.set(3);
      }
      if (struct.isSetIdentityCheckStatus()) {
        optionals.set(4);
      }
      if (struct.isSetExtantStatus()) {
        optionals.set(5);
      }
      if (struct.isSetAccountNo()) {
        optionals.set(6);
      }
      if (struct.isSetAccountStatus()) {
        optionals.set(7);
      }
      if (struct.isSetAvailableamount()) {
        optionals.set(8);
      }
      if (struct.isSetTransitamount()) {
        optionals.set(9);
      }
      if (struct.isSetWithdrawalamount()) {
        optionals.set(10);
      }
      if (struct.isSetAssetamount()) {
        optionals.set(11);
      }
      if (struct.isSetSecBankaccNo()) {
        optionals.set(12);
      }
      if (struct.isSetSecBankaccStatus()) {
        optionals.set(13);
      }
      if (struct.isSetCardList()) {
        optionals.set(14);
      }
      if (struct.isSetServiceDate()) {
        optionals.set(15);
      }
      if (struct.isSetNote()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetTotalPageNo()) {
        oprot.writeString(struct.totalPageNo);
      }
      if (struct.isSetTotalChkNo()) {
        oprot.writeString(struct.totalChkNo);
      }
      if (struct.isSetCustomerId()) {
        oprot.writeString(struct.customerId);
      }
      if (struct.isSetPhoneNo()) {
        oprot.writeString(struct.phoneNo);
      }
      if (struct.isSetIdentityCheckStatus()) {
        oprot.writeString(struct.identityCheckStatus);
      }
      if (struct.isSetExtantStatus()) {
        oprot.writeString(struct.extantStatus);
      }
      if (struct.isSetAccountNo()) {
        oprot.writeString(struct.accountNo);
      }
      if (struct.isSetAccountStatus()) {
        oprot.writeString(struct.accountStatus);
      }
      if (struct.isSetAvailableamount()) {
        oprot.writeString(struct.availableamount);
      }
      if (struct.isSetTransitamount()) {
        oprot.writeString(struct.transitamount);
      }
      if (struct.isSetWithdrawalamount()) {
        oprot.writeString(struct.withdrawalamount);
      }
      if (struct.isSetAssetamount()) {
        oprot.writeString(struct.assetamount);
      }
      if (struct.isSetSecBankaccNo()) {
        oprot.writeString(struct.secBankaccNo);
      }
      if (struct.isSetSecBankaccStatus()) {
        oprot.writeString(struct.secBankaccStatus);
      }
      if (struct.isSetCardList()) {
        {
          oprot.writeI32(struct.CardList.size());
          for (DataInfoResponseDetailModel _iter4 : struct.CardList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetServiceDate()) {
        oprot.writeString(struct.serviceDate);
      }
      if (struct.isSetNote()) {
        oprot.writeString(struct.note);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DataInfoResponseModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.totalPageNo = iprot.readString();
        struct.setTotalPageNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalChkNo = iprot.readString();
        struct.setTotalChkNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.customerId = iprot.readString();
        struct.setCustomerIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.phoneNo = iprot.readString();
        struct.setPhoneNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.identityCheckStatus = iprot.readString();
        struct.setIdentityCheckStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.extantStatus = iprot.readString();
        struct.setExtantStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.accountNo = iprot.readString();
        struct.setAccountNoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.accountStatus = iprot.readString();
        struct.setAccountStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.availableamount = iprot.readString();
        struct.setAvailableamountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.transitamount = iprot.readString();
        struct.setTransitamountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.withdrawalamount = iprot.readString();
        struct.setWithdrawalamountIsSet(true);
      }
      if (incoming.get(11)) {
        struct.assetamount = iprot.readString();
        struct.setAssetamountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.secBankaccNo = iprot.readString();
        struct.setSecBankaccNoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.secBankaccStatus = iprot.readString();
        struct.setSecBankaccStatusIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.CardList = new ArrayList<DataInfoResponseDetailModel>(_list5.size);
          DataInfoResponseDetailModel _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new DataInfoResponseDetailModel();
            _elem6.read(iprot);
            struct.CardList.add(_elem6);
          }
        }
        struct.setCardListIsSet(true);
      }
      if (incoming.get(15)) {
        struct.serviceDate = iprot.readString();
        struct.setServiceDateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.note = iprot.readString();
        struct.setNoteIsSet(true);
      }
    }
  }

}

