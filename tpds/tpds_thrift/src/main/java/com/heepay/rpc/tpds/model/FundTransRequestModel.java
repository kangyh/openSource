/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.tpds.model;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-15")
public class FundTransRequestModel implements org.apache.thrift.TBase<FundTransRequestModel, FundTransRequestModel._Fields>, java.io.Serializable, Cloneable, Comparable<FundTransRequestModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FundTransRequestModel");

  private static final org.apache.thrift.protocol.TField BUSINESS_SEQ_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSeqNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BUSI_TRADE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("busiTradeType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ENTRUSTFLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("entrustflag", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCOUNT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("AccountList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FundTransRequestModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FundTransRequestModelTupleSchemeFactory());
  }

  public String businessSeqNo; // required
  public String busiTradeType; // required
  public String entrustflag; // required
  public List<FundTransDetailModel> AccountList; // required
  public String objectId; // required
  public String note; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BUSINESS_SEQ_NO((short)1, "businessSeqNo"),
    BUSI_TRADE_TYPE((short)2, "busiTradeType"),
    ENTRUSTFLAG((short)3, "entrustflag"),
    ACCOUNT_LIST((short)4, "AccountList"),
    OBJECT_ID((short)5, "objectId"),
    NOTE((short)6, "note");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUSINESS_SEQ_NO
          return BUSINESS_SEQ_NO;
        case 2: // BUSI_TRADE_TYPE
          return BUSI_TRADE_TYPE;
        case 3: // ENTRUSTFLAG
          return ENTRUSTFLAG;
        case 4: // ACCOUNT_LIST
          return ACCOUNT_LIST;
        case 5: // OBJECT_ID
          return OBJECT_ID;
        case 6: // NOTE
          return NOTE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUSINESS_SEQ_NO, new org.apache.thrift.meta_data.FieldMetaData("businessSeqNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSI_TRADE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("busiTradeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTRUSTFLAG, new org.apache.thrift.meta_data.FieldMetaData("entrustflag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_LIST, new org.apache.thrift.meta_data.FieldMetaData("AccountList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "FundTransDetailModel"))));
    tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FundTransRequestModel.class, metaDataMap);
  }

  public FundTransRequestModel() {
  }

  public FundTransRequestModel(
    String businessSeqNo,
    String busiTradeType,
    String entrustflag,
    List<FundTransDetailModel> AccountList,
    String objectId,
    String note)
  {
    this();
    this.businessSeqNo = businessSeqNo;
    this.busiTradeType = busiTradeType;
    this.entrustflag = entrustflag;
    this.AccountList = AccountList;
    this.objectId = objectId;
    this.note = note;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FundTransRequestModel(FundTransRequestModel other) {
    if (other.isSetBusinessSeqNo()) {
      this.businessSeqNo = other.businessSeqNo;
    }
    if (other.isSetBusiTradeType()) {
      this.busiTradeType = other.busiTradeType;
    }
    if (other.isSetEntrustflag()) {
      this.entrustflag = other.entrustflag;
    }
    if (other.isSetAccountList()) {
      List<FundTransDetailModel> __this__AccountList = new ArrayList<FundTransDetailModel>(other.AccountList.size());
      for (FundTransDetailModel other_element : other.AccountList) {
        __this__AccountList.add(other_element);
      }
      this.AccountList = __this__AccountList;
    }
    if (other.isSetObjectId()) {
      this.objectId = other.objectId;
    }
    if (other.isSetNote()) {
      this.note = other.note;
    }
  }

  public FundTransRequestModel deepCopy() {
    return new FundTransRequestModel(this);
  }

  @Override
  public void clear() {
    this.businessSeqNo = null;
    this.busiTradeType = null;
    this.entrustflag = null;
    this.AccountList = null;
    this.objectId = null;
    this.note = null;
  }

  public String getBusinessSeqNo() {
    return this.businessSeqNo;
  }

  public FundTransRequestModel setBusinessSeqNo(String businessSeqNo) {
    this.businessSeqNo = businessSeqNo;
    return this;
  }

  public void unsetBusinessSeqNo() {
    this.businessSeqNo = null;
  }

  /** Returns true if field businessSeqNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSeqNo() {
    return this.businessSeqNo != null;
  }

  public void setBusinessSeqNoIsSet(boolean value) {
    if (!value) {
      this.businessSeqNo = null;
    }
  }

  public String getBusiTradeType() {
    return this.busiTradeType;
  }

  public FundTransRequestModel setBusiTradeType(String busiTradeType) {
    this.busiTradeType = busiTradeType;
    return this;
  }

  public void unsetBusiTradeType() {
    this.busiTradeType = null;
  }

  /** Returns true if field busiTradeType is set (has been assigned a value) and false otherwise */
  public boolean isSetBusiTradeType() {
    return this.busiTradeType != null;
  }

  public void setBusiTradeTypeIsSet(boolean value) {
    if (!value) {
      this.busiTradeType = null;
    }
  }

  public String getEntrustflag() {
    return this.entrustflag;
  }

  public FundTransRequestModel setEntrustflag(String entrustflag) {
    this.entrustflag = entrustflag;
    return this;
  }

  public void unsetEntrustflag() {
    this.entrustflag = null;
  }

  /** Returns true if field entrustflag is set (has been assigned a value) and false otherwise */
  public boolean isSetEntrustflag() {
    return this.entrustflag != null;
  }

  public void setEntrustflagIsSet(boolean value) {
    if (!value) {
      this.entrustflag = null;
    }
  }

  public int getAccountListSize() {
    return (this.AccountList == null) ? 0 : this.AccountList.size();
  }

  public java.util.Iterator<FundTransDetailModel> getAccountListIterator() {
    return (this.AccountList == null) ? null : this.AccountList.iterator();
  }

  public void addToAccountList(FundTransDetailModel elem) {
    if (this.AccountList == null) {
      this.AccountList = new ArrayList<FundTransDetailModel>();
    }
    this.AccountList.add(elem);
  }

  public List<FundTransDetailModel> getAccountList() {
    return this.AccountList;
  }

  public FundTransRequestModel setAccountList(List<FundTransDetailModel> AccountList) {
    this.AccountList = AccountList;
    return this;
  }

  public void unsetAccountList() {
    this.AccountList = null;
  }

  /** Returns true if field AccountList is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountList() {
    return this.AccountList != null;
  }

  public void setAccountListIsSet(boolean value) {
    if (!value) {
      this.AccountList = null;
    }
  }

  public String getObjectId() {
    return this.objectId;
  }

  public FundTransRequestModel setObjectId(String objectId) {
    this.objectId = objectId;
    return this;
  }

  public void unsetObjectId() {
    this.objectId = null;
  }

  /** Returns true if field objectId is set (has been assigned a value) and false otherwise */
  public boolean isSetObjectId() {
    return this.objectId != null;
  }

  public void setObjectIdIsSet(boolean value) {
    if (!value) {
      this.objectId = null;
    }
  }

  public String getNote() {
    return this.note;
  }

  public FundTransRequestModel setNote(String note) {
    this.note = note;
    return this;
  }

  public void unsetNote() {
    this.note = null;
  }

  /** Returns true if field note is set (has been assigned a value) and false otherwise */
  public boolean isSetNote() {
    return this.note != null;
  }

  public void setNoteIsSet(boolean value) {
    if (!value) {
      this.note = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUSINESS_SEQ_NO:
      if (value == null) {
        unsetBusinessSeqNo();
      } else {
        setBusinessSeqNo((String)value);
      }
      break;

    case BUSI_TRADE_TYPE:
      if (value == null) {
        unsetBusiTradeType();
      } else {
        setBusiTradeType((String)value);
      }
      break;

    case ENTRUSTFLAG:
      if (value == null) {
        unsetEntrustflag();
      } else {
        setEntrustflag((String)value);
      }
      break;

    case ACCOUNT_LIST:
      if (value == null) {
        unsetAccountList();
      } else {
        setAccountList((List<FundTransDetailModel>)value);
      }
      break;

    case OBJECT_ID:
      if (value == null) {
        unsetObjectId();
      } else {
        setObjectId((String)value);
      }
      break;

    case NOTE:
      if (value == null) {
        unsetNote();
      } else {
        setNote((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUSINESS_SEQ_NO:
      return getBusinessSeqNo();

    case BUSI_TRADE_TYPE:
      return getBusiTradeType();

    case ENTRUSTFLAG:
      return getEntrustflag();

    case ACCOUNT_LIST:
      return getAccountList();

    case OBJECT_ID:
      return getObjectId();

    case NOTE:
      return getNote();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUSINESS_SEQ_NO:
      return isSetBusinessSeqNo();
    case BUSI_TRADE_TYPE:
      return isSetBusiTradeType();
    case ENTRUSTFLAG:
      return isSetEntrustflag();
    case ACCOUNT_LIST:
      return isSetAccountList();
    case OBJECT_ID:
      return isSetObjectId();
    case NOTE:
      return isSetNote();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FundTransRequestModel)
      return this.equals((FundTransRequestModel)that);
    return false;
  }

  public boolean equals(FundTransRequestModel that) {
    if (that == null)
      return false;

    boolean this_present_businessSeqNo = true && this.isSetBusinessSeqNo();
    boolean that_present_businessSeqNo = true && that.isSetBusinessSeqNo();
    if (this_present_businessSeqNo || that_present_businessSeqNo) {
      if (!(this_present_businessSeqNo && that_present_businessSeqNo))
        return false;
      if (!this.businessSeqNo.equals(that.businessSeqNo))
        return false;
    }

    boolean this_present_busiTradeType = true && this.isSetBusiTradeType();
    boolean that_present_busiTradeType = true && that.isSetBusiTradeType();
    if (this_present_busiTradeType || that_present_busiTradeType) {
      if (!(this_present_busiTradeType && that_present_busiTradeType))
        return false;
      if (!this.busiTradeType.equals(that.busiTradeType))
        return false;
    }

    boolean this_present_Entrustflag = true && this.isSetEntrustflag();
    boolean that_present_Entrustflag = true && that.isSetEntrustflag();
    if (this_present_Entrustflag || that_present_Entrustflag) {
      if (!(this_present_Entrustflag && that_present_Entrustflag))
        return false;
      if (!this.entrustflag.equals(that.entrustflag))
        return false;
    }

    boolean this_present_AccountList = true && this.isSetAccountList();
    boolean that_present_AccountList = true && that.isSetAccountList();
    if (this_present_AccountList || that_present_AccountList) {
      if (!(this_present_AccountList && that_present_AccountList))
        return false;
      if (!this.AccountList.equals(that.AccountList))
        return false;
    }

    boolean this_present_objectId = true && this.isSetObjectId();
    boolean that_present_objectId = true && that.isSetObjectId();
    if (this_present_objectId || that_present_objectId) {
      if (!(this_present_objectId && that_present_objectId))
        return false;
      if (!this.objectId.equals(that.objectId))
        return false;
    }

    boolean this_present_note = true && this.isSetNote();
    boolean that_present_note = true && that.isSetNote();
    if (this_present_note || that_present_note) {
      if (!(this_present_note && that_present_note))
        return false;
      if (!this.note.equals(that.note))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_businessSeqNo = true && (isSetBusinessSeqNo());
    list.add(present_businessSeqNo);
    if (present_businessSeqNo)
      list.add(businessSeqNo);

    boolean present_busiTradeType = true && (isSetBusiTradeType());
    list.add(present_busiTradeType);
    if (present_busiTradeType)
      list.add(busiTradeType);

    boolean present_Entrustflag = true && (isSetEntrustflag());
    list.add(present_Entrustflag);
    if (present_Entrustflag)
      list.add(entrustflag);

    boolean present_AccountList = true && (isSetAccountList());
    list.add(present_AccountList);
    if (present_AccountList)
      list.add(AccountList);

    boolean present_objectId = true && (isSetObjectId());
    list.add(present_objectId);
    if (present_objectId)
      list.add(objectId);

    boolean present_note = true && (isSetNote());
    list.add(present_note);
    if (present_note)
      list.add(note);

    return list.hashCode();
  }

  @Override
  public int compareTo(FundTransRequestModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBusinessSeqNo()).compareTo(other.isSetBusinessSeqNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSeqNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSeqNo, other.businessSeqNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusiTradeType()).compareTo(other.isSetBusiTradeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusiTradeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busiTradeType, other.busiTradeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntrustflag()).compareTo(other.isSetEntrustflag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntrustflag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entrustflag, other.entrustflag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountList()).compareTo(other.isSetAccountList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AccountList, other.AccountList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObjectId()).compareTo(other.isSetObjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectId, other.objectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNote()).compareTo(other.isSetNote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, other.note);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FundTransRequestModel(");
    boolean first = true;

    sb.append("businessSeqNo:");
    if (this.businessSeqNo == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSeqNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("busiTradeType:");
    if (this.busiTradeType == null) {
      sb.append("null");
    } else {
      sb.append(this.busiTradeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("entrustflag:");
    if (this.entrustflag == null) {
      sb.append("null");
    } else {
      sb.append(this.entrustflag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AccountList:");
    if (this.AccountList == null) {
      sb.append("null");
    } else {
      sb.append(this.AccountList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("objectId:");
    if (this.objectId == null) {
      sb.append("null");
    } else {
      sb.append(this.objectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("note:");
    if (this.note == null) {
      sb.append("null");
    } else {
      sb.append(this.note);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FundTransRequestModelStandardSchemeFactory implements SchemeFactory {
    public FundTransRequestModelStandardScheme getScheme() {
      return new FundTransRequestModelStandardScheme();
    }
  }

  private static class FundTransRequestModelStandardScheme extends StandardScheme<FundTransRequestModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FundTransRequestModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BUSINESS_SEQ_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSeqNo = iprot.readString();
              struct.setBusinessSeqNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUSI_TRADE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.busiTradeType = iprot.readString();
              struct.setBusiTradeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENTRUSTFLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entrustflag = iprot.readString();
              struct.setEntrustflagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCOUNT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.AccountList = new ArrayList<FundTransDetailModel>(_list0.size);
                FundTransDetailModel _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new FundTransDetailModel();
                  _elem1.read(iprot);
                  struct.AccountList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setAccountListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.objectId = iprot.readString();
              struct.setObjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.note = iprot.readString();
              struct.setNoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FundTransRequestModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.businessSeqNo != null) {
        oprot.writeFieldBegin(BUSINESS_SEQ_NO_FIELD_DESC);
        oprot.writeString(struct.businessSeqNo);
        oprot.writeFieldEnd();
      }
      if (struct.busiTradeType != null) {
        oprot.writeFieldBegin(BUSI_TRADE_TYPE_FIELD_DESC);
        oprot.writeString(struct.busiTradeType);
        oprot.writeFieldEnd();
      }
      if (struct.entrustflag != null) {
        oprot.writeFieldBegin(ENTRUSTFLAG_FIELD_DESC);
        oprot.writeString(struct.entrustflag);
        oprot.writeFieldEnd();
      }
      if (struct.AccountList != null) {
        oprot.writeFieldBegin(ACCOUNT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.AccountList.size()));
          for (FundTransDetailModel _iter3 : struct.AccountList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.objectId != null) {
        oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
        oprot.writeString(struct.objectId);
        oprot.writeFieldEnd();
      }
      if (struct.note != null) {
        oprot.writeFieldBegin(NOTE_FIELD_DESC);
        oprot.writeString(struct.note);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FundTransRequestModelTupleSchemeFactory implements SchemeFactory {
    public FundTransRequestModelTupleScheme getScheme() {
      return new FundTransRequestModelTupleScheme();
    }
  }

  private static class FundTransRequestModelTupleScheme extends TupleScheme<FundTransRequestModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FundTransRequestModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBusinessSeqNo()) {
        optionals.set(0);
      }
      if (struct.isSetBusiTradeType()) {
        optionals.set(1);
      }
      if (struct.isSetEntrustflag()) {
        optionals.set(2);
      }
      if (struct.isSetAccountList()) {
        optionals.set(3);
      }
      if (struct.isSetObjectId()) {
        optionals.set(4);
      }
      if (struct.isSetNote()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetBusinessSeqNo()) {
        oprot.writeString(struct.businessSeqNo);
      }
      if (struct.isSetBusiTradeType()) {
        oprot.writeString(struct.busiTradeType);
      }
      if (struct.isSetEntrustflag()) {
        oprot.writeString(struct.entrustflag);
      }
      if (struct.isSetAccountList()) {
        {
          oprot.writeI32(struct.AccountList.size());
          for (FundTransDetailModel _iter4 : struct.AccountList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetObjectId()) {
        oprot.writeString(struct.objectId);
      }
      if (struct.isSetNote()) {
        oprot.writeString(struct.note);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FundTransRequestModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.businessSeqNo = iprot.readString();
        struct.setBusinessSeqNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.busiTradeType = iprot.readString();
        struct.setBusiTradeTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.entrustflag = iprot.readString();
        struct.setEntrustflagIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.AccountList = new ArrayList<FundTransDetailModel>(_list5.size);
          FundTransDetailModel _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new FundTransDetailModel();
            _elem6.read(iprot);
            struct.AccountList.add(_elem6);
          }
        }
        struct.setAccountListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.objectId = iprot.readString();
        struct.setObjectIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.note = iprot.readString();
        struct.setNoteIsSet(true);
      }
    }
  }

}

