/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.tpds.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-07-18")
public class FileAdviceService {

  public interface Iface {

    public String adviceHttp(String adviceUrl, String systemNo, String fileName) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void adviceHttp(String adviceUrl, String systemNo, String fileName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String adviceHttp(String adviceUrl, String systemNo, String fileName) throws org.apache.thrift.TException
    {
      send_adviceHttp(adviceUrl, systemNo, fileName);
      return recv_adviceHttp();
    }

    public void send_adviceHttp(String adviceUrl, String systemNo, String fileName) throws org.apache.thrift.TException
    {
      adviceHttp_args args = new adviceHttp_args();
      args.setAdviceUrl(adviceUrl);
      args.setSystemNo(systemNo);
      args.setFileName(fileName);
      sendBase("adviceHttp", args);
    }

    public String recv_adviceHttp() throws org.apache.thrift.TException
    {
      adviceHttp_result result = new adviceHttp_result();
      receiveBase(result, "adviceHttp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "adviceHttp failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void adviceHttp(String adviceUrl, String systemNo, String fileName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      adviceHttp_call method_call = new adviceHttp_call(adviceUrl, systemNo, fileName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class adviceHttp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String adviceUrl;
      private String systemNo;
      private String fileName;
      public adviceHttp_call(String adviceUrl, String systemNo, String fileName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adviceUrl = adviceUrl;
        this.systemNo = systemNo;
        this.fileName = fileName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("adviceHttp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        adviceHttp_args args = new adviceHttp_args();
        args.setAdviceUrl(adviceUrl);
        args.setSystemNo(systemNo);
        args.setFileName(fileName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_adviceHttp();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("adviceHttp", new adviceHttp());
      return processMap;
    }

    public static class adviceHttp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, adviceHttp_args> {
      public adviceHttp() {
        super("adviceHttp");
      }

      public adviceHttp_args getEmptyArgsInstance() {
        return new adviceHttp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public adviceHttp_result getResult(I iface, adviceHttp_args args) throws org.apache.thrift.TException {
        adviceHttp_result result = new adviceHttp_result();
        result.success = iface.adviceHttp(args.adviceUrl, args.systemNo, args.fileName);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("adviceHttp", new adviceHttp());
      return processMap;
    }

    public static class adviceHttp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, adviceHttp_args, String> {
      public adviceHttp() {
        super("adviceHttp");
      }

      public adviceHttp_args getEmptyArgsInstance() {
        return new adviceHttp_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            adviceHttp_result result = new adviceHttp_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            adviceHttp_result result = new adviceHttp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, adviceHttp_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.adviceHttp(args.adviceUrl, args.systemNo, args.fileName,resultHandler);
      }
    }

  }

  public static class adviceHttp_args implements org.apache.thrift.TBase<adviceHttp_args, adviceHttp_args._Fields>, java.io.Serializable, Cloneable, Comparable<adviceHttp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("adviceHttp_args");

    private static final org.apache.thrift.protocol.TField ADVICE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("adviceUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SYSTEM_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("systemNo", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new adviceHttp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new adviceHttp_argsTupleSchemeFactory());
    }

    public String adviceUrl; // required
    public String systemNo; // required
    public String fileName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADVICE_URL((short)1, "adviceUrl"),
      SYSTEM_NO((short)2, "systemNo"),
      FILE_NAME((short)3, "fileName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADVICE_URL
            return ADVICE_URL;
          case 2: // SYSTEM_NO
            return SYSTEM_NO;
          case 3: // FILE_NAME
            return FILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADVICE_URL, new org.apache.thrift.meta_data.FieldMetaData("adviceUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SYSTEM_NO, new org.apache.thrift.meta_data.FieldMetaData("systemNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(adviceHttp_args.class, metaDataMap);
    }

    public adviceHttp_args() {
    }

    public adviceHttp_args(
      String adviceUrl,
      String systemNo,
      String fileName)
    {
      this();
      this.adviceUrl = adviceUrl;
      this.systemNo = systemNo;
      this.fileName = fileName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public adviceHttp_args(adviceHttp_args other) {
      if (other.isSetAdviceUrl()) {
        this.adviceUrl = other.adviceUrl;
      }
      if (other.isSetSystemNo()) {
        this.systemNo = other.systemNo;
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
    }

    public adviceHttp_args deepCopy() {
      return new adviceHttp_args(this);
    }

    @Override
    public void clear() {
      this.adviceUrl = null;
      this.systemNo = null;
      this.fileName = null;
    }

    public String getAdviceUrl() {
      return this.adviceUrl;
    }

    public adviceHttp_args setAdviceUrl(String adviceUrl) {
      this.adviceUrl = adviceUrl;
      return this;
    }

    public void unsetAdviceUrl() {
      this.adviceUrl = null;
    }

    /** Returns true if field adviceUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetAdviceUrl() {
      return this.adviceUrl != null;
    }

    public void setAdviceUrlIsSet(boolean value) {
      if (!value) {
        this.adviceUrl = null;
      }
    }

    public String getSystemNo() {
      return this.systemNo;
    }

    public adviceHttp_args setSystemNo(String systemNo) {
      this.systemNo = systemNo;
      return this;
    }

    public void unsetSystemNo() {
      this.systemNo = null;
    }

    /** Returns true if field systemNo is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemNo() {
      return this.systemNo != null;
    }

    public void setSystemNoIsSet(boolean value) {
      if (!value) {
        this.systemNo = null;
      }
    }

    public String getFileName() {
      return this.fileName;
    }

    public adviceHttp_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADVICE_URL:
        if (value == null) {
          unsetAdviceUrl();
        } else {
          setAdviceUrl((String)value);
        }
        break;

      case SYSTEM_NO:
        if (value == null) {
          unsetSystemNo();
        } else {
          setSystemNo((String)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADVICE_URL:
        return getAdviceUrl();

      case SYSTEM_NO:
        return getSystemNo();

      case FILE_NAME:
        return getFileName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADVICE_URL:
        return isSetAdviceUrl();
      case SYSTEM_NO:
        return isSetSystemNo();
      case FILE_NAME:
        return isSetFileName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof adviceHttp_args)
        return this.equals((adviceHttp_args)that);
      return false;
    }

    public boolean equals(adviceHttp_args that) {
      if (that == null)
        return false;

      boolean this_present_adviceUrl = true && this.isSetAdviceUrl();
      boolean that_present_adviceUrl = true && that.isSetAdviceUrl();
      if (this_present_adviceUrl || that_present_adviceUrl) {
        if (!(this_present_adviceUrl && that_present_adviceUrl))
          return false;
        if (!this.adviceUrl.equals(that.adviceUrl))
          return false;
      }

      boolean this_present_systemNo = true && this.isSetSystemNo();
      boolean that_present_systemNo = true && that.isSetSystemNo();
      if (this_present_systemNo || that_present_systemNo) {
        if (!(this_present_systemNo && that_present_systemNo))
          return false;
        if (!this.systemNo.equals(that.systemNo))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_adviceUrl = true && (isSetAdviceUrl());
      list.add(present_adviceUrl);
      if (present_adviceUrl)
        list.add(adviceUrl);

      boolean present_systemNo = true && (isSetSystemNo());
      list.add(present_systemNo);
      if (present_systemNo)
        list.add(systemNo);

      boolean present_fileName = true && (isSetFileName());
      list.add(present_fileName);
      if (present_fileName)
        list.add(fileName);

      return list.hashCode();
    }

    @Override
    public int compareTo(adviceHttp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAdviceUrl()).compareTo(other.isSetAdviceUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdviceUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adviceUrl, other.adviceUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemNo()).compareTo(other.isSetSystemNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemNo, other.systemNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("adviceHttp_args(");
      boolean first = true;

      sb.append("adviceUrl:");
      if (this.adviceUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.adviceUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemNo:");
      if (this.systemNo == null) {
        sb.append("null");
      } else {
        sb.append(this.systemNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class adviceHttp_argsStandardSchemeFactory implements SchemeFactory {
      public adviceHttp_argsStandardScheme getScheme() {
        return new adviceHttp_argsStandardScheme();
      }
    }

    private static class adviceHttp_argsStandardScheme extends StandardScheme<adviceHttp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, adviceHttp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADVICE_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adviceUrl = iprot.readString();
                struct.setAdviceUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SYSTEM_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.systemNo = iprot.readString();
                struct.setSystemNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, adviceHttp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adviceUrl != null) {
          oprot.writeFieldBegin(ADVICE_URL_FIELD_DESC);
          oprot.writeString(struct.adviceUrl);
          oprot.writeFieldEnd();
        }
        if (struct.systemNo != null) {
          oprot.writeFieldBegin(SYSTEM_NO_FIELD_DESC);
          oprot.writeString(struct.systemNo);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class adviceHttp_argsTupleSchemeFactory implements SchemeFactory {
      public adviceHttp_argsTupleScheme getScheme() {
        return new adviceHttp_argsTupleScheme();
      }
    }

    private static class adviceHttp_argsTupleScheme extends TupleScheme<adviceHttp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, adviceHttp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAdviceUrl()) {
          optionals.set(0);
        }
        if (struct.isSetSystemNo()) {
          optionals.set(1);
        }
        if (struct.isSetFileName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAdviceUrl()) {
          oprot.writeString(struct.adviceUrl);
        }
        if (struct.isSetSystemNo()) {
          oprot.writeString(struct.systemNo);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, adviceHttp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.adviceUrl = iprot.readString();
          struct.setAdviceUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.systemNo = iprot.readString();
          struct.setSystemNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
      }
    }

  }

  public static class adviceHttp_result implements org.apache.thrift.TBase<adviceHttp_result, adviceHttp_result._Fields>, java.io.Serializable, Cloneable, Comparable<adviceHttp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("adviceHttp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new adviceHttp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new adviceHttp_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(adviceHttp_result.class, metaDataMap);
    }

    public adviceHttp_result() {
    }

    public adviceHttp_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public adviceHttp_result(adviceHttp_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public adviceHttp_result deepCopy() {
      return new adviceHttp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public adviceHttp_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof adviceHttp_result)
        return this.equals((adviceHttp_result)that);
      return false;
    }

    public boolean equals(adviceHttp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(adviceHttp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("adviceHttp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class adviceHttp_resultStandardSchemeFactory implements SchemeFactory {
      public adviceHttp_resultStandardScheme getScheme() {
        return new adviceHttp_resultStandardScheme();
      }
    }

    private static class adviceHttp_resultStandardScheme extends StandardScheme<adviceHttp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, adviceHttp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, adviceHttp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class adviceHttp_resultTupleSchemeFactory implements SchemeFactory {
      public adviceHttp_resultTupleScheme getScheme() {
        return new adviceHttp_resultTupleScheme();
      }
    }

    private static class adviceHttp_resultTupleScheme extends TupleScheme<adviceHttp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, adviceHttp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, adviceHttp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
