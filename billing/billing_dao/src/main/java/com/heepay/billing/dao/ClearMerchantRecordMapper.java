package com.heepay.billing.dao;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.heepay.billing.entity.ClearMerchantRecord;
import com.heepay.billing.entity.ClearMerchantRecordExample;
import com.heepay.billing.entity.ClearMerchantRecordVo;
import com.heepay.billing.entity.SettleMerchantRecordVo;
import com.heepay.vo.ClearMerchantDetailMessage;

/***
 * 
* 
* 描    述：
*
* 创 建 者： xuangang
* 创建时间：  2016年11月15日上午11:44:04
* 创建描述：
* 
* 修 改 者：  
* 修改时间： 
* 修改描述： 
* 
* 审 核 者：
* 审核时间：
* 审核描述：
*
 */
public interface ClearMerchantRecordMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clearing_merchant_record
     *
     * @mbggenerated Thu Sep 08 21:07:07 CST 2016
     */
    int countByExample(ClearMerchantRecordExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clearing_merchant_record
     *
     * @mbggenerated Thu Sep 08 21:07:07 CST 2016
     */
    int deleteByExample(ClearMerchantRecordExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clearing_merchant_record
     *
     * @mbggenerated Thu Sep 08 21:07:07 CST 2016
     */
    int deleteByPrimaryKey(Long clearingId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clearing_merchant_record
     *
     * @mbggenerated Thu Sep 08 21:07:07 CST 2016
     */
    int insert(ClearMerchantRecord record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clearing_merchant_record
     *
     * @mbggenerated Thu Sep 08 21:07:07 CST 2016
     */
    int insertSelective(ClearMerchantRecord record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clearing_merchant_record
     *
     * @mbggenerated Thu Sep 08 21:07:07 CST 2016
     */
    List<ClearMerchantRecord> selectByExample(ClearMerchantRecordExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clearing_merchant_record
     *
     * @mbggenerated Thu Sep 08 21:07:07 CST 2016
     */
    ClearMerchantRecord selectByPrimaryKey(Long clearingId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clearing_merchant_record
     *
     * @mbggenerated Thu Sep 08 21:07:07 CST 2016
     */
    int updateByExampleSelective(@Param("record") ClearMerchantRecord record, @Param("example") ClearMerchantRecordExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clearing_merchant_record
     *
     * @mbggenerated Thu Sep 08 21:07:07 CST 2016
     */
    int updateByExample(@Param("record") ClearMerchantRecord record, @Param("example") ClearMerchantRecordExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clearing_merchant_record
     *
     * @mbggenerated Thu Sep 08 21:07:07 CST 2016
     */
    int updateByPrimaryKeySelective(ClearMerchantRecord record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table clearing_merchant_record
     *
     * @mbggenerated Thu Sep 08 21:07:07 CST 2016
     */
    int updateByPrimaryKey(ClearMerchantRecord record);


    /**
     * 
     * @方法说明：用户侧的批量查询
     * @时间：Sep 16, 2016
     * @创建人：wangl
     */
	List<SettleMerchantRecordVo> queryClearChant(ClearMerchantRecord record);
	
	
	/**
     * 
     * @方法说明：接收到系统对账通知修改用户侧的状态
     * @时间：Sep 16, 2016
     * @创建人：wangl
     */
	void updateMerchantStatus(ClearMerchantRecord record);
	
	//修改用户侧日终对账的状态
	void batchUpdateMerchantStatus(SettleMerchantRecordVo record);
	
	//结算批次生成后，更新商户侧清算表
    int updateAfterSettle(Map record);
    
    //用户侧汇总之后修改用户侧的状态w
	void updateClearMerchantRecord(ClearMerchantRecord record);
	
   	//汇总用户侧结算表   	
   	public List<Map> Summarizing(Map<String, Object> map);
	/**
	 * 查询清算明细
	 * @param settleBatch
	 * @return
	 */
	public List<ClearMerchantDetailMessage> queryClearDetailBySettleBatch(String settleBatch);
	
	//查询清算表的详细信息
	List<SettleMerchantRecordVo> getEntity(String record);

	/**
	 * @方法説明：根据用户侧清算记录表交易单号（trans_no）   更新用户侧清算记录表（clearing_merchant_record）：对账状态、对账标记、对账批次号,对账次数
	 * @时间：2016年9月27日
	 * @创建人：wangdong
	 */
	void updateClearMerchantRecordByPrimaryKey(ClearMerchantRecord clearMerchantRecord);

	/**
	 * @方法说明：根据交易订单号查询用户侧清算记录表
	 * @时间：2016年9月27日
	 * @创建人：wangdong
	 */
	ClearMerchantRecord findClearMerchantRecordByTansNo(String tansNo);
	
	/**
	 * 更新清算表状态
	 * @param record
	 */
	public void updateClearMerchantByBathcNo(ClearMerchantRecord record);
	
	/**
	 * 
	 * @方法说明：根据交易订单号（支付单号）  查询  结算状态（N：未结算，D：结算中 Y：已结算）'
	 * @时间：Nov 7, 2016
	 * @创建人：wangl
	 */
	ClearMerchantRecord selectByTranNo(String tranNo);

	
	void updateClearMerchantRecordByTransNo(String tranNo);

	ClearMerchantRecord getSettleMerchantl(ClearMerchantRecord record);
	
	/**
	 * @描述 查询对账批次（已对、未结、平账、t+1， 对账结束）
	 * @author xuangang
	 * @param map
	 * @return
	 */
	List<String> queryCheckBatchNo(Map<String, Object> map);

	/**
	 * 
	 * @方法说明：根据  商户号  交易单号  查询相应的商户侧清算记录  更新是否为分润
	 * @时间：2016年11月3日 上午11:20:17
	 * @创建人：wangdong
	 */
	public void updateIsProfitByMerChantIdAndTransNo(ClearMerchantRecord clearMerchantRecord);

	/**
	 * @author xuangang
	 * @描述 查询所有已对账、需要分润的清算单
	 * @param map
	 */
	public List<ClearMerchantRecord> queryProfitRecordByCheckBatch(Map<String, Object> map);
	
	/**
	 * 更新清算表分润记录结算状态、批次号、处理时间
	 * @param map
	 */
	public void updateProfitSettleStatusByTransNo(Map map);
	
	/**
	 * 通过订单号，查询分润的清算记录
	 * @param map
	 * @return
	 */
	public ClearMerchantRecord queryProfitRecordByTransNo(Map map);

	/**
	 * 
	 * @方法说明：根据transNo判断是否重复发送的数据
	 * @时间：Nov 7, 2016
	 * @创建人：wangl
	 */
	int getBooleanExist(String transNo);

	
    /**
     * 
     * @方法说明：
     * @author xuangang
     * @param merchantId
     * @param settleStatus
     * @param transType
     * @return
     * @时间：2017年3月14日下午4:38:51
     */
	public List<ClearMerchantRecord> queryAgentforSettle(Integer merchantId, String settleStatus, String transType, Date settleTime);
	
	/**
	 * 资金存管系统查询清算明细
	 * @方法说明：
	 * @author xuangang
	 * @param paraMap
	 * @return
	 * @时间：2017年2月13日下午3:45:47
	 */
	List<ClearMerchantRecord> queryClearMerchantRecord(Map<String, Object> paraMap);
	
	/**
	 * 
	 * @方法说明：更新历史数据
	 * @author xuangang
	 * @param map
	 * @时间：2017年3月29日下午2:11:53
	 */
	void updateOldClearingmerchant(Map map);
	
	 List<ClearMerchantRecord> queryAgentforSettle(Map map);
	 
	 List<ClearMerchantRecord> queryAgentforSettlePayment(Integer merchantId, String settleStatus, String transType, Date settleTime);
	 
	 
		/**
		 * 查询三天之前商户侧数据未对账的最大日期
		 * @param value
		 * @return
		 */
		List<ClearMerchantRecord> queryPayTime(String checkStatus,String channelCode,String channelType,String checkNum);
		
		/**
		 * 手动对账未对账的数据
		 * @param tranNo
		 */
		List<ClearMerchantRecord> queryHandleBill(String checkStatus,String channelCode,String channelType,String checkNum);
		
		void updateNumByTransNO(String transNo);

		/**
		 * 
		 * @方法说明：商户侧清算数据汇总
		 * @author chenyanming
		 * @param startBefor
		 * @param endBefor
		 * @return
		 * @时间：2017年6月22日下午1:22:16
		 */
		List<ClearMerchantRecordVo> getMerchantClearData(String startBefor, String endBefor);
	 
		
		/**
		 * 
		 * @方法说明：分页查询清算数据
		 * @author xuangang
		 * @param map
		 * @return
		 * @时间：2017年7月7日上午11:32:12
		 */
		List<ClearMerchantDetailMessage> queryClearDataByPage(Map map);
	 
	 
}