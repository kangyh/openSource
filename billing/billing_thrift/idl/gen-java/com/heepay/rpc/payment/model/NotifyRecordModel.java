/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.payment.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-26")
public class NotifyRecordModel implements org.apache.thrift.TBase<NotifyRecordModel, NotifyRecordModel._Fields>, java.io.Serializable, Cloneable, Comparable<NotifyRecordModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotifyRecordModel");

  private static final org.apache.thrift.protocol.TField NOTIFY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MERCHANT_LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantLoginName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MERCHANT_COMPANY_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantCompany", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MERCHANT_ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantOrderNo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NOTIFY_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField NOTIFY_REQUEST_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyRequestParams", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField NOTIFY_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyResponse", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField NOTIFY_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyNumber", org.apache.thrift.protocol.TType.BYTE, (short)11);
  private static final org.apache.thrift.protocol.TField NOTIFY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyType", org.apache.thrift.protocol.TType.BYTE, (short)12);
  private static final org.apache.thrift.protocol.TField NOTIFY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SUCCESS_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("successAmount", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PAY_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("payResult", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PAY_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("payAmount", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField BANK_SERIAL_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankSerialNo", org.apache.thrift.protocol.TType.STRING, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NotifyRecordModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NotifyRecordModelTupleSchemeFactory());
  }

  public long notifyId; // required
  public String transNo; // required
  public long merchantId; // required
  public String merchantLoginName; // required
  public String merchantCompany; // required
  public String merchantOrderNo; // required
  public String notifyUrl; // required
  public String status; // required
  public String notifyRequestParams; // required
  public String notifyResponse; // required
  public byte notifyNumber; // required
  public byte notifyType; // required
  public String notifyDate; // required
  public String successAmount; // required
  public String payResult; // required
  public String paymentId; // required
  public String updateTime; // required
  public String payAmount; // required
  public String createTime; // required
  public String bankSerialNo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NOTIFY_ID((short)1, "notifyId"),
    TRANS_NO((short)2, "transNo"),
    MERCHANT_ID((short)3, "merchantId"),
    MERCHANT_LOGIN_NAME((short)4, "merchantLoginName"),
    MERCHANT_COMPANY((short)5, "merchantCompany"),
    MERCHANT_ORDER_NO((short)6, "merchantOrderNo"),
    NOTIFY_URL((short)7, "notifyUrl"),
    STATUS((short)8, "status"),
    NOTIFY_REQUEST_PARAMS((short)9, "notifyRequestParams"),
    NOTIFY_RESPONSE((short)10, "notifyResponse"),
    NOTIFY_NUMBER((short)11, "notifyNumber"),
    NOTIFY_TYPE((short)12, "notifyType"),
    NOTIFY_DATE((short)13, "notifyDate"),
    SUCCESS_AMOUNT((short)14, "successAmount"),
    PAY_RESULT((short)15, "payResult"),
    PAYMENT_ID((short)16, "paymentId"),
    UPDATE_TIME((short)17, "updateTime"),
    PAY_AMOUNT((short)18, "payAmount"),
    CREATE_TIME((short)19, "createTime"),
    BANK_SERIAL_NO((short)20, "bankSerialNo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOTIFY_ID
          return NOTIFY_ID;
        case 2: // TRANS_NO
          return TRANS_NO;
        case 3: // MERCHANT_ID
          return MERCHANT_ID;
        case 4: // MERCHANT_LOGIN_NAME
          return MERCHANT_LOGIN_NAME;
        case 5: // MERCHANT_COMPANY
          return MERCHANT_COMPANY;
        case 6: // MERCHANT_ORDER_NO
          return MERCHANT_ORDER_NO;
        case 7: // NOTIFY_URL
          return NOTIFY_URL;
        case 8: // STATUS
          return STATUS;
        case 9: // NOTIFY_REQUEST_PARAMS
          return NOTIFY_REQUEST_PARAMS;
        case 10: // NOTIFY_RESPONSE
          return NOTIFY_RESPONSE;
        case 11: // NOTIFY_NUMBER
          return NOTIFY_NUMBER;
        case 12: // NOTIFY_TYPE
          return NOTIFY_TYPE;
        case 13: // NOTIFY_DATE
          return NOTIFY_DATE;
        case 14: // SUCCESS_AMOUNT
          return SUCCESS_AMOUNT;
        case 15: // PAY_RESULT
          return PAY_RESULT;
        case 16: // PAYMENT_ID
          return PAYMENT_ID;
        case 17: // UPDATE_TIME
          return UPDATE_TIME;
        case 18: // PAY_AMOUNT
          return PAY_AMOUNT;
        case 19: // CREATE_TIME
          return CREATE_TIME;
        case 20: // BANK_SERIAL_NO
          return BANK_SERIAL_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NOTIFYID_ISSET_ID = 0;
  private static final int __MERCHANTID_ISSET_ID = 1;
  private static final int __NOTIFYNUMBER_ISSET_ID = 2;
  private static final int __NOTIFYTYPE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOTIFY_ID, new org.apache.thrift.meta_data.FieldMetaData("notifyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MERCHANT_LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantLoginName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_COMPANY, new org.apache.thrift.meta_data.FieldMetaData("merchantCompany", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("merchantOrderNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFY_URL, new org.apache.thrift.meta_data.FieldMetaData("notifyUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFY_REQUEST_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("notifyRequestParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFY_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("notifyResponse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFY_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("notifyNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.NOTIFY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("notifyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.NOTIFY_DATE, new org.apache.thrift.meta_data.FieldMetaData("notifyDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCESS_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("successAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_RESULT, new org.apache.thrift.meta_data.FieldMetaData("payResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("payAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_SERIAL_NO, new org.apache.thrift.meta_data.FieldMetaData("bankSerialNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotifyRecordModel.class, metaDataMap);
  }

  public NotifyRecordModel() {
  }

  public NotifyRecordModel(
    long notifyId,
    String transNo,
    long merchantId,
    String merchantLoginName,
    String merchantCompany,
    String merchantOrderNo,
    String notifyUrl,
    String status,
    String notifyRequestParams,
    String notifyResponse,
    byte notifyNumber,
    byte notifyType,
    String notifyDate,
    String successAmount,
    String payResult,
    String paymentId,
    String updateTime,
    String payAmount,
    String createTime,
    String bankSerialNo)
  {
    this();
    this.notifyId = notifyId;
    setNotifyIdIsSet(true);
    this.transNo = transNo;
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    this.merchantLoginName = merchantLoginName;
    this.merchantCompany = merchantCompany;
    this.merchantOrderNo = merchantOrderNo;
    this.notifyUrl = notifyUrl;
    this.status = status;
    this.notifyRequestParams = notifyRequestParams;
    this.notifyResponse = notifyResponse;
    this.notifyNumber = notifyNumber;
    setNotifyNumberIsSet(true);
    this.notifyType = notifyType;
    setNotifyTypeIsSet(true);
    this.notifyDate = notifyDate;
    this.successAmount = successAmount;
    this.payResult = payResult;
    this.paymentId = paymentId;
    this.updateTime = updateTime;
    this.payAmount = payAmount;
    this.createTime = createTime;
    this.bankSerialNo = bankSerialNo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NotifyRecordModel(NotifyRecordModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.notifyId = other.notifyId;
    if (other.isSetTransNo()) {
      this.transNo = other.transNo;
    }
    this.merchantId = other.merchantId;
    if (other.isSetMerchantLoginName()) {
      this.merchantLoginName = other.merchantLoginName;
    }
    if (other.isSetMerchantCompany()) {
      this.merchantCompany = other.merchantCompany;
    }
    if (other.isSetMerchantOrderNo()) {
      this.merchantOrderNo = other.merchantOrderNo;
    }
    if (other.isSetNotifyUrl()) {
      this.notifyUrl = other.notifyUrl;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetNotifyRequestParams()) {
      this.notifyRequestParams = other.notifyRequestParams;
    }
    if (other.isSetNotifyResponse()) {
      this.notifyResponse = other.notifyResponse;
    }
    this.notifyNumber = other.notifyNumber;
    this.notifyType = other.notifyType;
    if (other.isSetNotifyDate()) {
      this.notifyDate = other.notifyDate;
    }
    if (other.isSetSuccessAmount()) {
      this.successAmount = other.successAmount;
    }
    if (other.isSetPayResult()) {
      this.payResult = other.payResult;
    }
    if (other.isSetPaymentId()) {
      this.paymentId = other.paymentId;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    if (other.isSetPayAmount()) {
      this.payAmount = other.payAmount;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetBankSerialNo()) {
      this.bankSerialNo = other.bankSerialNo;
    }
  }

  public NotifyRecordModel deepCopy() {
    return new NotifyRecordModel(this);
  }

  @Override
  public void clear() {
    setNotifyIdIsSet(false);
    this.notifyId = 0;
    this.transNo = null;
    setMerchantIdIsSet(false);
    this.merchantId = 0;
    this.merchantLoginName = null;
    this.merchantCompany = null;
    this.merchantOrderNo = null;
    this.notifyUrl = null;
    this.status = null;
    this.notifyRequestParams = null;
    this.notifyResponse = null;
    setNotifyNumberIsSet(false);
    this.notifyNumber = 0;
    setNotifyTypeIsSet(false);
    this.notifyType = 0;
    this.notifyDate = null;
    this.successAmount = null;
    this.payResult = null;
    this.paymentId = null;
    this.updateTime = null;
    this.payAmount = null;
    this.createTime = null;
    this.bankSerialNo = null;
  }

  public long getNotifyId() {
    return this.notifyId;
  }

  public NotifyRecordModel setNotifyId(long notifyId) {
    this.notifyId = notifyId;
    setNotifyIdIsSet(true);
    return this;
  }

  public void unsetNotifyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFYID_ISSET_ID);
  }

  /** Returns true if field notifyId is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyId() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFYID_ISSET_ID);
  }

  public void setNotifyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFYID_ISSET_ID, value);
  }

  public String getTransNo() {
    return this.transNo;
  }

  public NotifyRecordModel setTransNo(String transNo) {
    this.transNo = transNo;
    return this;
  }

  public void unsetTransNo() {
    this.transNo = null;
  }

  /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTransNo() {
    return this.transNo != null;
  }

  public void setTransNoIsSet(boolean value) {
    if (!value) {
      this.transNo = null;
    }
  }

  public long getMerchantId() {
    return this.merchantId;
  }

  public NotifyRecordModel setMerchantId(long merchantId) {
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    return this;
  }

  public void unsetMerchantId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  public void setMerchantIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTID_ISSET_ID, value);
  }

  public String getMerchantLoginName() {
    return this.merchantLoginName;
  }

  public NotifyRecordModel setMerchantLoginName(String merchantLoginName) {
    this.merchantLoginName = merchantLoginName;
    return this;
  }

  public void unsetMerchantLoginName() {
    this.merchantLoginName = null;
  }

  /** Returns true if field merchantLoginName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantLoginName() {
    return this.merchantLoginName != null;
  }

  public void setMerchantLoginNameIsSet(boolean value) {
    if (!value) {
      this.merchantLoginName = null;
    }
  }

  public String getMerchantCompany() {
    return this.merchantCompany;
  }

  public NotifyRecordModel setMerchantCompany(String merchantCompany) {
    this.merchantCompany = merchantCompany;
    return this;
  }

  public void unsetMerchantCompany() {
    this.merchantCompany = null;
  }

  /** Returns true if field merchantCompany is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantCompany() {
    return this.merchantCompany != null;
  }

  public void setMerchantCompanyIsSet(boolean value) {
    if (!value) {
      this.merchantCompany = null;
    }
  }

  public String getMerchantOrderNo() {
    return this.merchantOrderNo;
  }

  public NotifyRecordModel setMerchantOrderNo(String merchantOrderNo) {
    this.merchantOrderNo = merchantOrderNo;
    return this;
  }

  public void unsetMerchantOrderNo() {
    this.merchantOrderNo = null;
  }

  /** Returns true if field merchantOrderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantOrderNo() {
    return this.merchantOrderNo != null;
  }

  public void setMerchantOrderNoIsSet(boolean value) {
    if (!value) {
      this.merchantOrderNo = null;
    }
  }

  public String getNotifyUrl() {
    return this.notifyUrl;
  }

  public NotifyRecordModel setNotifyUrl(String notifyUrl) {
    this.notifyUrl = notifyUrl;
    return this;
  }

  public void unsetNotifyUrl() {
    this.notifyUrl = null;
  }

  /** Returns true if field notifyUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyUrl() {
    return this.notifyUrl != null;
  }

  public void setNotifyUrlIsSet(boolean value) {
    if (!value) {
      this.notifyUrl = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public NotifyRecordModel setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getNotifyRequestParams() {
    return this.notifyRequestParams;
  }

  public NotifyRecordModel setNotifyRequestParams(String notifyRequestParams) {
    this.notifyRequestParams = notifyRequestParams;
    return this;
  }

  public void unsetNotifyRequestParams() {
    this.notifyRequestParams = null;
  }

  /** Returns true if field notifyRequestParams is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyRequestParams() {
    return this.notifyRequestParams != null;
  }

  public void setNotifyRequestParamsIsSet(boolean value) {
    if (!value) {
      this.notifyRequestParams = null;
    }
  }

  public String getNotifyResponse() {
    return this.notifyResponse;
  }

  public NotifyRecordModel setNotifyResponse(String notifyResponse) {
    this.notifyResponse = notifyResponse;
    return this;
  }

  public void unsetNotifyResponse() {
    this.notifyResponse = null;
  }

  /** Returns true if field notifyResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyResponse() {
    return this.notifyResponse != null;
  }

  public void setNotifyResponseIsSet(boolean value) {
    if (!value) {
      this.notifyResponse = null;
    }
  }

  public byte getNotifyNumber() {
    return this.notifyNumber;
  }

  public NotifyRecordModel setNotifyNumber(byte notifyNumber) {
    this.notifyNumber = notifyNumber;
    setNotifyNumberIsSet(true);
    return this;
  }

  public void unsetNotifyNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFYNUMBER_ISSET_ID);
  }

  /** Returns true if field notifyNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFYNUMBER_ISSET_ID);
  }

  public void setNotifyNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFYNUMBER_ISSET_ID, value);
  }

  public byte getNotifyType() {
    return this.notifyType;
  }

  public NotifyRecordModel setNotifyType(byte notifyType) {
    this.notifyType = notifyType;
    setNotifyTypeIsSet(true);
    return this;
  }

  public void unsetNotifyType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFYTYPE_ISSET_ID);
  }

  /** Returns true if field notifyType is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyType() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFYTYPE_ISSET_ID);
  }

  public void setNotifyTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFYTYPE_ISSET_ID, value);
  }

  public String getNotifyDate() {
    return this.notifyDate;
  }

  public NotifyRecordModel setNotifyDate(String notifyDate) {
    this.notifyDate = notifyDate;
    return this;
  }

  public void unsetNotifyDate() {
    this.notifyDate = null;
  }

  /** Returns true if field notifyDate is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyDate() {
    return this.notifyDate != null;
  }

  public void setNotifyDateIsSet(boolean value) {
    if (!value) {
      this.notifyDate = null;
    }
  }

  public String getSuccessAmount() {
    return this.successAmount;
  }

  public NotifyRecordModel setSuccessAmount(String successAmount) {
    this.successAmount = successAmount;
    return this;
  }

  public void unsetSuccessAmount() {
    this.successAmount = null;
  }

  /** Returns true if field successAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessAmount() {
    return this.successAmount != null;
  }

  public void setSuccessAmountIsSet(boolean value) {
    if (!value) {
      this.successAmount = null;
    }
  }

  public String getPayResult() {
    return this.payResult;
  }

  public NotifyRecordModel setPayResult(String payResult) {
    this.payResult = payResult;
    return this;
  }

  public void unsetPayResult() {
    this.payResult = null;
  }

  /** Returns true if field payResult is set (has been assigned a value) and false otherwise */
  public boolean isSetPayResult() {
    return this.payResult != null;
  }

  public void setPayResultIsSet(boolean value) {
    if (!value) {
      this.payResult = null;
    }
  }

  public String getPaymentId() {
    return this.paymentId;
  }

  public NotifyRecordModel setPaymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  public void unsetPaymentId() {
    this.paymentId = null;
  }

  /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentId() {
    return this.paymentId != null;
  }

  public void setPaymentIdIsSet(boolean value) {
    if (!value) {
      this.paymentId = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public NotifyRecordModel setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public String getPayAmount() {
    return this.payAmount;
  }

  public NotifyRecordModel setPayAmount(String payAmount) {
    this.payAmount = payAmount;
    return this;
  }

  public void unsetPayAmount() {
    this.payAmount = null;
  }

  /** Returns true if field payAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetPayAmount() {
    return this.payAmount != null;
  }

  public void setPayAmountIsSet(boolean value) {
    if (!value) {
      this.payAmount = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public NotifyRecordModel setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getBankSerialNo() {
    return this.bankSerialNo;
  }

  public NotifyRecordModel setBankSerialNo(String bankSerialNo) {
    this.bankSerialNo = bankSerialNo;
    return this;
  }

  public void unsetBankSerialNo() {
    this.bankSerialNo = null;
  }

  /** Returns true if field bankSerialNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBankSerialNo() {
    return this.bankSerialNo != null;
  }

  public void setBankSerialNoIsSet(boolean value) {
    if (!value) {
      this.bankSerialNo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NOTIFY_ID:
      if (value == null) {
        unsetNotifyId();
      } else {
        setNotifyId((Long)value);
      }
      break;

    case TRANS_NO:
      if (value == null) {
        unsetTransNo();
      } else {
        setTransNo((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((Long)value);
      }
      break;

    case MERCHANT_LOGIN_NAME:
      if (value == null) {
        unsetMerchantLoginName();
      } else {
        setMerchantLoginName((String)value);
      }
      break;

    case MERCHANT_COMPANY:
      if (value == null) {
        unsetMerchantCompany();
      } else {
        setMerchantCompany((String)value);
      }
      break;

    case MERCHANT_ORDER_NO:
      if (value == null) {
        unsetMerchantOrderNo();
      } else {
        setMerchantOrderNo((String)value);
      }
      break;

    case NOTIFY_URL:
      if (value == null) {
        unsetNotifyUrl();
      } else {
        setNotifyUrl((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case NOTIFY_REQUEST_PARAMS:
      if (value == null) {
        unsetNotifyRequestParams();
      } else {
        setNotifyRequestParams((String)value);
      }
      break;

    case NOTIFY_RESPONSE:
      if (value == null) {
        unsetNotifyResponse();
      } else {
        setNotifyResponse((String)value);
      }
      break;

    case NOTIFY_NUMBER:
      if (value == null) {
        unsetNotifyNumber();
      } else {
        setNotifyNumber((Byte)value);
      }
      break;

    case NOTIFY_TYPE:
      if (value == null) {
        unsetNotifyType();
      } else {
        setNotifyType((Byte)value);
      }
      break;

    case NOTIFY_DATE:
      if (value == null) {
        unsetNotifyDate();
      } else {
        setNotifyDate((String)value);
      }
      break;

    case SUCCESS_AMOUNT:
      if (value == null) {
        unsetSuccessAmount();
      } else {
        setSuccessAmount((String)value);
      }
      break;

    case PAY_RESULT:
      if (value == null) {
        unsetPayResult();
      } else {
        setPayResult((String)value);
      }
      break;

    case PAYMENT_ID:
      if (value == null) {
        unsetPaymentId();
      } else {
        setPaymentId((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case PAY_AMOUNT:
      if (value == null) {
        unsetPayAmount();
      } else {
        setPayAmount((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case BANK_SERIAL_NO:
      if (value == null) {
        unsetBankSerialNo();
      } else {
        setBankSerialNo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NOTIFY_ID:
      return getNotifyId();

    case TRANS_NO:
      return getTransNo();

    case MERCHANT_ID:
      return getMerchantId();

    case MERCHANT_LOGIN_NAME:
      return getMerchantLoginName();

    case MERCHANT_COMPANY:
      return getMerchantCompany();

    case MERCHANT_ORDER_NO:
      return getMerchantOrderNo();

    case NOTIFY_URL:
      return getNotifyUrl();

    case STATUS:
      return getStatus();

    case NOTIFY_REQUEST_PARAMS:
      return getNotifyRequestParams();

    case NOTIFY_RESPONSE:
      return getNotifyResponse();

    case NOTIFY_NUMBER:
      return getNotifyNumber();

    case NOTIFY_TYPE:
      return getNotifyType();

    case NOTIFY_DATE:
      return getNotifyDate();

    case SUCCESS_AMOUNT:
      return getSuccessAmount();

    case PAY_RESULT:
      return getPayResult();

    case PAYMENT_ID:
      return getPaymentId();

    case UPDATE_TIME:
      return getUpdateTime();

    case PAY_AMOUNT:
      return getPayAmount();

    case CREATE_TIME:
      return getCreateTime();

    case BANK_SERIAL_NO:
      return getBankSerialNo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NOTIFY_ID:
      return isSetNotifyId();
    case TRANS_NO:
      return isSetTransNo();
    case MERCHANT_ID:
      return isSetMerchantId();
    case MERCHANT_LOGIN_NAME:
      return isSetMerchantLoginName();
    case MERCHANT_COMPANY:
      return isSetMerchantCompany();
    case MERCHANT_ORDER_NO:
      return isSetMerchantOrderNo();
    case NOTIFY_URL:
      return isSetNotifyUrl();
    case STATUS:
      return isSetStatus();
    case NOTIFY_REQUEST_PARAMS:
      return isSetNotifyRequestParams();
    case NOTIFY_RESPONSE:
      return isSetNotifyResponse();
    case NOTIFY_NUMBER:
      return isSetNotifyNumber();
    case NOTIFY_TYPE:
      return isSetNotifyType();
    case NOTIFY_DATE:
      return isSetNotifyDate();
    case SUCCESS_AMOUNT:
      return isSetSuccessAmount();
    case PAY_RESULT:
      return isSetPayResult();
    case PAYMENT_ID:
      return isSetPaymentId();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case PAY_AMOUNT:
      return isSetPayAmount();
    case CREATE_TIME:
      return isSetCreateTime();
    case BANK_SERIAL_NO:
      return isSetBankSerialNo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NotifyRecordModel)
      return this.equals((NotifyRecordModel)that);
    return false;
  }

  public boolean equals(NotifyRecordModel that) {
    if (that == null)
      return false;

    boolean this_present_notifyId = true;
    boolean that_present_notifyId = true;
    if (this_present_notifyId || that_present_notifyId) {
      if (!(this_present_notifyId && that_present_notifyId))
        return false;
      if (this.notifyId != that.notifyId)
        return false;
    }

    boolean this_present_transNo = true && this.isSetTransNo();
    boolean that_present_transNo = true && that.isSetTransNo();
    if (this_present_transNo || that_present_transNo) {
      if (!(this_present_transNo && that_present_transNo))
        return false;
      if (!this.transNo.equals(that.transNo))
        return false;
    }

    boolean this_present_merchantId = true;
    boolean that_present_merchantId = true;
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (this.merchantId != that.merchantId)
        return false;
    }

    boolean this_present_merchantLoginName = true && this.isSetMerchantLoginName();
    boolean that_present_merchantLoginName = true && that.isSetMerchantLoginName();
    if (this_present_merchantLoginName || that_present_merchantLoginName) {
      if (!(this_present_merchantLoginName && that_present_merchantLoginName))
        return false;
      if (!this.merchantLoginName.equals(that.merchantLoginName))
        return false;
    }

    boolean this_present_merchantCompany = true && this.isSetMerchantCompany();
    boolean that_present_merchantCompany = true && that.isSetMerchantCompany();
    if (this_present_merchantCompany || that_present_merchantCompany) {
      if (!(this_present_merchantCompany && that_present_merchantCompany))
        return false;
      if (!this.merchantCompany.equals(that.merchantCompany))
        return false;
    }

    boolean this_present_merchantOrderNo = true && this.isSetMerchantOrderNo();
    boolean that_present_merchantOrderNo = true && that.isSetMerchantOrderNo();
    if (this_present_merchantOrderNo || that_present_merchantOrderNo) {
      if (!(this_present_merchantOrderNo && that_present_merchantOrderNo))
        return false;
      if (!this.merchantOrderNo.equals(that.merchantOrderNo))
        return false;
    }

    boolean this_present_notifyUrl = true && this.isSetNotifyUrl();
    boolean that_present_notifyUrl = true && that.isSetNotifyUrl();
    if (this_present_notifyUrl || that_present_notifyUrl) {
      if (!(this_present_notifyUrl && that_present_notifyUrl))
        return false;
      if (!this.notifyUrl.equals(that.notifyUrl))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_notifyRequestParams = true && this.isSetNotifyRequestParams();
    boolean that_present_notifyRequestParams = true && that.isSetNotifyRequestParams();
    if (this_present_notifyRequestParams || that_present_notifyRequestParams) {
      if (!(this_present_notifyRequestParams && that_present_notifyRequestParams))
        return false;
      if (!this.notifyRequestParams.equals(that.notifyRequestParams))
        return false;
    }

    boolean this_present_notifyResponse = true && this.isSetNotifyResponse();
    boolean that_present_notifyResponse = true && that.isSetNotifyResponse();
    if (this_present_notifyResponse || that_present_notifyResponse) {
      if (!(this_present_notifyResponse && that_present_notifyResponse))
        return false;
      if (!this.notifyResponse.equals(that.notifyResponse))
        return false;
    }

    boolean this_present_notifyNumber = true;
    boolean that_present_notifyNumber = true;
    if (this_present_notifyNumber || that_present_notifyNumber) {
      if (!(this_present_notifyNumber && that_present_notifyNumber))
        return false;
      if (this.notifyNumber != that.notifyNumber)
        return false;
    }

    boolean this_present_notifyType = true;
    boolean that_present_notifyType = true;
    if (this_present_notifyType || that_present_notifyType) {
      if (!(this_present_notifyType && that_present_notifyType))
        return false;
      if (this.notifyType != that.notifyType)
        return false;
    }

    boolean this_present_notifyDate = true && this.isSetNotifyDate();
    boolean that_present_notifyDate = true && that.isSetNotifyDate();
    if (this_present_notifyDate || that_present_notifyDate) {
      if (!(this_present_notifyDate && that_present_notifyDate))
        return false;
      if (!this.notifyDate.equals(that.notifyDate))
        return false;
    }

    boolean this_present_successAmount = true && this.isSetSuccessAmount();
    boolean that_present_successAmount = true && that.isSetSuccessAmount();
    if (this_present_successAmount || that_present_successAmount) {
      if (!(this_present_successAmount && that_present_successAmount))
        return false;
      if (!this.successAmount.equals(that.successAmount))
        return false;
    }

    boolean this_present_payResult = true && this.isSetPayResult();
    boolean that_present_payResult = true && that.isSetPayResult();
    if (this_present_payResult || that_present_payResult) {
      if (!(this_present_payResult && that_present_payResult))
        return false;
      if (!this.payResult.equals(that.payResult))
        return false;
    }

    boolean this_present_paymentId = true && this.isSetPaymentId();
    boolean that_present_paymentId = true && that.isSetPaymentId();
    if (this_present_paymentId || that_present_paymentId) {
      if (!(this_present_paymentId && that_present_paymentId))
        return false;
      if (!this.paymentId.equals(that.paymentId))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_payAmount = true && this.isSetPayAmount();
    boolean that_present_payAmount = true && that.isSetPayAmount();
    if (this_present_payAmount || that_present_payAmount) {
      if (!(this_present_payAmount && that_present_payAmount))
        return false;
      if (!this.payAmount.equals(that.payAmount))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_bankSerialNo = true && this.isSetBankSerialNo();
    boolean that_present_bankSerialNo = true && that.isSetBankSerialNo();
    if (this_present_bankSerialNo || that_present_bankSerialNo) {
      if (!(this_present_bankSerialNo && that_present_bankSerialNo))
        return false;
      if (!this.bankSerialNo.equals(that.bankSerialNo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_notifyId = true;
    list.add(present_notifyId);
    if (present_notifyId)
      list.add(notifyId);

    boolean present_transNo = true && (isSetTransNo());
    list.add(present_transNo);
    if (present_transNo)
      list.add(transNo);

    boolean present_merchantId = true;
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_merchantLoginName = true && (isSetMerchantLoginName());
    list.add(present_merchantLoginName);
    if (present_merchantLoginName)
      list.add(merchantLoginName);

    boolean present_merchantCompany = true && (isSetMerchantCompany());
    list.add(present_merchantCompany);
    if (present_merchantCompany)
      list.add(merchantCompany);

    boolean present_merchantOrderNo = true && (isSetMerchantOrderNo());
    list.add(present_merchantOrderNo);
    if (present_merchantOrderNo)
      list.add(merchantOrderNo);

    boolean present_notifyUrl = true && (isSetNotifyUrl());
    list.add(present_notifyUrl);
    if (present_notifyUrl)
      list.add(notifyUrl);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_notifyRequestParams = true && (isSetNotifyRequestParams());
    list.add(present_notifyRequestParams);
    if (present_notifyRequestParams)
      list.add(notifyRequestParams);

    boolean present_notifyResponse = true && (isSetNotifyResponse());
    list.add(present_notifyResponse);
    if (present_notifyResponse)
      list.add(notifyResponse);

    boolean present_notifyNumber = true;
    list.add(present_notifyNumber);
    if (present_notifyNumber)
      list.add(notifyNumber);

    boolean present_notifyType = true;
    list.add(present_notifyType);
    if (present_notifyType)
      list.add(notifyType);

    boolean present_notifyDate = true && (isSetNotifyDate());
    list.add(present_notifyDate);
    if (present_notifyDate)
      list.add(notifyDate);

    boolean present_successAmount = true && (isSetSuccessAmount());
    list.add(present_successAmount);
    if (present_successAmount)
      list.add(successAmount);

    boolean present_payResult = true && (isSetPayResult());
    list.add(present_payResult);
    if (present_payResult)
      list.add(payResult);

    boolean present_paymentId = true && (isSetPaymentId());
    list.add(present_paymentId);
    if (present_paymentId)
      list.add(paymentId);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_payAmount = true && (isSetPayAmount());
    list.add(present_payAmount);
    if (present_payAmount)
      list.add(payAmount);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_bankSerialNo = true && (isSetBankSerialNo());
    list.add(present_bankSerialNo);
    if (present_bankSerialNo)
      list.add(bankSerialNo);

    return list.hashCode();
  }

  @Override
  public int compareTo(NotifyRecordModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNotifyId()).compareTo(other.isSetNotifyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyId, other.notifyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantLoginName()).compareTo(other.isSetMerchantLoginName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantLoginName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantLoginName, other.merchantLoginName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantCompany()).compareTo(other.isSetMerchantCompany());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantCompany()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantCompany, other.merchantCompany);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantOrderNo()).compareTo(other.isSetMerchantOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantOrderNo, other.merchantOrderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyUrl()).compareTo(other.isSetNotifyUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyUrl, other.notifyUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyRequestParams()).compareTo(other.isSetNotifyRequestParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyRequestParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyRequestParams, other.notifyRequestParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyResponse()).compareTo(other.isSetNotifyResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyResponse, other.notifyResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyNumber()).compareTo(other.isSetNotifyNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyNumber, other.notifyNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyType()).compareTo(other.isSetNotifyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyType, other.notifyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyDate()).compareTo(other.isSetNotifyDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyDate, other.notifyDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessAmount()).compareTo(other.isSetSuccessAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successAmount, other.successAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayResult()).compareTo(other.isSetPayResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payResult, other.payResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayAmount()).compareTo(other.isSetPayAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payAmount, other.payAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankSerialNo()).compareTo(other.isSetBankSerialNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankSerialNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankSerialNo, other.bankSerialNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NotifyRecordModel(");
    boolean first = true;

    sb.append("notifyId:");
    sb.append(this.notifyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transNo:");
    if (this.transNo == null) {
      sb.append("null");
    } else {
      sb.append(this.transNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    sb.append(this.merchantId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantLoginName:");
    if (this.merchantLoginName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantLoginName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantCompany:");
    if (this.merchantCompany == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantCompany);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantOrderNo:");
    if (this.merchantOrderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantOrderNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifyUrl:");
    if (this.notifyUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.notifyUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifyRequestParams:");
    if (this.notifyRequestParams == null) {
      sb.append("null");
    } else {
      sb.append(this.notifyRequestParams);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifyResponse:");
    if (this.notifyResponse == null) {
      sb.append("null");
    } else {
      sb.append(this.notifyResponse);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifyNumber:");
    sb.append(this.notifyNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifyType:");
    sb.append(this.notifyType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifyDate:");
    if (this.notifyDate == null) {
      sb.append("null");
    } else {
      sb.append(this.notifyDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("successAmount:");
    if (this.successAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.successAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payResult:");
    if (this.payResult == null) {
      sb.append("null");
    } else {
      sb.append(this.payResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentId:");
    if (this.paymentId == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    if (this.updateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payAmount:");
    if (this.payAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.payAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankSerialNo:");
    if (this.bankSerialNo == null) {
      sb.append("null");
    } else {
      sb.append(this.bankSerialNo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotifyRecordModelStandardSchemeFactory implements SchemeFactory {
    public NotifyRecordModelStandardScheme getScheme() {
      return new NotifyRecordModelStandardScheme();
    }
  }

  private static class NotifyRecordModelStandardScheme extends StandardScheme<NotifyRecordModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NotifyRecordModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NOTIFY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.notifyId = iprot.readI64();
              struct.setNotifyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRANS_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transNo = iprot.readString();
              struct.setTransNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.merchantId = iprot.readI64();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MERCHANT_LOGIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantLoginName = iprot.readString();
              struct.setMerchantLoginNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MERCHANT_COMPANY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantCompany = iprot.readString();
              struct.setMerchantCompanyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MERCHANT_ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantOrderNo = iprot.readString();
              struct.setMerchantOrderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NOTIFY_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notifyUrl = iprot.readString();
              struct.setNotifyUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NOTIFY_REQUEST_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notifyRequestParams = iprot.readString();
              struct.setNotifyRequestParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NOTIFY_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notifyResponse = iprot.readString();
              struct.setNotifyResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NOTIFY_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.notifyNumber = iprot.readByte();
              struct.setNotifyNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NOTIFY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.notifyType = iprot.readByte();
              struct.setNotifyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NOTIFY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notifyDate = iprot.readString();
              struct.setNotifyDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SUCCESS_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.successAmount = iprot.readString();
              struct.setSuccessAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PAY_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payResult = iprot.readString();
              struct.setPayResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PAYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentId = iprot.readString();
              struct.setPaymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PAY_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payAmount = iprot.readString();
              struct.setPayAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BANK_SERIAL_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankSerialNo = iprot.readString();
              struct.setBankSerialNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NotifyRecordModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NOTIFY_ID_FIELD_DESC);
      oprot.writeI64(struct.notifyId);
      oprot.writeFieldEnd();
      if (struct.transNo != null) {
        oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
        oprot.writeString(struct.transNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
      oprot.writeI64(struct.merchantId);
      oprot.writeFieldEnd();
      if (struct.merchantLoginName != null) {
        oprot.writeFieldBegin(MERCHANT_LOGIN_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantLoginName);
        oprot.writeFieldEnd();
      }
      if (struct.merchantCompany != null) {
        oprot.writeFieldBegin(MERCHANT_COMPANY_FIELD_DESC);
        oprot.writeString(struct.merchantCompany);
        oprot.writeFieldEnd();
      }
      if (struct.merchantOrderNo != null) {
        oprot.writeFieldBegin(MERCHANT_ORDER_NO_FIELD_DESC);
        oprot.writeString(struct.merchantOrderNo);
        oprot.writeFieldEnd();
      }
      if (struct.notifyUrl != null) {
        oprot.writeFieldBegin(NOTIFY_URL_FIELD_DESC);
        oprot.writeString(struct.notifyUrl);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.notifyRequestParams != null) {
        oprot.writeFieldBegin(NOTIFY_REQUEST_PARAMS_FIELD_DESC);
        oprot.writeString(struct.notifyRequestParams);
        oprot.writeFieldEnd();
      }
      if (struct.notifyResponse != null) {
        oprot.writeFieldBegin(NOTIFY_RESPONSE_FIELD_DESC);
        oprot.writeString(struct.notifyResponse);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOTIFY_NUMBER_FIELD_DESC);
      oprot.writeByte(struct.notifyNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFY_TYPE_FIELD_DESC);
      oprot.writeByte(struct.notifyType);
      oprot.writeFieldEnd();
      if (struct.notifyDate != null) {
        oprot.writeFieldBegin(NOTIFY_DATE_FIELD_DESC);
        oprot.writeString(struct.notifyDate);
        oprot.writeFieldEnd();
      }
      if (struct.successAmount != null) {
        oprot.writeFieldBegin(SUCCESS_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.successAmount);
        oprot.writeFieldEnd();
      }
      if (struct.payResult != null) {
        oprot.writeFieldBegin(PAY_RESULT_FIELD_DESC);
        oprot.writeString(struct.payResult);
        oprot.writeFieldEnd();
      }
      if (struct.paymentId != null) {
        oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
        oprot.writeString(struct.paymentId);
        oprot.writeFieldEnd();
      }
      if (struct.updateTime != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.updateTime);
        oprot.writeFieldEnd();
      }
      if (struct.payAmount != null) {
        oprot.writeFieldBegin(PAY_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.payAmount);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.bankSerialNo != null) {
        oprot.writeFieldBegin(BANK_SERIAL_NO_FIELD_DESC);
        oprot.writeString(struct.bankSerialNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NotifyRecordModelTupleSchemeFactory implements SchemeFactory {
    public NotifyRecordModelTupleScheme getScheme() {
      return new NotifyRecordModelTupleScheme();
    }
  }

  private static class NotifyRecordModelTupleScheme extends TupleScheme<NotifyRecordModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NotifyRecordModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNotifyId()) {
        optionals.set(0);
      }
      if (struct.isSetTransNo()) {
        optionals.set(1);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(2);
      }
      if (struct.isSetMerchantLoginName()) {
        optionals.set(3);
      }
      if (struct.isSetMerchantCompany()) {
        optionals.set(4);
      }
      if (struct.isSetMerchantOrderNo()) {
        optionals.set(5);
      }
      if (struct.isSetNotifyUrl()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      if (struct.isSetNotifyRequestParams()) {
        optionals.set(8);
      }
      if (struct.isSetNotifyResponse()) {
        optionals.set(9);
      }
      if (struct.isSetNotifyNumber()) {
        optionals.set(10);
      }
      if (struct.isSetNotifyType()) {
        optionals.set(11);
      }
      if (struct.isSetNotifyDate()) {
        optionals.set(12);
      }
      if (struct.isSetSuccessAmount()) {
        optionals.set(13);
      }
      if (struct.isSetPayResult()) {
        optionals.set(14);
      }
      if (struct.isSetPaymentId()) {
        optionals.set(15);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(16);
      }
      if (struct.isSetPayAmount()) {
        optionals.set(17);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(18);
      }
      if (struct.isSetBankSerialNo()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetNotifyId()) {
        oprot.writeI64(struct.notifyId);
      }
      if (struct.isSetTransNo()) {
        oprot.writeString(struct.transNo);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeI64(struct.merchantId);
      }
      if (struct.isSetMerchantLoginName()) {
        oprot.writeString(struct.merchantLoginName);
      }
      if (struct.isSetMerchantCompany()) {
        oprot.writeString(struct.merchantCompany);
      }
      if (struct.isSetMerchantOrderNo()) {
        oprot.writeString(struct.merchantOrderNo);
      }
      if (struct.isSetNotifyUrl()) {
        oprot.writeString(struct.notifyUrl);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetNotifyRequestParams()) {
        oprot.writeString(struct.notifyRequestParams);
      }
      if (struct.isSetNotifyResponse()) {
        oprot.writeString(struct.notifyResponse);
      }
      if (struct.isSetNotifyNumber()) {
        oprot.writeByte(struct.notifyNumber);
      }
      if (struct.isSetNotifyType()) {
        oprot.writeByte(struct.notifyType);
      }
      if (struct.isSetNotifyDate()) {
        oprot.writeString(struct.notifyDate);
      }
      if (struct.isSetSuccessAmount()) {
        oprot.writeString(struct.successAmount);
      }
      if (struct.isSetPayResult()) {
        oprot.writeString(struct.payResult);
      }
      if (struct.isSetPaymentId()) {
        oprot.writeString(struct.paymentId);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetPayAmount()) {
        oprot.writeString(struct.payAmount);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetBankSerialNo()) {
        oprot.writeString(struct.bankSerialNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NotifyRecordModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.notifyId = iprot.readI64();
        struct.setNotifyIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.transNo = iprot.readString();
        struct.setTransNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.merchantId = iprot.readI64();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.merchantLoginName = iprot.readString();
        struct.setMerchantLoginNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.merchantCompany = iprot.readString();
        struct.setMerchantCompanyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.merchantOrderNo = iprot.readString();
        struct.setMerchantOrderNoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.notifyUrl = iprot.readString();
        struct.setNotifyUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.notifyRequestParams = iprot.readString();
        struct.setNotifyRequestParamsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.notifyResponse = iprot.readString();
        struct.setNotifyResponseIsSet(true);
      }
      if (incoming.get(10)) {
        struct.notifyNumber = iprot.readByte();
        struct.setNotifyNumberIsSet(true);
      }
      if (incoming.get(11)) {
        struct.notifyType = iprot.readByte();
        struct.setNotifyTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.notifyDate = iprot.readString();
        struct.setNotifyDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.successAmount = iprot.readString();
        struct.setSuccessAmountIsSet(true);
      }
      if (incoming.get(14)) {
        struct.payResult = iprot.readString();
        struct.setPayResultIsSet(true);
      }
      if (incoming.get(15)) {
        struct.paymentId = iprot.readString();
        struct.setPaymentIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.payAmount = iprot.readString();
        struct.setPayAmountIsSet(true);
      }
      if (incoming.get(18)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.bankSerialNo = iprot.readString();
        struct.setBankSerialNoIsSet(true);
      }
    }
  }

}

