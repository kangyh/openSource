/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-15")
public class SettleDifferBathModel implements org.apache.thrift.TBase<SettleDifferBathModel, SettleDifferBathModel._Fields>, java.io.Serializable, Cloneable, Comparable<SettleDifferBathModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SettleDifferBathModel");

  private static final org.apache.thrift.protocol.TField DIFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("differId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SETTLE_BATH_FIELD_DESC = new org.apache.thrift.protocol.TField("settleBath", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SETTLE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("settleDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BILL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("billType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SUCCESS_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("successTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SETTLE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("settleStatus", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SettleDifferBathModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SettleDifferBathModelTupleSchemeFactory());
  }

  public long differId; // required
  public String paymentId; // required
  public String transNo; // required
  public String settleBath; // required
  public String settleDate; // required
  public String billType; // required
  public String successTime; // required
  public String settleStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DIFFER_ID((short)1, "differId"),
    PAYMENT_ID((short)2, "paymentId"),
    TRANS_NO((short)3, "transNo"),
    SETTLE_BATH((short)4, "settleBath"),
    SETTLE_DATE((short)5, "settleDate"),
    BILL_TYPE((short)6, "billType"),
    SUCCESS_TIME((short)7, "successTime"),
    SETTLE_STATUS((short)8, "settleStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIFFER_ID
          return DIFFER_ID;
        case 2: // PAYMENT_ID
          return PAYMENT_ID;
        case 3: // TRANS_NO
          return TRANS_NO;
        case 4: // SETTLE_BATH
          return SETTLE_BATH;
        case 5: // SETTLE_DATE
          return SETTLE_DATE;
        case 6: // BILL_TYPE
          return BILL_TYPE;
        case 7: // SUCCESS_TIME
          return SUCCESS_TIME;
        case 8: // SETTLE_STATUS
          return SETTLE_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DIFFERID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("differId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_BATH, new org.apache.thrift.meta_data.FieldMetaData("settleBath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_DATE, new org.apache.thrift.meta_data.FieldMetaData("settleDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BILL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("billType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCESS_TIME, new org.apache.thrift.meta_data.FieldMetaData("successTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("settleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettleDifferBathModel.class, metaDataMap);
  }

  public SettleDifferBathModel() {
  }

  public SettleDifferBathModel(
    long differId,
    String paymentId,
    String transNo,
    String settleBath,
    String settleDate,
    String billType,
    String successTime,
    String settleStatus)
  {
    this();
    this.differId = differId;
    setDifferIdIsSet(true);
    this.paymentId = paymentId;
    this.transNo = transNo;
    this.settleBath = settleBath;
    this.settleDate = settleDate;
    this.billType = billType;
    this.successTime = successTime;
    this.settleStatus = settleStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SettleDifferBathModel(SettleDifferBathModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.differId = other.differId;
    if (other.isSetPaymentId()) {
      this.paymentId = other.paymentId;
    }
    if (other.isSetTransNo()) {
      this.transNo = other.transNo;
    }
    if (other.isSetSettleBath()) {
      this.settleBath = other.settleBath;
    }
    if (other.isSetSettleDate()) {
      this.settleDate = other.settleDate;
    }
    if (other.isSetBillType()) {
      this.billType = other.billType;
    }
    if (other.isSetSuccessTime()) {
      this.successTime = other.successTime;
    }
    if (other.isSetSettleStatus()) {
      this.settleStatus = other.settleStatus;
    }
  }

  public SettleDifferBathModel deepCopy() {
    return new SettleDifferBathModel(this);
  }

  @Override
  public void clear() {
    setDifferIdIsSet(false);
    this.differId = 0;
    this.paymentId = null;
    this.transNo = null;
    this.settleBath = null;
    this.settleDate = null;
    this.billType = null;
    this.successTime = null;
    this.settleStatus = null;
  }

  public long getDifferId() {
    return this.differId;
  }

  public SettleDifferBathModel setDifferId(long differId) {
    this.differId = differId;
    setDifferIdIsSet(true);
    return this;
  }

  public void unsetDifferId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIFFERID_ISSET_ID);
  }

  /** Returns true if field differId is set (has been assigned a value) and false otherwise */
  public boolean isSetDifferId() {
    return EncodingUtils.testBit(__isset_bitfield, __DIFFERID_ISSET_ID);
  }

  public void setDifferIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIFFERID_ISSET_ID, value);
  }

  public String getPaymentId() {
    return this.paymentId;
  }

  public SettleDifferBathModel setPaymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  public void unsetPaymentId() {
    this.paymentId = null;
  }

  /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentId() {
    return this.paymentId != null;
  }

  public void setPaymentIdIsSet(boolean value) {
    if (!value) {
      this.paymentId = null;
    }
  }

  public String getTransNo() {
    return this.transNo;
  }

  public SettleDifferBathModel setTransNo(String transNo) {
    this.transNo = transNo;
    return this;
  }

  public void unsetTransNo() {
    this.transNo = null;
  }

  /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTransNo() {
    return this.transNo != null;
  }

  public void setTransNoIsSet(boolean value) {
    if (!value) {
      this.transNo = null;
    }
  }

  public String getSettleBath() {
    return this.settleBath;
  }

  public SettleDifferBathModel setSettleBath(String settleBath) {
    this.settleBath = settleBath;
    return this;
  }

  public void unsetSettleBath() {
    this.settleBath = null;
  }

  /** Returns true if field settleBath is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleBath() {
    return this.settleBath != null;
  }

  public void setSettleBathIsSet(boolean value) {
    if (!value) {
      this.settleBath = null;
    }
  }

  public String getSettleDate() {
    return this.settleDate;
  }

  public SettleDifferBathModel setSettleDate(String settleDate) {
    this.settleDate = settleDate;
    return this;
  }

  public void unsetSettleDate() {
    this.settleDate = null;
  }

  /** Returns true if field settleDate is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleDate() {
    return this.settleDate != null;
  }

  public void setSettleDateIsSet(boolean value) {
    if (!value) {
      this.settleDate = null;
    }
  }

  public String getBillType() {
    return this.billType;
  }

  public SettleDifferBathModel setBillType(String billType) {
    this.billType = billType;
    return this;
  }

  public void unsetBillType() {
    this.billType = null;
  }

  /** Returns true if field billType is set (has been assigned a value) and false otherwise */
  public boolean isSetBillType() {
    return this.billType != null;
  }

  public void setBillTypeIsSet(boolean value) {
    if (!value) {
      this.billType = null;
    }
  }

  public String getSuccessTime() {
    return this.successTime;
  }

  public SettleDifferBathModel setSuccessTime(String successTime) {
    this.successTime = successTime;
    return this;
  }

  public void unsetSuccessTime() {
    this.successTime = null;
  }

  /** Returns true if field successTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessTime() {
    return this.successTime != null;
  }

  public void setSuccessTimeIsSet(boolean value) {
    if (!value) {
      this.successTime = null;
    }
  }

  public String getSettleStatus() {
    return this.settleStatus;
  }

  public SettleDifferBathModel setSettleStatus(String settleStatus) {
    this.settleStatus = settleStatus;
    return this;
  }

  public void unsetSettleStatus() {
    this.settleStatus = null;
  }

  /** Returns true if field settleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleStatus() {
    return this.settleStatus != null;
  }

  public void setSettleStatusIsSet(boolean value) {
    if (!value) {
      this.settleStatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIFFER_ID:
      if (value == null) {
        unsetDifferId();
      } else {
        setDifferId((Long)value);
      }
      break;

    case PAYMENT_ID:
      if (value == null) {
        unsetPaymentId();
      } else {
        setPaymentId((String)value);
      }
      break;

    case TRANS_NO:
      if (value == null) {
        unsetTransNo();
      } else {
        setTransNo((String)value);
      }
      break;

    case SETTLE_BATH:
      if (value == null) {
        unsetSettleBath();
      } else {
        setSettleBath((String)value);
      }
      break;

    case SETTLE_DATE:
      if (value == null) {
        unsetSettleDate();
      } else {
        setSettleDate((String)value);
      }
      break;

    case BILL_TYPE:
      if (value == null) {
        unsetBillType();
      } else {
        setBillType((String)value);
      }
      break;

    case SUCCESS_TIME:
      if (value == null) {
        unsetSuccessTime();
      } else {
        setSuccessTime((String)value);
      }
      break;

    case SETTLE_STATUS:
      if (value == null) {
        unsetSettleStatus();
      } else {
        setSettleStatus((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIFFER_ID:
      return getDifferId();

    case PAYMENT_ID:
      return getPaymentId();

    case TRANS_NO:
      return getTransNo();

    case SETTLE_BATH:
      return getSettleBath();

    case SETTLE_DATE:
      return getSettleDate();

    case BILL_TYPE:
      return getBillType();

    case SUCCESS_TIME:
      return getSuccessTime();

    case SETTLE_STATUS:
      return getSettleStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIFFER_ID:
      return isSetDifferId();
    case PAYMENT_ID:
      return isSetPaymentId();
    case TRANS_NO:
      return isSetTransNo();
    case SETTLE_BATH:
      return isSetSettleBath();
    case SETTLE_DATE:
      return isSetSettleDate();
    case BILL_TYPE:
      return isSetBillType();
    case SUCCESS_TIME:
      return isSetSuccessTime();
    case SETTLE_STATUS:
      return isSetSettleStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SettleDifferBathModel)
      return this.equals((SettleDifferBathModel)that);
    return false;
  }

  public boolean equals(SettleDifferBathModel that) {
    if (that == null)
      return false;

    boolean this_present_differId = true;
    boolean that_present_differId = true;
    if (this_present_differId || that_present_differId) {
      if (!(this_present_differId && that_present_differId))
        return false;
      if (this.differId != that.differId)
        return false;
    }

    boolean this_present_paymentId = true && this.isSetPaymentId();
    boolean that_present_paymentId = true && that.isSetPaymentId();
    if (this_present_paymentId || that_present_paymentId) {
      if (!(this_present_paymentId && that_present_paymentId))
        return false;
      if (!this.paymentId.equals(that.paymentId))
        return false;
    }

    boolean this_present_transNo = true && this.isSetTransNo();
    boolean that_present_transNo = true && that.isSetTransNo();
    if (this_present_transNo || that_present_transNo) {
      if (!(this_present_transNo && that_present_transNo))
        return false;
      if (!this.transNo.equals(that.transNo))
        return false;
    }

    boolean this_present_settleBath = true && this.isSetSettleBath();
    boolean that_present_settleBath = true && that.isSetSettleBath();
    if (this_present_settleBath || that_present_settleBath) {
      if (!(this_present_settleBath && that_present_settleBath))
        return false;
      if (!this.settleBath.equals(that.settleBath))
        return false;
    }

    boolean this_present_settleDate = true && this.isSetSettleDate();
    boolean that_present_settleDate = true && that.isSetSettleDate();
    if (this_present_settleDate || that_present_settleDate) {
      if (!(this_present_settleDate && that_present_settleDate))
        return false;
      if (!this.settleDate.equals(that.settleDate))
        return false;
    }

    boolean this_present_billType = true && this.isSetBillType();
    boolean that_present_billType = true && that.isSetBillType();
    if (this_present_billType || that_present_billType) {
      if (!(this_present_billType && that_present_billType))
        return false;
      if (!this.billType.equals(that.billType))
        return false;
    }

    boolean this_present_successTime = true && this.isSetSuccessTime();
    boolean that_present_successTime = true && that.isSetSuccessTime();
    if (this_present_successTime || that_present_successTime) {
      if (!(this_present_successTime && that_present_successTime))
        return false;
      if (!this.successTime.equals(that.successTime))
        return false;
    }

    boolean this_present_settleStatus = true && this.isSetSettleStatus();
    boolean that_present_settleStatus = true && that.isSetSettleStatus();
    if (this_present_settleStatus || that_present_settleStatus) {
      if (!(this_present_settleStatus && that_present_settleStatus))
        return false;
      if (!this.settleStatus.equals(that.settleStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_differId = true;
    list.add(present_differId);
    if (present_differId)
      list.add(differId);

    boolean present_paymentId = true && (isSetPaymentId());
    list.add(present_paymentId);
    if (present_paymentId)
      list.add(paymentId);

    boolean present_transNo = true && (isSetTransNo());
    list.add(present_transNo);
    if (present_transNo)
      list.add(transNo);

    boolean present_settleBath = true && (isSetSettleBath());
    list.add(present_settleBath);
    if (present_settleBath)
      list.add(settleBath);

    boolean present_settleDate = true && (isSetSettleDate());
    list.add(present_settleDate);
    if (present_settleDate)
      list.add(settleDate);

    boolean present_billType = true && (isSetBillType());
    list.add(present_billType);
    if (present_billType)
      list.add(billType);

    boolean present_successTime = true && (isSetSuccessTime());
    list.add(present_successTime);
    if (present_successTime)
      list.add(successTime);

    boolean present_settleStatus = true && (isSetSettleStatus());
    list.add(present_settleStatus);
    if (present_settleStatus)
      list.add(settleStatus);

    return list.hashCode();
  }

  @Override
  public int compareTo(SettleDifferBathModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDifferId()).compareTo(other.isSetDifferId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDifferId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.differId, other.differId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleBath()).compareTo(other.isSetSettleBath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleBath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleBath, other.settleBath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleDate()).compareTo(other.isSetSettleDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleDate, other.settleDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBillType()).compareTo(other.isSetBillType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBillType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.billType, other.billType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessTime()).compareTo(other.isSetSuccessTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successTime, other.successTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleStatus()).compareTo(other.isSetSettleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleStatus, other.settleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SettleDifferBathModel(");
    boolean first = true;

    sb.append("differId:");
    sb.append(this.differId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentId:");
    if (this.paymentId == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transNo:");
    if (this.transNo == null) {
      sb.append("null");
    } else {
      sb.append(this.transNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleBath:");
    if (this.settleBath == null) {
      sb.append("null");
    } else {
      sb.append(this.settleBath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleDate:");
    if (this.settleDate == null) {
      sb.append("null");
    } else {
      sb.append(this.settleDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("billType:");
    if (this.billType == null) {
      sb.append("null");
    } else {
      sb.append(this.billType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("successTime:");
    if (this.successTime == null) {
      sb.append("null");
    } else {
      sb.append(this.successTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleStatus:");
    if (this.settleStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.settleStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettleDifferBathModelStandardSchemeFactory implements SchemeFactory {
    public SettleDifferBathModelStandardScheme getScheme() {
      return new SettleDifferBathModelStandardScheme();
    }
  }

  private static class SettleDifferBathModelStandardScheme extends StandardScheme<SettleDifferBathModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SettleDifferBathModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIFFER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.differId = iprot.readI64();
              struct.setDifferIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentId = iprot.readString();
              struct.setPaymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANS_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transNo = iprot.readString();
              struct.setTransNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SETTLE_BATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleBath = iprot.readString();
              struct.setSettleBathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SETTLE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleDate = iprot.readString();
              struct.setSettleDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BILL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.billType = iprot.readString();
              struct.setBillTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUCCESS_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.successTime = iprot.readString();
              struct.setSuccessTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SETTLE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleStatus = iprot.readString();
              struct.setSettleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SettleDifferBathModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DIFFER_ID_FIELD_DESC);
      oprot.writeI64(struct.differId);
      oprot.writeFieldEnd();
      if (struct.paymentId != null) {
        oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
        oprot.writeString(struct.paymentId);
        oprot.writeFieldEnd();
      }
      if (struct.transNo != null) {
        oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
        oprot.writeString(struct.transNo);
        oprot.writeFieldEnd();
      }
      if (struct.settleBath != null) {
        oprot.writeFieldBegin(SETTLE_BATH_FIELD_DESC);
        oprot.writeString(struct.settleBath);
        oprot.writeFieldEnd();
      }
      if (struct.settleDate != null) {
        oprot.writeFieldBegin(SETTLE_DATE_FIELD_DESC);
        oprot.writeString(struct.settleDate);
        oprot.writeFieldEnd();
      }
      if (struct.billType != null) {
        oprot.writeFieldBegin(BILL_TYPE_FIELD_DESC);
        oprot.writeString(struct.billType);
        oprot.writeFieldEnd();
      }
      if (struct.successTime != null) {
        oprot.writeFieldBegin(SUCCESS_TIME_FIELD_DESC);
        oprot.writeString(struct.successTime);
        oprot.writeFieldEnd();
      }
      if (struct.settleStatus != null) {
        oprot.writeFieldBegin(SETTLE_STATUS_FIELD_DESC);
        oprot.writeString(struct.settleStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SettleDifferBathModelTupleSchemeFactory implements SchemeFactory {
    public SettleDifferBathModelTupleScheme getScheme() {
      return new SettleDifferBathModelTupleScheme();
    }
  }

  private static class SettleDifferBathModelTupleScheme extends TupleScheme<SettleDifferBathModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SettleDifferBathModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDifferId()) {
        optionals.set(0);
      }
      if (struct.isSetPaymentId()) {
        optionals.set(1);
      }
      if (struct.isSetTransNo()) {
        optionals.set(2);
      }
      if (struct.isSetSettleBath()) {
        optionals.set(3);
      }
      if (struct.isSetSettleDate()) {
        optionals.set(4);
      }
      if (struct.isSetBillType()) {
        optionals.set(5);
      }
      if (struct.isSetSuccessTime()) {
        optionals.set(6);
      }
      if (struct.isSetSettleStatus()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetDifferId()) {
        oprot.writeI64(struct.differId);
      }
      if (struct.isSetPaymentId()) {
        oprot.writeString(struct.paymentId);
      }
      if (struct.isSetTransNo()) {
        oprot.writeString(struct.transNo);
      }
      if (struct.isSetSettleBath()) {
        oprot.writeString(struct.settleBath);
      }
      if (struct.isSetSettleDate()) {
        oprot.writeString(struct.settleDate);
      }
      if (struct.isSetBillType()) {
        oprot.writeString(struct.billType);
      }
      if (struct.isSetSuccessTime()) {
        oprot.writeString(struct.successTime);
      }
      if (struct.isSetSettleStatus()) {
        oprot.writeString(struct.settleStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SettleDifferBathModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.differId = iprot.readI64();
        struct.setDifferIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.paymentId = iprot.readString();
        struct.setPaymentIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.transNo = iprot.readString();
        struct.setTransNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.settleBath = iprot.readString();
        struct.setSettleBathIsSet(true);
      }
      if (incoming.get(4)) {
        struct.settleDate = iprot.readString();
        struct.setSettleDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.billType = iprot.readString();
        struct.setBillTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.successTime = iprot.readString();
        struct.setSuccessTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.settleStatus = iprot.readString();
        struct.setSettleStatusIsSet(true);
      }
    }
  }

}

