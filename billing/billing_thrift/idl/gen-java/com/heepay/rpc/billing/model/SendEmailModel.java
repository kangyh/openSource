/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-16")
public class SendEmailModel implements org.apache.thrift.TBase<SendEmailModel, SendEmailModel._Fields>, java.io.Serializable, Cloneable, Comparable<SendEmailModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendEmailModel");

  private static final org.apache.thrift.protocol.TField SETTLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settleId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COME_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("comeFrom", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ACCESSORIES_FIELD_DESC = new org.apache.thrift.protocol.TField("accessories", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SendEmailModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SendEmailModelTupleSchemeFactory());
  }

  public long settleId; // required
  public String comeFrom; // required
  public String to; // required
  public String subject; // required
  public String content; // required
  public String accessories; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SETTLE_ID((short)1, "settleId"),
    COME_FROM((short)2, "comeFrom"),
    TO((short)3, "to"),
    SUBJECT((short)4, "subject"),
    CONTENT((short)5, "content"),
    ACCESSORIES((short)6, "accessories");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SETTLE_ID
          return SETTLE_ID;
        case 2: // COME_FROM
          return COME_FROM;
        case 3: // TO
          return TO;
        case 4: // SUBJECT
          return SUBJECT;
        case 5: // CONTENT
          return CONTENT;
        case 6: // ACCESSORIES
          return ACCESSORIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SETTLEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SETTLE_ID, new org.apache.thrift.meta_data.FieldMetaData("settleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COME_FROM, new org.apache.thrift.meta_data.FieldMetaData("comeFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESSORIES, new org.apache.thrift.meta_data.FieldMetaData("accessories", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendEmailModel.class, metaDataMap);
  }

  public SendEmailModel() {
  }

  public SendEmailModel(
    long settleId,
    String comeFrom,
    String to,
    String subject,
    String content,
    String accessories)
  {
    this();
    this.settleId = settleId;
    setSettleIdIsSet(true);
    this.comeFrom = comeFrom;
    this.to = to;
    this.subject = subject;
    this.content = content;
    this.accessories = accessories;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SendEmailModel(SendEmailModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.settleId = other.settleId;
    if (other.isSetComeFrom()) {
      this.comeFrom = other.comeFrom;
    }
    if (other.isSetTo()) {
      this.to = other.to;
    }
    if (other.isSetSubject()) {
      this.subject = other.subject;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetAccessories()) {
      this.accessories = other.accessories;
    }
  }

  public SendEmailModel deepCopy() {
    return new SendEmailModel(this);
  }

  @Override
  public void clear() {
    setSettleIdIsSet(false);
    this.settleId = 0;
    this.comeFrom = null;
    this.to = null;
    this.subject = null;
    this.content = null;
    this.accessories = null;
  }

  public long getSettleId() {
    return this.settleId;
  }

  public SendEmailModel setSettleId(long settleId) {
    this.settleId = settleId;
    setSettleIdIsSet(true);
    return this;
  }

  public void unsetSettleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEID_ISSET_ID);
  }

  /** Returns true if field settleId is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleId() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEID_ISSET_ID);
  }

  public void setSettleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEID_ISSET_ID, value);
  }

  public String getComeFrom() {
    return this.comeFrom;
  }

  public SendEmailModel setComeFrom(String comeFrom) {
    this.comeFrom = comeFrom;
    return this;
  }

  public void unsetComeFrom() {
    this.comeFrom = null;
  }

  /** Returns true if field comeFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetComeFrom() {
    return this.comeFrom != null;
  }

  public void setComeFromIsSet(boolean value) {
    if (!value) {
      this.comeFrom = null;
    }
  }

  public String getTo() {
    return this.to;
  }

  public SendEmailModel setTo(String to) {
    this.to = to;
    return this;
  }

  public void unsetTo() {
    this.to = null;
  }

  /** Returns true if field to is set (has been assigned a value) and false otherwise */
  public boolean isSetTo() {
    return this.to != null;
  }

  public void setToIsSet(boolean value) {
    if (!value) {
      this.to = null;
    }
  }

  public String getSubject() {
    return this.subject;
  }

  public SendEmailModel setSubject(String subject) {
    this.subject = subject;
    return this;
  }

  public void unsetSubject() {
    this.subject = null;
  }

  /** Returns true if field subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.subject = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public SendEmailModel setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getAccessories() {
    return this.accessories;
  }

  public SendEmailModel setAccessories(String accessories) {
    this.accessories = accessories;
    return this;
  }

  public void unsetAccessories() {
    this.accessories = null;
  }

  /** Returns true if field accessories is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessories() {
    return this.accessories != null;
  }

  public void setAccessoriesIsSet(boolean value) {
    if (!value) {
      this.accessories = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SETTLE_ID:
      if (value == null) {
        unsetSettleId();
      } else {
        setSettleId((Long)value);
      }
      break;

    case COME_FROM:
      if (value == null) {
        unsetComeFrom();
      } else {
        setComeFrom((String)value);
      }
      break;

    case TO:
      if (value == null) {
        unsetTo();
      } else {
        setTo((String)value);
      }
      break;

    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case ACCESSORIES:
      if (value == null) {
        unsetAccessories();
      } else {
        setAccessories((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SETTLE_ID:
      return getSettleId();

    case COME_FROM:
      return getComeFrom();

    case TO:
      return getTo();

    case SUBJECT:
      return getSubject();

    case CONTENT:
      return getContent();

    case ACCESSORIES:
      return getAccessories();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SETTLE_ID:
      return isSetSettleId();
    case COME_FROM:
      return isSetComeFrom();
    case TO:
      return isSetTo();
    case SUBJECT:
      return isSetSubject();
    case CONTENT:
      return isSetContent();
    case ACCESSORIES:
      return isSetAccessories();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SendEmailModel)
      return this.equals((SendEmailModel)that);
    return false;
  }

  public boolean equals(SendEmailModel that) {
    if (that == null)
      return false;

    boolean this_present_settleId = true;
    boolean that_present_settleId = true;
    if (this_present_settleId || that_present_settleId) {
      if (!(this_present_settleId && that_present_settleId))
        return false;
      if (this.settleId != that.settleId)
        return false;
    }

    boolean this_present_comeFrom = true && this.isSetComeFrom();
    boolean that_present_comeFrom = true && that.isSetComeFrom();
    if (this_present_comeFrom || that_present_comeFrom) {
      if (!(this_present_comeFrom && that_present_comeFrom))
        return false;
      if (!this.comeFrom.equals(that.comeFrom))
        return false;
    }

    boolean this_present_to = true && this.isSetTo();
    boolean that_present_to = true && that.isSetTo();
    if (this_present_to || that_present_to) {
      if (!(this_present_to && that_present_to))
        return false;
      if (!this.to.equals(that.to))
        return false;
    }

    boolean this_present_subject = true && this.isSetSubject();
    boolean that_present_subject = true && that.isSetSubject();
    if (this_present_subject || that_present_subject) {
      if (!(this_present_subject && that_present_subject))
        return false;
      if (!this.subject.equals(that.subject))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_accessories = true && this.isSetAccessories();
    boolean that_present_accessories = true && that.isSetAccessories();
    if (this_present_accessories || that_present_accessories) {
      if (!(this_present_accessories && that_present_accessories))
        return false;
      if (!this.accessories.equals(that.accessories))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_settleId = true;
    list.add(present_settleId);
    if (present_settleId)
      list.add(settleId);

    boolean present_comeFrom = true && (isSetComeFrom());
    list.add(present_comeFrom);
    if (present_comeFrom)
      list.add(comeFrom);

    boolean present_to = true && (isSetTo());
    list.add(present_to);
    if (present_to)
      list.add(to);

    boolean present_subject = true && (isSetSubject());
    list.add(present_subject);
    if (present_subject)
      list.add(subject);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_accessories = true && (isSetAccessories());
    list.add(present_accessories);
    if (present_accessories)
      list.add(accessories);

    return list.hashCode();
  }

  @Override
  public int compareTo(SendEmailModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSettleId()).compareTo(other.isSetSettleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleId, other.settleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComeFrom()).compareTo(other.isSetComeFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComeFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comeFrom, other.comeFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTo()).compareTo(other.isSetTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, other.to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubject()).compareTo(other.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessories()).compareTo(other.isSetAccessories());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessories()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessories, other.accessories);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SendEmailModel(");
    boolean first = true;

    sb.append("settleId:");
    sb.append(this.settleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comeFrom:");
    if (this.comeFrom == null) {
      sb.append("null");
    } else {
      sb.append(this.comeFrom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("to:");
    if (this.to == null) {
      sb.append("null");
    } else {
      sb.append(this.to);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subject:");
    if (this.subject == null) {
      sb.append("null");
    } else {
      sb.append(this.subject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessories:");
    if (this.accessories == null) {
      sb.append("null");
    } else {
      sb.append(this.accessories);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SendEmailModelStandardSchemeFactory implements SchemeFactory {
    public SendEmailModelStandardScheme getScheme() {
      return new SendEmailModelStandardScheme();
    }
  }

  private static class SendEmailModelStandardScheme extends StandardScheme<SendEmailModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SendEmailModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SETTLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.settleId = iprot.readI64();
              struct.setSettleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COME_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comeFrom = iprot.readString();
              struct.setComeFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.to = iprot.readString();
              struct.setToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subject = iprot.readString();
              struct.setSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACCESSORIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessories = iprot.readString();
              struct.setAccessoriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SendEmailModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SETTLE_ID_FIELD_DESC);
      oprot.writeI64(struct.settleId);
      oprot.writeFieldEnd();
      if (struct.comeFrom != null) {
        oprot.writeFieldBegin(COME_FROM_FIELD_DESC);
        oprot.writeString(struct.comeFrom);
        oprot.writeFieldEnd();
      }
      if (struct.to != null) {
        oprot.writeFieldBegin(TO_FIELD_DESC);
        oprot.writeString(struct.to);
        oprot.writeFieldEnd();
      }
      if (struct.subject != null) {
        oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
        oprot.writeString(struct.subject);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.accessories != null) {
        oprot.writeFieldBegin(ACCESSORIES_FIELD_DESC);
        oprot.writeString(struct.accessories);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SendEmailModelTupleSchemeFactory implements SchemeFactory {
    public SendEmailModelTupleScheme getScheme() {
      return new SendEmailModelTupleScheme();
    }
  }

  private static class SendEmailModelTupleScheme extends TupleScheme<SendEmailModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SendEmailModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSettleId()) {
        optionals.set(0);
      }
      if (struct.isSetComeFrom()) {
        optionals.set(1);
      }
      if (struct.isSetTo()) {
        optionals.set(2);
      }
      if (struct.isSetSubject()) {
        optionals.set(3);
      }
      if (struct.isSetContent()) {
        optionals.set(4);
      }
      if (struct.isSetAccessories()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSettleId()) {
        oprot.writeI64(struct.settleId);
      }
      if (struct.isSetComeFrom()) {
        oprot.writeString(struct.comeFrom);
      }
      if (struct.isSetTo()) {
        oprot.writeString(struct.to);
      }
      if (struct.isSetSubject()) {
        oprot.writeString(struct.subject);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetAccessories()) {
        oprot.writeString(struct.accessories);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SendEmailModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.settleId = iprot.readI64();
        struct.setSettleIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.comeFrom = iprot.readString();
        struct.setComeFromIsSet(true);
      }
      if (incoming.get(2)) {
        struct.to = iprot.readString();
        struct.setToIsSet(true);
      }
      if (incoming.get(3)) {
        struct.subject = iprot.readString();
        struct.setSubjectIsSet(true);
      }
      if (incoming.get(4)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.accessories = iprot.readString();
        struct.setAccessoriesIsSet(true);
      }
    }
  }

}

