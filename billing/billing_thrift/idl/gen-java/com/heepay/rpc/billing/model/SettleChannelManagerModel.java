/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-23")
public class SettleChannelManagerModel implements org.apache.thrift.TBase<SettleChannelManagerModel, SettleChannelManagerModel._Fields>, java.io.Serializable, Cloneable, Comparable<SettleChannelManagerModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SettleChannelManagerModel");

  private static final org.apache.thrift.protocol.TField SETTLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settleId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CHANNEL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHANNEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("channelName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHANNEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REMOTE_ADRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAdress", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REMOTE_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteUserName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REMOTE_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("remotePassword", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LOCAL_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("localFilePath", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SettleChannelManagerModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SettleChannelManagerModelTupleSchemeFactory());
  }

  public long settleId; // required
  public String channelCode; // required
  public String channelName; // required
  public String channelType; // required
  public String remoteAdress; // required
  public String remoteUserName; // required
  public String remotePassword; // required
  public String localFilePath; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SETTLE_ID((short)1, "settleId"),
    CHANNEL_CODE((short)2, "channelCode"),
    CHANNEL_NAME((short)3, "channelName"),
    CHANNEL_TYPE((short)4, "channelType"),
    REMOTE_ADRESS((short)5, "remoteAdress"),
    REMOTE_USER_NAME((short)6, "remoteUserName"),
    REMOTE_PASSWORD((short)7, "remotePassword"),
    LOCAL_FILE_PATH((short)8, "localFilePath");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SETTLE_ID
          return SETTLE_ID;
        case 2: // CHANNEL_CODE
          return CHANNEL_CODE;
        case 3: // CHANNEL_NAME
          return CHANNEL_NAME;
        case 4: // CHANNEL_TYPE
          return CHANNEL_TYPE;
        case 5: // REMOTE_ADRESS
          return REMOTE_ADRESS;
        case 6: // REMOTE_USER_NAME
          return REMOTE_USER_NAME;
        case 7: // REMOTE_PASSWORD
          return REMOTE_PASSWORD;
        case 8: // LOCAL_FILE_PATH
          return LOCAL_FILE_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SETTLEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SETTLE_ID, new org.apache.thrift.meta_data.FieldMetaData("settleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHANNEL_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("channelName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("channelType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMOTE_ADRESS, new org.apache.thrift.meta_data.FieldMetaData("remoteAdress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMOTE_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("remoteUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMOTE_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("remotePassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCAL_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("localFilePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettleChannelManagerModel.class, metaDataMap);
  }

  public SettleChannelManagerModel() {
  }

  public SettleChannelManagerModel(
    long settleId,
    String channelCode,
    String channelName,
    String channelType,
    String remoteAdress,
    String remoteUserName,
    String remotePassword,
    String localFilePath)
  {
    this();
    this.settleId = settleId;
    setSettleIdIsSet(true);
    this.channelCode = channelCode;
    this.channelName = channelName;
    this.channelType = channelType;
    this.remoteAdress = remoteAdress;
    this.remoteUserName = remoteUserName;
    this.remotePassword = remotePassword;
    this.localFilePath = localFilePath;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SettleChannelManagerModel(SettleChannelManagerModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.settleId = other.settleId;
    if (other.isSetChannelCode()) {
      this.channelCode = other.channelCode;
    }
    if (other.isSetChannelName()) {
      this.channelName = other.channelName;
    }
    if (other.isSetChannelType()) {
      this.channelType = other.channelType;
    }
    if (other.isSetRemoteAdress()) {
      this.remoteAdress = other.remoteAdress;
    }
    if (other.isSetRemoteUserName()) {
      this.remoteUserName = other.remoteUserName;
    }
    if (other.isSetRemotePassword()) {
      this.remotePassword = other.remotePassword;
    }
    if (other.isSetLocalFilePath()) {
      this.localFilePath = other.localFilePath;
    }
  }

  public SettleChannelManagerModel deepCopy() {
    return new SettleChannelManagerModel(this);
  }

  @Override
  public void clear() {
    setSettleIdIsSet(false);
    this.settleId = 0;
    this.channelCode = null;
    this.channelName = null;
    this.channelType = null;
    this.remoteAdress = null;
    this.remoteUserName = null;
    this.remotePassword = null;
    this.localFilePath = null;
  }

  public long getSettleId() {
    return this.settleId;
  }

  public SettleChannelManagerModel setSettleId(long settleId) {
    this.settleId = settleId;
    setSettleIdIsSet(true);
    return this;
  }

  public void unsetSettleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEID_ISSET_ID);
  }

  /** Returns true if field settleId is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleId() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEID_ISSET_ID);
  }

  public void setSettleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEID_ISSET_ID, value);
  }

  public String getChannelCode() {
    return this.channelCode;
  }

  public SettleChannelManagerModel setChannelCode(String channelCode) {
    this.channelCode = channelCode;
    return this;
  }

  public void unsetChannelCode() {
    this.channelCode = null;
  }

  /** Returns true if field channelCode is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelCode() {
    return this.channelCode != null;
  }

  public void setChannelCodeIsSet(boolean value) {
    if (!value) {
      this.channelCode = null;
    }
  }

  public String getChannelName() {
    return this.channelName;
  }

  public SettleChannelManagerModel setChannelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  public void unsetChannelName() {
    this.channelName = null;
  }

  /** Returns true if field channelName is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelName() {
    return this.channelName != null;
  }

  public void setChannelNameIsSet(boolean value) {
    if (!value) {
      this.channelName = null;
    }
  }

  public String getChannelType() {
    return this.channelType;
  }

  public SettleChannelManagerModel setChannelType(String channelType) {
    this.channelType = channelType;
    return this;
  }

  public void unsetChannelType() {
    this.channelType = null;
  }

  /** Returns true if field channelType is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelType() {
    return this.channelType != null;
  }

  public void setChannelTypeIsSet(boolean value) {
    if (!value) {
      this.channelType = null;
    }
  }

  public String getRemoteAdress() {
    return this.remoteAdress;
  }

  public SettleChannelManagerModel setRemoteAdress(String remoteAdress) {
    this.remoteAdress = remoteAdress;
    return this;
  }

  public void unsetRemoteAdress() {
    this.remoteAdress = null;
  }

  /** Returns true if field remoteAdress is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoteAdress() {
    return this.remoteAdress != null;
  }

  public void setRemoteAdressIsSet(boolean value) {
    if (!value) {
      this.remoteAdress = null;
    }
  }

  public String getRemoteUserName() {
    return this.remoteUserName;
  }

  public SettleChannelManagerModel setRemoteUserName(String remoteUserName) {
    this.remoteUserName = remoteUserName;
    return this;
  }

  public void unsetRemoteUserName() {
    this.remoteUserName = null;
  }

  /** Returns true if field remoteUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoteUserName() {
    return this.remoteUserName != null;
  }

  public void setRemoteUserNameIsSet(boolean value) {
    if (!value) {
      this.remoteUserName = null;
    }
  }

  public String getRemotePassword() {
    return this.remotePassword;
  }

  public SettleChannelManagerModel setRemotePassword(String remotePassword) {
    this.remotePassword = remotePassword;
    return this;
  }

  public void unsetRemotePassword() {
    this.remotePassword = null;
  }

  /** Returns true if field remotePassword is set (has been assigned a value) and false otherwise */
  public boolean isSetRemotePassword() {
    return this.remotePassword != null;
  }

  public void setRemotePasswordIsSet(boolean value) {
    if (!value) {
      this.remotePassword = null;
    }
  }

  public String getLocalFilePath() {
    return this.localFilePath;
  }

  public SettleChannelManagerModel setLocalFilePath(String localFilePath) {
    this.localFilePath = localFilePath;
    return this;
  }

  public void unsetLocalFilePath() {
    this.localFilePath = null;
  }

  /** Returns true if field localFilePath is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalFilePath() {
    return this.localFilePath != null;
  }

  public void setLocalFilePathIsSet(boolean value) {
    if (!value) {
      this.localFilePath = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SETTLE_ID:
      if (value == null) {
        unsetSettleId();
      } else {
        setSettleId((Long)value);
      }
      break;

    case CHANNEL_CODE:
      if (value == null) {
        unsetChannelCode();
      } else {
        setChannelCode((String)value);
      }
      break;

    case CHANNEL_NAME:
      if (value == null) {
        unsetChannelName();
      } else {
        setChannelName((String)value);
      }
      break;

    case CHANNEL_TYPE:
      if (value == null) {
        unsetChannelType();
      } else {
        setChannelType((String)value);
      }
      break;

    case REMOTE_ADRESS:
      if (value == null) {
        unsetRemoteAdress();
      } else {
        setRemoteAdress((String)value);
      }
      break;

    case REMOTE_USER_NAME:
      if (value == null) {
        unsetRemoteUserName();
      } else {
        setRemoteUserName((String)value);
      }
      break;

    case REMOTE_PASSWORD:
      if (value == null) {
        unsetRemotePassword();
      } else {
        setRemotePassword((String)value);
      }
      break;

    case LOCAL_FILE_PATH:
      if (value == null) {
        unsetLocalFilePath();
      } else {
        setLocalFilePath((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SETTLE_ID:
      return getSettleId();

    case CHANNEL_CODE:
      return getChannelCode();

    case CHANNEL_NAME:
      return getChannelName();

    case CHANNEL_TYPE:
      return getChannelType();

    case REMOTE_ADRESS:
      return getRemoteAdress();

    case REMOTE_USER_NAME:
      return getRemoteUserName();

    case REMOTE_PASSWORD:
      return getRemotePassword();

    case LOCAL_FILE_PATH:
      return getLocalFilePath();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SETTLE_ID:
      return isSetSettleId();
    case CHANNEL_CODE:
      return isSetChannelCode();
    case CHANNEL_NAME:
      return isSetChannelName();
    case CHANNEL_TYPE:
      return isSetChannelType();
    case REMOTE_ADRESS:
      return isSetRemoteAdress();
    case REMOTE_USER_NAME:
      return isSetRemoteUserName();
    case REMOTE_PASSWORD:
      return isSetRemotePassword();
    case LOCAL_FILE_PATH:
      return isSetLocalFilePath();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SettleChannelManagerModel)
      return this.equals((SettleChannelManagerModel)that);
    return false;
  }

  public boolean equals(SettleChannelManagerModel that) {
    if (that == null)
      return false;

    boolean this_present_settleId = true;
    boolean that_present_settleId = true;
    if (this_present_settleId || that_present_settleId) {
      if (!(this_present_settleId && that_present_settleId))
        return false;
      if (this.settleId != that.settleId)
        return false;
    }

    boolean this_present_channelCode = true && this.isSetChannelCode();
    boolean that_present_channelCode = true && that.isSetChannelCode();
    if (this_present_channelCode || that_present_channelCode) {
      if (!(this_present_channelCode && that_present_channelCode))
        return false;
      if (!this.channelCode.equals(that.channelCode))
        return false;
    }

    boolean this_present_channelName = true && this.isSetChannelName();
    boolean that_present_channelName = true && that.isSetChannelName();
    if (this_present_channelName || that_present_channelName) {
      if (!(this_present_channelName && that_present_channelName))
        return false;
      if (!this.channelName.equals(that.channelName))
        return false;
    }

    boolean this_present_channelType = true && this.isSetChannelType();
    boolean that_present_channelType = true && that.isSetChannelType();
    if (this_present_channelType || that_present_channelType) {
      if (!(this_present_channelType && that_present_channelType))
        return false;
      if (!this.channelType.equals(that.channelType))
        return false;
    }

    boolean this_present_remoteAdress = true && this.isSetRemoteAdress();
    boolean that_present_remoteAdress = true && that.isSetRemoteAdress();
    if (this_present_remoteAdress || that_present_remoteAdress) {
      if (!(this_present_remoteAdress && that_present_remoteAdress))
        return false;
      if (!this.remoteAdress.equals(that.remoteAdress))
        return false;
    }

    boolean this_present_remoteUserName = true && this.isSetRemoteUserName();
    boolean that_present_remoteUserName = true && that.isSetRemoteUserName();
    if (this_present_remoteUserName || that_present_remoteUserName) {
      if (!(this_present_remoteUserName && that_present_remoteUserName))
        return false;
      if (!this.remoteUserName.equals(that.remoteUserName))
        return false;
    }

    boolean this_present_remotePassword = true && this.isSetRemotePassword();
    boolean that_present_remotePassword = true && that.isSetRemotePassword();
    if (this_present_remotePassword || that_present_remotePassword) {
      if (!(this_present_remotePassword && that_present_remotePassword))
        return false;
      if (!this.remotePassword.equals(that.remotePassword))
        return false;
    }

    boolean this_present_localFilePath = true && this.isSetLocalFilePath();
    boolean that_present_localFilePath = true && that.isSetLocalFilePath();
    if (this_present_localFilePath || that_present_localFilePath) {
      if (!(this_present_localFilePath && that_present_localFilePath))
        return false;
      if (!this.localFilePath.equals(that.localFilePath))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_settleId = true;
    list.add(present_settleId);
    if (present_settleId)
      list.add(settleId);

    boolean present_channelCode = true && (isSetChannelCode());
    list.add(present_channelCode);
    if (present_channelCode)
      list.add(channelCode);

    boolean present_channelName = true && (isSetChannelName());
    list.add(present_channelName);
    if (present_channelName)
      list.add(channelName);

    boolean present_channelType = true && (isSetChannelType());
    list.add(present_channelType);
    if (present_channelType)
      list.add(channelType);

    boolean present_remoteAdress = true && (isSetRemoteAdress());
    list.add(present_remoteAdress);
    if (present_remoteAdress)
      list.add(remoteAdress);

    boolean present_remoteUserName = true && (isSetRemoteUserName());
    list.add(present_remoteUserName);
    if (present_remoteUserName)
      list.add(remoteUserName);

    boolean present_remotePassword = true && (isSetRemotePassword());
    list.add(present_remotePassword);
    if (present_remotePassword)
      list.add(remotePassword);

    boolean present_localFilePath = true && (isSetLocalFilePath());
    list.add(present_localFilePath);
    if (present_localFilePath)
      list.add(localFilePath);

    return list.hashCode();
  }

  @Override
  public int compareTo(SettleChannelManagerModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSettleId()).compareTo(other.isSetSettleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleId, other.settleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelCode()).compareTo(other.isSetChannelCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCode, other.channelCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelName()).compareTo(other.isSetChannelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelName, other.channelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelType()).compareTo(other.isSetChannelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelType, other.channelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoteAdress()).compareTo(other.isSetRemoteAdress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteAdress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAdress, other.remoteAdress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoteUserName()).compareTo(other.isSetRemoteUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteUserName, other.remoteUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemotePassword()).compareTo(other.isSetRemotePassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemotePassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remotePassword, other.remotePassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalFilePath()).compareTo(other.isSetLocalFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localFilePath, other.localFilePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SettleChannelManagerModel(");
    boolean first = true;

    sb.append("settleId:");
    sb.append(this.settleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelCode:");
    if (this.channelCode == null) {
      sb.append("null");
    } else {
      sb.append(this.channelCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelName:");
    if (this.channelName == null) {
      sb.append("null");
    } else {
      sb.append(this.channelName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelType:");
    if (this.channelType == null) {
      sb.append("null");
    } else {
      sb.append(this.channelType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remoteAdress:");
    if (this.remoteAdress == null) {
      sb.append("null");
    } else {
      sb.append(this.remoteAdress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remoteUserName:");
    if (this.remoteUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.remoteUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remotePassword:");
    if (this.remotePassword == null) {
      sb.append("null");
    } else {
      sb.append(this.remotePassword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("localFilePath:");
    if (this.localFilePath == null) {
      sb.append("null");
    } else {
      sb.append(this.localFilePath);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettleChannelManagerModelStandardSchemeFactory implements SchemeFactory {
    public SettleChannelManagerModelStandardScheme getScheme() {
      return new SettleChannelManagerModelStandardScheme();
    }
  }

  private static class SettleChannelManagerModelStandardScheme extends StandardScheme<SettleChannelManagerModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SettleChannelManagerModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SETTLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.settleId = iprot.readI64();
              struct.setSettleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHANNEL_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelCode = iprot.readString();
              struct.setChannelCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHANNEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelName = iprot.readString();
              struct.setChannelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANNEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelType = iprot.readString();
              struct.setChannelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REMOTE_ADRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remoteAdress = iprot.readString();
              struct.setRemoteAdressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REMOTE_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remoteUserName = iprot.readString();
              struct.setRemoteUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMOTE_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remotePassword = iprot.readString();
              struct.setRemotePasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOCAL_FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.localFilePath = iprot.readString();
              struct.setLocalFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SettleChannelManagerModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SETTLE_ID_FIELD_DESC);
      oprot.writeI64(struct.settleId);
      oprot.writeFieldEnd();
      if (struct.channelCode != null) {
        oprot.writeFieldBegin(CHANNEL_CODE_FIELD_DESC);
        oprot.writeString(struct.channelCode);
        oprot.writeFieldEnd();
      }
      if (struct.channelName != null) {
        oprot.writeFieldBegin(CHANNEL_NAME_FIELD_DESC);
        oprot.writeString(struct.channelName);
        oprot.writeFieldEnd();
      }
      if (struct.channelType != null) {
        oprot.writeFieldBegin(CHANNEL_TYPE_FIELD_DESC);
        oprot.writeString(struct.channelType);
        oprot.writeFieldEnd();
      }
      if (struct.remoteAdress != null) {
        oprot.writeFieldBegin(REMOTE_ADRESS_FIELD_DESC);
        oprot.writeString(struct.remoteAdress);
        oprot.writeFieldEnd();
      }
      if (struct.remoteUserName != null) {
        oprot.writeFieldBegin(REMOTE_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.remoteUserName);
        oprot.writeFieldEnd();
      }
      if (struct.remotePassword != null) {
        oprot.writeFieldBegin(REMOTE_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.remotePassword);
        oprot.writeFieldEnd();
      }
      if (struct.localFilePath != null) {
        oprot.writeFieldBegin(LOCAL_FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.localFilePath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SettleChannelManagerModelTupleSchemeFactory implements SchemeFactory {
    public SettleChannelManagerModelTupleScheme getScheme() {
      return new SettleChannelManagerModelTupleScheme();
    }
  }

  private static class SettleChannelManagerModelTupleScheme extends TupleScheme<SettleChannelManagerModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SettleChannelManagerModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSettleId()) {
        optionals.set(0);
      }
      if (struct.isSetChannelCode()) {
        optionals.set(1);
      }
      if (struct.isSetChannelName()) {
        optionals.set(2);
      }
      if (struct.isSetChannelType()) {
        optionals.set(3);
      }
      if (struct.isSetRemoteAdress()) {
        optionals.set(4);
      }
      if (struct.isSetRemoteUserName()) {
        optionals.set(5);
      }
      if (struct.isSetRemotePassword()) {
        optionals.set(6);
      }
      if (struct.isSetLocalFilePath()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetSettleId()) {
        oprot.writeI64(struct.settleId);
      }
      if (struct.isSetChannelCode()) {
        oprot.writeString(struct.channelCode);
      }
      if (struct.isSetChannelName()) {
        oprot.writeString(struct.channelName);
      }
      if (struct.isSetChannelType()) {
        oprot.writeString(struct.channelType);
      }
      if (struct.isSetRemoteAdress()) {
        oprot.writeString(struct.remoteAdress);
      }
      if (struct.isSetRemoteUserName()) {
        oprot.writeString(struct.remoteUserName);
      }
      if (struct.isSetRemotePassword()) {
        oprot.writeString(struct.remotePassword);
      }
      if (struct.isSetLocalFilePath()) {
        oprot.writeString(struct.localFilePath);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SettleChannelManagerModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.settleId = iprot.readI64();
        struct.setSettleIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.channelCode = iprot.readString();
        struct.setChannelCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.channelName = iprot.readString();
        struct.setChannelNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.channelType = iprot.readString();
        struct.setChannelTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.remoteAdress = iprot.readString();
        struct.setRemoteAdressIsSet(true);
      }
      if (incoming.get(5)) {
        struct.remoteUserName = iprot.readString();
        struct.setRemoteUserNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.remotePassword = iprot.readString();
        struct.setRemotePasswordIsSet(true);
      }
      if (incoming.get(7)) {
        struct.localFilePath = iprot.readString();
        struct.setLocalFilePathIsSet(true);
      }
    }
  }

}

