/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-21")
public class SettleMerchantRecordModel implements org.apache.thrift.TBase<SettleMerchantRecordModel, SettleMerchantRecordModel._Fields>, java.io.Serializable, Cloneable, Comparable<SettleMerchantRecordModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SettleMerchantRecordModel");

  private static final org.apache.thrift.protocol.TField SETTLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settleId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MERCHANT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("productCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PAY_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("payNum", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CHECK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("checkTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SETTLE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("settleTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SETTLE_CYC_FIELD_DESC = new org.apache.thrift.protocol.TField("settleCyc", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SETTLE_BATH_FIELD_DESC = new org.apache.thrift.protocol.TField("settleBath", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SETTLE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("settleAmount", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField FEE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("feeTime", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField TOTAL_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalFee", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField FEE_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("feeWay", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField FEE_SETTLE_CYC_FIELD_DESC = new org.apache.thrift.protocol.TField("feeSettleCyc", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CHECK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkStatus", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField SETTLE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("settleStatus", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SettleMerchantRecordModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SettleMerchantRecordModelTupleSchemeFactory());
  }

  public long settleId; // required
  public int merchantId; // required
  public String merchantType; // required
  public String productCode; // required
  public String currency; // required
  public int payNum; // required
  public String totalAmount; // required
  public String checkTime; // required
  public String settleTime; // required
  public String settleCyc; // required
  public String settleBath; // required
  public String settleAmount; // required
  public String feeTime; // required
  public String totalFee; // required
  public String feeWay; // required
  public String feeSettleCyc; // required
  public String checkStatus; // required
  public String settleStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SETTLE_ID((short)1, "settleId"),
    MERCHANT_ID((short)2, "merchantId"),
    MERCHANT_TYPE((short)3, "merchantType"),
    PRODUCT_CODE((short)4, "productCode"),
    CURRENCY((short)5, "currency"),
    PAY_NUM((short)6, "payNum"),
    TOTAL_AMOUNT((short)7, "totalAmount"),
    CHECK_TIME((short)8, "checkTime"),
    SETTLE_TIME((short)9, "settleTime"),
    SETTLE_CYC((short)10, "settleCyc"),
    SETTLE_BATH((short)11, "settleBath"),
    SETTLE_AMOUNT((short)12, "settleAmount"),
    FEE_TIME((short)13, "feeTime"),
    TOTAL_FEE((short)14, "totalFee"),
    FEE_WAY((short)15, "feeWay"),
    FEE_SETTLE_CYC((short)16, "feeSettleCyc"),
    CHECK_STATUS((short)17, "checkStatus"),
    SETTLE_STATUS((short)18, "settleStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SETTLE_ID
          return SETTLE_ID;
        case 2: // MERCHANT_ID
          return MERCHANT_ID;
        case 3: // MERCHANT_TYPE
          return MERCHANT_TYPE;
        case 4: // PRODUCT_CODE
          return PRODUCT_CODE;
        case 5: // CURRENCY
          return CURRENCY;
        case 6: // PAY_NUM
          return PAY_NUM;
        case 7: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 8: // CHECK_TIME
          return CHECK_TIME;
        case 9: // SETTLE_TIME
          return SETTLE_TIME;
        case 10: // SETTLE_CYC
          return SETTLE_CYC;
        case 11: // SETTLE_BATH
          return SETTLE_BATH;
        case 12: // SETTLE_AMOUNT
          return SETTLE_AMOUNT;
        case 13: // FEE_TIME
          return FEE_TIME;
        case 14: // TOTAL_FEE
          return TOTAL_FEE;
        case 15: // FEE_WAY
          return FEE_WAY;
        case 16: // FEE_SETTLE_CYC
          return FEE_SETTLE_CYC;
        case 17: // CHECK_STATUS
          return CHECK_STATUS;
        case 18: // SETTLE_STATUS
          return SETTLE_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SETTLEID_ISSET_ID = 0;
  private static final int __MERCHANTID_ISSET_ID = 1;
  private static final int __PAYNUM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SETTLE_ID, new org.apache.thrift.meta_data.FieldMetaData("settleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MERCHANT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("merchantType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("productCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_NUM, new org.apache.thrift.meta_data.FieldMetaData("payNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_TIME, new org.apache.thrift.meta_data.FieldMetaData("checkTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_TIME, new org.apache.thrift.meta_data.FieldMetaData("settleTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_CYC, new org.apache.thrift.meta_data.FieldMetaData("settleCyc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_BATH, new org.apache.thrift.meta_data.FieldMetaData("settleBath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("settleAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE_TIME, new org.apache.thrift.meta_data.FieldMetaData("feeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_FEE, new org.apache.thrift.meta_data.FieldMetaData("totalFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE_WAY, new org.apache.thrift.meta_data.FieldMetaData("feeWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE_SETTLE_CYC, new org.apache.thrift.meta_data.FieldMetaData("feeSettleCyc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("checkStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("settleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettleMerchantRecordModel.class, metaDataMap);
  }

  public SettleMerchantRecordModel() {
  }

  public SettleMerchantRecordModel(
    long settleId,
    int merchantId,
    String merchantType,
    String productCode,
    String currency,
    int payNum,
    String totalAmount,
    String checkTime,
    String settleTime,
    String settleCyc,
    String settleBath,
    String settleAmount,
    String feeTime,
    String totalFee,
    String feeWay,
    String feeSettleCyc,
    String checkStatus,
    String settleStatus)
  {
    this();
    this.settleId = settleId;
    setSettleIdIsSet(true);
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    this.merchantType = merchantType;
    this.productCode = productCode;
    this.currency = currency;
    this.payNum = payNum;
    setPayNumIsSet(true);
    this.totalAmount = totalAmount;
    this.checkTime = checkTime;
    this.settleTime = settleTime;
    this.settleCyc = settleCyc;
    this.settleBath = settleBath;
    this.settleAmount = settleAmount;
    this.feeTime = feeTime;
    this.totalFee = totalFee;
    this.feeWay = feeWay;
    this.feeSettleCyc = feeSettleCyc;
    this.checkStatus = checkStatus;
    this.settleStatus = settleStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SettleMerchantRecordModel(SettleMerchantRecordModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.settleId = other.settleId;
    this.merchantId = other.merchantId;
    if (other.isSetMerchantType()) {
      this.merchantType = other.merchantType;
    }
    if (other.isSetProductCode()) {
      this.productCode = other.productCode;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.payNum = other.payNum;
    if (other.isSetTotalAmount()) {
      this.totalAmount = other.totalAmount;
    }
    if (other.isSetCheckTime()) {
      this.checkTime = other.checkTime;
    }
    if (other.isSetSettleTime()) {
      this.settleTime = other.settleTime;
    }
    if (other.isSetSettleCyc()) {
      this.settleCyc = other.settleCyc;
    }
    if (other.isSetSettleBath()) {
      this.settleBath = other.settleBath;
    }
    if (other.isSetSettleAmount()) {
      this.settleAmount = other.settleAmount;
    }
    if (other.isSetFeeTime()) {
      this.feeTime = other.feeTime;
    }
    if (other.isSetTotalFee()) {
      this.totalFee = other.totalFee;
    }
    if (other.isSetFeeWay()) {
      this.feeWay = other.feeWay;
    }
    if (other.isSetFeeSettleCyc()) {
      this.feeSettleCyc = other.feeSettleCyc;
    }
    if (other.isSetCheckStatus()) {
      this.checkStatus = other.checkStatus;
    }
    if (other.isSetSettleStatus()) {
      this.settleStatus = other.settleStatus;
    }
  }

  public SettleMerchantRecordModel deepCopy() {
    return new SettleMerchantRecordModel(this);
  }

  @Override
  public void clear() {
    setSettleIdIsSet(false);
    this.settleId = 0;
    setMerchantIdIsSet(false);
    this.merchantId = 0;
    this.merchantType = null;
    this.productCode = null;
    this.currency = null;
    setPayNumIsSet(false);
    this.payNum = 0;
    this.totalAmount = null;
    this.checkTime = null;
    this.settleTime = null;
    this.settleCyc = null;
    this.settleBath = null;
    this.settleAmount = null;
    this.feeTime = null;
    this.totalFee = null;
    this.feeWay = null;
    this.feeSettleCyc = null;
    this.checkStatus = null;
    this.settleStatus = null;
  }

  public long getSettleId() {
    return this.settleId;
  }

  public SettleMerchantRecordModel setSettleId(long settleId) {
    this.settleId = settleId;
    setSettleIdIsSet(true);
    return this;
  }

  public void unsetSettleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEID_ISSET_ID);
  }

  /** Returns true if field settleId is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleId() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEID_ISSET_ID);
  }

  public void setSettleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEID_ISSET_ID, value);
  }

  public int getMerchantId() {
    return this.merchantId;
  }

  public SettleMerchantRecordModel setMerchantId(int merchantId) {
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    return this;
  }

  public void unsetMerchantId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  public void setMerchantIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTID_ISSET_ID, value);
  }

  public String getMerchantType() {
    return this.merchantType;
  }

  public SettleMerchantRecordModel setMerchantType(String merchantType) {
    this.merchantType = merchantType;
    return this;
  }

  public void unsetMerchantType() {
    this.merchantType = null;
  }

  /** Returns true if field merchantType is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantType() {
    return this.merchantType != null;
  }

  public void setMerchantTypeIsSet(boolean value) {
    if (!value) {
      this.merchantType = null;
    }
  }

  public String getProductCode() {
    return this.productCode;
  }

  public SettleMerchantRecordModel setProductCode(String productCode) {
    this.productCode = productCode;
    return this;
  }

  public void unsetProductCode() {
    this.productCode = null;
  }

  /** Returns true if field productCode is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCode() {
    return this.productCode != null;
  }

  public void setProductCodeIsSet(boolean value) {
    if (!value) {
      this.productCode = null;
    }
  }

  public String getCurrency() {
    return this.currency;
  }

  public SettleMerchantRecordModel setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public int getPayNum() {
    return this.payNum;
  }

  public SettleMerchantRecordModel setPayNum(int payNum) {
    this.payNum = payNum;
    setPayNumIsSet(true);
    return this;
  }

  public void unsetPayNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYNUM_ISSET_ID);
  }

  /** Returns true if field payNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPayNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYNUM_ISSET_ID);
  }

  public void setPayNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYNUM_ISSET_ID, value);
  }

  public String getTotalAmount() {
    return this.totalAmount;
  }

  public SettleMerchantRecordModel setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  public void unsetTotalAmount() {
    this.totalAmount = null;
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return this.totalAmount != null;
  }

  public void setTotalAmountIsSet(boolean value) {
    if (!value) {
      this.totalAmount = null;
    }
  }

  public String getCheckTime() {
    return this.checkTime;
  }

  public SettleMerchantRecordModel setCheckTime(String checkTime) {
    this.checkTime = checkTime;
    return this;
  }

  public void unsetCheckTime() {
    this.checkTime = null;
  }

  /** Returns true if field checkTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckTime() {
    return this.checkTime != null;
  }

  public void setCheckTimeIsSet(boolean value) {
    if (!value) {
      this.checkTime = null;
    }
  }

  public String getSettleTime() {
    return this.settleTime;
  }

  public SettleMerchantRecordModel setSettleTime(String settleTime) {
    this.settleTime = settleTime;
    return this;
  }

  public void unsetSettleTime() {
    this.settleTime = null;
  }

  /** Returns true if field settleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleTime() {
    return this.settleTime != null;
  }

  public void setSettleTimeIsSet(boolean value) {
    if (!value) {
      this.settleTime = null;
    }
  }

  public String getSettleCyc() {
    return this.settleCyc;
  }

  public SettleMerchantRecordModel setSettleCyc(String settleCyc) {
    this.settleCyc = settleCyc;
    return this;
  }

  public void unsetSettleCyc() {
    this.settleCyc = null;
  }

  /** Returns true if field settleCyc is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleCyc() {
    return this.settleCyc != null;
  }

  public void setSettleCycIsSet(boolean value) {
    if (!value) {
      this.settleCyc = null;
    }
  }

  public String getSettleBath() {
    return this.settleBath;
  }

  public SettleMerchantRecordModel setSettleBath(String settleBath) {
    this.settleBath = settleBath;
    return this;
  }

  public void unsetSettleBath() {
    this.settleBath = null;
  }

  /** Returns true if field settleBath is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleBath() {
    return this.settleBath != null;
  }

  public void setSettleBathIsSet(boolean value) {
    if (!value) {
      this.settleBath = null;
    }
  }

  public String getSettleAmount() {
    return this.settleAmount;
  }

  public SettleMerchantRecordModel setSettleAmount(String settleAmount) {
    this.settleAmount = settleAmount;
    return this;
  }

  public void unsetSettleAmount() {
    this.settleAmount = null;
  }

  /** Returns true if field settleAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleAmount() {
    return this.settleAmount != null;
  }

  public void setSettleAmountIsSet(boolean value) {
    if (!value) {
      this.settleAmount = null;
    }
  }

  public String getFeeTime() {
    return this.feeTime;
  }

  public SettleMerchantRecordModel setFeeTime(String feeTime) {
    this.feeTime = feeTime;
    return this;
  }

  public void unsetFeeTime() {
    this.feeTime = null;
  }

  /** Returns true if field feeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeTime() {
    return this.feeTime != null;
  }

  public void setFeeTimeIsSet(boolean value) {
    if (!value) {
      this.feeTime = null;
    }
  }

  public String getTotalFee() {
    return this.totalFee;
  }

  public SettleMerchantRecordModel setTotalFee(String totalFee) {
    this.totalFee = totalFee;
    return this;
  }

  public void unsetTotalFee() {
    this.totalFee = null;
  }

  /** Returns true if field totalFee is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalFee() {
    return this.totalFee != null;
  }

  public void setTotalFeeIsSet(boolean value) {
    if (!value) {
      this.totalFee = null;
    }
  }

  public String getFeeWay() {
    return this.feeWay;
  }

  public SettleMerchantRecordModel setFeeWay(String feeWay) {
    this.feeWay = feeWay;
    return this;
  }

  public void unsetFeeWay() {
    this.feeWay = null;
  }

  /** Returns true if field feeWay is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeWay() {
    return this.feeWay != null;
  }

  public void setFeeWayIsSet(boolean value) {
    if (!value) {
      this.feeWay = null;
    }
  }

  public String getFeeSettleCyc() {
    return this.feeSettleCyc;
  }

  public SettleMerchantRecordModel setFeeSettleCyc(String feeSettleCyc) {
    this.feeSettleCyc = feeSettleCyc;
    return this;
  }

  public void unsetFeeSettleCyc() {
    this.feeSettleCyc = null;
  }

  /** Returns true if field feeSettleCyc is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeSettleCyc() {
    return this.feeSettleCyc != null;
  }

  public void setFeeSettleCycIsSet(boolean value) {
    if (!value) {
      this.feeSettleCyc = null;
    }
  }

  public String getCheckStatus() {
    return this.checkStatus;
  }

  public SettleMerchantRecordModel setCheckStatus(String checkStatus) {
    this.checkStatus = checkStatus;
    return this;
  }

  public void unsetCheckStatus() {
    this.checkStatus = null;
  }

  /** Returns true if field checkStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckStatus() {
    return this.checkStatus != null;
  }

  public void setCheckStatusIsSet(boolean value) {
    if (!value) {
      this.checkStatus = null;
    }
  }

  public String getSettleStatus() {
    return this.settleStatus;
  }

  public SettleMerchantRecordModel setSettleStatus(String settleStatus) {
    this.settleStatus = settleStatus;
    return this;
  }

  public void unsetSettleStatus() {
    this.settleStatus = null;
  }

  /** Returns true if field settleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleStatus() {
    return this.settleStatus != null;
  }

  public void setSettleStatusIsSet(boolean value) {
    if (!value) {
      this.settleStatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SETTLE_ID:
      if (value == null) {
        unsetSettleId();
      } else {
        setSettleId((Long)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((Integer)value);
      }
      break;

    case MERCHANT_TYPE:
      if (value == null) {
        unsetMerchantType();
      } else {
        setMerchantType((String)value);
      }
      break;

    case PRODUCT_CODE:
      if (value == null) {
        unsetProductCode();
      } else {
        setProductCode((String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case PAY_NUM:
      if (value == null) {
        unsetPayNum();
      } else {
        setPayNum((Integer)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((String)value);
      }
      break;

    case CHECK_TIME:
      if (value == null) {
        unsetCheckTime();
      } else {
        setCheckTime((String)value);
      }
      break;

    case SETTLE_TIME:
      if (value == null) {
        unsetSettleTime();
      } else {
        setSettleTime((String)value);
      }
      break;

    case SETTLE_CYC:
      if (value == null) {
        unsetSettleCyc();
      } else {
        setSettleCyc((String)value);
      }
      break;

    case SETTLE_BATH:
      if (value == null) {
        unsetSettleBath();
      } else {
        setSettleBath((String)value);
      }
      break;

    case SETTLE_AMOUNT:
      if (value == null) {
        unsetSettleAmount();
      } else {
        setSettleAmount((String)value);
      }
      break;

    case FEE_TIME:
      if (value == null) {
        unsetFeeTime();
      } else {
        setFeeTime((String)value);
      }
      break;

    case TOTAL_FEE:
      if (value == null) {
        unsetTotalFee();
      } else {
        setTotalFee((String)value);
      }
      break;

    case FEE_WAY:
      if (value == null) {
        unsetFeeWay();
      } else {
        setFeeWay((String)value);
      }
      break;

    case FEE_SETTLE_CYC:
      if (value == null) {
        unsetFeeSettleCyc();
      } else {
        setFeeSettleCyc((String)value);
      }
      break;

    case CHECK_STATUS:
      if (value == null) {
        unsetCheckStatus();
      } else {
        setCheckStatus((String)value);
      }
      break;

    case SETTLE_STATUS:
      if (value == null) {
        unsetSettleStatus();
      } else {
        setSettleStatus((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SETTLE_ID:
      return getSettleId();

    case MERCHANT_ID:
      return getMerchantId();

    case MERCHANT_TYPE:
      return getMerchantType();

    case PRODUCT_CODE:
      return getProductCode();

    case CURRENCY:
      return getCurrency();

    case PAY_NUM:
      return getPayNum();

    case TOTAL_AMOUNT:
      return getTotalAmount();

    case CHECK_TIME:
      return getCheckTime();

    case SETTLE_TIME:
      return getSettleTime();

    case SETTLE_CYC:
      return getSettleCyc();

    case SETTLE_BATH:
      return getSettleBath();

    case SETTLE_AMOUNT:
      return getSettleAmount();

    case FEE_TIME:
      return getFeeTime();

    case TOTAL_FEE:
      return getTotalFee();

    case FEE_WAY:
      return getFeeWay();

    case FEE_SETTLE_CYC:
      return getFeeSettleCyc();

    case CHECK_STATUS:
      return getCheckStatus();

    case SETTLE_STATUS:
      return getSettleStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SETTLE_ID:
      return isSetSettleId();
    case MERCHANT_ID:
      return isSetMerchantId();
    case MERCHANT_TYPE:
      return isSetMerchantType();
    case PRODUCT_CODE:
      return isSetProductCode();
    case CURRENCY:
      return isSetCurrency();
    case PAY_NUM:
      return isSetPayNum();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case CHECK_TIME:
      return isSetCheckTime();
    case SETTLE_TIME:
      return isSetSettleTime();
    case SETTLE_CYC:
      return isSetSettleCyc();
    case SETTLE_BATH:
      return isSetSettleBath();
    case SETTLE_AMOUNT:
      return isSetSettleAmount();
    case FEE_TIME:
      return isSetFeeTime();
    case TOTAL_FEE:
      return isSetTotalFee();
    case FEE_WAY:
      return isSetFeeWay();
    case FEE_SETTLE_CYC:
      return isSetFeeSettleCyc();
    case CHECK_STATUS:
      return isSetCheckStatus();
    case SETTLE_STATUS:
      return isSetSettleStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SettleMerchantRecordModel)
      return this.equals((SettleMerchantRecordModel)that);
    return false;
  }

  public boolean equals(SettleMerchantRecordModel that) {
    if (that == null)
      return false;

    boolean this_present_settleId = true;
    boolean that_present_settleId = true;
    if (this_present_settleId || that_present_settleId) {
      if (!(this_present_settleId && that_present_settleId))
        return false;
      if (this.settleId != that.settleId)
        return false;
    }

    boolean this_present_merchantId = true;
    boolean that_present_merchantId = true;
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (this.merchantId != that.merchantId)
        return false;
    }

    boolean this_present_merchantType = true && this.isSetMerchantType();
    boolean that_present_merchantType = true && that.isSetMerchantType();
    if (this_present_merchantType || that_present_merchantType) {
      if (!(this_present_merchantType && that_present_merchantType))
        return false;
      if (!this.merchantType.equals(that.merchantType))
        return false;
    }

    boolean this_present_productCode = true && this.isSetProductCode();
    boolean that_present_productCode = true && that.isSetProductCode();
    if (this_present_productCode || that_present_productCode) {
      if (!(this_present_productCode && that_present_productCode))
        return false;
      if (!this.productCode.equals(that.productCode))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_payNum = true;
    boolean that_present_payNum = true;
    if (this_present_payNum || that_present_payNum) {
      if (!(this_present_payNum && that_present_payNum))
        return false;
      if (this.payNum != that.payNum)
        return false;
    }

    boolean this_present_totalAmount = true && this.isSetTotalAmount();
    boolean that_present_totalAmount = true && that.isSetTotalAmount();
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (!this.totalAmount.equals(that.totalAmount))
        return false;
    }

    boolean this_present_checkTime = true && this.isSetCheckTime();
    boolean that_present_checkTime = true && that.isSetCheckTime();
    if (this_present_checkTime || that_present_checkTime) {
      if (!(this_present_checkTime && that_present_checkTime))
        return false;
      if (!this.checkTime.equals(that.checkTime))
        return false;
    }

    boolean this_present_settleTime = true && this.isSetSettleTime();
    boolean that_present_settleTime = true && that.isSetSettleTime();
    if (this_present_settleTime || that_present_settleTime) {
      if (!(this_present_settleTime && that_present_settleTime))
        return false;
      if (!this.settleTime.equals(that.settleTime))
        return false;
    }

    boolean this_present_settleCyc = true && this.isSetSettleCyc();
    boolean that_present_settleCyc = true && that.isSetSettleCyc();
    if (this_present_settleCyc || that_present_settleCyc) {
      if (!(this_present_settleCyc && that_present_settleCyc))
        return false;
      if (!this.settleCyc.equals(that.settleCyc))
        return false;
    }

    boolean this_present_settleBath = true && this.isSetSettleBath();
    boolean that_present_settleBath = true && that.isSetSettleBath();
    if (this_present_settleBath || that_present_settleBath) {
      if (!(this_present_settleBath && that_present_settleBath))
        return false;
      if (!this.settleBath.equals(that.settleBath))
        return false;
    }

    boolean this_present_settleAmount = true && this.isSetSettleAmount();
    boolean that_present_settleAmount = true && that.isSetSettleAmount();
    if (this_present_settleAmount || that_present_settleAmount) {
      if (!(this_present_settleAmount && that_present_settleAmount))
        return false;
      if (!this.settleAmount.equals(that.settleAmount))
        return false;
    }

    boolean this_present_feeTime = true && this.isSetFeeTime();
    boolean that_present_feeTime = true && that.isSetFeeTime();
    if (this_present_feeTime || that_present_feeTime) {
      if (!(this_present_feeTime && that_present_feeTime))
        return false;
      if (!this.feeTime.equals(that.feeTime))
        return false;
    }

    boolean this_present_totalFee = true && this.isSetTotalFee();
    boolean that_present_totalFee = true && that.isSetTotalFee();
    if (this_present_totalFee || that_present_totalFee) {
      if (!(this_present_totalFee && that_present_totalFee))
        return false;
      if (!this.totalFee.equals(that.totalFee))
        return false;
    }

    boolean this_present_feeWay = true && this.isSetFeeWay();
    boolean that_present_feeWay = true && that.isSetFeeWay();
    if (this_present_feeWay || that_present_feeWay) {
      if (!(this_present_feeWay && that_present_feeWay))
        return false;
      if (!this.feeWay.equals(that.feeWay))
        return false;
    }

    boolean this_present_feeSettleCyc = true && this.isSetFeeSettleCyc();
    boolean that_present_feeSettleCyc = true && that.isSetFeeSettleCyc();
    if (this_present_feeSettleCyc || that_present_feeSettleCyc) {
      if (!(this_present_feeSettleCyc && that_present_feeSettleCyc))
        return false;
      if (!this.feeSettleCyc.equals(that.feeSettleCyc))
        return false;
    }

    boolean this_present_checkStatus = true && this.isSetCheckStatus();
    boolean that_present_checkStatus = true && that.isSetCheckStatus();
    if (this_present_checkStatus || that_present_checkStatus) {
      if (!(this_present_checkStatus && that_present_checkStatus))
        return false;
      if (!this.checkStatus.equals(that.checkStatus))
        return false;
    }

    boolean this_present_settleStatus = true && this.isSetSettleStatus();
    boolean that_present_settleStatus = true && that.isSetSettleStatus();
    if (this_present_settleStatus || that_present_settleStatus) {
      if (!(this_present_settleStatus && that_present_settleStatus))
        return false;
      if (!this.settleStatus.equals(that.settleStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_settleId = true;
    list.add(present_settleId);
    if (present_settleId)
      list.add(settleId);

    boolean present_merchantId = true;
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_merchantType = true && (isSetMerchantType());
    list.add(present_merchantType);
    if (present_merchantType)
      list.add(merchantType);

    boolean present_productCode = true && (isSetProductCode());
    list.add(present_productCode);
    if (present_productCode)
      list.add(productCode);

    boolean present_currency = true && (isSetCurrency());
    list.add(present_currency);
    if (present_currency)
      list.add(currency);

    boolean present_payNum = true;
    list.add(present_payNum);
    if (present_payNum)
      list.add(payNum);

    boolean present_totalAmount = true && (isSetTotalAmount());
    list.add(present_totalAmount);
    if (present_totalAmount)
      list.add(totalAmount);

    boolean present_checkTime = true && (isSetCheckTime());
    list.add(present_checkTime);
    if (present_checkTime)
      list.add(checkTime);

    boolean present_settleTime = true && (isSetSettleTime());
    list.add(present_settleTime);
    if (present_settleTime)
      list.add(settleTime);

    boolean present_settleCyc = true && (isSetSettleCyc());
    list.add(present_settleCyc);
    if (present_settleCyc)
      list.add(settleCyc);

    boolean present_settleBath = true && (isSetSettleBath());
    list.add(present_settleBath);
    if (present_settleBath)
      list.add(settleBath);

    boolean present_settleAmount = true && (isSetSettleAmount());
    list.add(present_settleAmount);
    if (present_settleAmount)
      list.add(settleAmount);

    boolean present_feeTime = true && (isSetFeeTime());
    list.add(present_feeTime);
    if (present_feeTime)
      list.add(feeTime);

    boolean present_totalFee = true && (isSetTotalFee());
    list.add(present_totalFee);
    if (present_totalFee)
      list.add(totalFee);

    boolean present_feeWay = true && (isSetFeeWay());
    list.add(present_feeWay);
    if (present_feeWay)
      list.add(feeWay);

    boolean present_feeSettleCyc = true && (isSetFeeSettleCyc());
    list.add(present_feeSettleCyc);
    if (present_feeSettleCyc)
      list.add(feeSettleCyc);

    boolean present_checkStatus = true && (isSetCheckStatus());
    list.add(present_checkStatus);
    if (present_checkStatus)
      list.add(checkStatus);

    boolean present_settleStatus = true && (isSetSettleStatus());
    list.add(present_settleStatus);
    if (present_settleStatus)
      list.add(settleStatus);

    return list.hashCode();
  }

  @Override
  public int compareTo(SettleMerchantRecordModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSettleId()).compareTo(other.isSetSettleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleId, other.settleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantType()).compareTo(other.isSetMerchantType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantType, other.merchantType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductCode()).compareTo(other.isSetProductCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCode, other.productCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayNum()).compareTo(other.isSetPayNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payNum, other.payNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckTime()).compareTo(other.isSetCheckTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkTime, other.checkTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleTime()).compareTo(other.isSetSettleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleTime, other.settleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleCyc()).compareTo(other.isSetSettleCyc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleCyc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleCyc, other.settleCyc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleBath()).compareTo(other.isSetSettleBath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleBath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleBath, other.settleBath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleAmount()).compareTo(other.isSetSettleAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleAmount, other.settleAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeTime()).compareTo(other.isSetFeeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeTime, other.feeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalFee()).compareTo(other.isSetTotalFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalFee, other.totalFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeWay()).compareTo(other.isSetFeeWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeWay, other.feeWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeSettleCyc()).compareTo(other.isSetFeeSettleCyc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeSettleCyc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeSettleCyc, other.feeSettleCyc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckStatus()).compareTo(other.isSetCheckStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkStatus, other.checkStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleStatus()).compareTo(other.isSetSettleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleStatus, other.settleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SettleMerchantRecordModel(");
    boolean first = true;

    sb.append("settleId:");
    sb.append(this.settleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    sb.append(this.merchantId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantType:");
    if (this.merchantType == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productCode:");
    if (this.productCode == null) {
      sb.append("null");
    } else {
      sb.append(this.productCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payNum:");
    sb.append(this.payNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmount:");
    if (this.totalAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.totalAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkTime:");
    if (this.checkTime == null) {
      sb.append("null");
    } else {
      sb.append(this.checkTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleTime:");
    if (this.settleTime == null) {
      sb.append("null");
    } else {
      sb.append(this.settleTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleCyc:");
    if (this.settleCyc == null) {
      sb.append("null");
    } else {
      sb.append(this.settleCyc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleBath:");
    if (this.settleBath == null) {
      sb.append("null");
    } else {
      sb.append(this.settleBath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleAmount:");
    if (this.settleAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.settleAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeTime:");
    if (this.feeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.feeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalFee:");
    if (this.totalFee == null) {
      sb.append("null");
    } else {
      sb.append(this.totalFee);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeWay:");
    if (this.feeWay == null) {
      sb.append("null");
    } else {
      sb.append(this.feeWay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeSettleCyc:");
    if (this.feeSettleCyc == null) {
      sb.append("null");
    } else {
      sb.append(this.feeSettleCyc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkStatus:");
    if (this.checkStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.checkStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleStatus:");
    if (this.settleStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.settleStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettleMerchantRecordModelStandardSchemeFactory implements SchemeFactory {
    public SettleMerchantRecordModelStandardScheme getScheme() {
      return new SettleMerchantRecordModelStandardScheme();
    }
  }

  private static class SettleMerchantRecordModelStandardScheme extends StandardScheme<SettleMerchantRecordModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SettleMerchantRecordModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SETTLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.settleId = iprot.readI64();
              struct.setSettleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.merchantId = iprot.readI32();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MERCHANT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantType = iprot.readString();
              struct.setMerchantTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productCode = iprot.readString();
              struct.setProductCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAY_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payNum = iprot.readI32();
              struct.setPayNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalAmount = iprot.readString();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHECK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkTime = iprot.readString();
              struct.setCheckTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SETTLE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleTime = iprot.readString();
              struct.setSettleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SETTLE_CYC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleCyc = iprot.readString();
              struct.setSettleCycIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SETTLE_BATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleBath = iprot.readString();
              struct.setSettleBathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SETTLE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleAmount = iprot.readString();
              struct.setSettleAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FEE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feeTime = iprot.readString();
              struct.setFeeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TOTAL_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalFee = iprot.readString();
              struct.setTotalFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FEE_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feeWay = iprot.readString();
              struct.setFeeWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FEE_SETTLE_CYC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feeSettleCyc = iprot.readString();
              struct.setFeeSettleCycIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CHECK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkStatus = iprot.readString();
              struct.setCheckStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SETTLE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleStatus = iprot.readString();
              struct.setSettleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SettleMerchantRecordModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SETTLE_ID_FIELD_DESC);
      oprot.writeI64(struct.settleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
      oprot.writeI32(struct.merchantId);
      oprot.writeFieldEnd();
      if (struct.merchantType != null) {
        oprot.writeFieldBegin(MERCHANT_TYPE_FIELD_DESC);
        oprot.writeString(struct.merchantType);
        oprot.writeFieldEnd();
      }
      if (struct.productCode != null) {
        oprot.writeFieldBegin(PRODUCT_CODE_FIELD_DESC);
        oprot.writeString(struct.productCode);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.currency);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAY_NUM_FIELD_DESC);
      oprot.writeI32(struct.payNum);
      oprot.writeFieldEnd();
      if (struct.totalAmount != null) {
        oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.totalAmount);
        oprot.writeFieldEnd();
      }
      if (struct.checkTime != null) {
        oprot.writeFieldBegin(CHECK_TIME_FIELD_DESC);
        oprot.writeString(struct.checkTime);
        oprot.writeFieldEnd();
      }
      if (struct.settleTime != null) {
        oprot.writeFieldBegin(SETTLE_TIME_FIELD_DESC);
        oprot.writeString(struct.settleTime);
        oprot.writeFieldEnd();
      }
      if (struct.settleCyc != null) {
        oprot.writeFieldBegin(SETTLE_CYC_FIELD_DESC);
        oprot.writeString(struct.settleCyc);
        oprot.writeFieldEnd();
      }
      if (struct.settleBath != null) {
        oprot.writeFieldBegin(SETTLE_BATH_FIELD_DESC);
        oprot.writeString(struct.settleBath);
        oprot.writeFieldEnd();
      }
      if (struct.settleAmount != null) {
        oprot.writeFieldBegin(SETTLE_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.settleAmount);
        oprot.writeFieldEnd();
      }
      if (struct.feeTime != null) {
        oprot.writeFieldBegin(FEE_TIME_FIELD_DESC);
        oprot.writeString(struct.feeTime);
        oprot.writeFieldEnd();
      }
      if (struct.totalFee != null) {
        oprot.writeFieldBegin(TOTAL_FEE_FIELD_DESC);
        oprot.writeString(struct.totalFee);
        oprot.writeFieldEnd();
      }
      if (struct.feeWay != null) {
        oprot.writeFieldBegin(FEE_WAY_FIELD_DESC);
        oprot.writeString(struct.feeWay);
        oprot.writeFieldEnd();
      }
      if (struct.feeSettleCyc != null) {
        oprot.writeFieldBegin(FEE_SETTLE_CYC_FIELD_DESC);
        oprot.writeString(struct.feeSettleCyc);
        oprot.writeFieldEnd();
      }
      if (struct.checkStatus != null) {
        oprot.writeFieldBegin(CHECK_STATUS_FIELD_DESC);
        oprot.writeString(struct.checkStatus);
        oprot.writeFieldEnd();
      }
      if (struct.settleStatus != null) {
        oprot.writeFieldBegin(SETTLE_STATUS_FIELD_DESC);
        oprot.writeString(struct.settleStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SettleMerchantRecordModelTupleSchemeFactory implements SchemeFactory {
    public SettleMerchantRecordModelTupleScheme getScheme() {
      return new SettleMerchantRecordModelTupleScheme();
    }
  }

  private static class SettleMerchantRecordModelTupleScheme extends TupleScheme<SettleMerchantRecordModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SettleMerchantRecordModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSettleId()) {
        optionals.set(0);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(1);
      }
      if (struct.isSetMerchantType()) {
        optionals.set(2);
      }
      if (struct.isSetProductCode()) {
        optionals.set(3);
      }
      if (struct.isSetCurrency()) {
        optionals.set(4);
      }
      if (struct.isSetPayNum()) {
        optionals.set(5);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(6);
      }
      if (struct.isSetCheckTime()) {
        optionals.set(7);
      }
      if (struct.isSetSettleTime()) {
        optionals.set(8);
      }
      if (struct.isSetSettleCyc()) {
        optionals.set(9);
      }
      if (struct.isSetSettleBath()) {
        optionals.set(10);
      }
      if (struct.isSetSettleAmount()) {
        optionals.set(11);
      }
      if (struct.isSetFeeTime()) {
        optionals.set(12);
      }
      if (struct.isSetTotalFee()) {
        optionals.set(13);
      }
      if (struct.isSetFeeWay()) {
        optionals.set(14);
      }
      if (struct.isSetFeeSettleCyc()) {
        optionals.set(15);
      }
      if (struct.isSetCheckStatus()) {
        optionals.set(16);
      }
      if (struct.isSetSettleStatus()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetSettleId()) {
        oprot.writeI64(struct.settleId);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeI32(struct.merchantId);
      }
      if (struct.isSetMerchantType()) {
        oprot.writeString(struct.merchantType);
      }
      if (struct.isSetProductCode()) {
        oprot.writeString(struct.productCode);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetPayNum()) {
        oprot.writeI32(struct.payNum);
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeString(struct.totalAmount);
      }
      if (struct.isSetCheckTime()) {
        oprot.writeString(struct.checkTime);
      }
      if (struct.isSetSettleTime()) {
        oprot.writeString(struct.settleTime);
      }
      if (struct.isSetSettleCyc()) {
        oprot.writeString(struct.settleCyc);
      }
      if (struct.isSetSettleBath()) {
        oprot.writeString(struct.settleBath);
      }
      if (struct.isSetSettleAmount()) {
        oprot.writeString(struct.settleAmount);
      }
      if (struct.isSetFeeTime()) {
        oprot.writeString(struct.feeTime);
      }
      if (struct.isSetTotalFee()) {
        oprot.writeString(struct.totalFee);
      }
      if (struct.isSetFeeWay()) {
        oprot.writeString(struct.feeWay);
      }
      if (struct.isSetFeeSettleCyc()) {
        oprot.writeString(struct.feeSettleCyc);
      }
      if (struct.isSetCheckStatus()) {
        oprot.writeString(struct.checkStatus);
      }
      if (struct.isSetSettleStatus()) {
        oprot.writeString(struct.settleStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SettleMerchantRecordModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.settleId = iprot.readI64();
        struct.setSettleIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.merchantId = iprot.readI32();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.merchantType = iprot.readString();
        struct.setMerchantTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.productCode = iprot.readString();
        struct.setProductCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.payNum = iprot.readI32();
        struct.setPayNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalAmount = iprot.readString();
        struct.setTotalAmountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.checkTime = iprot.readString();
        struct.setCheckTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.settleTime = iprot.readString();
        struct.setSettleTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.settleCyc = iprot.readString();
        struct.setSettleCycIsSet(true);
      }
      if (incoming.get(10)) {
        struct.settleBath = iprot.readString();
        struct.setSettleBathIsSet(true);
      }
      if (incoming.get(11)) {
        struct.settleAmount = iprot.readString();
        struct.setSettleAmountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.feeTime = iprot.readString();
        struct.setFeeTimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.totalFee = iprot.readString();
        struct.setTotalFeeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.feeWay = iprot.readString();
        struct.setFeeWayIsSet(true);
      }
      if (incoming.get(15)) {
        struct.feeSettleCyc = iprot.readString();
        struct.setFeeSettleCycIsSet(true);
      }
      if (incoming.get(16)) {
        struct.checkStatus = iprot.readString();
        struct.setCheckStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.settleStatus = iprot.readString();
        struct.setSettleStatusIsSet(true);
      }
    }
  }

}

