/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-24")
public class HangAccountModel implements org.apache.thrift.TBase<HangAccountModel, HangAccountModel._Fields>, java.io.Serializable, Cloneable, Comparable<HangAccountModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HangAccountModel");

  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TRANS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CHANNEL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField HANG_IN_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("hangInAmount", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField HANG_IN_FEE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("hangInFeeAmount", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HangAccountModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HangAccountModelTupleSchemeFactory());
  }

  public long merchantId; // required
  public String transType; // required
  public String paymentId; // required
  public String transNo; // required
  public String channelCode; // required
  public String hangInAmount; // required
  public String hangInFeeAmount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MERCHANT_ID((short)1, "merchantId"),
    TRANS_TYPE((short)2, "transType"),
    PAYMENT_ID((short)3, "paymentId"),
    TRANS_NO((short)4, "transNo"),
    CHANNEL_CODE((short)5, "channelCode"),
    HANG_IN_AMOUNT((short)6, "hangInAmount"),
    HANG_IN_FEE_AMOUNT((short)7, "hangInFeeAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MERCHANT_ID
          return MERCHANT_ID;
        case 2: // TRANS_TYPE
          return TRANS_TYPE;
        case 3: // PAYMENT_ID
          return PAYMENT_ID;
        case 4: // TRANS_NO
          return TRANS_NO;
        case 5: // CHANNEL_CODE
          return CHANNEL_CODE;
        case 6: // HANG_IN_AMOUNT
          return HANG_IN_AMOUNT;
        case 7: // HANG_IN_FEE_AMOUNT
          return HANG_IN_FEE_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MERCHANTID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRANS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANG_IN_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("hangInAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANG_IN_FEE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("hangInFeeAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HangAccountModel.class, metaDataMap);
  }

  public HangAccountModel() {
  }

  public HangAccountModel(
    long merchantId,
    String transType,
    String paymentId,
    String transNo,
    String channelCode,
    String hangInAmount,
    String hangInFeeAmount)
  {
    this();
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    this.transType = transType;
    this.paymentId = paymentId;
    this.transNo = transNo;
    this.channelCode = channelCode;
    this.hangInAmount = hangInAmount;
    this.hangInFeeAmount = hangInFeeAmount;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HangAccountModel(HangAccountModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.merchantId = other.merchantId;
    if (other.isSetTransType()) {
      this.transType = other.transType;
    }
    if (other.isSetPaymentId()) {
      this.paymentId = other.paymentId;
    }
    if (other.isSetTransNo()) {
      this.transNo = other.transNo;
    }
    if (other.isSetChannelCode()) {
      this.channelCode = other.channelCode;
    }
    if (other.isSetHangInAmount()) {
      this.hangInAmount = other.hangInAmount;
    }
    if (other.isSetHangInFeeAmount()) {
      this.hangInFeeAmount = other.hangInFeeAmount;
    }
  }

  public HangAccountModel deepCopy() {
    return new HangAccountModel(this);
  }

  @Override
  public void clear() {
    setMerchantIdIsSet(false);
    this.merchantId = 0;
    this.transType = null;
    this.paymentId = null;
    this.transNo = null;
    this.channelCode = null;
    this.hangInAmount = null;
    this.hangInFeeAmount = null;
  }

  public long getMerchantId() {
    return this.merchantId;
  }

  public HangAccountModel setMerchantId(long merchantId) {
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    return this;
  }

  public void unsetMerchantId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  public void setMerchantIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTID_ISSET_ID, value);
  }

  public String getTransType() {
    return this.transType;
  }

  public HangAccountModel setTransType(String transType) {
    this.transType = transType;
    return this;
  }

  public void unsetTransType() {
    this.transType = null;
  }

  /** Returns true if field transType is set (has been assigned a value) and false otherwise */
  public boolean isSetTransType() {
    return this.transType != null;
  }

  public void setTransTypeIsSet(boolean value) {
    if (!value) {
      this.transType = null;
    }
  }

  public String getPaymentId() {
    return this.paymentId;
  }

  public HangAccountModel setPaymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  public void unsetPaymentId() {
    this.paymentId = null;
  }

  /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentId() {
    return this.paymentId != null;
  }

  public void setPaymentIdIsSet(boolean value) {
    if (!value) {
      this.paymentId = null;
    }
  }

  public String getTransNo() {
    return this.transNo;
  }

  public HangAccountModel setTransNo(String transNo) {
    this.transNo = transNo;
    return this;
  }

  public void unsetTransNo() {
    this.transNo = null;
  }

  /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTransNo() {
    return this.transNo != null;
  }

  public void setTransNoIsSet(boolean value) {
    if (!value) {
      this.transNo = null;
    }
  }

  public String getChannelCode() {
    return this.channelCode;
  }

  public HangAccountModel setChannelCode(String channelCode) {
    this.channelCode = channelCode;
    return this;
  }

  public void unsetChannelCode() {
    this.channelCode = null;
  }

  /** Returns true if field channelCode is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelCode() {
    return this.channelCode != null;
  }

  public void setChannelCodeIsSet(boolean value) {
    if (!value) {
      this.channelCode = null;
    }
  }

  public String getHangInAmount() {
    return this.hangInAmount;
  }

  public HangAccountModel setHangInAmount(String hangInAmount) {
    this.hangInAmount = hangInAmount;
    return this;
  }

  public void unsetHangInAmount() {
    this.hangInAmount = null;
  }

  /** Returns true if field hangInAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetHangInAmount() {
    return this.hangInAmount != null;
  }

  public void setHangInAmountIsSet(boolean value) {
    if (!value) {
      this.hangInAmount = null;
    }
  }

  public String getHangInFeeAmount() {
    return this.hangInFeeAmount;
  }

  public HangAccountModel setHangInFeeAmount(String hangInFeeAmount) {
    this.hangInFeeAmount = hangInFeeAmount;
    return this;
  }

  public void unsetHangInFeeAmount() {
    this.hangInFeeAmount = null;
  }

  /** Returns true if field hangInFeeAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetHangInFeeAmount() {
    return this.hangInFeeAmount != null;
  }

  public void setHangInFeeAmountIsSet(boolean value) {
    if (!value) {
      this.hangInFeeAmount = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((Long)value);
      }
      break;

    case TRANS_TYPE:
      if (value == null) {
        unsetTransType();
      } else {
        setTransType((String)value);
      }
      break;

    case PAYMENT_ID:
      if (value == null) {
        unsetPaymentId();
      } else {
        setPaymentId((String)value);
      }
      break;

    case TRANS_NO:
      if (value == null) {
        unsetTransNo();
      } else {
        setTransNo((String)value);
      }
      break;

    case CHANNEL_CODE:
      if (value == null) {
        unsetChannelCode();
      } else {
        setChannelCode((String)value);
      }
      break;

    case HANG_IN_AMOUNT:
      if (value == null) {
        unsetHangInAmount();
      } else {
        setHangInAmount((String)value);
      }
      break;

    case HANG_IN_FEE_AMOUNT:
      if (value == null) {
        unsetHangInFeeAmount();
      } else {
        setHangInFeeAmount((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MERCHANT_ID:
      return getMerchantId();

    case TRANS_TYPE:
      return getTransType();

    case PAYMENT_ID:
      return getPaymentId();

    case TRANS_NO:
      return getTransNo();

    case CHANNEL_CODE:
      return getChannelCode();

    case HANG_IN_AMOUNT:
      return getHangInAmount();

    case HANG_IN_FEE_AMOUNT:
      return getHangInFeeAmount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MERCHANT_ID:
      return isSetMerchantId();
    case TRANS_TYPE:
      return isSetTransType();
    case PAYMENT_ID:
      return isSetPaymentId();
    case TRANS_NO:
      return isSetTransNo();
    case CHANNEL_CODE:
      return isSetChannelCode();
    case HANG_IN_AMOUNT:
      return isSetHangInAmount();
    case HANG_IN_FEE_AMOUNT:
      return isSetHangInFeeAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HangAccountModel)
      return this.equals((HangAccountModel)that);
    return false;
  }

  public boolean equals(HangAccountModel that) {
    if (that == null)
      return false;

    boolean this_present_merchantId = true;
    boolean that_present_merchantId = true;
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (this.merchantId != that.merchantId)
        return false;
    }

    boolean this_present_transType = true && this.isSetTransType();
    boolean that_present_transType = true && that.isSetTransType();
    if (this_present_transType || that_present_transType) {
      if (!(this_present_transType && that_present_transType))
        return false;
      if (!this.transType.equals(that.transType))
        return false;
    }

    boolean this_present_paymentId = true && this.isSetPaymentId();
    boolean that_present_paymentId = true && that.isSetPaymentId();
    if (this_present_paymentId || that_present_paymentId) {
      if (!(this_present_paymentId && that_present_paymentId))
        return false;
      if (!this.paymentId.equals(that.paymentId))
        return false;
    }

    boolean this_present_transNo = true && this.isSetTransNo();
    boolean that_present_transNo = true && that.isSetTransNo();
    if (this_present_transNo || that_present_transNo) {
      if (!(this_present_transNo && that_present_transNo))
        return false;
      if (!this.transNo.equals(that.transNo))
        return false;
    }

    boolean this_present_channelCode = true && this.isSetChannelCode();
    boolean that_present_channelCode = true && that.isSetChannelCode();
    if (this_present_channelCode || that_present_channelCode) {
      if (!(this_present_channelCode && that_present_channelCode))
        return false;
      if (!this.channelCode.equals(that.channelCode))
        return false;
    }

    boolean this_present_hangInAmount = true && this.isSetHangInAmount();
    boolean that_present_hangInAmount = true && that.isSetHangInAmount();
    if (this_present_hangInAmount || that_present_hangInAmount) {
      if (!(this_present_hangInAmount && that_present_hangInAmount))
        return false;
      if (!this.hangInAmount.equals(that.hangInAmount))
        return false;
    }

    boolean this_present_hangInFeeAmount = true && this.isSetHangInFeeAmount();
    boolean that_present_hangInFeeAmount = true && that.isSetHangInFeeAmount();
    if (this_present_hangInFeeAmount || that_present_hangInFeeAmount) {
      if (!(this_present_hangInFeeAmount && that_present_hangInFeeAmount))
        return false;
      if (!this.hangInFeeAmount.equals(that.hangInFeeAmount))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_merchantId = true;
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_transType = true && (isSetTransType());
    list.add(present_transType);
    if (present_transType)
      list.add(transType);

    boolean present_paymentId = true && (isSetPaymentId());
    list.add(present_paymentId);
    if (present_paymentId)
      list.add(paymentId);

    boolean present_transNo = true && (isSetTransNo());
    list.add(present_transNo);
    if (present_transNo)
      list.add(transNo);

    boolean present_channelCode = true && (isSetChannelCode());
    list.add(present_channelCode);
    if (present_channelCode)
      list.add(channelCode);

    boolean present_hangInAmount = true && (isSetHangInAmount());
    list.add(present_hangInAmount);
    if (present_hangInAmount)
      list.add(hangInAmount);

    boolean present_hangInFeeAmount = true && (isSetHangInFeeAmount());
    list.add(present_hangInFeeAmount);
    if (present_hangInFeeAmount)
      list.add(hangInFeeAmount);

    return list.hashCode();
  }

  @Override
  public int compareTo(HangAccountModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransType()).compareTo(other.isSetTransType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transType, other.transType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelCode()).compareTo(other.isSetChannelCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCode, other.channelCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHangInAmount()).compareTo(other.isSetHangInAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHangInAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hangInAmount, other.hangInAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHangInFeeAmount()).compareTo(other.isSetHangInFeeAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHangInFeeAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hangInFeeAmount, other.hangInFeeAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HangAccountModel(");
    boolean first = true;

    sb.append("merchantId:");
    sb.append(this.merchantId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transType:");
    if (this.transType == null) {
      sb.append("null");
    } else {
      sb.append(this.transType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentId:");
    if (this.paymentId == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transNo:");
    if (this.transNo == null) {
      sb.append("null");
    } else {
      sb.append(this.transNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelCode:");
    if (this.channelCode == null) {
      sb.append("null");
    } else {
      sb.append(this.channelCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hangInAmount:");
    if (this.hangInAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.hangInAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hangInFeeAmount:");
    if (this.hangInFeeAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.hangInFeeAmount);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HangAccountModelStandardSchemeFactory implements SchemeFactory {
    public HangAccountModelStandardScheme getScheme() {
      return new HangAccountModelStandardScheme();
    }
  }

  private static class HangAccountModelStandardScheme extends StandardScheme<HangAccountModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HangAccountModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.merchantId = iprot.readI64();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRANS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transType = iprot.readString();
              struct.setTransTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentId = iprot.readString();
              struct.setPaymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRANS_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transNo = iprot.readString();
              struct.setTransNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHANNEL_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelCode = iprot.readString();
              struct.setChannelCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HANG_IN_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hangInAmount = iprot.readString();
              struct.setHangInAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HANG_IN_FEE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hangInFeeAmount = iprot.readString();
              struct.setHangInFeeAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HangAccountModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
      oprot.writeI64(struct.merchantId);
      oprot.writeFieldEnd();
      if (struct.transType != null) {
        oprot.writeFieldBegin(TRANS_TYPE_FIELD_DESC);
        oprot.writeString(struct.transType);
        oprot.writeFieldEnd();
      }
      if (struct.paymentId != null) {
        oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
        oprot.writeString(struct.paymentId);
        oprot.writeFieldEnd();
      }
      if (struct.transNo != null) {
        oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
        oprot.writeString(struct.transNo);
        oprot.writeFieldEnd();
      }
      if (struct.channelCode != null) {
        oprot.writeFieldBegin(CHANNEL_CODE_FIELD_DESC);
        oprot.writeString(struct.channelCode);
        oprot.writeFieldEnd();
      }
      if (struct.hangInAmount != null) {
        oprot.writeFieldBegin(HANG_IN_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.hangInAmount);
        oprot.writeFieldEnd();
      }
      if (struct.hangInFeeAmount != null) {
        oprot.writeFieldBegin(HANG_IN_FEE_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.hangInFeeAmount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HangAccountModelTupleSchemeFactory implements SchemeFactory {
    public HangAccountModelTupleScheme getScheme() {
      return new HangAccountModelTupleScheme();
    }
  }

  private static class HangAccountModelTupleScheme extends TupleScheme<HangAccountModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HangAccountModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMerchantId()) {
        optionals.set(0);
      }
      if (struct.isSetTransType()) {
        optionals.set(1);
      }
      if (struct.isSetPaymentId()) {
        optionals.set(2);
      }
      if (struct.isSetTransNo()) {
        optionals.set(3);
      }
      if (struct.isSetChannelCode()) {
        optionals.set(4);
      }
      if (struct.isSetHangInAmount()) {
        optionals.set(5);
      }
      if (struct.isSetHangInFeeAmount()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetMerchantId()) {
        oprot.writeI64(struct.merchantId);
      }
      if (struct.isSetTransType()) {
        oprot.writeString(struct.transType);
      }
      if (struct.isSetPaymentId()) {
        oprot.writeString(struct.paymentId);
      }
      if (struct.isSetTransNo()) {
        oprot.writeString(struct.transNo);
      }
      if (struct.isSetChannelCode()) {
        oprot.writeString(struct.channelCode);
      }
      if (struct.isSetHangInAmount()) {
        oprot.writeString(struct.hangInAmount);
      }
      if (struct.isSetHangInFeeAmount()) {
        oprot.writeString(struct.hangInFeeAmount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HangAccountModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.merchantId = iprot.readI64();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.transType = iprot.readString();
        struct.setTransTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.paymentId = iprot.readString();
        struct.setPaymentIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.transNo = iprot.readString();
        struct.setTransNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.channelCode = iprot.readString();
        struct.setChannelCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.hangInAmount = iprot.readString();
        struct.setHangInAmountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.hangInFeeAmount = iprot.readString();
        struct.setHangInFeeAmountIsSet(true);
      }
    }
  }

}

