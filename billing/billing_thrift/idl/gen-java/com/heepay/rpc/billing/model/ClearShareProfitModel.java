/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-11")
public class ClearShareProfitModel implements org.apache.thrift.TBase<ClearShareProfitModel, ClearShareProfitModel._Fields>, java.io.Serializable, Cloneable, Comparable<ClearShareProfitModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClearShareProfitModel");

  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IS_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("isShare", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SHARE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shareId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLEAR_SHARE_PROFIT_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("clearShareProfitDetail", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClearShareProfitModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClearShareProfitModelTupleSchemeFactory());
  }

  public int merchantId; // required
  public String transNo; // required
  public String isShare; // required
  public String shareId; // required
  public List<ClearShareProfitDetailModel> clearShareProfitDetail; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MERCHANT_ID((short)1, "merchantId"),
    TRANS_NO((short)2, "transNo"),
    IS_SHARE((short)3, "isShare"),
    SHARE_ID((short)4, "shareId"),
    CLEAR_SHARE_PROFIT_DETAIL((short)5, "clearShareProfitDetail");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MERCHANT_ID
          return MERCHANT_ID;
        case 2: // TRANS_NO
          return TRANS_NO;
        case 3: // IS_SHARE
          return IS_SHARE;
        case 4: // SHARE_ID
          return SHARE_ID;
        case 5: // CLEAR_SHARE_PROFIT_DETAIL
          return CLEAR_SHARE_PROFIT_DETAIL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MERCHANTID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SHARE, new org.apache.thrift.meta_data.FieldMetaData("isShare", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_ID, new org.apache.thrift.meta_data.FieldMetaData("shareId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLEAR_SHARE_PROFIT_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("clearShareProfitDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ClearShareProfitDetailModel"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClearShareProfitModel.class, metaDataMap);
  }

  public ClearShareProfitModel() {
  }

  public ClearShareProfitModel(
    int merchantId,
    String transNo,
    String isShare,
    String shareId,
    List<ClearShareProfitDetailModel> clearShareProfitDetail)
  {
    this();
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    this.transNo = transNo;
    this.isShare = isShare;
    this.shareId = shareId;
    this.clearShareProfitDetail = clearShareProfitDetail;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClearShareProfitModel(ClearShareProfitModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.merchantId = other.merchantId;
    if (other.isSetTransNo()) {
      this.transNo = other.transNo;
    }
    if (other.isSetIsShare()) {
      this.isShare = other.isShare;
    }
    if (other.isSetShareId()) {
      this.shareId = other.shareId;
    }
    if (other.isSetClearShareProfitDetail()) {
      List<ClearShareProfitDetailModel> __this__clearShareProfitDetail = new ArrayList<ClearShareProfitDetailModel>(other.clearShareProfitDetail.size());
      for (ClearShareProfitDetailModel other_element : other.clearShareProfitDetail) {
        __this__clearShareProfitDetail.add(other_element);
      }
      this.clearShareProfitDetail = __this__clearShareProfitDetail;
    }
  }

  public ClearShareProfitModel deepCopy() {
    return new ClearShareProfitModel(this);
  }

  @Override
  public void clear() {
    setMerchantIdIsSet(false);
    this.merchantId = 0;
    this.transNo = null;
    this.isShare = null;
    this.shareId = null;
    this.clearShareProfitDetail = null;
  }

  public int getMerchantId() {
    return this.merchantId;
  }

  public ClearShareProfitModel setMerchantId(int merchantId) {
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    return this;
  }

  public void unsetMerchantId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  public void setMerchantIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTID_ISSET_ID, value);
  }

  public String getTransNo() {
    return this.transNo;
  }

  public ClearShareProfitModel setTransNo(String transNo) {
    this.transNo = transNo;
    return this;
  }

  public void unsetTransNo() {
    this.transNo = null;
  }

  /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTransNo() {
    return this.transNo != null;
  }

  public void setTransNoIsSet(boolean value) {
    if (!value) {
      this.transNo = null;
    }
  }

  public String getIsShare() {
    return this.isShare;
  }

  public ClearShareProfitModel setIsShare(String isShare) {
    this.isShare = isShare;
    return this;
  }

  public void unsetIsShare() {
    this.isShare = null;
  }

  /** Returns true if field isShare is set (has been assigned a value) and false otherwise */
  public boolean isSetIsShare() {
    return this.isShare != null;
  }

  public void setIsShareIsSet(boolean value) {
    if (!value) {
      this.isShare = null;
    }
  }

  public String getShareId() {
    return this.shareId;
  }

  public ClearShareProfitModel setShareId(String shareId) {
    this.shareId = shareId;
    return this;
  }

  public void unsetShareId() {
    this.shareId = null;
  }

  /** Returns true if field shareId is set (has been assigned a value) and false otherwise */
  public boolean isSetShareId() {
    return this.shareId != null;
  }

  public void setShareIdIsSet(boolean value) {
    if (!value) {
      this.shareId = null;
    }
  }

  public int getClearShareProfitDetailSize() {
    return (this.clearShareProfitDetail == null) ? 0 : this.clearShareProfitDetail.size();
  }

  public java.util.Iterator<ClearShareProfitDetailModel> getClearShareProfitDetailIterator() {
    return (this.clearShareProfitDetail == null) ? null : this.clearShareProfitDetail.iterator();
  }

  public void addToClearShareProfitDetail(ClearShareProfitDetailModel elem) {
    if (this.clearShareProfitDetail == null) {
      this.clearShareProfitDetail = new ArrayList<ClearShareProfitDetailModel>();
    }
    this.clearShareProfitDetail.add(elem);
  }

  public List<ClearShareProfitDetailModel> getClearShareProfitDetail() {
    return this.clearShareProfitDetail;
  }

  public ClearShareProfitModel setClearShareProfitDetail(List<ClearShareProfitDetailModel> clearShareProfitDetail) {
    this.clearShareProfitDetail = clearShareProfitDetail;
    return this;
  }

  public void unsetClearShareProfitDetail() {
    this.clearShareProfitDetail = null;
  }

  /** Returns true if field clearShareProfitDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetClearShareProfitDetail() {
    return this.clearShareProfitDetail != null;
  }

  public void setClearShareProfitDetailIsSet(boolean value) {
    if (!value) {
      this.clearShareProfitDetail = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((Integer)value);
      }
      break;

    case TRANS_NO:
      if (value == null) {
        unsetTransNo();
      } else {
        setTransNo((String)value);
      }
      break;

    case IS_SHARE:
      if (value == null) {
        unsetIsShare();
      } else {
        setIsShare((String)value);
      }
      break;

    case SHARE_ID:
      if (value == null) {
        unsetShareId();
      } else {
        setShareId((String)value);
      }
      break;

    case CLEAR_SHARE_PROFIT_DETAIL:
      if (value == null) {
        unsetClearShareProfitDetail();
      } else {
        setClearShareProfitDetail((List<ClearShareProfitDetailModel>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MERCHANT_ID:
      return getMerchantId();

    case TRANS_NO:
      return getTransNo();

    case IS_SHARE:
      return getIsShare();

    case SHARE_ID:
      return getShareId();

    case CLEAR_SHARE_PROFIT_DETAIL:
      return getClearShareProfitDetail();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MERCHANT_ID:
      return isSetMerchantId();
    case TRANS_NO:
      return isSetTransNo();
    case IS_SHARE:
      return isSetIsShare();
    case SHARE_ID:
      return isSetShareId();
    case CLEAR_SHARE_PROFIT_DETAIL:
      return isSetClearShareProfitDetail();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClearShareProfitModel)
      return this.equals((ClearShareProfitModel)that);
    return false;
  }

  public boolean equals(ClearShareProfitModel that) {
    if (that == null)
      return false;

    boolean this_present_merchantId = true;
    boolean that_present_merchantId = true;
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (this.merchantId != that.merchantId)
        return false;
    }

    boolean this_present_transNo = true && this.isSetTransNo();
    boolean that_present_transNo = true && that.isSetTransNo();
    if (this_present_transNo || that_present_transNo) {
      if (!(this_present_transNo && that_present_transNo))
        return false;
      if (!this.transNo.equals(that.transNo))
        return false;
    }

    boolean this_present_isShare = true && this.isSetIsShare();
    boolean that_present_isShare = true && that.isSetIsShare();
    if (this_present_isShare || that_present_isShare) {
      if (!(this_present_isShare && that_present_isShare))
        return false;
      if (!this.isShare.equals(that.isShare))
        return false;
    }

    boolean this_present_shareId = true && this.isSetShareId();
    boolean that_present_shareId = true && that.isSetShareId();
    if (this_present_shareId || that_present_shareId) {
      if (!(this_present_shareId && that_present_shareId))
        return false;
      if (!this.shareId.equals(that.shareId))
        return false;
    }

    boolean this_present_clearShareProfitDetail = true && this.isSetClearShareProfitDetail();
    boolean that_present_clearShareProfitDetail = true && that.isSetClearShareProfitDetail();
    if (this_present_clearShareProfitDetail || that_present_clearShareProfitDetail) {
      if (!(this_present_clearShareProfitDetail && that_present_clearShareProfitDetail))
        return false;
      if (!this.clearShareProfitDetail.equals(that.clearShareProfitDetail))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_merchantId = true;
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_transNo = true && (isSetTransNo());
    list.add(present_transNo);
    if (present_transNo)
      list.add(transNo);

    boolean present_isShare = true && (isSetIsShare());
    list.add(present_isShare);
    if (present_isShare)
      list.add(isShare);

    boolean present_shareId = true && (isSetShareId());
    list.add(present_shareId);
    if (present_shareId)
      list.add(shareId);

    boolean present_clearShareProfitDetail = true && (isSetClearShareProfitDetail());
    list.add(present_clearShareProfitDetail);
    if (present_clearShareProfitDetail)
      list.add(clearShareProfitDetail);

    return list.hashCode();
  }

  @Override
  public int compareTo(ClearShareProfitModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsShare()).compareTo(other.isSetIsShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isShare, other.isShare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareId()).compareTo(other.isSetShareId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareId, other.shareId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClearShareProfitDetail()).compareTo(other.isSetClearShareProfitDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearShareProfitDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearShareProfitDetail, other.clearShareProfitDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClearShareProfitModel(");
    boolean first = true;

    sb.append("merchantId:");
    sb.append(this.merchantId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transNo:");
    if (this.transNo == null) {
      sb.append("null");
    } else {
      sb.append(this.transNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isShare:");
    if (this.isShare == null) {
      sb.append("null");
    } else {
      sb.append(this.isShare);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareId:");
    if (this.shareId == null) {
      sb.append("null");
    } else {
      sb.append(this.shareId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clearShareProfitDetail:");
    if (this.clearShareProfitDetail == null) {
      sb.append("null");
    } else {
      sb.append(this.clearShareProfitDetail);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClearShareProfitModelStandardSchemeFactory implements SchemeFactory {
    public ClearShareProfitModelStandardScheme getScheme() {
      return new ClearShareProfitModelStandardScheme();
    }
  }

  private static class ClearShareProfitModelStandardScheme extends StandardScheme<ClearShareProfitModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClearShareProfitModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.merchantId = iprot.readI32();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRANS_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transNo = iprot.readString();
              struct.setTransNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isShare = iprot.readString();
              struct.setIsShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHARE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareId = iprot.readString();
              struct.setShareIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLEAR_SHARE_PROFIT_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.clearShareProfitDetail = new ArrayList<ClearShareProfitDetailModel>(_list0.size);
                ClearShareProfitDetailModel _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new ClearShareProfitDetailModel();
                  _elem1.read(iprot);
                  struct.clearShareProfitDetail.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setClearShareProfitDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClearShareProfitModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
      oprot.writeI32(struct.merchantId);
      oprot.writeFieldEnd();
      if (struct.transNo != null) {
        oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
        oprot.writeString(struct.transNo);
        oprot.writeFieldEnd();
      }
      if (struct.isShare != null) {
        oprot.writeFieldBegin(IS_SHARE_FIELD_DESC);
        oprot.writeString(struct.isShare);
        oprot.writeFieldEnd();
      }
      if (struct.shareId != null) {
        oprot.writeFieldBegin(SHARE_ID_FIELD_DESC);
        oprot.writeString(struct.shareId);
        oprot.writeFieldEnd();
      }
      if (struct.clearShareProfitDetail != null) {
        oprot.writeFieldBegin(CLEAR_SHARE_PROFIT_DETAIL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.clearShareProfitDetail.size()));
          for (ClearShareProfitDetailModel _iter3 : struct.clearShareProfitDetail)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClearShareProfitModelTupleSchemeFactory implements SchemeFactory {
    public ClearShareProfitModelTupleScheme getScheme() {
      return new ClearShareProfitModelTupleScheme();
    }
  }

  private static class ClearShareProfitModelTupleScheme extends TupleScheme<ClearShareProfitModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClearShareProfitModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMerchantId()) {
        optionals.set(0);
      }
      if (struct.isSetTransNo()) {
        optionals.set(1);
      }
      if (struct.isSetIsShare()) {
        optionals.set(2);
      }
      if (struct.isSetShareId()) {
        optionals.set(3);
      }
      if (struct.isSetClearShareProfitDetail()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetMerchantId()) {
        oprot.writeI32(struct.merchantId);
      }
      if (struct.isSetTransNo()) {
        oprot.writeString(struct.transNo);
      }
      if (struct.isSetIsShare()) {
        oprot.writeString(struct.isShare);
      }
      if (struct.isSetShareId()) {
        oprot.writeString(struct.shareId);
      }
      if (struct.isSetClearShareProfitDetail()) {
        {
          oprot.writeI32(struct.clearShareProfitDetail.size());
          for (ClearShareProfitDetailModel _iter4 : struct.clearShareProfitDetail)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClearShareProfitModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.merchantId = iprot.readI32();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.transNo = iprot.readString();
        struct.setTransNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isShare = iprot.readString();
        struct.setIsShareIsSet(true);
      }
      if (incoming.get(3)) {
        struct.shareId = iprot.readString();
        struct.setShareIdIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.clearShareProfitDetail = new ArrayList<ClearShareProfitDetailModel>(_list5.size);
          ClearShareProfitDetailModel _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new ClearShareProfitDetailModel();
            _elem6.read(iprot);
            struct.clearShareProfitDetail.add(_elem6);
          }
        }
        struct.setClearShareProfitDetailIsSet(true);
      }
    }
  }

}

