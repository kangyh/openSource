/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-27")
public class DoneSettleDifferRecordService {

  public interface Iface {

    public List<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel> getSettleDifferRecord(String differType) throws org.apache.thrift.TException;

    public int updateSettleDifferRecor(com.heepay.rpc.billing.model.DoneSettleDifferRecordModel doneSettleDifferRecordModel) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getSettleDifferRecord(String differType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSettleDifferRecor(com.heepay.rpc.billing.model.DoneSettleDifferRecordModel doneSettleDifferRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel> getSettleDifferRecord(String differType) throws org.apache.thrift.TException
    {
      send_getSettleDifferRecord(differType);
      return recv_getSettleDifferRecord();
    }

    public void send_getSettleDifferRecord(String differType) throws org.apache.thrift.TException
    {
      getSettleDifferRecord_args args = new getSettleDifferRecord_args();
      args.setDifferType(differType);
      sendBase("getSettleDifferRecord", args);
    }

    public List<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel> recv_getSettleDifferRecord() throws org.apache.thrift.TException
    {
      getSettleDifferRecord_result result = new getSettleDifferRecord_result();
      receiveBase(result, "getSettleDifferRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSettleDifferRecord failed: unknown result");
    }

    public int updateSettleDifferRecor(com.heepay.rpc.billing.model.DoneSettleDifferRecordModel doneSettleDifferRecordModel) throws org.apache.thrift.TException
    {
      send_updateSettleDifferRecor(doneSettleDifferRecordModel);
      return recv_updateSettleDifferRecor();
    }

    public void send_updateSettleDifferRecor(com.heepay.rpc.billing.model.DoneSettleDifferRecordModel doneSettleDifferRecordModel) throws org.apache.thrift.TException
    {
      updateSettleDifferRecor_args args = new updateSettleDifferRecor_args();
      args.setDoneSettleDifferRecordModel(doneSettleDifferRecordModel);
      sendBase("updateSettleDifferRecor", args);
    }

    public int recv_updateSettleDifferRecor() throws org.apache.thrift.TException
    {
      updateSettleDifferRecor_result result = new updateSettleDifferRecor_result();
      receiveBase(result, "updateSettleDifferRecor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSettleDifferRecor failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getSettleDifferRecord(String differType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSettleDifferRecord_call method_call = new getSettleDifferRecord_call(differType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSettleDifferRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String differType;
      public getSettleDifferRecord_call(String differType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.differType = differType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSettleDifferRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSettleDifferRecord_args args = new getSettleDifferRecord_args();
        args.setDifferType(differType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSettleDifferRecord();
      }
    }

    public void updateSettleDifferRecor(com.heepay.rpc.billing.model.DoneSettleDifferRecordModel doneSettleDifferRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSettleDifferRecor_call method_call = new updateSettleDifferRecor_call(doneSettleDifferRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSettleDifferRecor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.DoneSettleDifferRecordModel doneSettleDifferRecordModel;
      public updateSettleDifferRecor_call(com.heepay.rpc.billing.model.DoneSettleDifferRecordModel doneSettleDifferRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.doneSettleDifferRecordModel = doneSettleDifferRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSettleDifferRecor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSettleDifferRecor_args args = new updateSettleDifferRecor_args();
        args.setDoneSettleDifferRecordModel(doneSettleDifferRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSettleDifferRecor();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getSettleDifferRecord", new getSettleDifferRecord());
      processMap.put("updateSettleDifferRecor", new updateSettleDifferRecor());
      return processMap;
    }

    public static class getSettleDifferRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSettleDifferRecord_args> {
      public getSettleDifferRecord() {
        super("getSettleDifferRecord");
      }

      public getSettleDifferRecord_args getEmptyArgsInstance() {
        return new getSettleDifferRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSettleDifferRecord_result getResult(I iface, getSettleDifferRecord_args args) throws org.apache.thrift.TException {
        getSettleDifferRecord_result result = new getSettleDifferRecord_result();
        result.success = iface.getSettleDifferRecord(args.differType);
        return result;
      }
    }

    public static class updateSettleDifferRecor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSettleDifferRecor_args> {
      public updateSettleDifferRecor() {
        super("updateSettleDifferRecor");
      }

      public updateSettleDifferRecor_args getEmptyArgsInstance() {
        return new updateSettleDifferRecor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSettleDifferRecor_result getResult(I iface, updateSettleDifferRecor_args args) throws org.apache.thrift.TException {
        updateSettleDifferRecor_result result = new updateSettleDifferRecor_result();
        result.success = iface.updateSettleDifferRecor(args.doneSettleDifferRecordModel);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getSettleDifferRecord", new getSettleDifferRecord());
      processMap.put("updateSettleDifferRecor", new updateSettleDifferRecor());
      return processMap;
    }

    public static class getSettleDifferRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSettleDifferRecord_args, List<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel>> {
      public getSettleDifferRecord() {
        super("getSettleDifferRecord");
      }

      public getSettleDifferRecord_args getEmptyArgsInstance() {
        return new getSettleDifferRecord_args();
      }

      public AsyncMethodCallback<List<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel>>() { 
          public void onComplete(List<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel> o) {
            getSettleDifferRecord_result result = new getSettleDifferRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSettleDifferRecord_result result = new getSettleDifferRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSettleDifferRecord_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel>> resultHandler) throws TException {
        iface.getSettleDifferRecord(args.differType,resultHandler);
      }
    }

    public static class updateSettleDifferRecor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSettleDifferRecor_args, Integer> {
      public updateSettleDifferRecor() {
        super("updateSettleDifferRecor");
      }

      public updateSettleDifferRecor_args getEmptyArgsInstance() {
        return new updateSettleDifferRecor_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateSettleDifferRecor_result result = new updateSettleDifferRecor_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSettleDifferRecor_result result = new updateSettleDifferRecor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSettleDifferRecor_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateSettleDifferRecor(args.doneSettleDifferRecordModel,resultHandler);
      }
    }

  }

  public static class getSettleDifferRecord_args implements org.apache.thrift.TBase<getSettleDifferRecord_args, getSettleDifferRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSettleDifferRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSettleDifferRecord_args");

    private static final org.apache.thrift.protocol.TField DIFFER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("differType", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSettleDifferRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSettleDifferRecord_argsTupleSchemeFactory());
    }

    public String differType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DIFFER_TYPE((short)1, "differType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DIFFER_TYPE
            return DIFFER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DIFFER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("differType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSettleDifferRecord_args.class, metaDataMap);
    }

    public getSettleDifferRecord_args() {
    }

    public getSettleDifferRecord_args(
      String differType)
    {
      this();
      this.differType = differType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSettleDifferRecord_args(getSettleDifferRecord_args other) {
      if (other.isSetDifferType()) {
        this.differType = other.differType;
      }
    }

    public getSettleDifferRecord_args deepCopy() {
      return new getSettleDifferRecord_args(this);
    }

    @Override
    public void clear() {
      this.differType = null;
    }

    public String getDifferType() {
      return this.differType;
    }

    public getSettleDifferRecord_args setDifferType(String differType) {
      this.differType = differType;
      return this;
    }

    public void unsetDifferType() {
      this.differType = null;
    }

    /** Returns true if field differType is set (has been assigned a value) and false otherwise */
    public boolean isSetDifferType() {
      return this.differType != null;
    }

    public void setDifferTypeIsSet(boolean value) {
      if (!value) {
        this.differType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DIFFER_TYPE:
        if (value == null) {
          unsetDifferType();
        } else {
          setDifferType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DIFFER_TYPE:
        return getDifferType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DIFFER_TYPE:
        return isSetDifferType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSettleDifferRecord_args)
        return this.equals((getSettleDifferRecord_args)that);
      return false;
    }

    public boolean equals(getSettleDifferRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_differType = true && this.isSetDifferType();
      boolean that_present_differType = true && that.isSetDifferType();
      if (this_present_differType || that_present_differType) {
        if (!(this_present_differType && that_present_differType))
          return false;
        if (!this.differType.equals(that.differType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_differType = true && (isSetDifferType());
      list.add(present_differType);
      if (present_differType)
        list.add(differType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSettleDifferRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDifferType()).compareTo(other.isSetDifferType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDifferType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.differType, other.differType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSettleDifferRecord_args(");
      boolean first = true;

      sb.append("differType:");
      if (this.differType == null) {
        sb.append("null");
      } else {
        sb.append(this.differType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSettleDifferRecord_argsStandardSchemeFactory implements SchemeFactory {
      public getSettleDifferRecord_argsStandardScheme getScheme() {
        return new getSettleDifferRecord_argsStandardScheme();
      }
    }

    private static class getSettleDifferRecord_argsStandardScheme extends StandardScheme<getSettleDifferRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSettleDifferRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DIFFER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.differType = iprot.readString();
                struct.setDifferTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSettleDifferRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.differType != null) {
          oprot.writeFieldBegin(DIFFER_TYPE_FIELD_DESC);
          oprot.writeString(struct.differType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSettleDifferRecord_argsTupleSchemeFactory implements SchemeFactory {
      public getSettleDifferRecord_argsTupleScheme getScheme() {
        return new getSettleDifferRecord_argsTupleScheme();
      }
    }

    private static class getSettleDifferRecord_argsTupleScheme extends TupleScheme<getSettleDifferRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSettleDifferRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDifferType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDifferType()) {
          oprot.writeString(struct.differType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSettleDifferRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.differType = iprot.readString();
          struct.setDifferTypeIsSet(true);
        }
      }
    }

  }

  public static class getSettleDifferRecord_result implements org.apache.thrift.TBase<getSettleDifferRecord_result, getSettleDifferRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSettleDifferRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSettleDifferRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSettleDifferRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSettleDifferRecord_resultTupleSchemeFactory());
    }

    public List<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.DoneSettleDifferRecordModel.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSettleDifferRecord_result.class, metaDataMap);
    }

    public getSettleDifferRecord_result() {
    }

    public getSettleDifferRecord_result(
      List<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSettleDifferRecord_result(getSettleDifferRecord_result other) {
      if (other.isSetSuccess()) {
        List<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel> __this__success = new ArrayList<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel>(other.success.size());
        for (com.heepay.rpc.billing.model.DoneSettleDifferRecordModel other_element : other.success) {
          __this__success.add(new com.heepay.rpc.billing.model.DoneSettleDifferRecordModel(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSettleDifferRecord_result deepCopy() {
      return new getSettleDifferRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.heepay.rpc.billing.model.DoneSettleDifferRecordModel elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel>();
      }
      this.success.add(elem);
    }

    public List<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel> getSuccess() {
      return this.success;
    }

    public getSettleDifferRecord_result setSuccess(List<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSettleDifferRecord_result)
        return this.equals((getSettleDifferRecord_result)that);
      return false;
    }

    public boolean equals(getSettleDifferRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSettleDifferRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSettleDifferRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSettleDifferRecord_resultStandardSchemeFactory implements SchemeFactory {
      public getSettleDifferRecord_resultStandardScheme getScheme() {
        return new getSettleDifferRecord_resultStandardScheme();
      }
    }

    private static class getSettleDifferRecord_resultStandardScheme extends StandardScheme<getSettleDifferRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSettleDifferRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel>(_list0.size);
                  com.heepay.rpc.billing.model.DoneSettleDifferRecordModel _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.heepay.rpc.billing.model.DoneSettleDifferRecordModel();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSettleDifferRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.heepay.rpc.billing.model.DoneSettleDifferRecordModel _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSettleDifferRecord_resultTupleSchemeFactory implements SchemeFactory {
      public getSettleDifferRecord_resultTupleScheme getScheme() {
        return new getSettleDifferRecord_resultTupleScheme();
      }
    }

    private static class getSettleDifferRecord_resultTupleScheme extends TupleScheme<getSettleDifferRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSettleDifferRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.heepay.rpc.billing.model.DoneSettleDifferRecordModel _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSettleDifferRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.heepay.rpc.billing.model.DoneSettleDifferRecordModel>(_list5.size);
            com.heepay.rpc.billing.model.DoneSettleDifferRecordModel _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.heepay.rpc.billing.model.DoneSettleDifferRecordModel();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateSettleDifferRecor_args implements org.apache.thrift.TBase<updateSettleDifferRecor_args, updateSettleDifferRecor_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSettleDifferRecor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSettleDifferRecor_args");

    private static final org.apache.thrift.protocol.TField DONE_SETTLE_DIFFER_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("doneSettleDifferRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSettleDifferRecor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSettleDifferRecor_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.DoneSettleDifferRecordModel doneSettleDifferRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DONE_SETTLE_DIFFER_RECORD_MODEL((short)1, "doneSettleDifferRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DONE_SETTLE_DIFFER_RECORD_MODEL
            return DONE_SETTLE_DIFFER_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DONE_SETTLE_DIFFER_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("doneSettleDifferRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.DoneSettleDifferRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSettleDifferRecor_args.class, metaDataMap);
    }

    public updateSettleDifferRecor_args() {
    }

    public updateSettleDifferRecor_args(
      com.heepay.rpc.billing.model.DoneSettleDifferRecordModel doneSettleDifferRecordModel)
    {
      this();
      this.doneSettleDifferRecordModel = doneSettleDifferRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSettleDifferRecor_args(updateSettleDifferRecor_args other) {
      if (other.isSetDoneSettleDifferRecordModel()) {
        this.doneSettleDifferRecordModel = new com.heepay.rpc.billing.model.DoneSettleDifferRecordModel(other.doneSettleDifferRecordModel);
      }
    }

    public updateSettleDifferRecor_args deepCopy() {
      return new updateSettleDifferRecor_args(this);
    }

    @Override
    public void clear() {
      this.doneSettleDifferRecordModel = null;
    }

    public com.heepay.rpc.billing.model.DoneSettleDifferRecordModel getDoneSettleDifferRecordModel() {
      return this.doneSettleDifferRecordModel;
    }

    public updateSettleDifferRecor_args setDoneSettleDifferRecordModel(com.heepay.rpc.billing.model.DoneSettleDifferRecordModel doneSettleDifferRecordModel) {
      this.doneSettleDifferRecordModel = doneSettleDifferRecordModel;
      return this;
    }

    public void unsetDoneSettleDifferRecordModel() {
      this.doneSettleDifferRecordModel = null;
    }

    /** Returns true if field doneSettleDifferRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetDoneSettleDifferRecordModel() {
      return this.doneSettleDifferRecordModel != null;
    }

    public void setDoneSettleDifferRecordModelIsSet(boolean value) {
      if (!value) {
        this.doneSettleDifferRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DONE_SETTLE_DIFFER_RECORD_MODEL:
        if (value == null) {
          unsetDoneSettleDifferRecordModel();
        } else {
          setDoneSettleDifferRecordModel((com.heepay.rpc.billing.model.DoneSettleDifferRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DONE_SETTLE_DIFFER_RECORD_MODEL:
        return getDoneSettleDifferRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DONE_SETTLE_DIFFER_RECORD_MODEL:
        return isSetDoneSettleDifferRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSettleDifferRecor_args)
        return this.equals((updateSettleDifferRecor_args)that);
      return false;
    }

    public boolean equals(updateSettleDifferRecor_args that) {
      if (that == null)
        return false;

      boolean this_present_doneSettleDifferRecordModel = true && this.isSetDoneSettleDifferRecordModel();
      boolean that_present_doneSettleDifferRecordModel = true && that.isSetDoneSettleDifferRecordModel();
      if (this_present_doneSettleDifferRecordModel || that_present_doneSettleDifferRecordModel) {
        if (!(this_present_doneSettleDifferRecordModel && that_present_doneSettleDifferRecordModel))
          return false;
        if (!this.doneSettleDifferRecordModel.equals(that.doneSettleDifferRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_doneSettleDifferRecordModel = true && (isSetDoneSettleDifferRecordModel());
      list.add(present_doneSettleDifferRecordModel);
      if (present_doneSettleDifferRecordModel)
        list.add(doneSettleDifferRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSettleDifferRecor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDoneSettleDifferRecordModel()).compareTo(other.isSetDoneSettleDifferRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDoneSettleDifferRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doneSettleDifferRecordModel, other.doneSettleDifferRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSettleDifferRecor_args(");
      boolean first = true;

      sb.append("doneSettleDifferRecordModel:");
      if (this.doneSettleDifferRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.doneSettleDifferRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (doneSettleDifferRecordModel != null) {
        doneSettleDifferRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSettleDifferRecor_argsStandardSchemeFactory implements SchemeFactory {
      public updateSettleDifferRecor_argsStandardScheme getScheme() {
        return new updateSettleDifferRecor_argsStandardScheme();
      }
    }

    private static class updateSettleDifferRecor_argsStandardScheme extends StandardScheme<updateSettleDifferRecor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSettleDifferRecor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DONE_SETTLE_DIFFER_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.doneSettleDifferRecordModel = new com.heepay.rpc.billing.model.DoneSettleDifferRecordModel();
                struct.doneSettleDifferRecordModel.read(iprot);
                struct.setDoneSettleDifferRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSettleDifferRecor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.doneSettleDifferRecordModel != null) {
          oprot.writeFieldBegin(DONE_SETTLE_DIFFER_RECORD_MODEL_FIELD_DESC);
          struct.doneSettleDifferRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSettleDifferRecor_argsTupleSchemeFactory implements SchemeFactory {
      public updateSettleDifferRecor_argsTupleScheme getScheme() {
        return new updateSettleDifferRecor_argsTupleScheme();
      }
    }

    private static class updateSettleDifferRecor_argsTupleScheme extends TupleScheme<updateSettleDifferRecor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSettleDifferRecor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDoneSettleDifferRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDoneSettleDifferRecordModel()) {
          struct.doneSettleDifferRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSettleDifferRecor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.doneSettleDifferRecordModel = new com.heepay.rpc.billing.model.DoneSettleDifferRecordModel();
          struct.doneSettleDifferRecordModel.read(iprot);
          struct.setDoneSettleDifferRecordModelIsSet(true);
        }
      }
    }

  }

  public static class updateSettleDifferRecor_result implements org.apache.thrift.TBase<updateSettleDifferRecor_result, updateSettleDifferRecor_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSettleDifferRecor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSettleDifferRecor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSettleDifferRecor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSettleDifferRecor_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSettleDifferRecor_result.class, metaDataMap);
    }

    public updateSettleDifferRecor_result() {
    }

    public updateSettleDifferRecor_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSettleDifferRecor_result(updateSettleDifferRecor_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateSettleDifferRecor_result deepCopy() {
      return new updateSettleDifferRecor_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateSettleDifferRecor_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSettleDifferRecor_result)
        return this.equals((updateSettleDifferRecor_result)that);
      return false;
    }

    public boolean equals(updateSettleDifferRecor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSettleDifferRecor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSettleDifferRecor_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSettleDifferRecor_resultStandardSchemeFactory implements SchemeFactory {
      public updateSettleDifferRecor_resultStandardScheme getScheme() {
        return new updateSettleDifferRecor_resultStandardScheme();
      }
    }

    private static class updateSettleDifferRecor_resultStandardScheme extends StandardScheme<updateSettleDifferRecor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSettleDifferRecor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSettleDifferRecor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSettleDifferRecor_resultTupleSchemeFactory implements SchemeFactory {
      public updateSettleDifferRecor_resultTupleScheme getScheme() {
        return new updateSettleDifferRecor_resultTupleScheme();
      }
    }

    private static class updateSettleDifferRecor_resultTupleScheme extends TupleScheme<updateSettleDifferRecor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSettleDifferRecor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSettleDifferRecor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
