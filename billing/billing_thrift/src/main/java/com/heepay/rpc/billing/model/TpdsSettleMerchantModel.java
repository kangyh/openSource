/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-13")
public class TpdsSettleMerchantModel implements org.apache.thrift.TBase<TpdsSettleMerchantModel, TpdsSettleMerchantModel._Fields>, java.io.Serializable, Cloneable, Comparable<TpdsSettleMerchantModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TpdsSettleMerchantModel");

  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MERCHANT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TRANS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PAY_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("payNum", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SETTLE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("settleTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SETTLE_BATH_FIELD_DESC = new org.apache.thrift.protocol.TField("settleBath", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TOTAL_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalFee", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("detail", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TpdsSettleMerchantModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TpdsSettleMerchantModelTupleSchemeFactory());
  }

  public String merchantId; // required
  public String merchantType; // required
  public String transType; // required
  public String currency; // required
  public long payNum; // required
  public String totalAmount; // required
  public String settleTime; // required
  public String settleBath; // required
  public String totalFee; // required
  public List<SettleMerchantDetail> detail; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MERCHANT_ID((short)1, "merchantId"),
    MERCHANT_TYPE((short)2, "merchantType"),
    TRANS_TYPE((short)3, "transType"),
    CURRENCY((short)4, "currency"),
    PAY_NUM((short)5, "payNum"),
    TOTAL_AMOUNT((short)6, "totalAmount"),
    SETTLE_TIME((short)7, "settleTime"),
    SETTLE_BATH((short)8, "settleBath"),
    TOTAL_FEE((short)9, "totalFee"),
    DETAIL((short)10, "detail");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MERCHANT_ID
          return MERCHANT_ID;
        case 2: // MERCHANT_TYPE
          return MERCHANT_TYPE;
        case 3: // TRANS_TYPE
          return TRANS_TYPE;
        case 4: // CURRENCY
          return CURRENCY;
        case 5: // PAY_NUM
          return PAY_NUM;
        case 6: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 7: // SETTLE_TIME
          return SETTLE_TIME;
        case 8: // SETTLE_BATH
          return SETTLE_BATH;
        case 9: // TOTAL_FEE
          return TOTAL_FEE;
        case 10: // DETAIL
          return DETAIL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAYNUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("merchantType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_NUM, new org.apache.thrift.meta_data.FieldMetaData("payNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_TIME, new org.apache.thrift.meta_data.FieldMetaData("settleTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_BATH, new org.apache.thrift.meta_data.FieldMetaData("settleBath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_FEE, new org.apache.thrift.meta_data.FieldMetaData("totalFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL, new org.apache.thrift.meta_data.FieldMetaData("detail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SettleMerchantDetail.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TpdsSettleMerchantModel.class, metaDataMap);
  }

  public TpdsSettleMerchantModel() {
  }

  public TpdsSettleMerchantModel(
    String merchantId,
    String merchantType,
    String transType,
    String currency,
    long payNum,
    String totalAmount,
    String settleTime,
    String settleBath,
    String totalFee,
    List<SettleMerchantDetail> detail)
  {
    this();
    this.merchantId = merchantId;
    this.merchantType = merchantType;
    this.transType = transType;
    this.currency = currency;
    this.payNum = payNum;
    setPayNumIsSet(true);
    this.totalAmount = totalAmount;
    this.settleTime = settleTime;
    this.settleBath = settleBath;
    this.totalFee = totalFee;
    this.detail = detail;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TpdsSettleMerchantModel(TpdsSettleMerchantModel other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetMerchantType()) {
      this.merchantType = other.merchantType;
    }
    if (other.isSetTransType()) {
      this.transType = other.transType;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.payNum = other.payNum;
    if (other.isSetTotalAmount()) {
      this.totalAmount = other.totalAmount;
    }
    if (other.isSetSettleTime()) {
      this.settleTime = other.settleTime;
    }
    if (other.isSetSettleBath()) {
      this.settleBath = other.settleBath;
    }
    if (other.isSetTotalFee()) {
      this.totalFee = other.totalFee;
    }
    if (other.isSetDetail()) {
      List<SettleMerchantDetail> __this__detail = new ArrayList<SettleMerchantDetail>(other.detail.size());
      for (SettleMerchantDetail other_element : other.detail) {
        __this__detail.add(new SettleMerchantDetail(other_element));
      }
      this.detail = __this__detail;
    }
  }

  public TpdsSettleMerchantModel deepCopy() {
    return new TpdsSettleMerchantModel(this);
  }

  @Override
  public void clear() {
    this.merchantId = null;
    this.merchantType = null;
    this.transType = null;
    this.currency = null;
    setPayNumIsSet(false);
    this.payNum = 0;
    this.totalAmount = null;
    this.settleTime = null;
    this.settleBath = null;
    this.totalFee = null;
    this.detail = null;
  }

  public String getMerchantId() {
    return this.merchantId;
  }

  public TpdsSettleMerchantModel setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  public String getMerchantType() {
    return this.merchantType;
  }

  public TpdsSettleMerchantModel setMerchantType(String merchantType) {
    this.merchantType = merchantType;
    return this;
  }

  public void unsetMerchantType() {
    this.merchantType = null;
  }

  /** Returns true if field merchantType is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantType() {
    return this.merchantType != null;
  }

  public void setMerchantTypeIsSet(boolean value) {
    if (!value) {
      this.merchantType = null;
    }
  }

  public String getTransType() {
    return this.transType;
  }

  public TpdsSettleMerchantModel setTransType(String transType) {
    this.transType = transType;
    return this;
  }

  public void unsetTransType() {
    this.transType = null;
  }

  /** Returns true if field transType is set (has been assigned a value) and false otherwise */
  public boolean isSetTransType() {
    return this.transType != null;
  }

  public void setTransTypeIsSet(boolean value) {
    if (!value) {
      this.transType = null;
    }
  }

  public String getCurrency() {
    return this.currency;
  }

  public TpdsSettleMerchantModel setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public long getPayNum() {
    return this.payNum;
  }

  public TpdsSettleMerchantModel setPayNum(long payNum) {
    this.payNum = payNum;
    setPayNumIsSet(true);
    return this;
  }

  public void unsetPayNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYNUM_ISSET_ID);
  }

  /** Returns true if field payNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPayNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYNUM_ISSET_ID);
  }

  public void setPayNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYNUM_ISSET_ID, value);
  }

  public String getTotalAmount() {
    return this.totalAmount;
  }

  public TpdsSettleMerchantModel setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  public void unsetTotalAmount() {
    this.totalAmount = null;
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return this.totalAmount != null;
  }

  public void setTotalAmountIsSet(boolean value) {
    if (!value) {
      this.totalAmount = null;
    }
  }

  public String getSettleTime() {
    return this.settleTime;
  }

  public TpdsSettleMerchantModel setSettleTime(String settleTime) {
    this.settleTime = settleTime;
    return this;
  }

  public void unsetSettleTime() {
    this.settleTime = null;
  }

  /** Returns true if field settleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleTime() {
    return this.settleTime != null;
  }

  public void setSettleTimeIsSet(boolean value) {
    if (!value) {
      this.settleTime = null;
    }
  }

  public String getSettleBath() {
    return this.settleBath;
  }

  public TpdsSettleMerchantModel setSettleBath(String settleBath) {
    this.settleBath = settleBath;
    return this;
  }

  public void unsetSettleBath() {
    this.settleBath = null;
  }

  /** Returns true if field settleBath is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleBath() {
    return this.settleBath != null;
  }

  public void setSettleBathIsSet(boolean value) {
    if (!value) {
      this.settleBath = null;
    }
  }

  public String getTotalFee() {
    return this.totalFee;
  }

  public TpdsSettleMerchantModel setTotalFee(String totalFee) {
    this.totalFee = totalFee;
    return this;
  }

  public void unsetTotalFee() {
    this.totalFee = null;
  }

  /** Returns true if field totalFee is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalFee() {
    return this.totalFee != null;
  }

  public void setTotalFeeIsSet(boolean value) {
    if (!value) {
      this.totalFee = null;
    }
  }

  public int getDetailSize() {
    return (this.detail == null) ? 0 : this.detail.size();
  }

  public java.util.Iterator<SettleMerchantDetail> getDetailIterator() {
    return (this.detail == null) ? null : this.detail.iterator();
  }

  public void addToDetail(SettleMerchantDetail elem) {
    if (this.detail == null) {
      this.detail = new ArrayList<SettleMerchantDetail>();
    }
    this.detail.add(elem);
  }

  public List<SettleMerchantDetail> getDetail() {
    return this.detail;
  }

  public TpdsSettleMerchantModel setDetail(List<SettleMerchantDetail> detail) {
    this.detail = detail;
    return this;
  }

  public void unsetDetail() {
    this.detail = null;
  }

  /** Returns true if field detail is set (has been assigned a value) and false otherwise */
  public boolean isSetDetail() {
    return this.detail != null;
  }

  public void setDetailIsSet(boolean value) {
    if (!value) {
      this.detail = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case MERCHANT_TYPE:
      if (value == null) {
        unsetMerchantType();
      } else {
        setMerchantType((String)value);
      }
      break;

    case TRANS_TYPE:
      if (value == null) {
        unsetTransType();
      } else {
        setTransType((String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case PAY_NUM:
      if (value == null) {
        unsetPayNum();
      } else {
        setPayNum((Long)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((String)value);
      }
      break;

    case SETTLE_TIME:
      if (value == null) {
        unsetSettleTime();
      } else {
        setSettleTime((String)value);
      }
      break;

    case SETTLE_BATH:
      if (value == null) {
        unsetSettleBath();
      } else {
        setSettleBath((String)value);
      }
      break;

    case TOTAL_FEE:
      if (value == null) {
        unsetTotalFee();
      } else {
        setTotalFee((String)value);
      }
      break;

    case DETAIL:
      if (value == null) {
        unsetDetail();
      } else {
        setDetail((List<SettleMerchantDetail>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MERCHANT_ID:
      return getMerchantId();

    case MERCHANT_TYPE:
      return getMerchantType();

    case TRANS_TYPE:
      return getTransType();

    case CURRENCY:
      return getCurrency();

    case PAY_NUM:
      return getPayNum();

    case TOTAL_AMOUNT:
      return getTotalAmount();

    case SETTLE_TIME:
      return getSettleTime();

    case SETTLE_BATH:
      return getSettleBath();

    case TOTAL_FEE:
      return getTotalFee();

    case DETAIL:
      return getDetail();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MERCHANT_ID:
      return isSetMerchantId();
    case MERCHANT_TYPE:
      return isSetMerchantType();
    case TRANS_TYPE:
      return isSetTransType();
    case CURRENCY:
      return isSetCurrency();
    case PAY_NUM:
      return isSetPayNum();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case SETTLE_TIME:
      return isSetSettleTime();
    case SETTLE_BATH:
      return isSetSettleBath();
    case TOTAL_FEE:
      return isSetTotalFee();
    case DETAIL:
      return isSetDetail();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TpdsSettleMerchantModel)
      return this.equals((TpdsSettleMerchantModel)that);
    return false;
  }

  public boolean equals(TpdsSettleMerchantModel that) {
    if (that == null)
      return false;

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_merchantType = true && this.isSetMerchantType();
    boolean that_present_merchantType = true && that.isSetMerchantType();
    if (this_present_merchantType || that_present_merchantType) {
      if (!(this_present_merchantType && that_present_merchantType))
        return false;
      if (!this.merchantType.equals(that.merchantType))
        return false;
    }

    boolean this_present_transType = true && this.isSetTransType();
    boolean that_present_transType = true && that.isSetTransType();
    if (this_present_transType || that_present_transType) {
      if (!(this_present_transType && that_present_transType))
        return false;
      if (!this.transType.equals(that.transType))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_payNum = true;
    boolean that_present_payNum = true;
    if (this_present_payNum || that_present_payNum) {
      if (!(this_present_payNum && that_present_payNum))
        return false;
      if (this.payNum != that.payNum)
        return false;
    }

    boolean this_present_totalAmount = true && this.isSetTotalAmount();
    boolean that_present_totalAmount = true && that.isSetTotalAmount();
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (!this.totalAmount.equals(that.totalAmount))
        return false;
    }

    boolean this_present_settleTime = true && this.isSetSettleTime();
    boolean that_present_settleTime = true && that.isSetSettleTime();
    if (this_present_settleTime || that_present_settleTime) {
      if (!(this_present_settleTime && that_present_settleTime))
        return false;
      if (!this.settleTime.equals(that.settleTime))
        return false;
    }

    boolean this_present_settleBath = true && this.isSetSettleBath();
    boolean that_present_settleBath = true && that.isSetSettleBath();
    if (this_present_settleBath || that_present_settleBath) {
      if (!(this_present_settleBath && that_present_settleBath))
        return false;
      if (!this.settleBath.equals(that.settleBath))
        return false;
    }

    boolean this_present_totalFee = true && this.isSetTotalFee();
    boolean that_present_totalFee = true && that.isSetTotalFee();
    if (this_present_totalFee || that_present_totalFee) {
      if (!(this_present_totalFee && that_present_totalFee))
        return false;
      if (!this.totalFee.equals(that.totalFee))
        return false;
    }

    boolean this_present_detail = true && this.isSetDetail();
    boolean that_present_detail = true && that.isSetDetail();
    if (this_present_detail || that_present_detail) {
      if (!(this_present_detail && that_present_detail))
        return false;
      if (!this.detail.equals(that.detail))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_merchantType = true && (isSetMerchantType());
    list.add(present_merchantType);
    if (present_merchantType)
      list.add(merchantType);

    boolean present_transType = true && (isSetTransType());
    list.add(present_transType);
    if (present_transType)
      list.add(transType);

    boolean present_currency = true && (isSetCurrency());
    list.add(present_currency);
    if (present_currency)
      list.add(currency);

    boolean present_payNum = true;
    list.add(present_payNum);
    if (present_payNum)
      list.add(payNum);

    boolean present_totalAmount = true && (isSetTotalAmount());
    list.add(present_totalAmount);
    if (present_totalAmount)
      list.add(totalAmount);

    boolean present_settleTime = true && (isSetSettleTime());
    list.add(present_settleTime);
    if (present_settleTime)
      list.add(settleTime);

    boolean present_settleBath = true && (isSetSettleBath());
    list.add(present_settleBath);
    if (present_settleBath)
      list.add(settleBath);

    boolean present_totalFee = true && (isSetTotalFee());
    list.add(present_totalFee);
    if (present_totalFee)
      list.add(totalFee);

    boolean present_detail = true && (isSetDetail());
    list.add(present_detail);
    if (present_detail)
      list.add(detail);

    return list.hashCode();
  }

  @Override
  public int compareTo(TpdsSettleMerchantModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantType()).compareTo(other.isSetMerchantType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantType, other.merchantType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransType()).compareTo(other.isSetTransType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transType, other.transType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayNum()).compareTo(other.isSetPayNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payNum, other.payNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleTime()).compareTo(other.isSetSettleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleTime, other.settleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleBath()).compareTo(other.isSetSettleBath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleBath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleBath, other.settleBath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalFee()).compareTo(other.isSetTotalFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalFee, other.totalFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetail()).compareTo(other.isSetDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detail, other.detail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TpdsSettleMerchantModel(");
    boolean first = true;

    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantType:");
    if (this.merchantType == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transType:");
    if (this.transType == null) {
      sb.append("null");
    } else {
      sb.append(this.transType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payNum:");
    sb.append(this.payNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmount:");
    if (this.totalAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.totalAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleTime:");
    if (this.settleTime == null) {
      sb.append("null");
    } else {
      sb.append(this.settleTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleBath:");
    if (this.settleBath == null) {
      sb.append("null");
    } else {
      sb.append(this.settleBath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalFee:");
    if (this.totalFee == null) {
      sb.append("null");
    } else {
      sb.append(this.totalFee);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detail:");
    if (this.detail == null) {
      sb.append("null");
    } else {
      sb.append(this.detail);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TpdsSettleMerchantModelStandardSchemeFactory implements SchemeFactory {
    public TpdsSettleMerchantModelStandardScheme getScheme() {
      return new TpdsSettleMerchantModelStandardScheme();
    }
  }

  private static class TpdsSettleMerchantModelStandardScheme extends StandardScheme<TpdsSettleMerchantModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TpdsSettleMerchantModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MERCHANT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantType = iprot.readString();
              struct.setMerchantTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transType = iprot.readString();
              struct.setTransTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAY_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.payNum = iprot.readI64();
              struct.setPayNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalAmount = iprot.readString();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SETTLE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleTime = iprot.readString();
              struct.setSettleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SETTLE_BATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleBath = iprot.readString();
              struct.setSettleBathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOTAL_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalFee = iprot.readString();
              struct.setTotalFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.detail = new ArrayList<SettleMerchantDetail>(_list0.size);
                SettleMerchantDetail _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new SettleMerchantDetail();
                  _elem1.read(iprot);
                  struct.detail.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TpdsSettleMerchantModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantType != null) {
        oprot.writeFieldBegin(MERCHANT_TYPE_FIELD_DESC);
        oprot.writeString(struct.merchantType);
        oprot.writeFieldEnd();
      }
      if (struct.transType != null) {
        oprot.writeFieldBegin(TRANS_TYPE_FIELD_DESC);
        oprot.writeString(struct.transType);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.currency);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAY_NUM_FIELD_DESC);
      oprot.writeI64(struct.payNum);
      oprot.writeFieldEnd();
      if (struct.totalAmount != null) {
        oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.totalAmount);
        oprot.writeFieldEnd();
      }
      if (struct.settleTime != null) {
        oprot.writeFieldBegin(SETTLE_TIME_FIELD_DESC);
        oprot.writeString(struct.settleTime);
        oprot.writeFieldEnd();
      }
      if (struct.settleBath != null) {
        oprot.writeFieldBegin(SETTLE_BATH_FIELD_DESC);
        oprot.writeString(struct.settleBath);
        oprot.writeFieldEnd();
      }
      if (struct.totalFee != null) {
        oprot.writeFieldBegin(TOTAL_FEE_FIELD_DESC);
        oprot.writeString(struct.totalFee);
        oprot.writeFieldEnd();
      }
      if (struct.detail != null) {
        oprot.writeFieldBegin(DETAIL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.detail.size()));
          for (SettleMerchantDetail _iter3 : struct.detail)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TpdsSettleMerchantModelTupleSchemeFactory implements SchemeFactory {
    public TpdsSettleMerchantModelTupleScheme getScheme() {
      return new TpdsSettleMerchantModelTupleScheme();
    }
  }

  private static class TpdsSettleMerchantModelTupleScheme extends TupleScheme<TpdsSettleMerchantModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TpdsSettleMerchantModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMerchantId()) {
        optionals.set(0);
      }
      if (struct.isSetMerchantType()) {
        optionals.set(1);
      }
      if (struct.isSetTransType()) {
        optionals.set(2);
      }
      if (struct.isSetCurrency()) {
        optionals.set(3);
      }
      if (struct.isSetPayNum()) {
        optionals.set(4);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(5);
      }
      if (struct.isSetSettleTime()) {
        optionals.set(6);
      }
      if (struct.isSetSettleBath()) {
        optionals.set(7);
      }
      if (struct.isSetTotalFee()) {
        optionals.set(8);
      }
      if (struct.isSetDetail()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetMerchantType()) {
        oprot.writeString(struct.merchantType);
      }
      if (struct.isSetTransType()) {
        oprot.writeString(struct.transType);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetPayNum()) {
        oprot.writeI64(struct.payNum);
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeString(struct.totalAmount);
      }
      if (struct.isSetSettleTime()) {
        oprot.writeString(struct.settleTime);
      }
      if (struct.isSetSettleBath()) {
        oprot.writeString(struct.settleBath);
      }
      if (struct.isSetTotalFee()) {
        oprot.writeString(struct.totalFee);
      }
      if (struct.isSetDetail()) {
        {
          oprot.writeI32(struct.detail.size());
          for (SettleMerchantDetail _iter4 : struct.detail)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TpdsSettleMerchantModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.merchantType = iprot.readString();
        struct.setMerchantTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.transType = iprot.readString();
        struct.setTransTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.payNum = iprot.readI64();
        struct.setPayNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.totalAmount = iprot.readString();
        struct.setTotalAmountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.settleTime = iprot.readString();
        struct.setSettleTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.settleBath = iprot.readString();
        struct.setSettleBathIsSet(true);
      }
      if (incoming.get(8)) {
        struct.totalFee = iprot.readString();
        struct.setTotalFeeIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.detail = new ArrayList<SettleMerchantDetail>(_list5.size);
          SettleMerchantDetail _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new SettleMerchantDetail();
            _elem6.read(iprot);
            struct.detail.add(_elem6);
          }
        }
        struct.setDetailIsSet(true);
      }
    }
  }

}

