/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-07-10")
public class SettleBatchMsgModel implements org.apache.thrift.TBase<SettleBatchMsgModel, SettleBatchMsgModel._Fields>, java.io.Serializable, Cloneable, Comparable<SettleBatchMsgModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SettleBatchMsgModel");

  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SETTLE_BATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("settleBatch", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SETTLE_MERCHANT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("settleMerchantList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SETTLE_CHANNEL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("settleChannelList", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SettleBatchMsgModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SettleBatchMsgModelTupleSchemeFactory());
  }

  public long total; // required
  public String settleBatch; // required
  public int pageSize; // required
  public int pageNum; // required
  public List<SettleMerchantModel> settleMerchantList; // required
  public List<SettleChannelModel> settleChannelList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL((short)1, "total"),
    SETTLE_BATCH((short)2, "settleBatch"),
    PAGE_SIZE((short)3, "pageSize"),
    PAGE_NUM((short)4, "pageNum"),
    SETTLE_MERCHANT_LIST((short)5, "settleMerchantList"),
    SETTLE_CHANNEL_LIST((short)6, "settleChannelList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL
          return TOTAL;
        case 2: // SETTLE_BATCH
          return SETTLE_BATCH;
        case 3: // PAGE_SIZE
          return PAGE_SIZE;
        case 4: // PAGE_NUM
          return PAGE_NUM;
        case 5: // SETTLE_MERCHANT_LIST
          return SETTLE_MERCHANT_LIST;
        case 6: // SETTLE_CHANNEL_LIST
          return SETTLE_CHANNEL_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTAL_ISSET_ID = 0;
  private static final int __PAGESIZE_ISSET_ID = 1;
  private static final int __PAGENUM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SETTLE_BATCH, new org.apache.thrift.meta_data.FieldMetaData("settleBatch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SETTLE_MERCHANT_LIST, new org.apache.thrift.meta_data.FieldMetaData("settleMerchantList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "SettleMerchantModel"))));
    tmpMap.put(_Fields.SETTLE_CHANNEL_LIST, new org.apache.thrift.meta_data.FieldMetaData("settleChannelList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "SettleChannelModel"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettleBatchMsgModel.class, metaDataMap);
  }

  public SettleBatchMsgModel() {
  }

  public SettleBatchMsgModel(
    long total,
    String settleBatch,
    int pageSize,
    int pageNum,
    List<SettleMerchantModel> settleMerchantList,
    List<SettleChannelModel> settleChannelList)
  {
    this();
    this.total = total;
    setTotalIsSet(true);
    this.settleBatch = settleBatch;
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    this.pageNum = pageNum;
    setPageNumIsSet(true);
    this.settleMerchantList = settleMerchantList;
    this.settleChannelList = settleChannelList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SettleBatchMsgModel(SettleBatchMsgModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.total = other.total;
    if (other.isSetSettleBatch()) {
      this.settleBatch = other.settleBatch;
    }
    this.pageSize = other.pageSize;
    this.pageNum = other.pageNum;
    if (other.isSetSettleMerchantList()) {
      List<SettleMerchantModel> __this__settleMerchantList = new ArrayList<SettleMerchantModel>(other.settleMerchantList.size());
      for (SettleMerchantModel other_element : other.settleMerchantList) {
        __this__settleMerchantList.add(other_element);
      }
      this.settleMerchantList = __this__settleMerchantList;
    }
    if (other.isSetSettleChannelList()) {
      List<SettleChannelModel> __this__settleChannelList = new ArrayList<SettleChannelModel>(other.settleChannelList.size());
      for (SettleChannelModel other_element : other.settleChannelList) {
        __this__settleChannelList.add(other_element);
      }
      this.settleChannelList = __this__settleChannelList;
    }
  }

  public SettleBatchMsgModel deepCopy() {
    return new SettleBatchMsgModel(this);
  }

  @Override
  public void clear() {
    setTotalIsSet(false);
    this.total = 0;
    this.settleBatch = null;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    setPageNumIsSet(false);
    this.pageNum = 0;
    this.settleMerchantList = null;
    this.settleChannelList = null;
  }

  public long getTotal() {
    return this.total;
  }

  public SettleBatchMsgModel setTotal(long total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public String getSettleBatch() {
    return this.settleBatch;
  }

  public SettleBatchMsgModel setSettleBatch(String settleBatch) {
    this.settleBatch = settleBatch;
    return this;
  }

  public void unsetSettleBatch() {
    this.settleBatch = null;
  }

  /** Returns true if field settleBatch is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleBatch() {
    return this.settleBatch != null;
  }

  public void setSettleBatchIsSet(boolean value) {
    if (!value) {
      this.settleBatch = null;
    }
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public SettleBatchMsgModel setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getPageNum() {
    return this.pageNum;
  }

  public SettleBatchMsgModel setPageNum(int pageNum) {
    this.pageNum = pageNum;
    setPageNumIsSet(true);
    return this;
  }

  public void unsetPageNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
  }

  /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPageNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
  }

  public void setPageNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
  }

  public int getSettleMerchantListSize() {
    return (this.settleMerchantList == null) ? 0 : this.settleMerchantList.size();
  }

  public java.util.Iterator<SettleMerchantModel> getSettleMerchantListIterator() {
    return (this.settleMerchantList == null) ? null : this.settleMerchantList.iterator();
  }

  public void addToSettleMerchantList(SettleMerchantModel elem) {
    if (this.settleMerchantList == null) {
      this.settleMerchantList = new ArrayList<SettleMerchantModel>();
    }
    this.settleMerchantList.add(elem);
  }

  public List<SettleMerchantModel> getSettleMerchantList() {
    return this.settleMerchantList;
  }

  public SettleBatchMsgModel setSettleMerchantList(List<SettleMerchantModel> settleMerchantList) {
    this.settleMerchantList = settleMerchantList;
    return this;
  }

  public void unsetSettleMerchantList() {
    this.settleMerchantList = null;
  }

  /** Returns true if field settleMerchantList is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleMerchantList() {
    return this.settleMerchantList != null;
  }

  public void setSettleMerchantListIsSet(boolean value) {
    if (!value) {
      this.settleMerchantList = null;
    }
  }

  public int getSettleChannelListSize() {
    return (this.settleChannelList == null) ? 0 : this.settleChannelList.size();
  }

  public java.util.Iterator<SettleChannelModel> getSettleChannelListIterator() {
    return (this.settleChannelList == null) ? null : this.settleChannelList.iterator();
  }

  public void addToSettleChannelList(SettleChannelModel elem) {
    if (this.settleChannelList == null) {
      this.settleChannelList = new ArrayList<SettleChannelModel>();
    }
    this.settleChannelList.add(elem);
  }

  public List<SettleChannelModel> getSettleChannelList() {
    return this.settleChannelList;
  }

  public SettleBatchMsgModel setSettleChannelList(List<SettleChannelModel> settleChannelList) {
    this.settleChannelList = settleChannelList;
    return this;
  }

  public void unsetSettleChannelList() {
    this.settleChannelList = null;
  }

  /** Returns true if field settleChannelList is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleChannelList() {
    return this.settleChannelList != null;
  }

  public void setSettleChannelListIsSet(boolean value) {
    if (!value) {
      this.settleChannelList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Long)value);
      }
      break;

    case SETTLE_BATCH:
      if (value == null) {
        unsetSettleBatch();
      } else {
        setSettleBatch((String)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case PAGE_NUM:
      if (value == null) {
        unsetPageNum();
      } else {
        setPageNum((Integer)value);
      }
      break;

    case SETTLE_MERCHANT_LIST:
      if (value == null) {
        unsetSettleMerchantList();
      } else {
        setSettleMerchantList((List<SettleMerchantModel>)value);
      }
      break;

    case SETTLE_CHANNEL_LIST:
      if (value == null) {
        unsetSettleChannelList();
      } else {
        setSettleChannelList((List<SettleChannelModel>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL:
      return getTotal();

    case SETTLE_BATCH:
      return getSettleBatch();

    case PAGE_SIZE:
      return getPageSize();

    case PAGE_NUM:
      return getPageNum();

    case SETTLE_MERCHANT_LIST:
      return getSettleMerchantList();

    case SETTLE_CHANNEL_LIST:
      return getSettleChannelList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL:
      return isSetTotal();
    case SETTLE_BATCH:
      return isSetSettleBatch();
    case PAGE_SIZE:
      return isSetPageSize();
    case PAGE_NUM:
      return isSetPageNum();
    case SETTLE_MERCHANT_LIST:
      return isSetSettleMerchantList();
    case SETTLE_CHANNEL_LIST:
      return isSetSettleChannelList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SettleBatchMsgModel)
      return this.equals((SettleBatchMsgModel)that);
    return false;
  }

  public boolean equals(SettleBatchMsgModel that) {
    if (that == null)
      return false;

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_settleBatch = true && this.isSetSettleBatch();
    boolean that_present_settleBatch = true && that.isSetSettleBatch();
    if (this_present_settleBatch || that_present_settleBatch) {
      if (!(this_present_settleBatch && that_present_settleBatch))
        return false;
      if (!this.settleBatch.equals(that.settleBatch))
        return false;
    }

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_pageNum = true;
    boolean that_present_pageNum = true;
    if (this_present_pageNum || that_present_pageNum) {
      if (!(this_present_pageNum && that_present_pageNum))
        return false;
      if (this.pageNum != that.pageNum)
        return false;
    }

    boolean this_present_settleMerchantList = true && this.isSetSettleMerchantList();
    boolean that_present_settleMerchantList = true && that.isSetSettleMerchantList();
    if (this_present_settleMerchantList || that_present_settleMerchantList) {
      if (!(this_present_settleMerchantList && that_present_settleMerchantList))
        return false;
      if (!this.settleMerchantList.equals(that.settleMerchantList))
        return false;
    }

    boolean this_present_settleChannelList = true && this.isSetSettleChannelList();
    boolean that_present_settleChannelList = true && that.isSetSettleChannelList();
    if (this_present_settleChannelList || that_present_settleChannelList) {
      if (!(this_present_settleChannelList && that_present_settleChannelList))
        return false;
      if (!this.settleChannelList.equals(that.settleChannelList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_total = true;
    list.add(present_total);
    if (present_total)
      list.add(total);

    boolean present_settleBatch = true && (isSetSettleBatch());
    list.add(present_settleBatch);
    if (present_settleBatch)
      list.add(settleBatch);

    boolean present_pageSize = true;
    list.add(present_pageSize);
    if (present_pageSize)
      list.add(pageSize);

    boolean present_pageNum = true;
    list.add(present_pageNum);
    if (present_pageNum)
      list.add(pageNum);

    boolean present_settleMerchantList = true && (isSetSettleMerchantList());
    list.add(present_settleMerchantList);
    if (present_settleMerchantList)
      list.add(settleMerchantList);

    boolean present_settleChannelList = true && (isSetSettleChannelList());
    list.add(present_settleChannelList);
    if (present_settleChannelList)
      list.add(settleChannelList);

    return list.hashCode();
  }

  @Override
  public int compareTo(SettleBatchMsgModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleBatch()).compareTo(other.isSetSettleBatch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleBatch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleBatch, other.settleBatch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleMerchantList()).compareTo(other.isSetSettleMerchantList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleMerchantList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleMerchantList, other.settleMerchantList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleChannelList()).compareTo(other.isSetSettleChannelList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleChannelList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleChannelList, other.settleChannelList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SettleBatchMsgModel(");
    boolean first = true;

    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleBatch:");
    if (this.settleBatch == null) {
      sb.append("null");
    } else {
      sb.append(this.settleBatch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageNum:");
    sb.append(this.pageNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleMerchantList:");
    if (this.settleMerchantList == null) {
      sb.append("null");
    } else {
      sb.append(this.settleMerchantList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleChannelList:");
    if (this.settleChannelList == null) {
      sb.append("null");
    } else {
      sb.append(this.settleChannelList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettleBatchMsgModelStandardSchemeFactory implements SchemeFactory {
    public SettleBatchMsgModelStandardScheme getScheme() {
      return new SettleBatchMsgModelStandardScheme();
    }
  }

  private static class SettleBatchMsgModelStandardScheme extends StandardScheme<SettleBatchMsgModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SettleBatchMsgModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.total = iprot.readI64();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SETTLE_BATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleBatch = iprot.readString();
              struct.setSettleBatchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageNum = iprot.readI32();
              struct.setPageNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SETTLE_MERCHANT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.settleMerchantList = new ArrayList<SettleMerchantModel>(_list0.size);
                SettleMerchantModel _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new SettleMerchantModel();
                  _elem1.read(iprot);
                  struct.settleMerchantList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setSettleMerchantListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SETTLE_CHANNEL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.settleChannelList = new ArrayList<SettleChannelModel>(_list3.size);
                SettleChannelModel _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new SettleChannelModel();
                  _elem4.read(iprot);
                  struct.settleChannelList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setSettleChannelListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SettleBatchMsgModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeI64(struct.total);
      oprot.writeFieldEnd();
      if (struct.settleBatch != null) {
        oprot.writeFieldBegin(SETTLE_BATCH_FIELD_DESC);
        oprot.writeString(struct.settleBatch);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
      oprot.writeI32(struct.pageNum);
      oprot.writeFieldEnd();
      if (struct.settleMerchantList != null) {
        oprot.writeFieldBegin(SETTLE_MERCHANT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.settleMerchantList.size()));
          for (SettleMerchantModel _iter6 : struct.settleMerchantList)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.settleChannelList != null) {
        oprot.writeFieldBegin(SETTLE_CHANNEL_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.settleChannelList.size()));
          for (SettleChannelModel _iter7 : struct.settleChannelList)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SettleBatchMsgModelTupleSchemeFactory implements SchemeFactory {
    public SettleBatchMsgModelTupleScheme getScheme() {
      return new SettleBatchMsgModelTupleScheme();
    }
  }

  private static class SettleBatchMsgModelTupleScheme extends TupleScheme<SettleBatchMsgModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SettleBatchMsgModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTotal()) {
        optionals.set(0);
      }
      if (struct.isSetSettleBatch()) {
        optionals.set(1);
      }
      if (struct.isSetPageSize()) {
        optionals.set(2);
      }
      if (struct.isSetPageNum()) {
        optionals.set(3);
      }
      if (struct.isSetSettleMerchantList()) {
        optionals.set(4);
      }
      if (struct.isSetSettleChannelList()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTotal()) {
        oprot.writeI64(struct.total);
      }
      if (struct.isSetSettleBatch()) {
        oprot.writeString(struct.settleBatch);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetPageNum()) {
        oprot.writeI32(struct.pageNum);
      }
      if (struct.isSetSettleMerchantList()) {
        {
          oprot.writeI32(struct.settleMerchantList.size());
          for (SettleMerchantModel _iter8 : struct.settleMerchantList)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetSettleChannelList()) {
        {
          oprot.writeI32(struct.settleChannelList.size());
          for (SettleChannelModel _iter9 : struct.settleChannelList)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SettleBatchMsgModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.total = iprot.readI64();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(1)) {
        struct.settleBatch = iprot.readString();
        struct.setSettleBatchIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pageNum = iprot.readI32();
        struct.setPageNumIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.settleMerchantList = new ArrayList<SettleMerchantModel>(_list10.size);
          SettleMerchantModel _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new SettleMerchantModel();
            _elem11.read(iprot);
            struct.settleMerchantList.add(_elem11);
          }
        }
        struct.setSettleMerchantListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.settleChannelList = new ArrayList<SettleChannelModel>(_list13.size);
          SettleChannelModel _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new SettleChannelModel();
            _elem14.read(iprot);
            struct.settleChannelList.add(_elem14);
          }
        }
        struct.setSettleChannelListIsSet(true);
      }
    }
  }

}

