/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-27")
public class DoneSettleDifferRecordModel implements org.apache.thrift.TBase<DoneSettleDifferRecordModel, DoneSettleDifferRecordModel._Fields>, java.io.Serializable, Cloneable, Comparable<DoneSettleDifferRecordModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DoneSettleDifferRecordModel");

  private static final org.apache.thrift.protocol.TField DIFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("differId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CHANNEL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CHANNEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("channelName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SUCCESS_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("successAmount", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REQUEST_AMOUNT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestAmountAmount", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CHECK_BATHNO_FIELD_DESC = new org.apache.thrift.protocol.TField("checkBathno", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SETTLE_BATH_FIELD_DESC = new org.apache.thrift.protocol.TField("settleBath", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CHANNEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelType", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("productCode", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CHANNLE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("channleNo", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField DIFFER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("differType", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField HANDLE_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("handleResult", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField HANDLE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("handleMessage", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField ERROR_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorDate", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField OPERATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("operationDate", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField FEE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("feeAmount", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField COST_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("costAmount", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SETTLE_AMOUNT_PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("settleAmountPlan", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField TRANS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transType", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField TRANS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("transStatus", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField IS_BILL_FIELD_DESC = new org.apache.thrift.protocol.TField("isBill", org.apache.thrift.protocol.TType.STRING, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DoneSettleDifferRecordModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DoneSettleDifferRecordModelTupleSchemeFactory());
  }

  public long differId; // required
  public int merchantId; // required
  public String paymentId; // required
  public String transNo; // required
  public String channelCode; // required
  public String channelName; // required
  public String successAmount; // required
  public String requestAmountAmount; // required
  public String checkBathno; // required
  public String settleBath; // required
  public String channelType; // required
  public String productCode; // required
  public String productName; // required
  public String channleNo; // required
  public String differType; // required
  public String handleResult; // required
  public String handleMessage; // required
  public String errorDate; // required
  public String operationDate; // required
  public String feeAmount; // required
  public String costAmount; // required
  public String settleAmountPlan; // required
  public String transType; // required
  public String transStatus; // required
  public String isBill; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DIFFER_ID((short)1, "differId"),
    MERCHANT_ID((short)2, "merchantId"),
    PAYMENT_ID((short)3, "paymentId"),
    TRANS_NO((short)4, "transNo"),
    CHANNEL_CODE((short)5, "channelCode"),
    CHANNEL_NAME((short)6, "channelName"),
    SUCCESS_AMOUNT((short)7, "successAmount"),
    REQUEST_AMOUNT_AMOUNT((short)8, "requestAmountAmount"),
    CHECK_BATHNO((short)9, "checkBathno"),
    SETTLE_BATH((short)10, "settleBath"),
    CHANNEL_TYPE((short)11, "channelType"),
    PRODUCT_CODE((short)12, "productCode"),
    PRODUCT_NAME((short)13, "productName"),
    CHANNLE_NO((short)14, "channleNo"),
    DIFFER_TYPE((short)15, "differType"),
    HANDLE_RESULT((short)16, "handleResult"),
    HANDLE_MESSAGE((short)17, "handleMessage"),
    ERROR_DATE((short)18, "errorDate"),
    OPERATION_DATE((short)19, "operationDate"),
    FEE_AMOUNT((short)20, "feeAmount"),
    COST_AMOUNT((short)21, "costAmount"),
    SETTLE_AMOUNT_PLAN((short)22, "settleAmountPlan"),
    TRANS_TYPE((short)23, "transType"),
    TRANS_STATUS((short)24, "transStatus"),
    IS_BILL((short)25, "isBill");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIFFER_ID
          return DIFFER_ID;
        case 2: // MERCHANT_ID
          return MERCHANT_ID;
        case 3: // PAYMENT_ID
          return PAYMENT_ID;
        case 4: // TRANS_NO
          return TRANS_NO;
        case 5: // CHANNEL_CODE
          return CHANNEL_CODE;
        case 6: // CHANNEL_NAME
          return CHANNEL_NAME;
        case 7: // SUCCESS_AMOUNT
          return SUCCESS_AMOUNT;
        case 8: // REQUEST_AMOUNT_AMOUNT
          return REQUEST_AMOUNT_AMOUNT;
        case 9: // CHECK_BATHNO
          return CHECK_BATHNO;
        case 10: // SETTLE_BATH
          return SETTLE_BATH;
        case 11: // CHANNEL_TYPE
          return CHANNEL_TYPE;
        case 12: // PRODUCT_CODE
          return PRODUCT_CODE;
        case 13: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 14: // CHANNLE_NO
          return CHANNLE_NO;
        case 15: // DIFFER_TYPE
          return DIFFER_TYPE;
        case 16: // HANDLE_RESULT
          return HANDLE_RESULT;
        case 17: // HANDLE_MESSAGE
          return HANDLE_MESSAGE;
        case 18: // ERROR_DATE
          return ERROR_DATE;
        case 19: // OPERATION_DATE
          return OPERATION_DATE;
        case 20: // FEE_AMOUNT
          return FEE_AMOUNT;
        case 21: // COST_AMOUNT
          return COST_AMOUNT;
        case 22: // SETTLE_AMOUNT_PLAN
          return SETTLE_AMOUNT_PLAN;
        case 23: // TRANS_TYPE
          return TRANS_TYPE;
        case 24: // TRANS_STATUS
          return TRANS_STATUS;
        case 25: // IS_BILL
          return IS_BILL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DIFFERID_ISSET_ID = 0;
  private static final int __MERCHANTID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("differId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("channelName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCESS_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("successAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_AMOUNT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("requestAmountAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_BATHNO, new org.apache.thrift.meta_data.FieldMetaData("checkBathno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_BATH, new org.apache.thrift.meta_data.FieldMetaData("settleBath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("channelType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("productCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNLE_NO, new org.apache.thrift.meta_data.FieldMetaData("channleNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIFFER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("differType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_RESULT, new org.apache.thrift.meta_data.FieldMetaData("handleResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("handleMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR_DATE, new org.apache.thrift.meta_data.FieldMetaData("errorDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("operationDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("feeAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COST_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("costAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_AMOUNT_PLAN, new org.apache.thrift.meta_data.FieldMetaData("settleAmountPlan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("transStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_BILL, new org.apache.thrift.meta_data.FieldMetaData("isBill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DoneSettleDifferRecordModel.class, metaDataMap);
  }

  public DoneSettleDifferRecordModel() {
  }

  public DoneSettleDifferRecordModel(
    long differId,
    int merchantId,
    String paymentId,
    String transNo,
    String channelCode,
    String channelName,
    String successAmount,
    String requestAmountAmount,
    String checkBathno,
    String settleBath,
    String channelType,
    String productCode,
    String productName,
    String channleNo,
    String differType,
    String handleResult,
    String handleMessage,
    String errorDate,
    String operationDate,
    String feeAmount,
    String costAmount,
    String settleAmountPlan,
    String transType,
    String transStatus,
    String isBill)
  {
    this();
    this.differId = differId;
    setDifferIdIsSet(true);
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    this.paymentId = paymentId;
    this.transNo = transNo;
    this.channelCode = channelCode;
    this.channelName = channelName;
    this.successAmount = successAmount;
    this.requestAmountAmount = requestAmountAmount;
    this.checkBathno = checkBathno;
    this.settleBath = settleBath;
    this.channelType = channelType;
    this.productCode = productCode;
    this.productName = productName;
    this.channleNo = channleNo;
    this.differType = differType;
    this.handleResult = handleResult;
    this.handleMessage = handleMessage;
    this.errorDate = errorDate;
    this.operationDate = operationDate;
    this.feeAmount = feeAmount;
    this.costAmount = costAmount;
    this.settleAmountPlan = settleAmountPlan;
    this.transType = transType;
    this.transStatus = transStatus;
    this.isBill = isBill;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DoneSettleDifferRecordModel(DoneSettleDifferRecordModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.differId = other.differId;
    this.merchantId = other.merchantId;
    if (other.isSetPaymentId()) {
      this.paymentId = other.paymentId;
    }
    if (other.isSetTransNo()) {
      this.transNo = other.transNo;
    }
    if (other.isSetChannelCode()) {
      this.channelCode = other.channelCode;
    }
    if (other.isSetChannelName()) {
      this.channelName = other.channelName;
    }
    if (other.isSetSuccessAmount()) {
      this.successAmount = other.successAmount;
    }
    if (other.isSetRequestAmountAmount()) {
      this.requestAmountAmount = other.requestAmountAmount;
    }
    if (other.isSetCheckBathno()) {
      this.checkBathno = other.checkBathno;
    }
    if (other.isSetSettleBath()) {
      this.settleBath = other.settleBath;
    }
    if (other.isSetChannelType()) {
      this.channelType = other.channelType;
    }
    if (other.isSetProductCode()) {
      this.productCode = other.productCode;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetChannleNo()) {
      this.channleNo = other.channleNo;
    }
    if (other.isSetDifferType()) {
      this.differType = other.differType;
    }
    if (other.isSetHandleResult()) {
      this.handleResult = other.handleResult;
    }
    if (other.isSetHandleMessage()) {
      this.handleMessage = other.handleMessage;
    }
    if (other.isSetErrorDate()) {
      this.errorDate = other.errorDate;
    }
    if (other.isSetOperationDate()) {
      this.operationDate = other.operationDate;
    }
    if (other.isSetFeeAmount()) {
      this.feeAmount = other.feeAmount;
    }
    if (other.isSetCostAmount()) {
      this.costAmount = other.costAmount;
    }
    if (other.isSetSettleAmountPlan()) {
      this.settleAmountPlan = other.settleAmountPlan;
    }
    if (other.isSetTransType()) {
      this.transType = other.transType;
    }
    if (other.isSetTransStatus()) {
      this.transStatus = other.transStatus;
    }
    if (other.isSetIsBill()) {
      this.isBill = other.isBill;
    }
  }

  public DoneSettleDifferRecordModel deepCopy() {
    return new DoneSettleDifferRecordModel(this);
  }

  @Override
  public void clear() {
    setDifferIdIsSet(false);
    this.differId = 0;
    setMerchantIdIsSet(false);
    this.merchantId = 0;
    this.paymentId = null;
    this.transNo = null;
    this.channelCode = null;
    this.channelName = null;
    this.successAmount = null;
    this.requestAmountAmount = null;
    this.checkBathno = null;
    this.settleBath = null;
    this.channelType = null;
    this.productCode = null;
    this.productName = null;
    this.channleNo = null;
    this.differType = null;
    this.handleResult = null;
    this.handleMessage = null;
    this.errorDate = null;
    this.operationDate = null;
    this.feeAmount = null;
    this.costAmount = null;
    this.settleAmountPlan = null;
    this.transType = null;
    this.transStatus = null;
    this.isBill = null;
  }

  public long getDifferId() {
    return this.differId;
  }

  public DoneSettleDifferRecordModel setDifferId(long differId) {
    this.differId = differId;
    setDifferIdIsSet(true);
    return this;
  }

  public void unsetDifferId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIFFERID_ISSET_ID);
  }

  /** Returns true if field differId is set (has been assigned a value) and false otherwise */
  public boolean isSetDifferId() {
    return EncodingUtils.testBit(__isset_bitfield, __DIFFERID_ISSET_ID);
  }

  public void setDifferIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIFFERID_ISSET_ID, value);
  }

  public int getMerchantId() {
    return this.merchantId;
  }

  public DoneSettleDifferRecordModel setMerchantId(int merchantId) {
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    return this;
  }

  public void unsetMerchantId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  public void setMerchantIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTID_ISSET_ID, value);
  }

  public String getPaymentId() {
    return this.paymentId;
  }

  public DoneSettleDifferRecordModel setPaymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  public void unsetPaymentId() {
    this.paymentId = null;
  }

  /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentId() {
    return this.paymentId != null;
  }

  public void setPaymentIdIsSet(boolean value) {
    if (!value) {
      this.paymentId = null;
    }
  }

  public String getTransNo() {
    return this.transNo;
  }

  public DoneSettleDifferRecordModel setTransNo(String transNo) {
    this.transNo = transNo;
    return this;
  }

  public void unsetTransNo() {
    this.transNo = null;
  }

  /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTransNo() {
    return this.transNo != null;
  }

  public void setTransNoIsSet(boolean value) {
    if (!value) {
      this.transNo = null;
    }
  }

  public String getChannelCode() {
    return this.channelCode;
  }

  public DoneSettleDifferRecordModel setChannelCode(String channelCode) {
    this.channelCode = channelCode;
    return this;
  }

  public void unsetChannelCode() {
    this.channelCode = null;
  }

  /** Returns true if field channelCode is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelCode() {
    return this.channelCode != null;
  }

  public void setChannelCodeIsSet(boolean value) {
    if (!value) {
      this.channelCode = null;
    }
  }

  public String getChannelName() {
    return this.channelName;
  }

  public DoneSettleDifferRecordModel setChannelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  public void unsetChannelName() {
    this.channelName = null;
  }

  /** Returns true if field channelName is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelName() {
    return this.channelName != null;
  }

  public void setChannelNameIsSet(boolean value) {
    if (!value) {
      this.channelName = null;
    }
  }

  public String getSuccessAmount() {
    return this.successAmount;
  }

  public DoneSettleDifferRecordModel setSuccessAmount(String successAmount) {
    this.successAmount = successAmount;
    return this;
  }

  public void unsetSuccessAmount() {
    this.successAmount = null;
  }

  /** Returns true if field successAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessAmount() {
    return this.successAmount != null;
  }

  public void setSuccessAmountIsSet(boolean value) {
    if (!value) {
      this.successAmount = null;
    }
  }

  public String getRequestAmountAmount() {
    return this.requestAmountAmount;
  }

  public DoneSettleDifferRecordModel setRequestAmountAmount(String requestAmountAmount) {
    this.requestAmountAmount = requestAmountAmount;
    return this;
  }

  public void unsetRequestAmountAmount() {
    this.requestAmountAmount = null;
  }

  /** Returns true if field requestAmountAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestAmountAmount() {
    return this.requestAmountAmount != null;
  }

  public void setRequestAmountAmountIsSet(boolean value) {
    if (!value) {
      this.requestAmountAmount = null;
    }
  }

  public String getCheckBathno() {
    return this.checkBathno;
  }

  public DoneSettleDifferRecordModel setCheckBathno(String checkBathno) {
    this.checkBathno = checkBathno;
    return this;
  }

  public void unsetCheckBathno() {
    this.checkBathno = null;
  }

  /** Returns true if field checkBathno is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckBathno() {
    return this.checkBathno != null;
  }

  public void setCheckBathnoIsSet(boolean value) {
    if (!value) {
      this.checkBathno = null;
    }
  }

  public String getSettleBath() {
    return this.settleBath;
  }

  public DoneSettleDifferRecordModel setSettleBath(String settleBath) {
    this.settleBath = settleBath;
    return this;
  }

  public void unsetSettleBath() {
    this.settleBath = null;
  }

  /** Returns true if field settleBath is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleBath() {
    return this.settleBath != null;
  }

  public void setSettleBathIsSet(boolean value) {
    if (!value) {
      this.settleBath = null;
    }
  }

  public String getChannelType() {
    return this.channelType;
  }

  public DoneSettleDifferRecordModel setChannelType(String channelType) {
    this.channelType = channelType;
    return this;
  }

  public void unsetChannelType() {
    this.channelType = null;
  }

  /** Returns true if field channelType is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelType() {
    return this.channelType != null;
  }

  public void setChannelTypeIsSet(boolean value) {
    if (!value) {
      this.channelType = null;
    }
  }

  public String getProductCode() {
    return this.productCode;
  }

  public DoneSettleDifferRecordModel setProductCode(String productCode) {
    this.productCode = productCode;
    return this;
  }

  public void unsetProductCode() {
    this.productCode = null;
  }

  /** Returns true if field productCode is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCode() {
    return this.productCode != null;
  }

  public void setProductCodeIsSet(boolean value) {
    if (!value) {
      this.productCode = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public DoneSettleDifferRecordModel setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getChannleNo() {
    return this.channleNo;
  }

  public DoneSettleDifferRecordModel setChannleNo(String channleNo) {
    this.channleNo = channleNo;
    return this;
  }

  public void unsetChannleNo() {
    this.channleNo = null;
  }

  /** Returns true if field channleNo is set (has been assigned a value) and false otherwise */
  public boolean isSetChannleNo() {
    return this.channleNo != null;
  }

  public void setChannleNoIsSet(boolean value) {
    if (!value) {
      this.channleNo = null;
    }
  }

  public String getDifferType() {
    return this.differType;
  }

  public DoneSettleDifferRecordModel setDifferType(String differType) {
    this.differType = differType;
    return this;
  }

  public void unsetDifferType() {
    this.differType = null;
  }

  /** Returns true if field differType is set (has been assigned a value) and false otherwise */
  public boolean isSetDifferType() {
    return this.differType != null;
  }

  public void setDifferTypeIsSet(boolean value) {
    if (!value) {
      this.differType = null;
    }
  }

  public String getHandleResult() {
    return this.handleResult;
  }

  public DoneSettleDifferRecordModel setHandleResult(String handleResult) {
    this.handleResult = handleResult;
    return this;
  }

  public void unsetHandleResult() {
    this.handleResult = null;
  }

  /** Returns true if field handleResult is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleResult() {
    return this.handleResult != null;
  }

  public void setHandleResultIsSet(boolean value) {
    if (!value) {
      this.handleResult = null;
    }
  }

  public String getHandleMessage() {
    return this.handleMessage;
  }

  public DoneSettleDifferRecordModel setHandleMessage(String handleMessage) {
    this.handleMessage = handleMessage;
    return this;
  }

  public void unsetHandleMessage() {
    this.handleMessage = null;
  }

  /** Returns true if field handleMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleMessage() {
    return this.handleMessage != null;
  }

  public void setHandleMessageIsSet(boolean value) {
    if (!value) {
      this.handleMessage = null;
    }
  }

  public String getErrorDate() {
    return this.errorDate;
  }

  public DoneSettleDifferRecordModel setErrorDate(String errorDate) {
    this.errorDate = errorDate;
    return this;
  }

  public void unsetErrorDate() {
    this.errorDate = null;
  }

  /** Returns true if field errorDate is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorDate() {
    return this.errorDate != null;
  }

  public void setErrorDateIsSet(boolean value) {
    if (!value) {
      this.errorDate = null;
    }
  }

  public String getOperationDate() {
    return this.operationDate;
  }

  public DoneSettleDifferRecordModel setOperationDate(String operationDate) {
    this.operationDate = operationDate;
    return this;
  }

  public void unsetOperationDate() {
    this.operationDate = null;
  }

  /** Returns true if field operationDate is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationDate() {
    return this.operationDate != null;
  }

  public void setOperationDateIsSet(boolean value) {
    if (!value) {
      this.operationDate = null;
    }
  }

  public String getFeeAmount() {
    return this.feeAmount;
  }

  public DoneSettleDifferRecordModel setFeeAmount(String feeAmount) {
    this.feeAmount = feeAmount;
    return this;
  }

  public void unsetFeeAmount() {
    this.feeAmount = null;
  }

  /** Returns true if field feeAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeAmount() {
    return this.feeAmount != null;
  }

  public void setFeeAmountIsSet(boolean value) {
    if (!value) {
      this.feeAmount = null;
    }
  }

  public String getCostAmount() {
    return this.costAmount;
  }

  public DoneSettleDifferRecordModel setCostAmount(String costAmount) {
    this.costAmount = costAmount;
    return this;
  }

  public void unsetCostAmount() {
    this.costAmount = null;
  }

  /** Returns true if field costAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetCostAmount() {
    return this.costAmount != null;
  }

  public void setCostAmountIsSet(boolean value) {
    if (!value) {
      this.costAmount = null;
    }
  }

  public String getSettleAmountPlan() {
    return this.settleAmountPlan;
  }

  public DoneSettleDifferRecordModel setSettleAmountPlan(String settleAmountPlan) {
    this.settleAmountPlan = settleAmountPlan;
    return this;
  }

  public void unsetSettleAmountPlan() {
    this.settleAmountPlan = null;
  }

  /** Returns true if field settleAmountPlan is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleAmountPlan() {
    return this.settleAmountPlan != null;
  }

  public void setSettleAmountPlanIsSet(boolean value) {
    if (!value) {
      this.settleAmountPlan = null;
    }
  }

  public String getTransType() {
    return this.transType;
  }

  public DoneSettleDifferRecordModel setTransType(String transType) {
    this.transType = transType;
    return this;
  }

  public void unsetTransType() {
    this.transType = null;
  }

  /** Returns true if field transType is set (has been assigned a value) and false otherwise */
  public boolean isSetTransType() {
    return this.transType != null;
  }

  public void setTransTypeIsSet(boolean value) {
    if (!value) {
      this.transType = null;
    }
  }

  public String getTransStatus() {
    return this.transStatus;
  }

  public DoneSettleDifferRecordModel setTransStatus(String transStatus) {
    this.transStatus = transStatus;
    return this;
  }

  public void unsetTransStatus() {
    this.transStatus = null;
  }

  /** Returns true if field transStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTransStatus() {
    return this.transStatus != null;
  }

  public void setTransStatusIsSet(boolean value) {
    if (!value) {
      this.transStatus = null;
    }
  }

  public String getIsBill() {
    return this.isBill;
  }

  public DoneSettleDifferRecordModel setIsBill(String isBill) {
    this.isBill = isBill;
    return this;
  }

  public void unsetIsBill() {
    this.isBill = null;
  }

  /** Returns true if field isBill is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBill() {
    return this.isBill != null;
  }

  public void setIsBillIsSet(boolean value) {
    if (!value) {
      this.isBill = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIFFER_ID:
      if (value == null) {
        unsetDifferId();
      } else {
        setDifferId((Long)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((Integer)value);
      }
      break;

    case PAYMENT_ID:
      if (value == null) {
        unsetPaymentId();
      } else {
        setPaymentId((String)value);
      }
      break;

    case TRANS_NO:
      if (value == null) {
        unsetTransNo();
      } else {
        setTransNo((String)value);
      }
      break;

    case CHANNEL_CODE:
      if (value == null) {
        unsetChannelCode();
      } else {
        setChannelCode((String)value);
      }
      break;

    case CHANNEL_NAME:
      if (value == null) {
        unsetChannelName();
      } else {
        setChannelName((String)value);
      }
      break;

    case SUCCESS_AMOUNT:
      if (value == null) {
        unsetSuccessAmount();
      } else {
        setSuccessAmount((String)value);
      }
      break;

    case REQUEST_AMOUNT_AMOUNT:
      if (value == null) {
        unsetRequestAmountAmount();
      } else {
        setRequestAmountAmount((String)value);
      }
      break;

    case CHECK_BATHNO:
      if (value == null) {
        unsetCheckBathno();
      } else {
        setCheckBathno((String)value);
      }
      break;

    case SETTLE_BATH:
      if (value == null) {
        unsetSettleBath();
      } else {
        setSettleBath((String)value);
      }
      break;

    case CHANNEL_TYPE:
      if (value == null) {
        unsetChannelType();
      } else {
        setChannelType((String)value);
      }
      break;

    case PRODUCT_CODE:
      if (value == null) {
        unsetProductCode();
      } else {
        setProductCode((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case CHANNLE_NO:
      if (value == null) {
        unsetChannleNo();
      } else {
        setChannleNo((String)value);
      }
      break;

    case DIFFER_TYPE:
      if (value == null) {
        unsetDifferType();
      } else {
        setDifferType((String)value);
      }
      break;

    case HANDLE_RESULT:
      if (value == null) {
        unsetHandleResult();
      } else {
        setHandleResult((String)value);
      }
      break;

    case HANDLE_MESSAGE:
      if (value == null) {
        unsetHandleMessage();
      } else {
        setHandleMessage((String)value);
      }
      break;

    case ERROR_DATE:
      if (value == null) {
        unsetErrorDate();
      } else {
        setErrorDate((String)value);
      }
      break;

    case OPERATION_DATE:
      if (value == null) {
        unsetOperationDate();
      } else {
        setOperationDate((String)value);
      }
      break;

    case FEE_AMOUNT:
      if (value == null) {
        unsetFeeAmount();
      } else {
        setFeeAmount((String)value);
      }
      break;

    case COST_AMOUNT:
      if (value == null) {
        unsetCostAmount();
      } else {
        setCostAmount((String)value);
      }
      break;

    case SETTLE_AMOUNT_PLAN:
      if (value == null) {
        unsetSettleAmountPlan();
      } else {
        setSettleAmountPlan((String)value);
      }
      break;

    case TRANS_TYPE:
      if (value == null) {
        unsetTransType();
      } else {
        setTransType((String)value);
      }
      break;

    case TRANS_STATUS:
      if (value == null) {
        unsetTransStatus();
      } else {
        setTransStatus((String)value);
      }
      break;

    case IS_BILL:
      if (value == null) {
        unsetIsBill();
      } else {
        setIsBill((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIFFER_ID:
      return getDifferId();

    case MERCHANT_ID:
      return getMerchantId();

    case PAYMENT_ID:
      return getPaymentId();

    case TRANS_NO:
      return getTransNo();

    case CHANNEL_CODE:
      return getChannelCode();

    case CHANNEL_NAME:
      return getChannelName();

    case SUCCESS_AMOUNT:
      return getSuccessAmount();

    case REQUEST_AMOUNT_AMOUNT:
      return getRequestAmountAmount();

    case CHECK_BATHNO:
      return getCheckBathno();

    case SETTLE_BATH:
      return getSettleBath();

    case CHANNEL_TYPE:
      return getChannelType();

    case PRODUCT_CODE:
      return getProductCode();

    case PRODUCT_NAME:
      return getProductName();

    case CHANNLE_NO:
      return getChannleNo();

    case DIFFER_TYPE:
      return getDifferType();

    case HANDLE_RESULT:
      return getHandleResult();

    case HANDLE_MESSAGE:
      return getHandleMessage();

    case ERROR_DATE:
      return getErrorDate();

    case OPERATION_DATE:
      return getOperationDate();

    case FEE_AMOUNT:
      return getFeeAmount();

    case COST_AMOUNT:
      return getCostAmount();

    case SETTLE_AMOUNT_PLAN:
      return getSettleAmountPlan();

    case TRANS_TYPE:
      return getTransType();

    case TRANS_STATUS:
      return getTransStatus();

    case IS_BILL:
      return getIsBill();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIFFER_ID:
      return isSetDifferId();
    case MERCHANT_ID:
      return isSetMerchantId();
    case PAYMENT_ID:
      return isSetPaymentId();
    case TRANS_NO:
      return isSetTransNo();
    case CHANNEL_CODE:
      return isSetChannelCode();
    case CHANNEL_NAME:
      return isSetChannelName();
    case SUCCESS_AMOUNT:
      return isSetSuccessAmount();
    case REQUEST_AMOUNT_AMOUNT:
      return isSetRequestAmountAmount();
    case CHECK_BATHNO:
      return isSetCheckBathno();
    case SETTLE_BATH:
      return isSetSettleBath();
    case CHANNEL_TYPE:
      return isSetChannelType();
    case PRODUCT_CODE:
      return isSetProductCode();
    case PRODUCT_NAME:
      return isSetProductName();
    case CHANNLE_NO:
      return isSetChannleNo();
    case DIFFER_TYPE:
      return isSetDifferType();
    case HANDLE_RESULT:
      return isSetHandleResult();
    case HANDLE_MESSAGE:
      return isSetHandleMessage();
    case ERROR_DATE:
      return isSetErrorDate();
    case OPERATION_DATE:
      return isSetOperationDate();
    case FEE_AMOUNT:
      return isSetFeeAmount();
    case COST_AMOUNT:
      return isSetCostAmount();
    case SETTLE_AMOUNT_PLAN:
      return isSetSettleAmountPlan();
    case TRANS_TYPE:
      return isSetTransType();
    case TRANS_STATUS:
      return isSetTransStatus();
    case IS_BILL:
      return isSetIsBill();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DoneSettleDifferRecordModel)
      return this.equals((DoneSettleDifferRecordModel)that);
    return false;
  }

  public boolean equals(DoneSettleDifferRecordModel that) {
    if (that == null)
      return false;

    boolean this_present_differId = true;
    boolean that_present_differId = true;
    if (this_present_differId || that_present_differId) {
      if (!(this_present_differId && that_present_differId))
        return false;
      if (this.differId != that.differId)
        return false;
    }

    boolean this_present_merchantId = true;
    boolean that_present_merchantId = true;
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (this.merchantId != that.merchantId)
        return false;
    }

    boolean this_present_paymentId = true && this.isSetPaymentId();
    boolean that_present_paymentId = true && that.isSetPaymentId();
    if (this_present_paymentId || that_present_paymentId) {
      if (!(this_present_paymentId && that_present_paymentId))
        return false;
      if (!this.paymentId.equals(that.paymentId))
        return false;
    }

    boolean this_present_transNo = true && this.isSetTransNo();
    boolean that_present_transNo = true && that.isSetTransNo();
    if (this_present_transNo || that_present_transNo) {
      if (!(this_present_transNo && that_present_transNo))
        return false;
      if (!this.transNo.equals(that.transNo))
        return false;
    }

    boolean this_present_channelCode = true && this.isSetChannelCode();
    boolean that_present_channelCode = true && that.isSetChannelCode();
    if (this_present_channelCode || that_present_channelCode) {
      if (!(this_present_channelCode && that_present_channelCode))
        return false;
      if (!this.channelCode.equals(that.channelCode))
        return false;
    }

    boolean this_present_channelName = true && this.isSetChannelName();
    boolean that_present_channelName = true && that.isSetChannelName();
    if (this_present_channelName || that_present_channelName) {
      if (!(this_present_channelName && that_present_channelName))
        return false;
      if (!this.channelName.equals(that.channelName))
        return false;
    }

    boolean this_present_successAmount = true && this.isSetSuccessAmount();
    boolean that_present_successAmount = true && that.isSetSuccessAmount();
    if (this_present_successAmount || that_present_successAmount) {
      if (!(this_present_successAmount && that_present_successAmount))
        return false;
      if (!this.successAmount.equals(that.successAmount))
        return false;
    }

    boolean this_present_requestAmountAmount = true && this.isSetRequestAmountAmount();
    boolean that_present_requestAmountAmount = true && that.isSetRequestAmountAmount();
    if (this_present_requestAmountAmount || that_present_requestAmountAmount) {
      if (!(this_present_requestAmountAmount && that_present_requestAmountAmount))
        return false;
      if (!this.requestAmountAmount.equals(that.requestAmountAmount))
        return false;
    }

    boolean this_present_checkBathno = true && this.isSetCheckBathno();
    boolean that_present_checkBathno = true && that.isSetCheckBathno();
    if (this_present_checkBathno || that_present_checkBathno) {
      if (!(this_present_checkBathno && that_present_checkBathno))
        return false;
      if (!this.checkBathno.equals(that.checkBathno))
        return false;
    }

    boolean this_present_settleBath = true && this.isSetSettleBath();
    boolean that_present_settleBath = true && that.isSetSettleBath();
    if (this_present_settleBath || that_present_settleBath) {
      if (!(this_present_settleBath && that_present_settleBath))
        return false;
      if (!this.settleBath.equals(that.settleBath))
        return false;
    }

    boolean this_present_channelType = true && this.isSetChannelType();
    boolean that_present_channelType = true && that.isSetChannelType();
    if (this_present_channelType || that_present_channelType) {
      if (!(this_present_channelType && that_present_channelType))
        return false;
      if (!this.channelType.equals(that.channelType))
        return false;
    }

    boolean this_present_productCode = true && this.isSetProductCode();
    boolean that_present_productCode = true && that.isSetProductCode();
    if (this_present_productCode || that_present_productCode) {
      if (!(this_present_productCode && that_present_productCode))
        return false;
      if (!this.productCode.equals(that.productCode))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_channleNo = true && this.isSetChannleNo();
    boolean that_present_channleNo = true && that.isSetChannleNo();
    if (this_present_channleNo || that_present_channleNo) {
      if (!(this_present_channleNo && that_present_channleNo))
        return false;
      if (!this.channleNo.equals(that.channleNo))
        return false;
    }

    boolean this_present_differType = true && this.isSetDifferType();
    boolean that_present_differType = true && that.isSetDifferType();
    if (this_present_differType || that_present_differType) {
      if (!(this_present_differType && that_present_differType))
        return false;
      if (!this.differType.equals(that.differType))
        return false;
    }

    boolean this_present_handleResult = true && this.isSetHandleResult();
    boolean that_present_handleResult = true && that.isSetHandleResult();
    if (this_present_handleResult || that_present_handleResult) {
      if (!(this_present_handleResult && that_present_handleResult))
        return false;
      if (!this.handleResult.equals(that.handleResult))
        return false;
    }

    boolean this_present_handleMessage = true && this.isSetHandleMessage();
    boolean that_present_handleMessage = true && that.isSetHandleMessage();
    if (this_present_handleMessage || that_present_handleMessage) {
      if (!(this_present_handleMessage && that_present_handleMessage))
        return false;
      if (!this.handleMessage.equals(that.handleMessage))
        return false;
    }

    boolean this_present_errorDate = true && this.isSetErrorDate();
    boolean that_present_errorDate = true && that.isSetErrorDate();
    if (this_present_errorDate || that_present_errorDate) {
      if (!(this_present_errorDate && that_present_errorDate))
        return false;
      if (!this.errorDate.equals(that.errorDate))
        return false;
    }

    boolean this_present_operationDate = true && this.isSetOperationDate();
    boolean that_present_operationDate = true && that.isSetOperationDate();
    if (this_present_operationDate || that_present_operationDate) {
      if (!(this_present_operationDate && that_present_operationDate))
        return false;
      if (!this.operationDate.equals(that.operationDate))
        return false;
    }

    boolean this_present_feeAmount = true && this.isSetFeeAmount();
    boolean that_present_feeAmount = true && that.isSetFeeAmount();
    if (this_present_feeAmount || that_present_feeAmount) {
      if (!(this_present_feeAmount && that_present_feeAmount))
        return false;
      if (!this.feeAmount.equals(that.feeAmount))
        return false;
    }

    boolean this_present_costAmount = true && this.isSetCostAmount();
    boolean that_present_costAmount = true && that.isSetCostAmount();
    if (this_present_costAmount || that_present_costAmount) {
      if (!(this_present_costAmount && that_present_costAmount))
        return false;
      if (!this.costAmount.equals(that.costAmount))
        return false;
    }

    boolean this_present_settleAmountPlan = true && this.isSetSettleAmountPlan();
    boolean that_present_settleAmountPlan = true && that.isSetSettleAmountPlan();
    if (this_present_settleAmountPlan || that_present_settleAmountPlan) {
      if (!(this_present_settleAmountPlan && that_present_settleAmountPlan))
        return false;
      if (!this.settleAmountPlan.equals(that.settleAmountPlan))
        return false;
    }

    boolean this_present_transType = true && this.isSetTransType();
    boolean that_present_transType = true && that.isSetTransType();
    if (this_present_transType || that_present_transType) {
      if (!(this_present_transType && that_present_transType))
        return false;
      if (!this.transType.equals(that.transType))
        return false;
    }

    boolean this_present_transStatus = true && this.isSetTransStatus();
    boolean that_present_transStatus = true && that.isSetTransStatus();
    if (this_present_transStatus || that_present_transStatus) {
      if (!(this_present_transStatus && that_present_transStatus))
        return false;
      if (!this.transStatus.equals(that.transStatus))
        return false;
    }

    boolean this_present_isBill = true && this.isSetIsBill();
    boolean that_present_isBill = true && that.isSetIsBill();
    if (this_present_isBill || that_present_isBill) {
      if (!(this_present_isBill && that_present_isBill))
        return false;
      if (!this.isBill.equals(that.isBill))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_differId = true;
    list.add(present_differId);
    if (present_differId)
      list.add(differId);

    boolean present_merchantId = true;
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_paymentId = true && (isSetPaymentId());
    list.add(present_paymentId);
    if (present_paymentId)
      list.add(paymentId);

    boolean present_transNo = true && (isSetTransNo());
    list.add(present_transNo);
    if (present_transNo)
      list.add(transNo);

    boolean present_channelCode = true && (isSetChannelCode());
    list.add(present_channelCode);
    if (present_channelCode)
      list.add(channelCode);

    boolean present_channelName = true && (isSetChannelName());
    list.add(present_channelName);
    if (present_channelName)
      list.add(channelName);

    boolean present_successAmount = true && (isSetSuccessAmount());
    list.add(present_successAmount);
    if (present_successAmount)
      list.add(successAmount);

    boolean present_requestAmountAmount = true && (isSetRequestAmountAmount());
    list.add(present_requestAmountAmount);
    if (present_requestAmountAmount)
      list.add(requestAmountAmount);

    boolean present_checkBathno = true && (isSetCheckBathno());
    list.add(present_checkBathno);
    if (present_checkBathno)
      list.add(checkBathno);

    boolean present_settleBath = true && (isSetSettleBath());
    list.add(present_settleBath);
    if (present_settleBath)
      list.add(settleBath);

    boolean present_channelType = true && (isSetChannelType());
    list.add(present_channelType);
    if (present_channelType)
      list.add(channelType);

    boolean present_productCode = true && (isSetProductCode());
    list.add(present_productCode);
    if (present_productCode)
      list.add(productCode);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_channleNo = true && (isSetChannleNo());
    list.add(present_channleNo);
    if (present_channleNo)
      list.add(channleNo);

    boolean present_differType = true && (isSetDifferType());
    list.add(present_differType);
    if (present_differType)
      list.add(differType);

    boolean present_handleResult = true && (isSetHandleResult());
    list.add(present_handleResult);
    if (present_handleResult)
      list.add(handleResult);

    boolean present_handleMessage = true && (isSetHandleMessage());
    list.add(present_handleMessage);
    if (present_handleMessage)
      list.add(handleMessage);

    boolean present_errorDate = true && (isSetErrorDate());
    list.add(present_errorDate);
    if (present_errorDate)
      list.add(errorDate);

    boolean present_operationDate = true && (isSetOperationDate());
    list.add(present_operationDate);
    if (present_operationDate)
      list.add(operationDate);

    boolean present_feeAmount = true && (isSetFeeAmount());
    list.add(present_feeAmount);
    if (present_feeAmount)
      list.add(feeAmount);

    boolean present_costAmount = true && (isSetCostAmount());
    list.add(present_costAmount);
    if (present_costAmount)
      list.add(costAmount);

    boolean present_settleAmountPlan = true && (isSetSettleAmountPlan());
    list.add(present_settleAmountPlan);
    if (present_settleAmountPlan)
      list.add(settleAmountPlan);

    boolean present_transType = true && (isSetTransType());
    list.add(present_transType);
    if (present_transType)
      list.add(transType);

    boolean present_transStatus = true && (isSetTransStatus());
    list.add(present_transStatus);
    if (present_transStatus)
      list.add(transStatus);

    boolean present_isBill = true && (isSetIsBill());
    list.add(present_isBill);
    if (present_isBill)
      list.add(isBill);

    return list.hashCode();
  }

  @Override
  public int compareTo(DoneSettleDifferRecordModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDifferId()).compareTo(other.isSetDifferId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDifferId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.differId, other.differId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelCode()).compareTo(other.isSetChannelCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCode, other.channelCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelName()).compareTo(other.isSetChannelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelName, other.channelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessAmount()).compareTo(other.isSetSuccessAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successAmount, other.successAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestAmountAmount()).compareTo(other.isSetRequestAmountAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestAmountAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestAmountAmount, other.requestAmountAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckBathno()).compareTo(other.isSetCheckBathno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckBathno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkBathno, other.checkBathno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleBath()).compareTo(other.isSetSettleBath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleBath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleBath, other.settleBath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelType()).compareTo(other.isSetChannelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelType, other.channelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductCode()).compareTo(other.isSetProductCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCode, other.productCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannleNo()).compareTo(other.isSetChannleNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannleNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channleNo, other.channleNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDifferType()).compareTo(other.isSetDifferType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDifferType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.differType, other.differType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleResult()).compareTo(other.isSetHandleResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleResult, other.handleResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleMessage()).compareTo(other.isSetHandleMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleMessage, other.handleMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorDate()).compareTo(other.isSetErrorDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorDate, other.errorDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperationDate()).compareTo(other.isSetOperationDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationDate, other.operationDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeAmount()).compareTo(other.isSetFeeAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeAmount, other.feeAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostAmount()).compareTo(other.isSetCostAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costAmount, other.costAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleAmountPlan()).compareTo(other.isSetSettleAmountPlan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleAmountPlan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleAmountPlan, other.settleAmountPlan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransType()).compareTo(other.isSetTransType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transType, other.transType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransStatus()).compareTo(other.isSetTransStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transStatus, other.transStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBill()).compareTo(other.isSetIsBill());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBill()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBill, other.isBill);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DoneSettleDifferRecordModel(");
    boolean first = true;

    sb.append("differId:");
    sb.append(this.differId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    sb.append(this.merchantId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentId:");
    if (this.paymentId == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transNo:");
    if (this.transNo == null) {
      sb.append("null");
    } else {
      sb.append(this.transNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelCode:");
    if (this.channelCode == null) {
      sb.append("null");
    } else {
      sb.append(this.channelCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelName:");
    if (this.channelName == null) {
      sb.append("null");
    } else {
      sb.append(this.channelName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("successAmount:");
    if (this.successAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.successAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestAmountAmount:");
    if (this.requestAmountAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.requestAmountAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkBathno:");
    if (this.checkBathno == null) {
      sb.append("null");
    } else {
      sb.append(this.checkBathno);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleBath:");
    if (this.settleBath == null) {
      sb.append("null");
    } else {
      sb.append(this.settleBath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelType:");
    if (this.channelType == null) {
      sb.append("null");
    } else {
      sb.append(this.channelType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productCode:");
    if (this.productCode == null) {
      sb.append("null");
    } else {
      sb.append(this.productCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channleNo:");
    if (this.channleNo == null) {
      sb.append("null");
    } else {
      sb.append(this.channleNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("differType:");
    if (this.differType == null) {
      sb.append("null");
    } else {
      sb.append(this.differType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleResult:");
    if (this.handleResult == null) {
      sb.append("null");
    } else {
      sb.append(this.handleResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleMessage:");
    if (this.handleMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.handleMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorDate:");
    if (this.errorDate == null) {
      sb.append("null");
    } else {
      sb.append(this.errorDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operationDate:");
    if (this.operationDate == null) {
      sb.append("null");
    } else {
      sb.append(this.operationDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeAmount:");
    if (this.feeAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.feeAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("costAmount:");
    if (this.costAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.costAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleAmountPlan:");
    if (this.settleAmountPlan == null) {
      sb.append("null");
    } else {
      sb.append(this.settleAmountPlan);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transType:");
    if (this.transType == null) {
      sb.append("null");
    } else {
      sb.append(this.transType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transStatus:");
    if (this.transStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.transStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isBill:");
    if (this.isBill == null) {
      sb.append("null");
    } else {
      sb.append(this.isBill);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DoneSettleDifferRecordModelStandardSchemeFactory implements SchemeFactory {
    public DoneSettleDifferRecordModelStandardScheme getScheme() {
      return new DoneSettleDifferRecordModelStandardScheme();
    }
  }

  private static class DoneSettleDifferRecordModelStandardScheme extends StandardScheme<DoneSettleDifferRecordModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DoneSettleDifferRecordModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIFFER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.differId = iprot.readI64();
              struct.setDifferIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.merchantId = iprot.readI32();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentId = iprot.readString();
              struct.setPaymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRANS_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transNo = iprot.readString();
              struct.setTransNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHANNEL_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelCode = iprot.readString();
              struct.setChannelCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHANNEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelName = iprot.readString();
              struct.setChannelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUCCESS_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.successAmount = iprot.readString();
              struct.setSuccessAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REQUEST_AMOUNT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestAmountAmount = iprot.readString();
              struct.setRequestAmountAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHECK_BATHNO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkBathno = iprot.readString();
              struct.setCheckBathnoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SETTLE_BATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleBath = iprot.readString();
              struct.setSettleBathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CHANNEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelType = iprot.readString();
              struct.setChannelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PRODUCT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productCode = iprot.readString();
              struct.setProductCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CHANNLE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channleNo = iprot.readString();
              struct.setChannleNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DIFFER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.differType = iprot.readString();
              struct.setDifferTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HANDLE_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleResult = iprot.readString();
              struct.setHandleResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // HANDLE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleMessage = iprot.readString();
              struct.setHandleMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ERROR_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorDate = iprot.readString();
              struct.setErrorDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // OPERATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operationDate = iprot.readString();
              struct.setOperationDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // FEE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feeAmount = iprot.readString();
              struct.setFeeAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // COST_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.costAmount = iprot.readString();
              struct.setCostAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SETTLE_AMOUNT_PLAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleAmountPlan = iprot.readString();
              struct.setSettleAmountPlanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TRANS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transType = iprot.readString();
              struct.setTransTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TRANS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transStatus = iprot.readString();
              struct.setTransStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // IS_BILL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isBill = iprot.readString();
              struct.setIsBillIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DoneSettleDifferRecordModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DIFFER_ID_FIELD_DESC);
      oprot.writeI64(struct.differId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
      oprot.writeI32(struct.merchantId);
      oprot.writeFieldEnd();
      if (struct.paymentId != null) {
        oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
        oprot.writeString(struct.paymentId);
        oprot.writeFieldEnd();
      }
      if (struct.transNo != null) {
        oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
        oprot.writeString(struct.transNo);
        oprot.writeFieldEnd();
      }
      if (struct.channelCode != null) {
        oprot.writeFieldBegin(CHANNEL_CODE_FIELD_DESC);
        oprot.writeString(struct.channelCode);
        oprot.writeFieldEnd();
      }
      if (struct.channelName != null) {
        oprot.writeFieldBegin(CHANNEL_NAME_FIELD_DESC);
        oprot.writeString(struct.channelName);
        oprot.writeFieldEnd();
      }
      if (struct.successAmount != null) {
        oprot.writeFieldBegin(SUCCESS_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.successAmount);
        oprot.writeFieldEnd();
      }
      if (struct.requestAmountAmount != null) {
        oprot.writeFieldBegin(REQUEST_AMOUNT_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.requestAmountAmount);
        oprot.writeFieldEnd();
      }
      if (struct.checkBathno != null) {
        oprot.writeFieldBegin(CHECK_BATHNO_FIELD_DESC);
        oprot.writeString(struct.checkBathno);
        oprot.writeFieldEnd();
      }
      if (struct.settleBath != null) {
        oprot.writeFieldBegin(SETTLE_BATH_FIELD_DESC);
        oprot.writeString(struct.settleBath);
        oprot.writeFieldEnd();
      }
      if (struct.channelType != null) {
        oprot.writeFieldBegin(CHANNEL_TYPE_FIELD_DESC);
        oprot.writeString(struct.channelType);
        oprot.writeFieldEnd();
      }
      if (struct.productCode != null) {
        oprot.writeFieldBegin(PRODUCT_CODE_FIELD_DESC);
        oprot.writeString(struct.productCode);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.channleNo != null) {
        oprot.writeFieldBegin(CHANNLE_NO_FIELD_DESC);
        oprot.writeString(struct.channleNo);
        oprot.writeFieldEnd();
      }
      if (struct.differType != null) {
        oprot.writeFieldBegin(DIFFER_TYPE_FIELD_DESC);
        oprot.writeString(struct.differType);
        oprot.writeFieldEnd();
      }
      if (struct.handleResult != null) {
        oprot.writeFieldBegin(HANDLE_RESULT_FIELD_DESC);
        oprot.writeString(struct.handleResult);
        oprot.writeFieldEnd();
      }
      if (struct.handleMessage != null) {
        oprot.writeFieldBegin(HANDLE_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.handleMessage);
        oprot.writeFieldEnd();
      }
      if (struct.errorDate != null) {
        oprot.writeFieldBegin(ERROR_DATE_FIELD_DESC);
        oprot.writeString(struct.errorDate);
        oprot.writeFieldEnd();
      }
      if (struct.operationDate != null) {
        oprot.writeFieldBegin(OPERATION_DATE_FIELD_DESC);
        oprot.writeString(struct.operationDate);
        oprot.writeFieldEnd();
      }
      if (struct.feeAmount != null) {
        oprot.writeFieldBegin(FEE_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.feeAmount);
        oprot.writeFieldEnd();
      }
      if (struct.costAmount != null) {
        oprot.writeFieldBegin(COST_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.costAmount);
        oprot.writeFieldEnd();
      }
      if (struct.settleAmountPlan != null) {
        oprot.writeFieldBegin(SETTLE_AMOUNT_PLAN_FIELD_DESC);
        oprot.writeString(struct.settleAmountPlan);
        oprot.writeFieldEnd();
      }
      if (struct.transType != null) {
        oprot.writeFieldBegin(TRANS_TYPE_FIELD_DESC);
        oprot.writeString(struct.transType);
        oprot.writeFieldEnd();
      }
      if (struct.transStatus != null) {
        oprot.writeFieldBegin(TRANS_STATUS_FIELD_DESC);
        oprot.writeString(struct.transStatus);
        oprot.writeFieldEnd();
      }
      if (struct.isBill != null) {
        oprot.writeFieldBegin(IS_BILL_FIELD_DESC);
        oprot.writeString(struct.isBill);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DoneSettleDifferRecordModelTupleSchemeFactory implements SchemeFactory {
    public DoneSettleDifferRecordModelTupleScheme getScheme() {
      return new DoneSettleDifferRecordModelTupleScheme();
    }
  }

  private static class DoneSettleDifferRecordModelTupleScheme extends TupleScheme<DoneSettleDifferRecordModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DoneSettleDifferRecordModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDifferId()) {
        optionals.set(0);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(1);
      }
      if (struct.isSetPaymentId()) {
        optionals.set(2);
      }
      if (struct.isSetTransNo()) {
        optionals.set(3);
      }
      if (struct.isSetChannelCode()) {
        optionals.set(4);
      }
      if (struct.isSetChannelName()) {
        optionals.set(5);
      }
      if (struct.isSetSuccessAmount()) {
        optionals.set(6);
      }
      if (struct.isSetRequestAmountAmount()) {
        optionals.set(7);
      }
      if (struct.isSetCheckBathno()) {
        optionals.set(8);
      }
      if (struct.isSetSettleBath()) {
        optionals.set(9);
      }
      if (struct.isSetChannelType()) {
        optionals.set(10);
      }
      if (struct.isSetProductCode()) {
        optionals.set(11);
      }
      if (struct.isSetProductName()) {
        optionals.set(12);
      }
      if (struct.isSetChannleNo()) {
        optionals.set(13);
      }
      if (struct.isSetDifferType()) {
        optionals.set(14);
      }
      if (struct.isSetHandleResult()) {
        optionals.set(15);
      }
      if (struct.isSetHandleMessage()) {
        optionals.set(16);
      }
      if (struct.isSetErrorDate()) {
        optionals.set(17);
      }
      if (struct.isSetOperationDate()) {
        optionals.set(18);
      }
      if (struct.isSetFeeAmount()) {
        optionals.set(19);
      }
      if (struct.isSetCostAmount()) {
        optionals.set(20);
      }
      if (struct.isSetSettleAmountPlan()) {
        optionals.set(21);
      }
      if (struct.isSetTransType()) {
        optionals.set(22);
      }
      if (struct.isSetTransStatus()) {
        optionals.set(23);
      }
      if (struct.isSetIsBill()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetDifferId()) {
        oprot.writeI64(struct.differId);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeI32(struct.merchantId);
      }
      if (struct.isSetPaymentId()) {
        oprot.writeString(struct.paymentId);
      }
      if (struct.isSetTransNo()) {
        oprot.writeString(struct.transNo);
      }
      if (struct.isSetChannelCode()) {
        oprot.writeString(struct.channelCode);
      }
      if (struct.isSetChannelName()) {
        oprot.writeString(struct.channelName);
      }
      if (struct.isSetSuccessAmount()) {
        oprot.writeString(struct.successAmount);
      }
      if (struct.isSetRequestAmountAmount()) {
        oprot.writeString(struct.requestAmountAmount);
      }
      if (struct.isSetCheckBathno()) {
        oprot.writeString(struct.checkBathno);
      }
      if (struct.isSetSettleBath()) {
        oprot.writeString(struct.settleBath);
      }
      if (struct.isSetChannelType()) {
        oprot.writeString(struct.channelType);
      }
      if (struct.isSetProductCode()) {
        oprot.writeString(struct.productCode);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetChannleNo()) {
        oprot.writeString(struct.channleNo);
      }
      if (struct.isSetDifferType()) {
        oprot.writeString(struct.differType);
      }
      if (struct.isSetHandleResult()) {
        oprot.writeString(struct.handleResult);
      }
      if (struct.isSetHandleMessage()) {
        oprot.writeString(struct.handleMessage);
      }
      if (struct.isSetErrorDate()) {
        oprot.writeString(struct.errorDate);
      }
      if (struct.isSetOperationDate()) {
        oprot.writeString(struct.operationDate);
      }
      if (struct.isSetFeeAmount()) {
        oprot.writeString(struct.feeAmount);
      }
      if (struct.isSetCostAmount()) {
        oprot.writeString(struct.costAmount);
      }
      if (struct.isSetSettleAmountPlan()) {
        oprot.writeString(struct.settleAmountPlan);
      }
      if (struct.isSetTransType()) {
        oprot.writeString(struct.transType);
      }
      if (struct.isSetTransStatus()) {
        oprot.writeString(struct.transStatus);
      }
      if (struct.isSetIsBill()) {
        oprot.writeString(struct.isBill);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DoneSettleDifferRecordModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.differId = iprot.readI64();
        struct.setDifferIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.merchantId = iprot.readI32();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.paymentId = iprot.readString();
        struct.setPaymentIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.transNo = iprot.readString();
        struct.setTransNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.channelCode = iprot.readString();
        struct.setChannelCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.channelName = iprot.readString();
        struct.setChannelNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.successAmount = iprot.readString();
        struct.setSuccessAmountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.requestAmountAmount = iprot.readString();
        struct.setRequestAmountAmountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.checkBathno = iprot.readString();
        struct.setCheckBathnoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.settleBath = iprot.readString();
        struct.setSettleBathIsSet(true);
      }
      if (incoming.get(10)) {
        struct.channelType = iprot.readString();
        struct.setChannelTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.productCode = iprot.readString();
        struct.setProductCodeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.channleNo = iprot.readString();
        struct.setChannleNoIsSet(true);
      }
      if (incoming.get(14)) {
        struct.differType = iprot.readString();
        struct.setDifferTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.handleResult = iprot.readString();
        struct.setHandleResultIsSet(true);
      }
      if (incoming.get(16)) {
        struct.handleMessage = iprot.readString();
        struct.setHandleMessageIsSet(true);
      }
      if (incoming.get(17)) {
        struct.errorDate = iprot.readString();
        struct.setErrorDateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.operationDate = iprot.readString();
        struct.setOperationDateIsSet(true);
      }
      if (incoming.get(19)) {
        struct.feeAmount = iprot.readString();
        struct.setFeeAmountIsSet(true);
      }
      if (incoming.get(20)) {
        struct.costAmount = iprot.readString();
        struct.setCostAmountIsSet(true);
      }
      if (incoming.get(21)) {
        struct.settleAmountPlan = iprot.readString();
        struct.setSettleAmountPlanIsSet(true);
      }
      if (incoming.get(22)) {
        struct.transType = iprot.readString();
        struct.setTransTypeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.transStatus = iprot.readString();
        struct.setTransStatusIsSet(true);
      }
      if (incoming.get(24)) {
        struct.isBill = iprot.readString();
        struct.setIsBillIsSet(true);
      }
    }
  }

}

