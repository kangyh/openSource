/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-17")
public class ClearChannelRecordModel implements org.apache.thrift.TBase<ClearChannelRecordModel, ClearChannelRecordModel._Fields>, java.io.Serializable, Cloneable, Comparable<ClearChannelRecordModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClearChannelRecordModel");

  private static final org.apache.thrift.protocol.TField CLEARING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clearingId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CHANNEL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHANNEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("channelName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHANNEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PAY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("payTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PAYMENT_ID_OLD_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentIdOld", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TRANS_NO_OLD_FIELD_DESC = new org.apache.thrift.protocol.TField("transNoOld", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SUCCESS_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("successAmount", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CHANNEL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("channelTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CHECK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("checkTime", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SETTLE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("settleTime", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField SETTLE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("settleNo", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField SETTLE_TIME_PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("settleTimePlan", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField SETTLE_CYC_FIELD_DESC = new org.apache.thrift.protocol.TField("settleCyc", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField SETTLE_BATH_FIELD_DESC = new org.apache.thrift.protocol.TField("settleBath", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField COST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("costTime", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField COST_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("costAmount", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField COST_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("costWay", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField COST_SETTLE_CYC_FIELD_DESC = new org.apache.thrift.protocol.TField("costSettleCyc", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField CHECK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkStatus", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField CHECK_FLG_FIELD_DESC = new org.apache.thrift.protocol.TField("checkFlg", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField SETTLE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("settleStatus", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("finishTime", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField TRANS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transType", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField BANK_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("bankSeq", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField BANK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCode", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField CHANNEL_PROVIDER_FIELD_DESC = new org.apache.thrift.protocol.TField("channelProvider", org.apache.thrift.protocol.TType.STRING, (short)33);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClearChannelRecordModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClearChannelRecordModelTupleSchemeFactory());
  }

  public long clearingId; // required
  public String channelCode; // required
  public String channelName; // required
  public String channelType; // required
  public String payTime; // required
  public String currency; // required
  public String paymentId; // required
  public String paymentIdOld; // required
  public String transNo; // required
  public String transNoOld; // required
  public String successAmount; // required
  public String channelTime; // required
  public String checkTime; // required
  public String settleTime; // required
  public String settleNo; // required
  public String settleTimePlan; // required
  public String settleCyc; // required
  public String settleBath; // required
  public String costTime; // required
  public String costAmount; // required
  public String costWay; // required
  public String costSettleCyc; // required
  public String checkStatus; // required
  public String checkFlg; // required
  public String settleStatus; // required
  public String finishTime; // required
  public String transType; // required
  public String bankSeq; // required
  public String bankName; // required
  public String bankCode; // required
  public String channelProvider; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLEARING_ID((short)1, "clearingId"),
    CHANNEL_CODE((short)2, "channelCode"),
    CHANNEL_NAME((short)3, "channelName"),
    CHANNEL_TYPE((short)4, "channelType"),
    PAY_TIME((short)5, "payTime"),
    CURRENCY((short)6, "currency"),
    PAYMENT_ID((short)7, "paymentId"),
    PAYMENT_ID_OLD((short)8, "paymentIdOld"),
    TRANS_NO((short)9, "transNo"),
    TRANS_NO_OLD((short)10, "transNoOld"),
    SUCCESS_AMOUNT((short)11, "successAmount"),
    CHANNEL_TIME((short)12, "channelTime"),
    CHECK_TIME((short)13, "checkTime"),
    SETTLE_TIME((short)16, "settleTime"),
    SETTLE_NO((short)17, "settleNo"),
    SETTLE_TIME_PLAN((short)18, "settleTimePlan"),
    SETTLE_CYC((short)19, "settleCyc"),
    SETTLE_BATH((short)20, "settleBath"),
    COST_TIME((short)21, "costTime"),
    COST_AMOUNT((short)22, "costAmount"),
    COST_WAY((short)23, "costWay"),
    COST_SETTLE_CYC((short)24, "costSettleCyc"),
    CHECK_STATUS((short)25, "checkStatus"),
    CHECK_FLG((short)26, "checkFlg"),
    SETTLE_STATUS((short)27, "settleStatus"),
    FINISH_TIME((short)28, "finishTime"),
    TRANS_TYPE((short)29, "transType"),
    BANK_SEQ((short)30, "bankSeq"),
    BANK_NAME((short)31, "bankName"),
    BANK_CODE((short)32, "bankCode"),
    CHANNEL_PROVIDER((short)33, "channelProvider");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLEARING_ID
          return CLEARING_ID;
        case 2: // CHANNEL_CODE
          return CHANNEL_CODE;
        case 3: // CHANNEL_NAME
          return CHANNEL_NAME;
        case 4: // CHANNEL_TYPE
          return CHANNEL_TYPE;
        case 5: // PAY_TIME
          return PAY_TIME;
        case 6: // CURRENCY
          return CURRENCY;
        case 7: // PAYMENT_ID
          return PAYMENT_ID;
        case 8: // PAYMENT_ID_OLD
          return PAYMENT_ID_OLD;
        case 9: // TRANS_NO
          return TRANS_NO;
        case 10: // TRANS_NO_OLD
          return TRANS_NO_OLD;
        case 11: // SUCCESS_AMOUNT
          return SUCCESS_AMOUNT;
        case 12: // CHANNEL_TIME
          return CHANNEL_TIME;
        case 13: // CHECK_TIME
          return CHECK_TIME;
        case 16: // SETTLE_TIME
          return SETTLE_TIME;
        case 17: // SETTLE_NO
          return SETTLE_NO;
        case 18: // SETTLE_TIME_PLAN
          return SETTLE_TIME_PLAN;
        case 19: // SETTLE_CYC
          return SETTLE_CYC;
        case 20: // SETTLE_BATH
          return SETTLE_BATH;
        case 21: // COST_TIME
          return COST_TIME;
        case 22: // COST_AMOUNT
          return COST_AMOUNT;
        case 23: // COST_WAY
          return COST_WAY;
        case 24: // COST_SETTLE_CYC
          return COST_SETTLE_CYC;
        case 25: // CHECK_STATUS
          return CHECK_STATUS;
        case 26: // CHECK_FLG
          return CHECK_FLG;
        case 27: // SETTLE_STATUS
          return SETTLE_STATUS;
        case 28: // FINISH_TIME
          return FINISH_TIME;
        case 29: // TRANS_TYPE
          return TRANS_TYPE;
        case 30: // BANK_SEQ
          return BANK_SEQ;
        case 31: // BANK_NAME
          return BANK_NAME;
        case 32: // BANK_CODE
          return BANK_CODE;
        case 33: // CHANNEL_PROVIDER
          return CHANNEL_PROVIDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLEARINGID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLEARING_ID, new org.apache.thrift.meta_data.FieldMetaData("clearingId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHANNEL_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("channelName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("channelType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_TIME, new org.apache.thrift.meta_data.FieldMetaData("payTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_ID_OLD, new org.apache.thrift.meta_data.FieldMetaData("paymentIdOld", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_NO_OLD, new org.apache.thrift.meta_data.FieldMetaData("transNoOld", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCESS_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("successAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_TIME, new org.apache.thrift.meta_data.FieldMetaData("channelTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_TIME, new org.apache.thrift.meta_data.FieldMetaData("checkTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_TIME, new org.apache.thrift.meta_data.FieldMetaData("settleTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_NO, new org.apache.thrift.meta_data.FieldMetaData("settleNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_TIME_PLAN, new org.apache.thrift.meta_data.FieldMetaData("settleTimePlan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_CYC, new org.apache.thrift.meta_data.FieldMetaData("settleCyc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_BATH, new org.apache.thrift.meta_data.FieldMetaData("settleBath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COST_TIME, new org.apache.thrift.meta_data.FieldMetaData("costTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COST_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("costAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COST_WAY, new org.apache.thrift.meta_data.FieldMetaData("costWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COST_SETTLE_CYC, new org.apache.thrift.meta_data.FieldMetaData("costSettleCyc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("checkStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_FLG, new org.apache.thrift.meta_data.FieldMetaData("checkFlg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("settleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("finishTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_SEQ, new org.apache.thrift.meta_data.FieldMetaData("bankSeq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CODE, new org.apache.thrift.meta_data.FieldMetaData("bankCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_PROVIDER, new org.apache.thrift.meta_data.FieldMetaData("channelProvider", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClearChannelRecordModel.class, metaDataMap);
  }

  public ClearChannelRecordModel() {
  }

  public ClearChannelRecordModel(
    long clearingId,
    String channelCode,
    String channelName,
    String channelType,
    String payTime,
    String currency,
    String paymentId,
    String paymentIdOld,
    String transNo,
    String transNoOld,
    String successAmount,
    String channelTime,
    String checkTime,
    String settleTime,
    String settleNo,
    String settleTimePlan,
    String settleCyc,
    String settleBath,
    String costTime,
    String costAmount,
    String costWay,
    String costSettleCyc,
    String checkStatus,
    String checkFlg,
    String settleStatus,
    String finishTime,
    String transType,
    String bankSeq,
    String bankName,
    String bankCode,
    String channelProvider)
  {
    this();
    this.clearingId = clearingId;
    setClearingIdIsSet(true);
    this.channelCode = channelCode;
    this.channelName = channelName;
    this.channelType = channelType;
    this.payTime = payTime;
    this.currency = currency;
    this.paymentId = paymentId;
    this.paymentIdOld = paymentIdOld;
    this.transNo = transNo;
    this.transNoOld = transNoOld;
    this.successAmount = successAmount;
    this.channelTime = channelTime;
    this.checkTime = checkTime;
    this.settleTime = settleTime;
    this.settleNo = settleNo;
    this.settleTimePlan = settleTimePlan;
    this.settleCyc = settleCyc;
    this.settleBath = settleBath;
    this.costTime = costTime;
    this.costAmount = costAmount;
    this.costWay = costWay;
    this.costSettleCyc = costSettleCyc;
    this.checkStatus = checkStatus;
    this.checkFlg = checkFlg;
    this.settleStatus = settleStatus;
    this.finishTime = finishTime;
    this.transType = transType;
    this.bankSeq = bankSeq;
    this.bankName = bankName;
    this.bankCode = bankCode;
    this.channelProvider = channelProvider;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClearChannelRecordModel(ClearChannelRecordModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.clearingId = other.clearingId;
    if (other.isSetChannelCode()) {
      this.channelCode = other.channelCode;
    }
    if (other.isSetChannelName()) {
      this.channelName = other.channelName;
    }
    if (other.isSetChannelType()) {
      this.channelType = other.channelType;
    }
    if (other.isSetPayTime()) {
      this.payTime = other.payTime;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    if (other.isSetPaymentId()) {
      this.paymentId = other.paymentId;
    }
    if (other.isSetPaymentIdOld()) {
      this.paymentIdOld = other.paymentIdOld;
    }
    if (other.isSetTransNo()) {
      this.transNo = other.transNo;
    }
    if (other.isSetTransNoOld()) {
      this.transNoOld = other.transNoOld;
    }
    if (other.isSetSuccessAmount()) {
      this.successAmount = other.successAmount;
    }
    if (other.isSetChannelTime()) {
      this.channelTime = other.channelTime;
    }
    if (other.isSetCheckTime()) {
      this.checkTime = other.checkTime;
    }
    if (other.isSetSettleTime()) {
      this.settleTime = other.settleTime;
    }
    if (other.isSetSettleNo()) {
      this.settleNo = other.settleNo;
    }
    if (other.isSetSettleTimePlan()) {
      this.settleTimePlan = other.settleTimePlan;
    }
    if (other.isSetSettleCyc()) {
      this.settleCyc = other.settleCyc;
    }
    if (other.isSetSettleBath()) {
      this.settleBath = other.settleBath;
    }
    if (other.isSetCostTime()) {
      this.costTime = other.costTime;
    }
    if (other.isSetCostAmount()) {
      this.costAmount = other.costAmount;
    }
    if (other.isSetCostWay()) {
      this.costWay = other.costWay;
    }
    if (other.isSetCostSettleCyc()) {
      this.costSettleCyc = other.costSettleCyc;
    }
    if (other.isSetCheckStatus()) {
      this.checkStatus = other.checkStatus;
    }
    if (other.isSetCheckFlg()) {
      this.checkFlg = other.checkFlg;
    }
    if (other.isSetSettleStatus()) {
      this.settleStatus = other.settleStatus;
    }
    if (other.isSetFinishTime()) {
      this.finishTime = other.finishTime;
    }
    if (other.isSetTransType()) {
      this.transType = other.transType;
    }
    if (other.isSetBankSeq()) {
      this.bankSeq = other.bankSeq;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    if (other.isSetBankCode()) {
      this.bankCode = other.bankCode;
    }
    if (other.isSetChannelProvider()) {
      this.channelProvider = other.channelProvider;
    }
  }

  public ClearChannelRecordModel deepCopy() {
    return new ClearChannelRecordModel(this);
  }

  @Override
  public void clear() {
    setClearingIdIsSet(false);
    this.clearingId = 0;
    this.channelCode = null;
    this.channelName = null;
    this.channelType = null;
    this.payTime = null;
    this.currency = null;
    this.paymentId = null;
    this.paymentIdOld = null;
    this.transNo = null;
    this.transNoOld = null;
    this.successAmount = null;
    this.channelTime = null;
    this.checkTime = null;
    this.settleTime = null;
    this.settleNo = null;
    this.settleTimePlan = null;
    this.settleCyc = null;
    this.settleBath = null;
    this.costTime = null;
    this.costAmount = null;
    this.costWay = null;
    this.costSettleCyc = null;
    this.checkStatus = null;
    this.checkFlg = null;
    this.settleStatus = null;
    this.finishTime = null;
    this.transType = null;
    this.bankSeq = null;
    this.bankName = null;
    this.bankCode = null;
    this.channelProvider = null;
  }

  public long getClearingId() {
    return this.clearingId;
  }

  public ClearChannelRecordModel setClearingId(long clearingId) {
    this.clearingId = clearingId;
    setClearingIdIsSet(true);
    return this;
  }

  public void unsetClearingId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLEARINGID_ISSET_ID);
  }

  /** Returns true if field clearingId is set (has been assigned a value) and false otherwise */
  public boolean isSetClearingId() {
    return EncodingUtils.testBit(__isset_bitfield, __CLEARINGID_ISSET_ID);
  }

  public void setClearingIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLEARINGID_ISSET_ID, value);
  }

  public String getChannelCode() {
    return this.channelCode;
  }

  public ClearChannelRecordModel setChannelCode(String channelCode) {
    this.channelCode = channelCode;
    return this;
  }

  public void unsetChannelCode() {
    this.channelCode = null;
  }

  /** Returns true if field channelCode is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelCode() {
    return this.channelCode != null;
  }

  public void setChannelCodeIsSet(boolean value) {
    if (!value) {
      this.channelCode = null;
    }
  }

  public String getChannelName() {
    return this.channelName;
  }

  public ClearChannelRecordModel setChannelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  public void unsetChannelName() {
    this.channelName = null;
  }

  /** Returns true if field channelName is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelName() {
    return this.channelName != null;
  }

  public void setChannelNameIsSet(boolean value) {
    if (!value) {
      this.channelName = null;
    }
  }

  public String getChannelType() {
    return this.channelType;
  }

  public ClearChannelRecordModel setChannelType(String channelType) {
    this.channelType = channelType;
    return this;
  }

  public void unsetChannelType() {
    this.channelType = null;
  }

  /** Returns true if field channelType is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelType() {
    return this.channelType != null;
  }

  public void setChannelTypeIsSet(boolean value) {
    if (!value) {
      this.channelType = null;
    }
  }

  public String getPayTime() {
    return this.payTime;
  }

  public ClearChannelRecordModel setPayTime(String payTime) {
    this.payTime = payTime;
    return this;
  }

  public void unsetPayTime() {
    this.payTime = null;
  }

  /** Returns true if field payTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPayTime() {
    return this.payTime != null;
  }

  public void setPayTimeIsSet(boolean value) {
    if (!value) {
      this.payTime = null;
    }
  }

  public String getCurrency() {
    return this.currency;
  }

  public ClearChannelRecordModel setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public String getPaymentId() {
    return this.paymentId;
  }

  public ClearChannelRecordModel setPaymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  public void unsetPaymentId() {
    this.paymentId = null;
  }

  /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentId() {
    return this.paymentId != null;
  }

  public void setPaymentIdIsSet(boolean value) {
    if (!value) {
      this.paymentId = null;
    }
  }

  public String getPaymentIdOld() {
    return this.paymentIdOld;
  }

  public ClearChannelRecordModel setPaymentIdOld(String paymentIdOld) {
    this.paymentIdOld = paymentIdOld;
    return this;
  }

  public void unsetPaymentIdOld() {
    this.paymentIdOld = null;
  }

  /** Returns true if field paymentIdOld is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentIdOld() {
    return this.paymentIdOld != null;
  }

  public void setPaymentIdOldIsSet(boolean value) {
    if (!value) {
      this.paymentIdOld = null;
    }
  }

  public String getTransNo() {
    return this.transNo;
  }

  public ClearChannelRecordModel setTransNo(String transNo) {
    this.transNo = transNo;
    return this;
  }

  public void unsetTransNo() {
    this.transNo = null;
  }

  /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTransNo() {
    return this.transNo != null;
  }

  public void setTransNoIsSet(boolean value) {
    if (!value) {
      this.transNo = null;
    }
  }

  public String getTransNoOld() {
    return this.transNoOld;
  }

  public ClearChannelRecordModel setTransNoOld(String transNoOld) {
    this.transNoOld = transNoOld;
    return this;
  }

  public void unsetTransNoOld() {
    this.transNoOld = null;
  }

  /** Returns true if field transNoOld is set (has been assigned a value) and false otherwise */
  public boolean isSetTransNoOld() {
    return this.transNoOld != null;
  }

  public void setTransNoOldIsSet(boolean value) {
    if (!value) {
      this.transNoOld = null;
    }
  }

  public String getSuccessAmount() {
    return this.successAmount;
  }

  public ClearChannelRecordModel setSuccessAmount(String successAmount) {
    this.successAmount = successAmount;
    return this;
  }

  public void unsetSuccessAmount() {
    this.successAmount = null;
  }

  /** Returns true if field successAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessAmount() {
    return this.successAmount != null;
  }

  public void setSuccessAmountIsSet(boolean value) {
    if (!value) {
      this.successAmount = null;
    }
  }

  public String getChannelTime() {
    return this.channelTime;
  }

  public ClearChannelRecordModel setChannelTime(String channelTime) {
    this.channelTime = channelTime;
    return this;
  }

  public void unsetChannelTime() {
    this.channelTime = null;
  }

  /** Returns true if field channelTime is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelTime() {
    return this.channelTime != null;
  }

  public void setChannelTimeIsSet(boolean value) {
    if (!value) {
      this.channelTime = null;
    }
  }

  public String getCheckTime() {
    return this.checkTime;
  }

  public ClearChannelRecordModel setCheckTime(String checkTime) {
    this.checkTime = checkTime;
    return this;
  }

  public void unsetCheckTime() {
    this.checkTime = null;
  }

  /** Returns true if field checkTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckTime() {
    return this.checkTime != null;
  }

  public void setCheckTimeIsSet(boolean value) {
    if (!value) {
      this.checkTime = null;
    }
  }

  public String getSettleTime() {
    return this.settleTime;
  }

  public ClearChannelRecordModel setSettleTime(String settleTime) {
    this.settleTime = settleTime;
    return this;
  }

  public void unsetSettleTime() {
    this.settleTime = null;
  }

  /** Returns true if field settleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleTime() {
    return this.settleTime != null;
  }

  public void setSettleTimeIsSet(boolean value) {
    if (!value) {
      this.settleTime = null;
    }
  }

  public String getSettleNo() {
    return this.settleNo;
  }

  public ClearChannelRecordModel setSettleNo(String settleNo) {
    this.settleNo = settleNo;
    return this;
  }

  public void unsetSettleNo() {
    this.settleNo = null;
  }

  /** Returns true if field settleNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleNo() {
    return this.settleNo != null;
  }

  public void setSettleNoIsSet(boolean value) {
    if (!value) {
      this.settleNo = null;
    }
  }

  public String getSettleTimePlan() {
    return this.settleTimePlan;
  }

  public ClearChannelRecordModel setSettleTimePlan(String settleTimePlan) {
    this.settleTimePlan = settleTimePlan;
    return this;
  }

  public void unsetSettleTimePlan() {
    this.settleTimePlan = null;
  }

  /** Returns true if field settleTimePlan is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleTimePlan() {
    return this.settleTimePlan != null;
  }

  public void setSettleTimePlanIsSet(boolean value) {
    if (!value) {
      this.settleTimePlan = null;
    }
  }

  public String getSettleCyc() {
    return this.settleCyc;
  }

  public ClearChannelRecordModel setSettleCyc(String settleCyc) {
    this.settleCyc = settleCyc;
    return this;
  }

  public void unsetSettleCyc() {
    this.settleCyc = null;
  }

  /** Returns true if field settleCyc is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleCyc() {
    return this.settleCyc != null;
  }

  public void setSettleCycIsSet(boolean value) {
    if (!value) {
      this.settleCyc = null;
    }
  }

  public String getSettleBath() {
    return this.settleBath;
  }

  public ClearChannelRecordModel setSettleBath(String settleBath) {
    this.settleBath = settleBath;
    return this;
  }

  public void unsetSettleBath() {
    this.settleBath = null;
  }

  /** Returns true if field settleBath is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleBath() {
    return this.settleBath != null;
  }

  public void setSettleBathIsSet(boolean value) {
    if (!value) {
      this.settleBath = null;
    }
  }

  public String getCostTime() {
    return this.costTime;
  }

  public ClearChannelRecordModel setCostTime(String costTime) {
    this.costTime = costTime;
    return this;
  }

  public void unsetCostTime() {
    this.costTime = null;
  }

  /** Returns true if field costTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCostTime() {
    return this.costTime != null;
  }

  public void setCostTimeIsSet(boolean value) {
    if (!value) {
      this.costTime = null;
    }
  }

  public String getCostAmount() {
    return this.costAmount;
  }

  public ClearChannelRecordModel setCostAmount(String costAmount) {
    this.costAmount = costAmount;
    return this;
  }

  public void unsetCostAmount() {
    this.costAmount = null;
  }

  /** Returns true if field costAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetCostAmount() {
    return this.costAmount != null;
  }

  public void setCostAmountIsSet(boolean value) {
    if (!value) {
      this.costAmount = null;
    }
  }

  public String getCostWay() {
    return this.costWay;
  }

  public ClearChannelRecordModel setCostWay(String costWay) {
    this.costWay = costWay;
    return this;
  }

  public void unsetCostWay() {
    this.costWay = null;
  }

  /** Returns true if field costWay is set (has been assigned a value) and false otherwise */
  public boolean isSetCostWay() {
    return this.costWay != null;
  }

  public void setCostWayIsSet(boolean value) {
    if (!value) {
      this.costWay = null;
    }
  }

  public String getCostSettleCyc() {
    return this.costSettleCyc;
  }

  public ClearChannelRecordModel setCostSettleCyc(String costSettleCyc) {
    this.costSettleCyc = costSettleCyc;
    return this;
  }

  public void unsetCostSettleCyc() {
    this.costSettleCyc = null;
  }

  /** Returns true if field costSettleCyc is set (has been assigned a value) and false otherwise */
  public boolean isSetCostSettleCyc() {
    return this.costSettleCyc != null;
  }

  public void setCostSettleCycIsSet(boolean value) {
    if (!value) {
      this.costSettleCyc = null;
    }
  }

  public String getCheckStatus() {
    return this.checkStatus;
  }

  public ClearChannelRecordModel setCheckStatus(String checkStatus) {
    this.checkStatus = checkStatus;
    return this;
  }

  public void unsetCheckStatus() {
    this.checkStatus = null;
  }

  /** Returns true if field checkStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckStatus() {
    return this.checkStatus != null;
  }

  public void setCheckStatusIsSet(boolean value) {
    if (!value) {
      this.checkStatus = null;
    }
  }

  public String getCheckFlg() {
    return this.checkFlg;
  }

  public ClearChannelRecordModel setCheckFlg(String checkFlg) {
    this.checkFlg = checkFlg;
    return this;
  }

  public void unsetCheckFlg() {
    this.checkFlg = null;
  }

  /** Returns true if field checkFlg is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckFlg() {
    return this.checkFlg != null;
  }

  public void setCheckFlgIsSet(boolean value) {
    if (!value) {
      this.checkFlg = null;
    }
  }

  public String getSettleStatus() {
    return this.settleStatus;
  }

  public ClearChannelRecordModel setSettleStatus(String settleStatus) {
    this.settleStatus = settleStatus;
    return this;
  }

  public void unsetSettleStatus() {
    this.settleStatus = null;
  }

  /** Returns true if field settleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleStatus() {
    return this.settleStatus != null;
  }

  public void setSettleStatusIsSet(boolean value) {
    if (!value) {
      this.settleStatus = null;
    }
  }

  public String getFinishTime() {
    return this.finishTime;
  }

  public ClearChannelRecordModel setFinishTime(String finishTime) {
    this.finishTime = finishTime;
    return this;
  }

  public void unsetFinishTime() {
    this.finishTime = null;
  }

  /** Returns true if field finishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishTime() {
    return this.finishTime != null;
  }

  public void setFinishTimeIsSet(boolean value) {
    if (!value) {
      this.finishTime = null;
    }
  }

  public String getTransType() {
    return this.transType;
  }

  public ClearChannelRecordModel setTransType(String transType) {
    this.transType = transType;
    return this;
  }

  public void unsetTransType() {
    this.transType = null;
  }

  /** Returns true if field transType is set (has been assigned a value) and false otherwise */
  public boolean isSetTransType() {
    return this.transType != null;
  }

  public void setTransTypeIsSet(boolean value) {
    if (!value) {
      this.transType = null;
    }
  }

  public String getBankSeq() {
    return this.bankSeq;
  }

  public ClearChannelRecordModel setBankSeq(String bankSeq) {
    this.bankSeq = bankSeq;
    return this;
  }

  public void unsetBankSeq() {
    this.bankSeq = null;
  }

  /** Returns true if field bankSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetBankSeq() {
    return this.bankSeq != null;
  }

  public void setBankSeqIsSet(boolean value) {
    if (!value) {
      this.bankSeq = null;
    }
  }

  public String getBankName() {
    return this.bankName;
  }

  public ClearChannelRecordModel setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  public String getBankCode() {
    return this.bankCode;
  }

  public ClearChannelRecordModel setBankCode(String bankCode) {
    this.bankCode = bankCode;
    return this;
  }

  public void unsetBankCode() {
    this.bankCode = null;
  }

  /** Returns true if field bankCode is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCode() {
    return this.bankCode != null;
  }

  public void setBankCodeIsSet(boolean value) {
    if (!value) {
      this.bankCode = null;
    }
  }

  public String getChannelProvider() {
    return this.channelProvider;
  }

  public ClearChannelRecordModel setChannelProvider(String channelProvider) {
    this.channelProvider = channelProvider;
    return this;
  }

  public void unsetChannelProvider() {
    this.channelProvider = null;
  }

  /** Returns true if field channelProvider is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelProvider() {
    return this.channelProvider != null;
  }

  public void setChannelProviderIsSet(boolean value) {
    if (!value) {
      this.channelProvider = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLEARING_ID:
      if (value == null) {
        unsetClearingId();
      } else {
        setClearingId((Long)value);
      }
      break;

    case CHANNEL_CODE:
      if (value == null) {
        unsetChannelCode();
      } else {
        setChannelCode((String)value);
      }
      break;

    case CHANNEL_NAME:
      if (value == null) {
        unsetChannelName();
      } else {
        setChannelName((String)value);
      }
      break;

    case CHANNEL_TYPE:
      if (value == null) {
        unsetChannelType();
      } else {
        setChannelType((String)value);
      }
      break;

    case PAY_TIME:
      if (value == null) {
        unsetPayTime();
      } else {
        setPayTime((String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case PAYMENT_ID:
      if (value == null) {
        unsetPaymentId();
      } else {
        setPaymentId((String)value);
      }
      break;

    case PAYMENT_ID_OLD:
      if (value == null) {
        unsetPaymentIdOld();
      } else {
        setPaymentIdOld((String)value);
      }
      break;

    case TRANS_NO:
      if (value == null) {
        unsetTransNo();
      } else {
        setTransNo((String)value);
      }
      break;

    case TRANS_NO_OLD:
      if (value == null) {
        unsetTransNoOld();
      } else {
        setTransNoOld((String)value);
      }
      break;

    case SUCCESS_AMOUNT:
      if (value == null) {
        unsetSuccessAmount();
      } else {
        setSuccessAmount((String)value);
      }
      break;

    case CHANNEL_TIME:
      if (value == null) {
        unsetChannelTime();
      } else {
        setChannelTime((String)value);
      }
      break;

    case CHECK_TIME:
      if (value == null) {
        unsetCheckTime();
      } else {
        setCheckTime((String)value);
      }
      break;

    case SETTLE_TIME:
      if (value == null) {
        unsetSettleTime();
      } else {
        setSettleTime((String)value);
      }
      break;

    case SETTLE_NO:
      if (value == null) {
        unsetSettleNo();
      } else {
        setSettleNo((String)value);
      }
      break;

    case SETTLE_TIME_PLAN:
      if (value == null) {
        unsetSettleTimePlan();
      } else {
        setSettleTimePlan((String)value);
      }
      break;

    case SETTLE_CYC:
      if (value == null) {
        unsetSettleCyc();
      } else {
        setSettleCyc((String)value);
      }
      break;

    case SETTLE_BATH:
      if (value == null) {
        unsetSettleBath();
      } else {
        setSettleBath((String)value);
      }
      break;

    case COST_TIME:
      if (value == null) {
        unsetCostTime();
      } else {
        setCostTime((String)value);
      }
      break;

    case COST_AMOUNT:
      if (value == null) {
        unsetCostAmount();
      } else {
        setCostAmount((String)value);
      }
      break;

    case COST_WAY:
      if (value == null) {
        unsetCostWay();
      } else {
        setCostWay((String)value);
      }
      break;

    case COST_SETTLE_CYC:
      if (value == null) {
        unsetCostSettleCyc();
      } else {
        setCostSettleCyc((String)value);
      }
      break;

    case CHECK_STATUS:
      if (value == null) {
        unsetCheckStatus();
      } else {
        setCheckStatus((String)value);
      }
      break;

    case CHECK_FLG:
      if (value == null) {
        unsetCheckFlg();
      } else {
        setCheckFlg((String)value);
      }
      break;

    case SETTLE_STATUS:
      if (value == null) {
        unsetSettleStatus();
      } else {
        setSettleStatus((String)value);
      }
      break;

    case FINISH_TIME:
      if (value == null) {
        unsetFinishTime();
      } else {
        setFinishTime((String)value);
      }
      break;

    case TRANS_TYPE:
      if (value == null) {
        unsetTransType();
      } else {
        setTransType((String)value);
      }
      break;

    case BANK_SEQ:
      if (value == null) {
        unsetBankSeq();
      } else {
        setBankSeq((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case BANK_CODE:
      if (value == null) {
        unsetBankCode();
      } else {
        setBankCode((String)value);
      }
      break;

    case CHANNEL_PROVIDER:
      if (value == null) {
        unsetChannelProvider();
      } else {
        setChannelProvider((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLEARING_ID:
      return getClearingId();

    case CHANNEL_CODE:
      return getChannelCode();

    case CHANNEL_NAME:
      return getChannelName();

    case CHANNEL_TYPE:
      return getChannelType();

    case PAY_TIME:
      return getPayTime();

    case CURRENCY:
      return getCurrency();

    case PAYMENT_ID:
      return getPaymentId();

    case PAYMENT_ID_OLD:
      return getPaymentIdOld();

    case TRANS_NO:
      return getTransNo();

    case TRANS_NO_OLD:
      return getTransNoOld();

    case SUCCESS_AMOUNT:
      return getSuccessAmount();

    case CHANNEL_TIME:
      return getChannelTime();

    case CHECK_TIME:
      return getCheckTime();

    case SETTLE_TIME:
      return getSettleTime();

    case SETTLE_NO:
      return getSettleNo();

    case SETTLE_TIME_PLAN:
      return getSettleTimePlan();

    case SETTLE_CYC:
      return getSettleCyc();

    case SETTLE_BATH:
      return getSettleBath();

    case COST_TIME:
      return getCostTime();

    case COST_AMOUNT:
      return getCostAmount();

    case COST_WAY:
      return getCostWay();

    case COST_SETTLE_CYC:
      return getCostSettleCyc();

    case CHECK_STATUS:
      return getCheckStatus();

    case CHECK_FLG:
      return getCheckFlg();

    case SETTLE_STATUS:
      return getSettleStatus();

    case FINISH_TIME:
      return getFinishTime();

    case TRANS_TYPE:
      return getTransType();

    case BANK_SEQ:
      return getBankSeq();

    case BANK_NAME:
      return getBankName();

    case BANK_CODE:
      return getBankCode();

    case CHANNEL_PROVIDER:
      return getChannelProvider();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLEARING_ID:
      return isSetClearingId();
    case CHANNEL_CODE:
      return isSetChannelCode();
    case CHANNEL_NAME:
      return isSetChannelName();
    case CHANNEL_TYPE:
      return isSetChannelType();
    case PAY_TIME:
      return isSetPayTime();
    case CURRENCY:
      return isSetCurrency();
    case PAYMENT_ID:
      return isSetPaymentId();
    case PAYMENT_ID_OLD:
      return isSetPaymentIdOld();
    case TRANS_NO:
      return isSetTransNo();
    case TRANS_NO_OLD:
      return isSetTransNoOld();
    case SUCCESS_AMOUNT:
      return isSetSuccessAmount();
    case CHANNEL_TIME:
      return isSetChannelTime();
    case CHECK_TIME:
      return isSetCheckTime();
    case SETTLE_TIME:
      return isSetSettleTime();
    case SETTLE_NO:
      return isSetSettleNo();
    case SETTLE_TIME_PLAN:
      return isSetSettleTimePlan();
    case SETTLE_CYC:
      return isSetSettleCyc();
    case SETTLE_BATH:
      return isSetSettleBath();
    case COST_TIME:
      return isSetCostTime();
    case COST_AMOUNT:
      return isSetCostAmount();
    case COST_WAY:
      return isSetCostWay();
    case COST_SETTLE_CYC:
      return isSetCostSettleCyc();
    case CHECK_STATUS:
      return isSetCheckStatus();
    case CHECK_FLG:
      return isSetCheckFlg();
    case SETTLE_STATUS:
      return isSetSettleStatus();
    case FINISH_TIME:
      return isSetFinishTime();
    case TRANS_TYPE:
      return isSetTransType();
    case BANK_SEQ:
      return isSetBankSeq();
    case BANK_NAME:
      return isSetBankName();
    case BANK_CODE:
      return isSetBankCode();
    case CHANNEL_PROVIDER:
      return isSetChannelProvider();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClearChannelRecordModel)
      return this.equals((ClearChannelRecordModel)that);
    return false;
  }

  public boolean equals(ClearChannelRecordModel that) {
    if (that == null)
      return false;

    boolean this_present_clearingId = true;
    boolean that_present_clearingId = true;
    if (this_present_clearingId || that_present_clearingId) {
      if (!(this_present_clearingId && that_present_clearingId))
        return false;
      if (this.clearingId != that.clearingId)
        return false;
    }

    boolean this_present_channelCode = true && this.isSetChannelCode();
    boolean that_present_channelCode = true && that.isSetChannelCode();
    if (this_present_channelCode || that_present_channelCode) {
      if (!(this_present_channelCode && that_present_channelCode))
        return false;
      if (!this.channelCode.equals(that.channelCode))
        return false;
    }

    boolean this_present_channelName = true && this.isSetChannelName();
    boolean that_present_channelName = true && that.isSetChannelName();
    if (this_present_channelName || that_present_channelName) {
      if (!(this_present_channelName && that_present_channelName))
        return false;
      if (!this.channelName.equals(that.channelName))
        return false;
    }

    boolean this_present_channelType = true && this.isSetChannelType();
    boolean that_present_channelType = true && that.isSetChannelType();
    if (this_present_channelType || that_present_channelType) {
      if (!(this_present_channelType && that_present_channelType))
        return false;
      if (!this.channelType.equals(that.channelType))
        return false;
    }

    boolean this_present_payTime = true && this.isSetPayTime();
    boolean that_present_payTime = true && that.isSetPayTime();
    if (this_present_payTime || that_present_payTime) {
      if (!(this_present_payTime && that_present_payTime))
        return false;
      if (!this.payTime.equals(that.payTime))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_paymentId = true && this.isSetPaymentId();
    boolean that_present_paymentId = true && that.isSetPaymentId();
    if (this_present_paymentId || that_present_paymentId) {
      if (!(this_present_paymentId && that_present_paymentId))
        return false;
      if (!this.paymentId.equals(that.paymentId))
        return false;
    }

    boolean this_present_paymentIdOld = true && this.isSetPaymentIdOld();
    boolean that_present_paymentIdOld = true && that.isSetPaymentIdOld();
    if (this_present_paymentIdOld || that_present_paymentIdOld) {
      if (!(this_present_paymentIdOld && that_present_paymentIdOld))
        return false;
      if (!this.paymentIdOld.equals(that.paymentIdOld))
        return false;
    }

    boolean this_present_transNo = true && this.isSetTransNo();
    boolean that_present_transNo = true && that.isSetTransNo();
    if (this_present_transNo || that_present_transNo) {
      if (!(this_present_transNo && that_present_transNo))
        return false;
      if (!this.transNo.equals(that.transNo))
        return false;
    }

    boolean this_present_transNoOld = true && this.isSetTransNoOld();
    boolean that_present_transNoOld = true && that.isSetTransNoOld();
    if (this_present_transNoOld || that_present_transNoOld) {
      if (!(this_present_transNoOld && that_present_transNoOld))
        return false;
      if (!this.transNoOld.equals(that.transNoOld))
        return false;
    }

    boolean this_present_successAmount = true && this.isSetSuccessAmount();
    boolean that_present_successAmount = true && that.isSetSuccessAmount();
    if (this_present_successAmount || that_present_successAmount) {
      if (!(this_present_successAmount && that_present_successAmount))
        return false;
      if (!this.successAmount.equals(that.successAmount))
        return false;
    }

    boolean this_present_channelTime = true && this.isSetChannelTime();
    boolean that_present_channelTime = true && that.isSetChannelTime();
    if (this_present_channelTime || that_present_channelTime) {
      if (!(this_present_channelTime && that_present_channelTime))
        return false;
      if (!this.channelTime.equals(that.channelTime))
        return false;
    }

    boolean this_present_checkTime = true && this.isSetCheckTime();
    boolean that_present_checkTime = true && that.isSetCheckTime();
    if (this_present_checkTime || that_present_checkTime) {
      if (!(this_present_checkTime && that_present_checkTime))
        return false;
      if (!this.checkTime.equals(that.checkTime))
        return false;
    }

    boolean this_present_settleTime = true && this.isSetSettleTime();
    boolean that_present_settleTime = true && that.isSetSettleTime();
    if (this_present_settleTime || that_present_settleTime) {
      if (!(this_present_settleTime && that_present_settleTime))
        return false;
      if (!this.settleTime.equals(that.settleTime))
        return false;
    }

    boolean this_present_settleNo = true && this.isSetSettleNo();
    boolean that_present_settleNo = true && that.isSetSettleNo();
    if (this_present_settleNo || that_present_settleNo) {
      if (!(this_present_settleNo && that_present_settleNo))
        return false;
      if (!this.settleNo.equals(that.settleNo))
        return false;
    }

    boolean this_present_settleTimePlan = true && this.isSetSettleTimePlan();
    boolean that_present_settleTimePlan = true && that.isSetSettleTimePlan();
    if (this_present_settleTimePlan || that_present_settleTimePlan) {
      if (!(this_present_settleTimePlan && that_present_settleTimePlan))
        return false;
      if (!this.settleTimePlan.equals(that.settleTimePlan))
        return false;
    }

    boolean this_present_settleCyc = true && this.isSetSettleCyc();
    boolean that_present_settleCyc = true && that.isSetSettleCyc();
    if (this_present_settleCyc || that_present_settleCyc) {
      if (!(this_present_settleCyc && that_present_settleCyc))
        return false;
      if (!this.settleCyc.equals(that.settleCyc))
        return false;
    }

    boolean this_present_settleBath = true && this.isSetSettleBath();
    boolean that_present_settleBath = true && that.isSetSettleBath();
    if (this_present_settleBath || that_present_settleBath) {
      if (!(this_present_settleBath && that_present_settleBath))
        return false;
      if (!this.settleBath.equals(that.settleBath))
        return false;
    }

    boolean this_present_costTime = true && this.isSetCostTime();
    boolean that_present_costTime = true && that.isSetCostTime();
    if (this_present_costTime || that_present_costTime) {
      if (!(this_present_costTime && that_present_costTime))
        return false;
      if (!this.costTime.equals(that.costTime))
        return false;
    }

    boolean this_present_costAmount = true && this.isSetCostAmount();
    boolean that_present_costAmount = true && that.isSetCostAmount();
    if (this_present_costAmount || that_present_costAmount) {
      if (!(this_present_costAmount && that_present_costAmount))
        return false;
      if (!this.costAmount.equals(that.costAmount))
        return false;
    }

    boolean this_present_costWay = true && this.isSetCostWay();
    boolean that_present_costWay = true && that.isSetCostWay();
    if (this_present_costWay || that_present_costWay) {
      if (!(this_present_costWay && that_present_costWay))
        return false;
      if (!this.costWay.equals(that.costWay))
        return false;
    }

    boolean this_present_costSettleCyc = true && this.isSetCostSettleCyc();
    boolean that_present_costSettleCyc = true && that.isSetCostSettleCyc();
    if (this_present_costSettleCyc || that_present_costSettleCyc) {
      if (!(this_present_costSettleCyc && that_present_costSettleCyc))
        return false;
      if (!this.costSettleCyc.equals(that.costSettleCyc))
        return false;
    }

    boolean this_present_checkStatus = true && this.isSetCheckStatus();
    boolean that_present_checkStatus = true && that.isSetCheckStatus();
    if (this_present_checkStatus || that_present_checkStatus) {
      if (!(this_present_checkStatus && that_present_checkStatus))
        return false;
      if (!this.checkStatus.equals(that.checkStatus))
        return false;
    }

    boolean this_present_checkFlg = true && this.isSetCheckFlg();
    boolean that_present_checkFlg = true && that.isSetCheckFlg();
    if (this_present_checkFlg || that_present_checkFlg) {
      if (!(this_present_checkFlg && that_present_checkFlg))
        return false;
      if (!this.checkFlg.equals(that.checkFlg))
        return false;
    }

    boolean this_present_settleStatus = true && this.isSetSettleStatus();
    boolean that_present_settleStatus = true && that.isSetSettleStatus();
    if (this_present_settleStatus || that_present_settleStatus) {
      if (!(this_present_settleStatus && that_present_settleStatus))
        return false;
      if (!this.settleStatus.equals(that.settleStatus))
        return false;
    }

    boolean this_present_finishTime = true && this.isSetFinishTime();
    boolean that_present_finishTime = true && that.isSetFinishTime();
    if (this_present_finishTime || that_present_finishTime) {
      if (!(this_present_finishTime && that_present_finishTime))
        return false;
      if (!this.finishTime.equals(that.finishTime))
        return false;
    }

    boolean this_present_transType = true && this.isSetTransType();
    boolean that_present_transType = true && that.isSetTransType();
    if (this_present_transType || that_present_transType) {
      if (!(this_present_transType && that_present_transType))
        return false;
      if (!this.transType.equals(that.transType))
        return false;
    }

    boolean this_present_bankSeq = true && this.isSetBankSeq();
    boolean that_present_bankSeq = true && that.isSetBankSeq();
    if (this_present_bankSeq || that_present_bankSeq) {
      if (!(this_present_bankSeq && that_present_bankSeq))
        return false;
      if (!this.bankSeq.equals(that.bankSeq))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_bankCode = true && this.isSetBankCode();
    boolean that_present_bankCode = true && that.isSetBankCode();
    if (this_present_bankCode || that_present_bankCode) {
      if (!(this_present_bankCode && that_present_bankCode))
        return false;
      if (!this.bankCode.equals(that.bankCode))
        return false;
    }

    boolean this_present_channelProvider = true && this.isSetChannelProvider();
    boolean that_present_channelProvider = true && that.isSetChannelProvider();
    if (this_present_channelProvider || that_present_channelProvider) {
      if (!(this_present_channelProvider && that_present_channelProvider))
        return false;
      if (!this.channelProvider.equals(that.channelProvider))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clearingId = true;
    list.add(present_clearingId);
    if (present_clearingId)
      list.add(clearingId);

    boolean present_channelCode = true && (isSetChannelCode());
    list.add(present_channelCode);
    if (present_channelCode)
      list.add(channelCode);

    boolean present_channelName = true && (isSetChannelName());
    list.add(present_channelName);
    if (present_channelName)
      list.add(channelName);

    boolean present_channelType = true && (isSetChannelType());
    list.add(present_channelType);
    if (present_channelType)
      list.add(channelType);

    boolean present_payTime = true && (isSetPayTime());
    list.add(present_payTime);
    if (present_payTime)
      list.add(payTime);

    boolean present_currency = true && (isSetCurrency());
    list.add(present_currency);
    if (present_currency)
      list.add(currency);

    boolean present_paymentId = true && (isSetPaymentId());
    list.add(present_paymentId);
    if (present_paymentId)
      list.add(paymentId);

    boolean present_paymentIdOld = true && (isSetPaymentIdOld());
    list.add(present_paymentIdOld);
    if (present_paymentIdOld)
      list.add(paymentIdOld);

    boolean present_transNo = true && (isSetTransNo());
    list.add(present_transNo);
    if (present_transNo)
      list.add(transNo);

    boolean present_transNoOld = true && (isSetTransNoOld());
    list.add(present_transNoOld);
    if (present_transNoOld)
      list.add(transNoOld);

    boolean present_successAmount = true && (isSetSuccessAmount());
    list.add(present_successAmount);
    if (present_successAmount)
      list.add(successAmount);

    boolean present_channelTime = true && (isSetChannelTime());
    list.add(present_channelTime);
    if (present_channelTime)
      list.add(channelTime);

    boolean present_checkTime = true && (isSetCheckTime());
    list.add(present_checkTime);
    if (present_checkTime)
      list.add(checkTime);

    boolean present_settleTime = true && (isSetSettleTime());
    list.add(present_settleTime);
    if (present_settleTime)
      list.add(settleTime);

    boolean present_settleNo = true && (isSetSettleNo());
    list.add(present_settleNo);
    if (present_settleNo)
      list.add(settleNo);

    boolean present_settleTimePlan = true && (isSetSettleTimePlan());
    list.add(present_settleTimePlan);
    if (present_settleTimePlan)
      list.add(settleTimePlan);

    boolean present_settleCyc = true && (isSetSettleCyc());
    list.add(present_settleCyc);
    if (present_settleCyc)
      list.add(settleCyc);

    boolean present_settleBath = true && (isSetSettleBath());
    list.add(present_settleBath);
    if (present_settleBath)
      list.add(settleBath);

    boolean present_costTime = true && (isSetCostTime());
    list.add(present_costTime);
    if (present_costTime)
      list.add(costTime);

    boolean present_costAmount = true && (isSetCostAmount());
    list.add(present_costAmount);
    if (present_costAmount)
      list.add(costAmount);

    boolean present_costWay = true && (isSetCostWay());
    list.add(present_costWay);
    if (present_costWay)
      list.add(costWay);

    boolean present_costSettleCyc = true && (isSetCostSettleCyc());
    list.add(present_costSettleCyc);
    if (present_costSettleCyc)
      list.add(costSettleCyc);

    boolean present_checkStatus = true && (isSetCheckStatus());
    list.add(present_checkStatus);
    if (present_checkStatus)
      list.add(checkStatus);

    boolean present_checkFlg = true && (isSetCheckFlg());
    list.add(present_checkFlg);
    if (present_checkFlg)
      list.add(checkFlg);

    boolean present_settleStatus = true && (isSetSettleStatus());
    list.add(present_settleStatus);
    if (present_settleStatus)
      list.add(settleStatus);

    boolean present_finishTime = true && (isSetFinishTime());
    list.add(present_finishTime);
    if (present_finishTime)
      list.add(finishTime);

    boolean present_transType = true && (isSetTransType());
    list.add(present_transType);
    if (present_transType)
      list.add(transType);

    boolean present_bankSeq = true && (isSetBankSeq());
    list.add(present_bankSeq);
    if (present_bankSeq)
      list.add(bankSeq);

    boolean present_bankName = true && (isSetBankName());
    list.add(present_bankName);
    if (present_bankName)
      list.add(bankName);

    boolean present_bankCode = true && (isSetBankCode());
    list.add(present_bankCode);
    if (present_bankCode)
      list.add(bankCode);

    boolean present_channelProvider = true && (isSetChannelProvider());
    list.add(present_channelProvider);
    if (present_channelProvider)
      list.add(channelProvider);

    return list.hashCode();
  }

  @Override
  public int compareTo(ClearChannelRecordModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClearingId()).compareTo(other.isSetClearingId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearingId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearingId, other.clearingId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelCode()).compareTo(other.isSetChannelCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCode, other.channelCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelName()).compareTo(other.isSetChannelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelName, other.channelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelType()).compareTo(other.isSetChannelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelType, other.channelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayTime()).compareTo(other.isSetPayTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payTime, other.payTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentIdOld()).compareTo(other.isSetPaymentIdOld());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentIdOld()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentIdOld, other.paymentIdOld);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransNoOld()).compareTo(other.isSetTransNoOld());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransNoOld()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNoOld, other.transNoOld);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessAmount()).compareTo(other.isSetSuccessAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successAmount, other.successAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelTime()).compareTo(other.isSetChannelTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelTime, other.channelTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckTime()).compareTo(other.isSetCheckTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkTime, other.checkTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleTime()).compareTo(other.isSetSettleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleTime, other.settleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleNo()).compareTo(other.isSetSettleNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleNo, other.settleNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleTimePlan()).compareTo(other.isSetSettleTimePlan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleTimePlan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleTimePlan, other.settleTimePlan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleCyc()).compareTo(other.isSetSettleCyc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleCyc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleCyc, other.settleCyc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleBath()).compareTo(other.isSetSettleBath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleBath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleBath, other.settleBath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostTime()).compareTo(other.isSetCostTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costTime, other.costTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostAmount()).compareTo(other.isSetCostAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costAmount, other.costAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostWay()).compareTo(other.isSetCostWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costWay, other.costWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostSettleCyc()).compareTo(other.isSetCostSettleCyc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostSettleCyc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costSettleCyc, other.costSettleCyc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckStatus()).compareTo(other.isSetCheckStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkStatus, other.checkStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckFlg()).compareTo(other.isSetCheckFlg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckFlg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkFlg, other.checkFlg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleStatus()).compareTo(other.isSetSettleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleStatus, other.settleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishTime()).compareTo(other.isSetFinishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishTime, other.finishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransType()).compareTo(other.isSetTransType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transType, other.transType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankSeq()).compareTo(other.isSetBankSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankSeq, other.bankSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCode()).compareTo(other.isSetBankCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCode, other.bankCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelProvider()).compareTo(other.isSetChannelProvider());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelProvider()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelProvider, other.channelProvider);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClearChannelRecordModel(");
    boolean first = true;

    sb.append("clearingId:");
    sb.append(this.clearingId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelCode:");
    if (this.channelCode == null) {
      sb.append("null");
    } else {
      sb.append(this.channelCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelName:");
    if (this.channelName == null) {
      sb.append("null");
    } else {
      sb.append(this.channelName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelType:");
    if (this.channelType == null) {
      sb.append("null");
    } else {
      sb.append(this.channelType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payTime:");
    if (this.payTime == null) {
      sb.append("null");
    } else {
      sb.append(this.payTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentId:");
    if (this.paymentId == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentIdOld:");
    if (this.paymentIdOld == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentIdOld);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transNo:");
    if (this.transNo == null) {
      sb.append("null");
    } else {
      sb.append(this.transNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transNoOld:");
    if (this.transNoOld == null) {
      sb.append("null");
    } else {
      sb.append(this.transNoOld);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("successAmount:");
    if (this.successAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.successAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelTime:");
    if (this.channelTime == null) {
      sb.append("null");
    } else {
      sb.append(this.channelTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkTime:");
    if (this.checkTime == null) {
      sb.append("null");
    } else {
      sb.append(this.checkTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleTime:");
    if (this.settleTime == null) {
      sb.append("null");
    } else {
      sb.append(this.settleTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleNo:");
    if (this.settleNo == null) {
      sb.append("null");
    } else {
      sb.append(this.settleNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleTimePlan:");
    if (this.settleTimePlan == null) {
      sb.append("null");
    } else {
      sb.append(this.settleTimePlan);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleCyc:");
    if (this.settleCyc == null) {
      sb.append("null");
    } else {
      sb.append(this.settleCyc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleBath:");
    if (this.settleBath == null) {
      sb.append("null");
    } else {
      sb.append(this.settleBath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("costTime:");
    if (this.costTime == null) {
      sb.append("null");
    } else {
      sb.append(this.costTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("costAmount:");
    if (this.costAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.costAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("costWay:");
    if (this.costWay == null) {
      sb.append("null");
    } else {
      sb.append(this.costWay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("costSettleCyc:");
    if (this.costSettleCyc == null) {
      sb.append("null");
    } else {
      sb.append(this.costSettleCyc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkStatus:");
    if (this.checkStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.checkStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkFlg:");
    if (this.checkFlg == null) {
      sb.append("null");
    } else {
      sb.append(this.checkFlg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleStatus:");
    if (this.settleStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.settleStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishTime:");
    if (this.finishTime == null) {
      sb.append("null");
    } else {
      sb.append(this.finishTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transType:");
    if (this.transType == null) {
      sb.append("null");
    } else {
      sb.append(this.transType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankSeq:");
    if (this.bankSeq == null) {
      sb.append("null");
    } else {
      sb.append(this.bankSeq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCode:");
    if (this.bankCode == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelProvider:");
    if (this.channelProvider == null) {
      sb.append("null");
    } else {
      sb.append(this.channelProvider);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'clearingId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClearChannelRecordModelStandardSchemeFactory implements SchemeFactory {
    public ClearChannelRecordModelStandardScheme getScheme() {
      return new ClearChannelRecordModelStandardScheme();
    }
  }

  private static class ClearChannelRecordModelStandardScheme extends StandardScheme<ClearChannelRecordModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClearChannelRecordModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLEARING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.clearingId = iprot.readI64();
              struct.setClearingIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHANNEL_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelCode = iprot.readString();
              struct.setChannelCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHANNEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelName = iprot.readString();
              struct.setChannelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANNEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelType = iprot.readString();
              struct.setChannelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payTime = iprot.readString();
              struct.setPayTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentId = iprot.readString();
              struct.setPaymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAYMENT_ID_OLD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentIdOld = iprot.readString();
              struct.setPaymentIdOldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRANS_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transNo = iprot.readString();
              struct.setTransNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TRANS_NO_OLD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transNoOld = iprot.readString();
              struct.setTransNoOldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SUCCESS_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.successAmount = iprot.readString();
              struct.setSuccessAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CHANNEL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelTime = iprot.readString();
              struct.setChannelTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CHECK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkTime = iprot.readString();
              struct.setCheckTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SETTLE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleTime = iprot.readString();
              struct.setSettleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SETTLE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleNo = iprot.readString();
              struct.setSettleNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SETTLE_TIME_PLAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleTimePlan = iprot.readString();
              struct.setSettleTimePlanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SETTLE_CYC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleCyc = iprot.readString();
              struct.setSettleCycIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SETTLE_BATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleBath = iprot.readString();
              struct.setSettleBathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // COST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.costTime = iprot.readString();
              struct.setCostTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // COST_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.costAmount = iprot.readString();
              struct.setCostAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // COST_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.costWay = iprot.readString();
              struct.setCostWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // COST_SETTLE_CYC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.costSettleCyc = iprot.readString();
              struct.setCostSettleCycIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CHECK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkStatus = iprot.readString();
              struct.setCheckStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // CHECK_FLG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkFlg = iprot.readString();
              struct.setCheckFlgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // SETTLE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleStatus = iprot.readString();
              struct.setSettleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.finishTime = iprot.readString();
              struct.setFinishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // TRANS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transType = iprot.readString();
              struct.setTransTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // BANK_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankSeq = iprot.readString();
              struct.setBankSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // BANK_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCode = iprot.readString();
              struct.setBankCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // CHANNEL_PROVIDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelProvider = iprot.readString();
              struct.setChannelProviderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetClearingId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'clearingId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClearChannelRecordModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CLEARING_ID_FIELD_DESC);
      oprot.writeI64(struct.clearingId);
      oprot.writeFieldEnd();
      if (struct.channelCode != null) {
        oprot.writeFieldBegin(CHANNEL_CODE_FIELD_DESC);
        oprot.writeString(struct.channelCode);
        oprot.writeFieldEnd();
      }
      if (struct.channelName != null) {
        oprot.writeFieldBegin(CHANNEL_NAME_FIELD_DESC);
        oprot.writeString(struct.channelName);
        oprot.writeFieldEnd();
      }
      if (struct.channelType != null) {
        oprot.writeFieldBegin(CHANNEL_TYPE_FIELD_DESC);
        oprot.writeString(struct.channelType);
        oprot.writeFieldEnd();
      }
      if (struct.payTime != null) {
        oprot.writeFieldBegin(PAY_TIME_FIELD_DESC);
        oprot.writeString(struct.payTime);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.currency);
        oprot.writeFieldEnd();
      }
      if (struct.paymentId != null) {
        oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
        oprot.writeString(struct.paymentId);
        oprot.writeFieldEnd();
      }
      if (struct.paymentIdOld != null) {
        oprot.writeFieldBegin(PAYMENT_ID_OLD_FIELD_DESC);
        oprot.writeString(struct.paymentIdOld);
        oprot.writeFieldEnd();
      }
      if (struct.transNo != null) {
        oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
        oprot.writeString(struct.transNo);
        oprot.writeFieldEnd();
      }
      if (struct.transNoOld != null) {
        oprot.writeFieldBegin(TRANS_NO_OLD_FIELD_DESC);
        oprot.writeString(struct.transNoOld);
        oprot.writeFieldEnd();
      }
      if (struct.successAmount != null) {
        oprot.writeFieldBegin(SUCCESS_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.successAmount);
        oprot.writeFieldEnd();
      }
      if (struct.channelTime != null) {
        oprot.writeFieldBegin(CHANNEL_TIME_FIELD_DESC);
        oprot.writeString(struct.channelTime);
        oprot.writeFieldEnd();
      }
      if (struct.checkTime != null) {
        oprot.writeFieldBegin(CHECK_TIME_FIELD_DESC);
        oprot.writeString(struct.checkTime);
        oprot.writeFieldEnd();
      }
      if (struct.settleTime != null) {
        oprot.writeFieldBegin(SETTLE_TIME_FIELD_DESC);
        oprot.writeString(struct.settleTime);
        oprot.writeFieldEnd();
      }
      if (struct.settleNo != null) {
        oprot.writeFieldBegin(SETTLE_NO_FIELD_DESC);
        oprot.writeString(struct.settleNo);
        oprot.writeFieldEnd();
      }
      if (struct.settleTimePlan != null) {
        oprot.writeFieldBegin(SETTLE_TIME_PLAN_FIELD_DESC);
        oprot.writeString(struct.settleTimePlan);
        oprot.writeFieldEnd();
      }
      if (struct.settleCyc != null) {
        oprot.writeFieldBegin(SETTLE_CYC_FIELD_DESC);
        oprot.writeString(struct.settleCyc);
        oprot.writeFieldEnd();
      }
      if (struct.settleBath != null) {
        oprot.writeFieldBegin(SETTLE_BATH_FIELD_DESC);
        oprot.writeString(struct.settleBath);
        oprot.writeFieldEnd();
      }
      if (struct.costTime != null) {
        oprot.writeFieldBegin(COST_TIME_FIELD_DESC);
        oprot.writeString(struct.costTime);
        oprot.writeFieldEnd();
      }
      if (struct.costAmount != null) {
        oprot.writeFieldBegin(COST_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.costAmount);
        oprot.writeFieldEnd();
      }
      if (struct.costWay != null) {
        oprot.writeFieldBegin(COST_WAY_FIELD_DESC);
        oprot.writeString(struct.costWay);
        oprot.writeFieldEnd();
      }
      if (struct.costSettleCyc != null) {
        oprot.writeFieldBegin(COST_SETTLE_CYC_FIELD_DESC);
        oprot.writeString(struct.costSettleCyc);
        oprot.writeFieldEnd();
      }
      if (struct.checkStatus != null) {
        oprot.writeFieldBegin(CHECK_STATUS_FIELD_DESC);
        oprot.writeString(struct.checkStatus);
        oprot.writeFieldEnd();
      }
      if (struct.checkFlg != null) {
        oprot.writeFieldBegin(CHECK_FLG_FIELD_DESC);
        oprot.writeString(struct.checkFlg);
        oprot.writeFieldEnd();
      }
      if (struct.settleStatus != null) {
        oprot.writeFieldBegin(SETTLE_STATUS_FIELD_DESC);
        oprot.writeString(struct.settleStatus);
        oprot.writeFieldEnd();
      }
      if (struct.finishTime != null) {
        oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
        oprot.writeString(struct.finishTime);
        oprot.writeFieldEnd();
      }
      if (struct.transType != null) {
        oprot.writeFieldBegin(TRANS_TYPE_FIELD_DESC);
        oprot.writeString(struct.transType);
        oprot.writeFieldEnd();
      }
      if (struct.bankSeq != null) {
        oprot.writeFieldBegin(BANK_SEQ_FIELD_DESC);
        oprot.writeString(struct.bankSeq);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      if (struct.bankCode != null) {
        oprot.writeFieldBegin(BANK_CODE_FIELD_DESC);
        oprot.writeString(struct.bankCode);
        oprot.writeFieldEnd();
      }
      if (struct.channelProvider != null) {
        oprot.writeFieldBegin(CHANNEL_PROVIDER_FIELD_DESC);
        oprot.writeString(struct.channelProvider);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClearChannelRecordModelTupleSchemeFactory implements SchemeFactory {
    public ClearChannelRecordModelTupleScheme getScheme() {
      return new ClearChannelRecordModelTupleScheme();
    }
  }

  private static class ClearChannelRecordModelTupleScheme extends TupleScheme<ClearChannelRecordModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClearChannelRecordModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.clearingId);
      BitSet optionals = new BitSet();
      if (struct.isSetChannelCode()) {
        optionals.set(0);
      }
      if (struct.isSetChannelName()) {
        optionals.set(1);
      }
      if (struct.isSetChannelType()) {
        optionals.set(2);
      }
      if (struct.isSetPayTime()) {
        optionals.set(3);
      }
      if (struct.isSetCurrency()) {
        optionals.set(4);
      }
      if (struct.isSetPaymentId()) {
        optionals.set(5);
      }
      if (struct.isSetPaymentIdOld()) {
        optionals.set(6);
      }
      if (struct.isSetTransNo()) {
        optionals.set(7);
      }
      if (struct.isSetTransNoOld()) {
        optionals.set(8);
      }
      if (struct.isSetSuccessAmount()) {
        optionals.set(9);
      }
      if (struct.isSetChannelTime()) {
        optionals.set(10);
      }
      if (struct.isSetCheckTime()) {
        optionals.set(11);
      }
      if (struct.isSetSettleTime()) {
        optionals.set(12);
      }
      if (struct.isSetSettleNo()) {
        optionals.set(13);
      }
      if (struct.isSetSettleTimePlan()) {
        optionals.set(14);
      }
      if (struct.isSetSettleCyc()) {
        optionals.set(15);
      }
      if (struct.isSetSettleBath()) {
        optionals.set(16);
      }
      if (struct.isSetCostTime()) {
        optionals.set(17);
      }
      if (struct.isSetCostAmount()) {
        optionals.set(18);
      }
      if (struct.isSetCostWay()) {
        optionals.set(19);
      }
      if (struct.isSetCostSettleCyc()) {
        optionals.set(20);
      }
      if (struct.isSetCheckStatus()) {
        optionals.set(21);
      }
      if (struct.isSetCheckFlg()) {
        optionals.set(22);
      }
      if (struct.isSetSettleStatus()) {
        optionals.set(23);
      }
      if (struct.isSetFinishTime()) {
        optionals.set(24);
      }
      if (struct.isSetTransType()) {
        optionals.set(25);
      }
      if (struct.isSetBankSeq()) {
        optionals.set(26);
      }
      if (struct.isSetBankName()) {
        optionals.set(27);
      }
      if (struct.isSetBankCode()) {
        optionals.set(28);
      }
      if (struct.isSetChannelProvider()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetChannelCode()) {
        oprot.writeString(struct.channelCode);
      }
      if (struct.isSetChannelName()) {
        oprot.writeString(struct.channelName);
      }
      if (struct.isSetChannelType()) {
        oprot.writeString(struct.channelType);
      }
      if (struct.isSetPayTime()) {
        oprot.writeString(struct.payTime);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetPaymentId()) {
        oprot.writeString(struct.paymentId);
      }
      if (struct.isSetPaymentIdOld()) {
        oprot.writeString(struct.paymentIdOld);
      }
      if (struct.isSetTransNo()) {
        oprot.writeString(struct.transNo);
      }
      if (struct.isSetTransNoOld()) {
        oprot.writeString(struct.transNoOld);
      }
      if (struct.isSetSuccessAmount()) {
        oprot.writeString(struct.successAmount);
      }
      if (struct.isSetChannelTime()) {
        oprot.writeString(struct.channelTime);
      }
      if (struct.isSetCheckTime()) {
        oprot.writeString(struct.checkTime);
      }
      if (struct.isSetSettleTime()) {
        oprot.writeString(struct.settleTime);
      }
      if (struct.isSetSettleNo()) {
        oprot.writeString(struct.settleNo);
      }
      if (struct.isSetSettleTimePlan()) {
        oprot.writeString(struct.settleTimePlan);
      }
      if (struct.isSetSettleCyc()) {
        oprot.writeString(struct.settleCyc);
      }
      if (struct.isSetSettleBath()) {
        oprot.writeString(struct.settleBath);
      }
      if (struct.isSetCostTime()) {
        oprot.writeString(struct.costTime);
      }
      if (struct.isSetCostAmount()) {
        oprot.writeString(struct.costAmount);
      }
      if (struct.isSetCostWay()) {
        oprot.writeString(struct.costWay);
      }
      if (struct.isSetCostSettleCyc()) {
        oprot.writeString(struct.costSettleCyc);
      }
      if (struct.isSetCheckStatus()) {
        oprot.writeString(struct.checkStatus);
      }
      if (struct.isSetCheckFlg()) {
        oprot.writeString(struct.checkFlg);
      }
      if (struct.isSetSettleStatus()) {
        oprot.writeString(struct.settleStatus);
      }
      if (struct.isSetFinishTime()) {
        oprot.writeString(struct.finishTime);
      }
      if (struct.isSetTransType()) {
        oprot.writeString(struct.transType);
      }
      if (struct.isSetBankSeq()) {
        oprot.writeString(struct.bankSeq);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetBankCode()) {
        oprot.writeString(struct.bankCode);
      }
      if (struct.isSetChannelProvider()) {
        oprot.writeString(struct.channelProvider);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClearChannelRecordModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.clearingId = iprot.readI64();
      struct.setClearingIdIsSet(true);
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.channelCode = iprot.readString();
        struct.setChannelCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.channelName = iprot.readString();
        struct.setChannelNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.channelType = iprot.readString();
        struct.setChannelTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.payTime = iprot.readString();
        struct.setPayTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.paymentId = iprot.readString();
        struct.setPaymentIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.paymentIdOld = iprot.readString();
        struct.setPaymentIdOldIsSet(true);
      }
      if (incoming.get(7)) {
        struct.transNo = iprot.readString();
        struct.setTransNoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.transNoOld = iprot.readString();
        struct.setTransNoOldIsSet(true);
      }
      if (incoming.get(9)) {
        struct.successAmount = iprot.readString();
        struct.setSuccessAmountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.channelTime = iprot.readString();
        struct.setChannelTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.checkTime = iprot.readString();
        struct.setCheckTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.settleTime = iprot.readString();
        struct.setSettleTimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.settleNo = iprot.readString();
        struct.setSettleNoIsSet(true);
      }
      if (incoming.get(14)) {
        struct.settleTimePlan = iprot.readString();
        struct.setSettleTimePlanIsSet(true);
      }
      if (incoming.get(15)) {
        struct.settleCyc = iprot.readString();
        struct.setSettleCycIsSet(true);
      }
      if (incoming.get(16)) {
        struct.settleBath = iprot.readString();
        struct.setSettleBathIsSet(true);
      }
      if (incoming.get(17)) {
        struct.costTime = iprot.readString();
        struct.setCostTimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.costAmount = iprot.readString();
        struct.setCostAmountIsSet(true);
      }
      if (incoming.get(19)) {
        struct.costWay = iprot.readString();
        struct.setCostWayIsSet(true);
      }
      if (incoming.get(20)) {
        struct.costSettleCyc = iprot.readString();
        struct.setCostSettleCycIsSet(true);
      }
      if (incoming.get(21)) {
        struct.checkStatus = iprot.readString();
        struct.setCheckStatusIsSet(true);
      }
      if (incoming.get(22)) {
        struct.checkFlg = iprot.readString();
        struct.setCheckFlgIsSet(true);
      }
      if (incoming.get(23)) {
        struct.settleStatus = iprot.readString();
        struct.setSettleStatusIsSet(true);
      }
      if (incoming.get(24)) {
        struct.finishTime = iprot.readString();
        struct.setFinishTimeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.transType = iprot.readString();
        struct.setTransTypeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.bankSeq = iprot.readString();
        struct.setBankSeqIsSet(true);
      }
      if (incoming.get(27)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(28)) {
        struct.bankCode = iprot.readString();
        struct.setBankCodeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.channelProvider = iprot.readString();
        struct.setChannelProviderIsSet(true);
      }
    }
  }

}

