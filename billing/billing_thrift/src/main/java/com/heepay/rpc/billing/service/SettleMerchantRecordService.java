/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-21")
public class SettleMerchantRecordService {

  public interface Iface {

    public void saveSettleMerchantRecord(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) throws org.apache.thrift.TException;

    public List<com.heepay.rpc.billing.model.SettleMerchantRecordModel> query(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) throws org.apache.thrift.TException;

    public void updateSettleMerchantRecord(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) throws org.apache.thrift.TException;

    public void deleteSettleMerchantRecord(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) throws org.apache.thrift.TException;

    public List<com.heepay.rpc.billing.model.SettleMerchantMessageModel> querySettleMessage(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void saveSettleMerchantRecord(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSettleMerchantRecord(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteSettleMerchantRecord(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySettleMessage(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void saveSettleMerchantRecord(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) throws org.apache.thrift.TException
    {
      send_saveSettleMerchantRecord(settleMerchantRecordModel);
      recv_saveSettleMerchantRecord();
    }

    public void send_saveSettleMerchantRecord(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) throws org.apache.thrift.TException
    {
      saveSettleMerchantRecord_args args = new saveSettleMerchantRecord_args();
      args.setSettleMerchantRecordModel(settleMerchantRecordModel);
      sendBase("saveSettleMerchantRecord", args);
    }

    public void recv_saveSettleMerchantRecord() throws org.apache.thrift.TException
    {
      saveSettleMerchantRecord_result result = new saveSettleMerchantRecord_result();
      receiveBase(result, "saveSettleMerchantRecord");
      return;
    }

    public List<com.heepay.rpc.billing.model.SettleMerchantRecordModel> query(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) throws org.apache.thrift.TException
    {
      send_query(settleMerchantRecordModel);
      return recv_query();
    }

    public void send_query(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) throws org.apache.thrift.TException
    {
      query_args args = new query_args();
      args.setSettleMerchantRecordModel(settleMerchantRecordModel);
      sendBase("query", args);
    }

    public List<com.heepay.rpc.billing.model.SettleMerchantRecordModel> recv_query() throws org.apache.thrift.TException
    {
      query_result result = new query_result();
      receiveBase(result, "query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query failed: unknown result");
    }

    public void updateSettleMerchantRecord(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) throws org.apache.thrift.TException
    {
      send_updateSettleMerchantRecord(settleMerchantRecordModel);
      recv_updateSettleMerchantRecord();
    }

    public void send_updateSettleMerchantRecord(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) throws org.apache.thrift.TException
    {
      updateSettleMerchantRecord_args args = new updateSettleMerchantRecord_args();
      args.setSettleMerchantRecordModel(settleMerchantRecordModel);
      sendBase("updateSettleMerchantRecord", args);
    }

    public void recv_updateSettleMerchantRecord() throws org.apache.thrift.TException
    {
      updateSettleMerchantRecord_result result = new updateSettleMerchantRecord_result();
      receiveBase(result, "updateSettleMerchantRecord");
      return;
    }

    public void deleteSettleMerchantRecord(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) throws org.apache.thrift.TException
    {
      send_deleteSettleMerchantRecord(settleMerchantRecordModel);
      recv_deleteSettleMerchantRecord();
    }

    public void send_deleteSettleMerchantRecord(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) throws org.apache.thrift.TException
    {
      deleteSettleMerchantRecord_args args = new deleteSettleMerchantRecord_args();
      args.setSettleMerchantRecordModel(settleMerchantRecordModel);
      sendBase("deleteSettleMerchantRecord", args);
    }

    public void recv_deleteSettleMerchantRecord() throws org.apache.thrift.TException
    {
      deleteSettleMerchantRecord_result result = new deleteSettleMerchantRecord_result();
      receiveBase(result, "deleteSettleMerchantRecord");
      return;
    }

    public List<com.heepay.rpc.billing.model.SettleMerchantMessageModel> querySettleMessage(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) throws org.apache.thrift.TException
    {
      send_querySettleMessage(settleMerchantRecordModel);
      return recv_querySettleMessage();
    }

    public void send_querySettleMessage(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) throws org.apache.thrift.TException
    {
      querySettleMessage_args args = new querySettleMessage_args();
      args.setSettleMerchantRecordModel(settleMerchantRecordModel);
      sendBase("querySettleMessage", args);
    }

    public List<com.heepay.rpc.billing.model.SettleMerchantMessageModel> recv_querySettleMessage() throws org.apache.thrift.TException
    {
      querySettleMessage_result result = new querySettleMessage_result();
      receiveBase(result, "querySettleMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySettleMessage failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveSettleMerchantRecord(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveSettleMerchantRecord_call method_call = new saveSettleMerchantRecord_call(settleMerchantRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveSettleMerchantRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel;
      public saveSettleMerchantRecord_call(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.settleMerchantRecordModel = settleMerchantRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveSettleMerchantRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveSettleMerchantRecord_args args = new saveSettleMerchantRecord_args();
        args.setSettleMerchantRecordModel(settleMerchantRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveSettleMerchantRecord();
      }
    }

    public void query(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_call method_call = new query_call(settleMerchantRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel;
      public query_call(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.settleMerchantRecordModel = settleMerchantRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_args args = new query_args();
        args.setSettleMerchantRecordModel(settleMerchantRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.heepay.rpc.billing.model.SettleMerchantRecordModel> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query();
      }
    }

    public void updateSettleMerchantRecord(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSettleMerchantRecord_call method_call = new updateSettleMerchantRecord_call(settleMerchantRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSettleMerchantRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel;
      public updateSettleMerchantRecord_call(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.settleMerchantRecordModel = settleMerchantRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSettleMerchantRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSettleMerchantRecord_args args = new updateSettleMerchantRecord_args();
        args.setSettleMerchantRecordModel(settleMerchantRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateSettleMerchantRecord();
      }
    }

    public void deleteSettleMerchantRecord(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSettleMerchantRecord_call method_call = new deleteSettleMerchantRecord_call(settleMerchantRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSettleMerchantRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel;
      public deleteSettleMerchantRecord_call(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.settleMerchantRecordModel = settleMerchantRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSettleMerchantRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSettleMerchantRecord_args args = new deleteSettleMerchantRecord_args();
        args.setSettleMerchantRecordModel(settleMerchantRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteSettleMerchantRecord();
      }
    }

    public void querySettleMessage(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySettleMessage_call method_call = new querySettleMessage_call(settleMerchantRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySettleMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel;
      public querySettleMessage_call(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.settleMerchantRecordModel = settleMerchantRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySettleMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySettleMessage_args args = new querySettleMessage_args();
        args.setSettleMerchantRecordModel(settleMerchantRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.heepay.rpc.billing.model.SettleMerchantMessageModel> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySettleMessage();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("saveSettleMerchantRecord", new saveSettleMerchantRecord());
      processMap.put("query", new query());
      processMap.put("updateSettleMerchantRecord", new updateSettleMerchantRecord());
      processMap.put("deleteSettleMerchantRecord", new deleteSettleMerchantRecord());
      processMap.put("querySettleMessage", new querySettleMessage());
      return processMap;
    }

    public static class saveSettleMerchantRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveSettleMerchantRecord_args> {
      public saveSettleMerchantRecord() {
        super("saveSettleMerchantRecord");
      }

      public saveSettleMerchantRecord_args getEmptyArgsInstance() {
        return new saveSettleMerchantRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveSettleMerchantRecord_result getResult(I iface, saveSettleMerchantRecord_args args) throws org.apache.thrift.TException {
        saveSettleMerchantRecord_result result = new saveSettleMerchantRecord_result();
        iface.saveSettleMerchantRecord(args.settleMerchantRecordModel);
        return result;
      }
    }

    public static class query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_args> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_result getResult(I iface, query_args args) throws org.apache.thrift.TException {
        query_result result = new query_result();
        result.success = iface.query(args.settleMerchantRecordModel);
        return result;
      }
    }

    public static class updateSettleMerchantRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSettleMerchantRecord_args> {
      public updateSettleMerchantRecord() {
        super("updateSettleMerchantRecord");
      }

      public updateSettleMerchantRecord_args getEmptyArgsInstance() {
        return new updateSettleMerchantRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSettleMerchantRecord_result getResult(I iface, updateSettleMerchantRecord_args args) throws org.apache.thrift.TException {
        updateSettleMerchantRecord_result result = new updateSettleMerchantRecord_result();
        iface.updateSettleMerchantRecord(args.settleMerchantRecordModel);
        return result;
      }
    }

    public static class deleteSettleMerchantRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSettleMerchantRecord_args> {
      public deleteSettleMerchantRecord() {
        super("deleteSettleMerchantRecord");
      }

      public deleteSettleMerchantRecord_args getEmptyArgsInstance() {
        return new deleteSettleMerchantRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSettleMerchantRecord_result getResult(I iface, deleteSettleMerchantRecord_args args) throws org.apache.thrift.TException {
        deleteSettleMerchantRecord_result result = new deleteSettleMerchantRecord_result();
        iface.deleteSettleMerchantRecord(args.settleMerchantRecordModel);
        return result;
      }
    }

    public static class querySettleMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySettleMessage_args> {
      public querySettleMessage() {
        super("querySettleMessage");
      }

      public querySettleMessage_args getEmptyArgsInstance() {
        return new querySettleMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySettleMessage_result getResult(I iface, querySettleMessage_args args) throws org.apache.thrift.TException {
        querySettleMessage_result result = new querySettleMessage_result();
        result.success = iface.querySettleMessage(args.settleMerchantRecordModel);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("saveSettleMerchantRecord", new saveSettleMerchantRecord());
      processMap.put("query", new query());
      processMap.put("updateSettleMerchantRecord", new updateSettleMerchantRecord());
      processMap.put("deleteSettleMerchantRecord", new deleteSettleMerchantRecord());
      processMap.put("querySettleMessage", new querySettleMessage());
      return processMap;
    }

    public static class saveSettleMerchantRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveSettleMerchantRecord_args, Void> {
      public saveSettleMerchantRecord() {
        super("saveSettleMerchantRecord");
      }

      public saveSettleMerchantRecord_args getEmptyArgsInstance() {
        return new saveSettleMerchantRecord_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveSettleMerchantRecord_result result = new saveSettleMerchantRecord_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveSettleMerchantRecord_result result = new saveSettleMerchantRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveSettleMerchantRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.saveSettleMerchantRecord(args.settleMerchantRecordModel,resultHandler);
      }
    }

    public static class query<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_args, List<com.heepay.rpc.billing.model.SettleMerchantRecordModel>> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      public AsyncMethodCallback<List<com.heepay.rpc.billing.model.SettleMerchantRecordModel>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.heepay.rpc.billing.model.SettleMerchantRecordModel>>() { 
          public void onComplete(List<com.heepay.rpc.billing.model.SettleMerchantRecordModel> o) {
            query_result result = new query_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_result result = new query_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.heepay.rpc.billing.model.SettleMerchantRecordModel>> resultHandler) throws TException {
        iface.query(args.settleMerchantRecordModel,resultHandler);
      }
    }

    public static class updateSettleMerchantRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSettleMerchantRecord_args, Void> {
      public updateSettleMerchantRecord() {
        super("updateSettleMerchantRecord");
      }

      public updateSettleMerchantRecord_args getEmptyArgsInstance() {
        return new updateSettleMerchantRecord_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateSettleMerchantRecord_result result = new updateSettleMerchantRecord_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSettleMerchantRecord_result result = new updateSettleMerchantRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSettleMerchantRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateSettleMerchantRecord(args.settleMerchantRecordModel,resultHandler);
      }
    }

    public static class deleteSettleMerchantRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSettleMerchantRecord_args, Void> {
      public deleteSettleMerchantRecord() {
        super("deleteSettleMerchantRecord");
      }

      public deleteSettleMerchantRecord_args getEmptyArgsInstance() {
        return new deleteSettleMerchantRecord_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteSettleMerchantRecord_result result = new deleteSettleMerchantRecord_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteSettleMerchantRecord_result result = new deleteSettleMerchantRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSettleMerchantRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteSettleMerchantRecord(args.settleMerchantRecordModel,resultHandler);
      }
    }

    public static class querySettleMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySettleMessage_args, List<com.heepay.rpc.billing.model.SettleMerchantMessageModel>> {
      public querySettleMessage() {
        super("querySettleMessage");
      }

      public querySettleMessage_args getEmptyArgsInstance() {
        return new querySettleMessage_args();
      }

      public AsyncMethodCallback<List<com.heepay.rpc.billing.model.SettleMerchantMessageModel>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.heepay.rpc.billing.model.SettleMerchantMessageModel>>() { 
          public void onComplete(List<com.heepay.rpc.billing.model.SettleMerchantMessageModel> o) {
            querySettleMessage_result result = new querySettleMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySettleMessage_result result = new querySettleMessage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySettleMessage_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.heepay.rpc.billing.model.SettleMerchantMessageModel>> resultHandler) throws TException {
        iface.querySettleMessage(args.settleMerchantRecordModel,resultHandler);
      }
    }

  }

  public static class saveSettleMerchantRecord_args implements org.apache.thrift.TBase<saveSettleMerchantRecord_args, saveSettleMerchantRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveSettleMerchantRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveSettleMerchantRecord_args");

    private static final org.apache.thrift.protocol.TField SETTLE_MERCHANT_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("settleMerchantRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveSettleMerchantRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveSettleMerchantRecord_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTLE_MERCHANT_RECORD_MODEL((short)1, "settleMerchantRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTLE_MERCHANT_RECORD_MODEL
            return SETTLE_MERCHANT_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTLE_MERCHANT_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("settleMerchantRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.SettleMerchantRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveSettleMerchantRecord_args.class, metaDataMap);
    }

    public saveSettleMerchantRecord_args() {
    }

    public saveSettleMerchantRecord_args(
      com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel)
    {
      this();
      this.settleMerchantRecordModel = settleMerchantRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveSettleMerchantRecord_args(saveSettleMerchantRecord_args other) {
      if (other.isSetSettleMerchantRecordModel()) {
        this.settleMerchantRecordModel = new com.heepay.rpc.billing.model.SettleMerchantRecordModel(other.settleMerchantRecordModel);
      }
    }

    public saveSettleMerchantRecord_args deepCopy() {
      return new saveSettleMerchantRecord_args(this);
    }

    @Override
    public void clear() {
      this.settleMerchantRecordModel = null;
    }

    public com.heepay.rpc.billing.model.SettleMerchantRecordModel getSettleMerchantRecordModel() {
      return this.settleMerchantRecordModel;
    }

    public saveSettleMerchantRecord_args setSettleMerchantRecordModel(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) {
      this.settleMerchantRecordModel = settleMerchantRecordModel;
      return this;
    }

    public void unsetSettleMerchantRecordModel() {
      this.settleMerchantRecordModel = null;
    }

    /** Returns true if field settleMerchantRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetSettleMerchantRecordModel() {
      return this.settleMerchantRecordModel != null;
    }

    public void setSettleMerchantRecordModelIsSet(boolean value) {
      if (!value) {
        this.settleMerchantRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTLE_MERCHANT_RECORD_MODEL:
        if (value == null) {
          unsetSettleMerchantRecordModel();
        } else {
          setSettleMerchantRecordModel((com.heepay.rpc.billing.model.SettleMerchantRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTLE_MERCHANT_RECORD_MODEL:
        return getSettleMerchantRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTLE_MERCHANT_RECORD_MODEL:
        return isSetSettleMerchantRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveSettleMerchantRecord_args)
        return this.equals((saveSettleMerchantRecord_args)that);
      return false;
    }

    public boolean equals(saveSettleMerchantRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_settleMerchantRecordModel = true && this.isSetSettleMerchantRecordModel();
      boolean that_present_settleMerchantRecordModel = true && that.isSetSettleMerchantRecordModel();
      if (this_present_settleMerchantRecordModel || that_present_settleMerchantRecordModel) {
        if (!(this_present_settleMerchantRecordModel && that_present_settleMerchantRecordModel))
          return false;
        if (!this.settleMerchantRecordModel.equals(that.settleMerchantRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_settleMerchantRecordModel = true && (isSetSettleMerchantRecordModel());
      list.add(present_settleMerchantRecordModel);
      if (present_settleMerchantRecordModel)
        list.add(settleMerchantRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveSettleMerchantRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettleMerchantRecordModel()).compareTo(other.isSetSettleMerchantRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettleMerchantRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleMerchantRecordModel, other.settleMerchantRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveSettleMerchantRecord_args(");
      boolean first = true;

      sb.append("settleMerchantRecordModel:");
      if (this.settleMerchantRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.settleMerchantRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (settleMerchantRecordModel != null) {
        settleMerchantRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveSettleMerchantRecord_argsStandardSchemeFactory implements SchemeFactory {
      public saveSettleMerchantRecord_argsStandardScheme getScheme() {
        return new saveSettleMerchantRecord_argsStandardScheme();
      }
    }

    private static class saveSettleMerchantRecord_argsStandardScheme extends StandardScheme<saveSettleMerchantRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveSettleMerchantRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTLE_MERCHANT_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.settleMerchantRecordModel = new com.heepay.rpc.billing.model.SettleMerchantRecordModel();
                struct.settleMerchantRecordModel.read(iprot);
                struct.setSettleMerchantRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveSettleMerchantRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.settleMerchantRecordModel != null) {
          oprot.writeFieldBegin(SETTLE_MERCHANT_RECORD_MODEL_FIELD_DESC);
          struct.settleMerchantRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveSettleMerchantRecord_argsTupleSchemeFactory implements SchemeFactory {
      public saveSettleMerchantRecord_argsTupleScheme getScheme() {
        return new saveSettleMerchantRecord_argsTupleScheme();
      }
    }

    private static class saveSettleMerchantRecord_argsTupleScheme extends TupleScheme<saveSettleMerchantRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveSettleMerchantRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettleMerchantRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSettleMerchantRecordModel()) {
          struct.settleMerchantRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveSettleMerchantRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.settleMerchantRecordModel = new com.heepay.rpc.billing.model.SettleMerchantRecordModel();
          struct.settleMerchantRecordModel.read(iprot);
          struct.setSettleMerchantRecordModelIsSet(true);
        }
      }
    }

  }

  public static class saveSettleMerchantRecord_result implements org.apache.thrift.TBase<saveSettleMerchantRecord_result, saveSettleMerchantRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveSettleMerchantRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveSettleMerchantRecord_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveSettleMerchantRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveSettleMerchantRecord_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveSettleMerchantRecord_result.class, metaDataMap);
    }

    public saveSettleMerchantRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveSettleMerchantRecord_result(saveSettleMerchantRecord_result other) {
    }

    public saveSettleMerchantRecord_result deepCopy() {
      return new saveSettleMerchantRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveSettleMerchantRecord_result)
        return this.equals((saveSettleMerchantRecord_result)that);
      return false;
    }

    public boolean equals(saveSettleMerchantRecord_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(saveSettleMerchantRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveSettleMerchantRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveSettleMerchantRecord_resultStandardSchemeFactory implements SchemeFactory {
      public saveSettleMerchantRecord_resultStandardScheme getScheme() {
        return new saveSettleMerchantRecord_resultStandardScheme();
      }
    }

    private static class saveSettleMerchantRecord_resultStandardScheme extends StandardScheme<saveSettleMerchantRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveSettleMerchantRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveSettleMerchantRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveSettleMerchantRecord_resultTupleSchemeFactory implements SchemeFactory {
      public saveSettleMerchantRecord_resultTupleScheme getScheme() {
        return new saveSettleMerchantRecord_resultTupleScheme();
      }
    }

    private static class saveSettleMerchantRecord_resultTupleScheme extends TupleScheme<saveSettleMerchantRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveSettleMerchantRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveSettleMerchantRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class query_args implements org.apache.thrift.TBase<query_args, query_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_args");

    private static final org.apache.thrift.protocol.TField SETTLE_MERCHANT_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("settleMerchantRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTLE_MERCHANT_RECORD_MODEL((short)1, "settleMerchantRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTLE_MERCHANT_RECORD_MODEL
            return SETTLE_MERCHANT_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTLE_MERCHANT_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("settleMerchantRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.SettleMerchantRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_args.class, metaDataMap);
    }

    public query_args() {
    }

    public query_args(
      com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel)
    {
      this();
      this.settleMerchantRecordModel = settleMerchantRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_args(query_args other) {
      if (other.isSetSettleMerchantRecordModel()) {
        this.settleMerchantRecordModel = new com.heepay.rpc.billing.model.SettleMerchantRecordModel(other.settleMerchantRecordModel);
      }
    }

    public query_args deepCopy() {
      return new query_args(this);
    }

    @Override
    public void clear() {
      this.settleMerchantRecordModel = null;
    }

    public com.heepay.rpc.billing.model.SettleMerchantRecordModel getSettleMerchantRecordModel() {
      return this.settleMerchantRecordModel;
    }

    public query_args setSettleMerchantRecordModel(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) {
      this.settleMerchantRecordModel = settleMerchantRecordModel;
      return this;
    }

    public void unsetSettleMerchantRecordModel() {
      this.settleMerchantRecordModel = null;
    }

    /** Returns true if field settleMerchantRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetSettleMerchantRecordModel() {
      return this.settleMerchantRecordModel != null;
    }

    public void setSettleMerchantRecordModelIsSet(boolean value) {
      if (!value) {
        this.settleMerchantRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTLE_MERCHANT_RECORD_MODEL:
        if (value == null) {
          unsetSettleMerchantRecordModel();
        } else {
          setSettleMerchantRecordModel((com.heepay.rpc.billing.model.SettleMerchantRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTLE_MERCHANT_RECORD_MODEL:
        return getSettleMerchantRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTLE_MERCHANT_RECORD_MODEL:
        return isSetSettleMerchantRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_args)
        return this.equals((query_args)that);
      return false;
    }

    public boolean equals(query_args that) {
      if (that == null)
        return false;

      boolean this_present_settleMerchantRecordModel = true && this.isSetSettleMerchantRecordModel();
      boolean that_present_settleMerchantRecordModel = true && that.isSetSettleMerchantRecordModel();
      if (this_present_settleMerchantRecordModel || that_present_settleMerchantRecordModel) {
        if (!(this_present_settleMerchantRecordModel && that_present_settleMerchantRecordModel))
          return false;
        if (!this.settleMerchantRecordModel.equals(that.settleMerchantRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_settleMerchantRecordModel = true && (isSetSettleMerchantRecordModel());
      list.add(present_settleMerchantRecordModel);
      if (present_settleMerchantRecordModel)
        list.add(settleMerchantRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettleMerchantRecordModel()).compareTo(other.isSetSettleMerchantRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettleMerchantRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleMerchantRecordModel, other.settleMerchantRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_args(");
      boolean first = true;

      sb.append("settleMerchantRecordModel:");
      if (this.settleMerchantRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.settleMerchantRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (settleMerchantRecordModel != null) {
        settleMerchantRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_argsStandardSchemeFactory implements SchemeFactory {
      public query_argsStandardScheme getScheme() {
        return new query_argsStandardScheme();
      }
    }

    private static class query_argsStandardScheme extends StandardScheme<query_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTLE_MERCHANT_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.settleMerchantRecordModel = new com.heepay.rpc.billing.model.SettleMerchantRecordModel();
                struct.settleMerchantRecordModel.read(iprot);
                struct.setSettleMerchantRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.settleMerchantRecordModel != null) {
          oprot.writeFieldBegin(SETTLE_MERCHANT_RECORD_MODEL_FIELD_DESC);
          struct.settleMerchantRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_argsTupleSchemeFactory implements SchemeFactory {
      public query_argsTupleScheme getScheme() {
        return new query_argsTupleScheme();
      }
    }

    private static class query_argsTupleScheme extends TupleScheme<query_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettleMerchantRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSettleMerchantRecordModel()) {
          struct.settleMerchantRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.settleMerchantRecordModel = new com.heepay.rpc.billing.model.SettleMerchantRecordModel();
          struct.settleMerchantRecordModel.read(iprot);
          struct.setSettleMerchantRecordModelIsSet(true);
        }
      }
    }

  }

  public static class query_result implements org.apache.thrift.TBase<query_result, query_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_resultTupleSchemeFactory());
    }

    public List<com.heepay.rpc.billing.model.SettleMerchantRecordModel> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.SettleMerchantRecordModel.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_result.class, metaDataMap);
    }

    public query_result() {
    }

    public query_result(
      List<com.heepay.rpc.billing.model.SettleMerchantRecordModel> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_result(query_result other) {
      if (other.isSetSuccess()) {
        List<com.heepay.rpc.billing.model.SettleMerchantRecordModel> __this__success = new ArrayList<com.heepay.rpc.billing.model.SettleMerchantRecordModel>(other.success.size());
        for (com.heepay.rpc.billing.model.SettleMerchantRecordModel other_element : other.success) {
          __this__success.add(new com.heepay.rpc.billing.model.SettleMerchantRecordModel(other_element));
        }
        this.success = __this__success;
      }
    }

    public query_result deepCopy() {
      return new query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.heepay.rpc.billing.model.SettleMerchantRecordModel> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.heepay.rpc.billing.model.SettleMerchantRecordModel elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.heepay.rpc.billing.model.SettleMerchantRecordModel>();
      }
      this.success.add(elem);
    }

    public List<com.heepay.rpc.billing.model.SettleMerchantRecordModel> getSuccess() {
      return this.success;
    }

    public query_result setSuccess(List<com.heepay.rpc.billing.model.SettleMerchantRecordModel> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.heepay.rpc.billing.model.SettleMerchantRecordModel>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_result)
        return this.equals((query_result)that);
      return false;
    }

    public boolean equals(query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_resultStandardSchemeFactory implements SchemeFactory {
      public query_resultStandardScheme getScheme() {
        return new query_resultStandardScheme();
      }
    }

    private static class query_resultStandardScheme extends StandardScheme<query_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.heepay.rpc.billing.model.SettleMerchantRecordModel>(_list0.size);
                  com.heepay.rpc.billing.model.SettleMerchantRecordModel _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.heepay.rpc.billing.model.SettleMerchantRecordModel();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.heepay.rpc.billing.model.SettleMerchantRecordModel _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_resultTupleSchemeFactory implements SchemeFactory {
      public query_resultTupleScheme getScheme() {
        return new query_resultTupleScheme();
      }
    }

    private static class query_resultTupleScheme extends TupleScheme<query_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.heepay.rpc.billing.model.SettleMerchantRecordModel _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.heepay.rpc.billing.model.SettleMerchantRecordModel>(_list5.size);
            com.heepay.rpc.billing.model.SettleMerchantRecordModel _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.heepay.rpc.billing.model.SettleMerchantRecordModel();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateSettleMerchantRecord_args implements org.apache.thrift.TBase<updateSettleMerchantRecord_args, updateSettleMerchantRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSettleMerchantRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSettleMerchantRecord_args");

    private static final org.apache.thrift.protocol.TField SETTLE_MERCHANT_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("settleMerchantRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSettleMerchantRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSettleMerchantRecord_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTLE_MERCHANT_RECORD_MODEL((short)1, "settleMerchantRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTLE_MERCHANT_RECORD_MODEL
            return SETTLE_MERCHANT_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTLE_MERCHANT_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("settleMerchantRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.SettleMerchantRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSettleMerchantRecord_args.class, metaDataMap);
    }

    public updateSettleMerchantRecord_args() {
    }

    public updateSettleMerchantRecord_args(
      com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel)
    {
      this();
      this.settleMerchantRecordModel = settleMerchantRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSettleMerchantRecord_args(updateSettleMerchantRecord_args other) {
      if (other.isSetSettleMerchantRecordModel()) {
        this.settleMerchantRecordModel = new com.heepay.rpc.billing.model.SettleMerchantRecordModel(other.settleMerchantRecordModel);
      }
    }

    public updateSettleMerchantRecord_args deepCopy() {
      return new updateSettleMerchantRecord_args(this);
    }

    @Override
    public void clear() {
      this.settleMerchantRecordModel = null;
    }

    public com.heepay.rpc.billing.model.SettleMerchantRecordModel getSettleMerchantRecordModel() {
      return this.settleMerchantRecordModel;
    }

    public updateSettleMerchantRecord_args setSettleMerchantRecordModel(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) {
      this.settleMerchantRecordModel = settleMerchantRecordModel;
      return this;
    }

    public void unsetSettleMerchantRecordModel() {
      this.settleMerchantRecordModel = null;
    }

    /** Returns true if field settleMerchantRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetSettleMerchantRecordModel() {
      return this.settleMerchantRecordModel != null;
    }

    public void setSettleMerchantRecordModelIsSet(boolean value) {
      if (!value) {
        this.settleMerchantRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTLE_MERCHANT_RECORD_MODEL:
        if (value == null) {
          unsetSettleMerchantRecordModel();
        } else {
          setSettleMerchantRecordModel((com.heepay.rpc.billing.model.SettleMerchantRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTLE_MERCHANT_RECORD_MODEL:
        return getSettleMerchantRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTLE_MERCHANT_RECORD_MODEL:
        return isSetSettleMerchantRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSettleMerchantRecord_args)
        return this.equals((updateSettleMerchantRecord_args)that);
      return false;
    }

    public boolean equals(updateSettleMerchantRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_settleMerchantRecordModel = true && this.isSetSettleMerchantRecordModel();
      boolean that_present_settleMerchantRecordModel = true && that.isSetSettleMerchantRecordModel();
      if (this_present_settleMerchantRecordModel || that_present_settleMerchantRecordModel) {
        if (!(this_present_settleMerchantRecordModel && that_present_settleMerchantRecordModel))
          return false;
        if (!this.settleMerchantRecordModel.equals(that.settleMerchantRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_settleMerchantRecordModel = true && (isSetSettleMerchantRecordModel());
      list.add(present_settleMerchantRecordModel);
      if (present_settleMerchantRecordModel)
        list.add(settleMerchantRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSettleMerchantRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettleMerchantRecordModel()).compareTo(other.isSetSettleMerchantRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettleMerchantRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleMerchantRecordModel, other.settleMerchantRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSettleMerchantRecord_args(");
      boolean first = true;

      sb.append("settleMerchantRecordModel:");
      if (this.settleMerchantRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.settleMerchantRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (settleMerchantRecordModel != null) {
        settleMerchantRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSettleMerchantRecord_argsStandardSchemeFactory implements SchemeFactory {
      public updateSettleMerchantRecord_argsStandardScheme getScheme() {
        return new updateSettleMerchantRecord_argsStandardScheme();
      }
    }

    private static class updateSettleMerchantRecord_argsStandardScheme extends StandardScheme<updateSettleMerchantRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSettleMerchantRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTLE_MERCHANT_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.settleMerchantRecordModel = new com.heepay.rpc.billing.model.SettleMerchantRecordModel();
                struct.settleMerchantRecordModel.read(iprot);
                struct.setSettleMerchantRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSettleMerchantRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.settleMerchantRecordModel != null) {
          oprot.writeFieldBegin(SETTLE_MERCHANT_RECORD_MODEL_FIELD_DESC);
          struct.settleMerchantRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSettleMerchantRecord_argsTupleSchemeFactory implements SchemeFactory {
      public updateSettleMerchantRecord_argsTupleScheme getScheme() {
        return new updateSettleMerchantRecord_argsTupleScheme();
      }
    }

    private static class updateSettleMerchantRecord_argsTupleScheme extends TupleScheme<updateSettleMerchantRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSettleMerchantRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettleMerchantRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSettleMerchantRecordModel()) {
          struct.settleMerchantRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSettleMerchantRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.settleMerchantRecordModel = new com.heepay.rpc.billing.model.SettleMerchantRecordModel();
          struct.settleMerchantRecordModel.read(iprot);
          struct.setSettleMerchantRecordModelIsSet(true);
        }
      }
    }

  }

  public static class updateSettleMerchantRecord_result implements org.apache.thrift.TBase<updateSettleMerchantRecord_result, updateSettleMerchantRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSettleMerchantRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSettleMerchantRecord_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSettleMerchantRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSettleMerchantRecord_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSettleMerchantRecord_result.class, metaDataMap);
    }

    public updateSettleMerchantRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSettleMerchantRecord_result(updateSettleMerchantRecord_result other) {
    }

    public updateSettleMerchantRecord_result deepCopy() {
      return new updateSettleMerchantRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSettleMerchantRecord_result)
        return this.equals((updateSettleMerchantRecord_result)that);
      return false;
    }

    public boolean equals(updateSettleMerchantRecord_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSettleMerchantRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSettleMerchantRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSettleMerchantRecord_resultStandardSchemeFactory implements SchemeFactory {
      public updateSettleMerchantRecord_resultStandardScheme getScheme() {
        return new updateSettleMerchantRecord_resultStandardScheme();
      }
    }

    private static class updateSettleMerchantRecord_resultStandardScheme extends StandardScheme<updateSettleMerchantRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSettleMerchantRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSettleMerchantRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSettleMerchantRecord_resultTupleSchemeFactory implements SchemeFactory {
      public updateSettleMerchantRecord_resultTupleScheme getScheme() {
        return new updateSettleMerchantRecord_resultTupleScheme();
      }
    }

    private static class updateSettleMerchantRecord_resultTupleScheme extends TupleScheme<updateSettleMerchantRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSettleMerchantRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSettleMerchantRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteSettleMerchantRecord_args implements org.apache.thrift.TBase<deleteSettleMerchantRecord_args, deleteSettleMerchantRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSettleMerchantRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSettleMerchantRecord_args");

    private static final org.apache.thrift.protocol.TField SETTLE_MERCHANT_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("settleMerchantRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSettleMerchantRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSettleMerchantRecord_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTLE_MERCHANT_RECORD_MODEL((short)1, "settleMerchantRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTLE_MERCHANT_RECORD_MODEL
            return SETTLE_MERCHANT_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTLE_MERCHANT_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("settleMerchantRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.SettleMerchantRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSettleMerchantRecord_args.class, metaDataMap);
    }

    public deleteSettleMerchantRecord_args() {
    }

    public deleteSettleMerchantRecord_args(
      com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel)
    {
      this();
      this.settleMerchantRecordModel = settleMerchantRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSettleMerchantRecord_args(deleteSettleMerchantRecord_args other) {
      if (other.isSetSettleMerchantRecordModel()) {
        this.settleMerchantRecordModel = new com.heepay.rpc.billing.model.SettleMerchantRecordModel(other.settleMerchantRecordModel);
      }
    }

    public deleteSettleMerchantRecord_args deepCopy() {
      return new deleteSettleMerchantRecord_args(this);
    }

    @Override
    public void clear() {
      this.settleMerchantRecordModel = null;
    }

    public com.heepay.rpc.billing.model.SettleMerchantRecordModel getSettleMerchantRecordModel() {
      return this.settleMerchantRecordModel;
    }

    public deleteSettleMerchantRecord_args setSettleMerchantRecordModel(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) {
      this.settleMerchantRecordModel = settleMerchantRecordModel;
      return this;
    }

    public void unsetSettleMerchantRecordModel() {
      this.settleMerchantRecordModel = null;
    }

    /** Returns true if field settleMerchantRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetSettleMerchantRecordModel() {
      return this.settleMerchantRecordModel != null;
    }

    public void setSettleMerchantRecordModelIsSet(boolean value) {
      if (!value) {
        this.settleMerchantRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTLE_MERCHANT_RECORD_MODEL:
        if (value == null) {
          unsetSettleMerchantRecordModel();
        } else {
          setSettleMerchantRecordModel((com.heepay.rpc.billing.model.SettleMerchantRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTLE_MERCHANT_RECORD_MODEL:
        return getSettleMerchantRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTLE_MERCHANT_RECORD_MODEL:
        return isSetSettleMerchantRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSettleMerchantRecord_args)
        return this.equals((deleteSettleMerchantRecord_args)that);
      return false;
    }

    public boolean equals(deleteSettleMerchantRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_settleMerchantRecordModel = true && this.isSetSettleMerchantRecordModel();
      boolean that_present_settleMerchantRecordModel = true && that.isSetSettleMerchantRecordModel();
      if (this_present_settleMerchantRecordModel || that_present_settleMerchantRecordModel) {
        if (!(this_present_settleMerchantRecordModel && that_present_settleMerchantRecordModel))
          return false;
        if (!this.settleMerchantRecordModel.equals(that.settleMerchantRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_settleMerchantRecordModel = true && (isSetSettleMerchantRecordModel());
      list.add(present_settleMerchantRecordModel);
      if (present_settleMerchantRecordModel)
        list.add(settleMerchantRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSettleMerchantRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettleMerchantRecordModel()).compareTo(other.isSetSettleMerchantRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettleMerchantRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleMerchantRecordModel, other.settleMerchantRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSettleMerchantRecord_args(");
      boolean first = true;

      sb.append("settleMerchantRecordModel:");
      if (this.settleMerchantRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.settleMerchantRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (settleMerchantRecordModel != null) {
        settleMerchantRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSettleMerchantRecord_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSettleMerchantRecord_argsStandardScheme getScheme() {
        return new deleteSettleMerchantRecord_argsStandardScheme();
      }
    }

    private static class deleteSettleMerchantRecord_argsStandardScheme extends StandardScheme<deleteSettleMerchantRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSettleMerchantRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTLE_MERCHANT_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.settleMerchantRecordModel = new com.heepay.rpc.billing.model.SettleMerchantRecordModel();
                struct.settleMerchantRecordModel.read(iprot);
                struct.setSettleMerchantRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSettleMerchantRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.settleMerchantRecordModel != null) {
          oprot.writeFieldBegin(SETTLE_MERCHANT_RECORD_MODEL_FIELD_DESC);
          struct.settleMerchantRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSettleMerchantRecord_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSettleMerchantRecord_argsTupleScheme getScheme() {
        return new deleteSettleMerchantRecord_argsTupleScheme();
      }
    }

    private static class deleteSettleMerchantRecord_argsTupleScheme extends TupleScheme<deleteSettleMerchantRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSettleMerchantRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettleMerchantRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSettleMerchantRecordModel()) {
          struct.settleMerchantRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSettleMerchantRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.settleMerchantRecordModel = new com.heepay.rpc.billing.model.SettleMerchantRecordModel();
          struct.settleMerchantRecordModel.read(iprot);
          struct.setSettleMerchantRecordModelIsSet(true);
        }
      }
    }

  }

  public static class deleteSettleMerchantRecord_result implements org.apache.thrift.TBase<deleteSettleMerchantRecord_result, deleteSettleMerchantRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSettleMerchantRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSettleMerchantRecord_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSettleMerchantRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSettleMerchantRecord_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSettleMerchantRecord_result.class, metaDataMap);
    }

    public deleteSettleMerchantRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSettleMerchantRecord_result(deleteSettleMerchantRecord_result other) {
    }

    public deleteSettleMerchantRecord_result deepCopy() {
      return new deleteSettleMerchantRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSettleMerchantRecord_result)
        return this.equals((deleteSettleMerchantRecord_result)that);
      return false;
    }

    public boolean equals(deleteSettleMerchantRecord_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSettleMerchantRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSettleMerchantRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSettleMerchantRecord_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSettleMerchantRecord_resultStandardScheme getScheme() {
        return new deleteSettleMerchantRecord_resultStandardScheme();
      }
    }

    private static class deleteSettleMerchantRecord_resultStandardScheme extends StandardScheme<deleteSettleMerchantRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSettleMerchantRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSettleMerchantRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSettleMerchantRecord_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSettleMerchantRecord_resultTupleScheme getScheme() {
        return new deleteSettleMerchantRecord_resultTupleScheme();
      }
    }

    private static class deleteSettleMerchantRecord_resultTupleScheme extends TupleScheme<deleteSettleMerchantRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSettleMerchantRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSettleMerchantRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class querySettleMessage_args implements org.apache.thrift.TBase<querySettleMessage_args, querySettleMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySettleMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySettleMessage_args");

    private static final org.apache.thrift.protocol.TField SETTLE_MERCHANT_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("settleMerchantRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySettleMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySettleMessage_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTLE_MERCHANT_RECORD_MODEL((short)1, "settleMerchantRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTLE_MERCHANT_RECORD_MODEL
            return SETTLE_MERCHANT_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTLE_MERCHANT_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("settleMerchantRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.SettleMerchantRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySettleMessage_args.class, metaDataMap);
    }

    public querySettleMessage_args() {
    }

    public querySettleMessage_args(
      com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel)
    {
      this();
      this.settleMerchantRecordModel = settleMerchantRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySettleMessage_args(querySettleMessage_args other) {
      if (other.isSetSettleMerchantRecordModel()) {
        this.settleMerchantRecordModel = new com.heepay.rpc.billing.model.SettleMerchantRecordModel(other.settleMerchantRecordModel);
      }
    }

    public querySettleMessage_args deepCopy() {
      return new querySettleMessage_args(this);
    }

    @Override
    public void clear() {
      this.settleMerchantRecordModel = null;
    }

    public com.heepay.rpc.billing.model.SettleMerchantRecordModel getSettleMerchantRecordModel() {
      return this.settleMerchantRecordModel;
    }

    public querySettleMessage_args setSettleMerchantRecordModel(com.heepay.rpc.billing.model.SettleMerchantRecordModel settleMerchantRecordModel) {
      this.settleMerchantRecordModel = settleMerchantRecordModel;
      return this;
    }

    public void unsetSettleMerchantRecordModel() {
      this.settleMerchantRecordModel = null;
    }

    /** Returns true if field settleMerchantRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetSettleMerchantRecordModel() {
      return this.settleMerchantRecordModel != null;
    }

    public void setSettleMerchantRecordModelIsSet(boolean value) {
      if (!value) {
        this.settleMerchantRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTLE_MERCHANT_RECORD_MODEL:
        if (value == null) {
          unsetSettleMerchantRecordModel();
        } else {
          setSettleMerchantRecordModel((com.heepay.rpc.billing.model.SettleMerchantRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTLE_MERCHANT_RECORD_MODEL:
        return getSettleMerchantRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTLE_MERCHANT_RECORD_MODEL:
        return isSetSettleMerchantRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySettleMessage_args)
        return this.equals((querySettleMessage_args)that);
      return false;
    }

    public boolean equals(querySettleMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_settleMerchantRecordModel = true && this.isSetSettleMerchantRecordModel();
      boolean that_present_settleMerchantRecordModel = true && that.isSetSettleMerchantRecordModel();
      if (this_present_settleMerchantRecordModel || that_present_settleMerchantRecordModel) {
        if (!(this_present_settleMerchantRecordModel && that_present_settleMerchantRecordModel))
          return false;
        if (!this.settleMerchantRecordModel.equals(that.settleMerchantRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_settleMerchantRecordModel = true && (isSetSettleMerchantRecordModel());
      list.add(present_settleMerchantRecordModel);
      if (present_settleMerchantRecordModel)
        list.add(settleMerchantRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySettleMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettleMerchantRecordModel()).compareTo(other.isSetSettleMerchantRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettleMerchantRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleMerchantRecordModel, other.settleMerchantRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySettleMessage_args(");
      boolean first = true;

      sb.append("settleMerchantRecordModel:");
      if (this.settleMerchantRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.settleMerchantRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (settleMerchantRecordModel != null) {
        settleMerchantRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySettleMessage_argsStandardSchemeFactory implements SchemeFactory {
      public querySettleMessage_argsStandardScheme getScheme() {
        return new querySettleMessage_argsStandardScheme();
      }
    }

    private static class querySettleMessage_argsStandardScheme extends StandardScheme<querySettleMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySettleMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTLE_MERCHANT_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.settleMerchantRecordModel = new com.heepay.rpc.billing.model.SettleMerchantRecordModel();
                struct.settleMerchantRecordModel.read(iprot);
                struct.setSettleMerchantRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySettleMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.settleMerchantRecordModel != null) {
          oprot.writeFieldBegin(SETTLE_MERCHANT_RECORD_MODEL_FIELD_DESC);
          struct.settleMerchantRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySettleMessage_argsTupleSchemeFactory implements SchemeFactory {
      public querySettleMessage_argsTupleScheme getScheme() {
        return new querySettleMessage_argsTupleScheme();
      }
    }

    private static class querySettleMessage_argsTupleScheme extends TupleScheme<querySettleMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySettleMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettleMerchantRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSettleMerchantRecordModel()) {
          struct.settleMerchantRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySettleMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.settleMerchantRecordModel = new com.heepay.rpc.billing.model.SettleMerchantRecordModel();
          struct.settleMerchantRecordModel.read(iprot);
          struct.setSettleMerchantRecordModelIsSet(true);
        }
      }
    }

  }

  public static class querySettleMessage_result implements org.apache.thrift.TBase<querySettleMessage_result, querySettleMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySettleMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySettleMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySettleMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySettleMessage_resultTupleSchemeFactory());
    }

    public List<com.heepay.rpc.billing.model.SettleMerchantMessageModel> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.SettleMerchantMessageModel.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySettleMessage_result.class, metaDataMap);
    }

    public querySettleMessage_result() {
    }

    public querySettleMessage_result(
      List<com.heepay.rpc.billing.model.SettleMerchantMessageModel> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySettleMessage_result(querySettleMessage_result other) {
      if (other.isSetSuccess()) {
        List<com.heepay.rpc.billing.model.SettleMerchantMessageModel> __this__success = new ArrayList<com.heepay.rpc.billing.model.SettleMerchantMessageModel>(other.success.size());
        for (com.heepay.rpc.billing.model.SettleMerchantMessageModel other_element : other.success) {
          __this__success.add(new com.heepay.rpc.billing.model.SettleMerchantMessageModel(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySettleMessage_result deepCopy() {
      return new querySettleMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.heepay.rpc.billing.model.SettleMerchantMessageModel> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.heepay.rpc.billing.model.SettleMerchantMessageModel elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.heepay.rpc.billing.model.SettleMerchantMessageModel>();
      }
      this.success.add(elem);
    }

    public List<com.heepay.rpc.billing.model.SettleMerchantMessageModel> getSuccess() {
      return this.success;
    }

    public querySettleMessage_result setSuccess(List<com.heepay.rpc.billing.model.SettleMerchantMessageModel> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.heepay.rpc.billing.model.SettleMerchantMessageModel>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySettleMessage_result)
        return this.equals((querySettleMessage_result)that);
      return false;
    }

    public boolean equals(querySettleMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySettleMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySettleMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySettleMessage_resultStandardSchemeFactory implements SchemeFactory {
      public querySettleMessage_resultStandardScheme getScheme() {
        return new querySettleMessage_resultStandardScheme();
      }
    }

    private static class querySettleMessage_resultStandardScheme extends StandardScheme<querySettleMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySettleMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.heepay.rpc.billing.model.SettleMerchantMessageModel>(_list8.size);
                  com.heepay.rpc.billing.model.SettleMerchantMessageModel _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.heepay.rpc.billing.model.SettleMerchantMessageModel();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySettleMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.heepay.rpc.billing.model.SettleMerchantMessageModel _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySettleMessage_resultTupleSchemeFactory implements SchemeFactory {
      public querySettleMessage_resultTupleScheme getScheme() {
        return new querySettleMessage_resultTupleScheme();
      }
    }

    private static class querySettleMessage_resultTupleScheme extends TupleScheme<querySettleMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySettleMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.heepay.rpc.billing.model.SettleMerchantMessageModel _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySettleMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.heepay.rpc.billing.model.SettleMerchantMessageModel>(_list13.size);
            com.heepay.rpc.billing.model.SettleMerchantMessageModel _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.heepay.rpc.billing.model.SettleMerchantMessageModel();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
