/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-07-06")
public class SettleBatchService {

  public interface Iface {

    public com.heepay.rpc.billing.model.SettleBatchMsgModel queryMerchantSettleBatch(String settleBatch, int pageNum, int pageSize) throws org.apache.thrift.TException;

    public com.heepay.rpc.billing.model.SettleBatchMsgModel queryChannelSettleBatch(String settleBatch, int pageNum, int pageSize) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryMerchantSettleBatch(String settleBatch, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryChannelSettleBatch(String settleBatch, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.heepay.rpc.billing.model.SettleBatchMsgModel queryMerchantSettleBatch(String settleBatch, int pageNum, int pageSize) throws org.apache.thrift.TException
    {
      send_queryMerchantSettleBatch(settleBatch, pageNum, pageSize);
      return recv_queryMerchantSettleBatch();
    }

    public void send_queryMerchantSettleBatch(String settleBatch, int pageNum, int pageSize) throws org.apache.thrift.TException
    {
      queryMerchantSettleBatch_args args = new queryMerchantSettleBatch_args();
      args.setSettleBatch(settleBatch);
      args.setPageNum(pageNum);
      args.setPageSize(pageSize);
      sendBase("queryMerchantSettleBatch", args);
    }

    public com.heepay.rpc.billing.model.SettleBatchMsgModel recv_queryMerchantSettleBatch() throws org.apache.thrift.TException
    {
      queryMerchantSettleBatch_result result = new queryMerchantSettleBatch_result();
      receiveBase(result, "queryMerchantSettleBatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryMerchantSettleBatch failed: unknown result");
    }

    public com.heepay.rpc.billing.model.SettleBatchMsgModel queryChannelSettleBatch(String settleBatch, int pageNum, int pageSize) throws org.apache.thrift.TException
    {
      send_queryChannelSettleBatch(settleBatch, pageNum, pageSize);
      return recv_queryChannelSettleBatch();
    }

    public void send_queryChannelSettleBatch(String settleBatch, int pageNum, int pageSize) throws org.apache.thrift.TException
    {
      queryChannelSettleBatch_args args = new queryChannelSettleBatch_args();
      args.setSettleBatch(settleBatch);
      args.setPageNum(pageNum);
      args.setPageSize(pageSize);
      sendBase("queryChannelSettleBatch", args);
    }

    public com.heepay.rpc.billing.model.SettleBatchMsgModel recv_queryChannelSettleBatch() throws org.apache.thrift.TException
    {
      queryChannelSettleBatch_result result = new queryChannelSettleBatch_result();
      receiveBase(result, "queryChannelSettleBatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryChannelSettleBatch failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryMerchantSettleBatch(String settleBatch, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryMerchantSettleBatch_call method_call = new queryMerchantSettleBatch_call(settleBatch, pageNum, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryMerchantSettleBatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String settleBatch;
      private int pageNum;
      private int pageSize;
      public queryMerchantSettleBatch_call(String settleBatch, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.settleBatch = settleBatch;
        this.pageNum = pageNum;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryMerchantSettleBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryMerchantSettleBatch_args args = new queryMerchantSettleBatch_args();
        args.setSettleBatch(settleBatch);
        args.setPageNum(pageNum);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.heepay.rpc.billing.model.SettleBatchMsgModel getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryMerchantSettleBatch();
      }
    }

    public void queryChannelSettleBatch(String settleBatch, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryChannelSettleBatch_call method_call = new queryChannelSettleBatch_call(settleBatch, pageNum, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryChannelSettleBatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String settleBatch;
      private int pageNum;
      private int pageSize;
      public queryChannelSettleBatch_call(String settleBatch, int pageNum, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.settleBatch = settleBatch;
        this.pageNum = pageNum;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryChannelSettleBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryChannelSettleBatch_args args = new queryChannelSettleBatch_args();
        args.setSettleBatch(settleBatch);
        args.setPageNum(pageNum);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.heepay.rpc.billing.model.SettleBatchMsgModel getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryChannelSettleBatch();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryMerchantSettleBatch", new queryMerchantSettleBatch());
      processMap.put("queryChannelSettleBatch", new queryChannelSettleBatch());
      return processMap;
    }

    public static class queryMerchantSettleBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryMerchantSettleBatch_args> {
      public queryMerchantSettleBatch() {
        super("queryMerchantSettleBatch");
      }

      public queryMerchantSettleBatch_args getEmptyArgsInstance() {
        return new queryMerchantSettleBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryMerchantSettleBatch_result getResult(I iface, queryMerchantSettleBatch_args args) throws org.apache.thrift.TException {
        queryMerchantSettleBatch_result result = new queryMerchantSettleBatch_result();
        result.success = iface.queryMerchantSettleBatch(args.settleBatch, args.pageNum, args.pageSize);
        return result;
      }
    }

    public static class queryChannelSettleBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryChannelSettleBatch_args> {
      public queryChannelSettleBatch() {
        super("queryChannelSettleBatch");
      }

      public queryChannelSettleBatch_args getEmptyArgsInstance() {
        return new queryChannelSettleBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryChannelSettleBatch_result getResult(I iface, queryChannelSettleBatch_args args) throws org.apache.thrift.TException {
        queryChannelSettleBatch_result result = new queryChannelSettleBatch_result();
        result.success = iface.queryChannelSettleBatch(args.settleBatch, args.pageNum, args.pageSize);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryMerchantSettleBatch", new queryMerchantSettleBatch());
      processMap.put("queryChannelSettleBatch", new queryChannelSettleBatch());
      return processMap;
    }

    public static class queryMerchantSettleBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryMerchantSettleBatch_args, com.heepay.rpc.billing.model.SettleBatchMsgModel> {
      public queryMerchantSettleBatch() {
        super("queryMerchantSettleBatch");
      }

      public queryMerchantSettleBatch_args getEmptyArgsInstance() {
        return new queryMerchantSettleBatch_args();
      }

      public AsyncMethodCallback<com.heepay.rpc.billing.model.SettleBatchMsgModel> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.heepay.rpc.billing.model.SettleBatchMsgModel>() { 
          public void onComplete(com.heepay.rpc.billing.model.SettleBatchMsgModel o) {
            queryMerchantSettleBatch_result result = new queryMerchantSettleBatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryMerchantSettleBatch_result result = new queryMerchantSettleBatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryMerchantSettleBatch_args args, org.apache.thrift.async.AsyncMethodCallback<com.heepay.rpc.billing.model.SettleBatchMsgModel> resultHandler) throws TException {
        iface.queryMerchantSettleBatch(args.settleBatch, args.pageNum, args.pageSize,resultHandler);
      }
    }

    public static class queryChannelSettleBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryChannelSettleBatch_args, com.heepay.rpc.billing.model.SettleBatchMsgModel> {
      public queryChannelSettleBatch() {
        super("queryChannelSettleBatch");
      }

      public queryChannelSettleBatch_args getEmptyArgsInstance() {
        return new queryChannelSettleBatch_args();
      }

      public AsyncMethodCallback<com.heepay.rpc.billing.model.SettleBatchMsgModel> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.heepay.rpc.billing.model.SettleBatchMsgModel>() { 
          public void onComplete(com.heepay.rpc.billing.model.SettleBatchMsgModel o) {
            queryChannelSettleBatch_result result = new queryChannelSettleBatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryChannelSettleBatch_result result = new queryChannelSettleBatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryChannelSettleBatch_args args, org.apache.thrift.async.AsyncMethodCallback<com.heepay.rpc.billing.model.SettleBatchMsgModel> resultHandler) throws TException {
        iface.queryChannelSettleBatch(args.settleBatch, args.pageNum, args.pageSize,resultHandler);
      }
    }

  }

  public static class queryMerchantSettleBatch_args implements org.apache.thrift.TBase<queryMerchantSettleBatch_args, queryMerchantSettleBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryMerchantSettleBatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMerchantSettleBatch_args");

    private static final org.apache.thrift.protocol.TField SETTLE_BATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("settleBatch", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMerchantSettleBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMerchantSettleBatch_argsTupleSchemeFactory());
    }

    public String settleBatch; // required
    public int pageNum; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTLE_BATCH((short)1, "settleBatch"),
      PAGE_NUM((short)2, "pageNum"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTLE_BATCH
            return SETTLE_BATCH;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTLE_BATCH, new org.apache.thrift.meta_data.FieldMetaData("settleBatch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMerchantSettleBatch_args.class, metaDataMap);
    }

    public queryMerchantSettleBatch_args() {
    }

    public queryMerchantSettleBatch_args(
      String settleBatch,
      int pageNum,
      int pageSize)
    {
      this();
      this.settleBatch = settleBatch;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMerchantSettleBatch_args(queryMerchantSettleBatch_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSettleBatch()) {
        this.settleBatch = other.settleBatch;
      }
      this.pageNum = other.pageNum;
      this.pageSize = other.pageSize;
    }

    public queryMerchantSettleBatch_args deepCopy() {
      return new queryMerchantSettleBatch_args(this);
    }

    @Override
    public void clear() {
      this.settleBatch = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getSettleBatch() {
      return this.settleBatch;
    }

    public queryMerchantSettleBatch_args setSettleBatch(String settleBatch) {
      this.settleBatch = settleBatch;
      return this;
    }

    public void unsetSettleBatch() {
      this.settleBatch = null;
    }

    /** Returns true if field settleBatch is set (has been assigned a value) and false otherwise */
    public boolean isSetSettleBatch() {
      return this.settleBatch != null;
    }

    public void setSettleBatchIsSet(boolean value) {
      if (!value) {
        this.settleBatch = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public queryMerchantSettleBatch_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public queryMerchantSettleBatch_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTLE_BATCH:
        if (value == null) {
          unsetSettleBatch();
        } else {
          setSettleBatch((String)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTLE_BATCH:
        return getSettleBatch();

      case PAGE_NUM:
        return getPageNum();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTLE_BATCH:
        return isSetSettleBatch();
      case PAGE_NUM:
        return isSetPageNum();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMerchantSettleBatch_args)
        return this.equals((queryMerchantSettleBatch_args)that);
      return false;
    }

    public boolean equals(queryMerchantSettleBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_settleBatch = true && this.isSetSettleBatch();
      boolean that_present_settleBatch = true && that.isSetSettleBatch();
      if (this_present_settleBatch || that_present_settleBatch) {
        if (!(this_present_settleBatch && that_present_settleBatch))
          return false;
        if (!this.settleBatch.equals(that.settleBatch))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_settleBatch = true && (isSetSettleBatch());
      list.add(present_settleBatch);
      if (present_settleBatch)
        list.add(settleBatch);

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMerchantSettleBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettleBatch()).compareTo(other.isSetSettleBatch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettleBatch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleBatch, other.settleBatch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMerchantSettleBatch_args(");
      boolean first = true;

      sb.append("settleBatch:");
      if (this.settleBatch == null) {
        sb.append("null");
      } else {
        sb.append(this.settleBatch);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMerchantSettleBatch_argsStandardSchemeFactory implements SchemeFactory {
      public queryMerchantSettleBatch_argsStandardScheme getScheme() {
        return new queryMerchantSettleBatch_argsStandardScheme();
      }
    }

    private static class queryMerchantSettleBatch_argsStandardScheme extends StandardScheme<queryMerchantSettleBatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMerchantSettleBatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTLE_BATCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.settleBatch = iprot.readString();
                struct.setSettleBatchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMerchantSettleBatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.settleBatch != null) {
          oprot.writeFieldBegin(SETTLE_BATCH_FIELD_DESC);
          oprot.writeString(struct.settleBatch);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMerchantSettleBatch_argsTupleSchemeFactory implements SchemeFactory {
      public queryMerchantSettleBatch_argsTupleScheme getScheme() {
        return new queryMerchantSettleBatch_argsTupleScheme();
      }
    }

    private static class queryMerchantSettleBatch_argsTupleScheme extends TupleScheme<queryMerchantSettleBatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMerchantSettleBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettleBatch()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSettleBatch()) {
          oprot.writeString(struct.settleBatch);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMerchantSettleBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.settleBatch = iprot.readString();
          struct.setSettleBatchIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class queryMerchantSettleBatch_result implements org.apache.thrift.TBase<queryMerchantSettleBatch_result, queryMerchantSettleBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryMerchantSettleBatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMerchantSettleBatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMerchantSettleBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMerchantSettleBatch_resultTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.SettleBatchMsgModel success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.SettleBatchMsgModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMerchantSettleBatch_result.class, metaDataMap);
    }

    public queryMerchantSettleBatch_result() {
    }

    public queryMerchantSettleBatch_result(
      com.heepay.rpc.billing.model.SettleBatchMsgModel success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMerchantSettleBatch_result(queryMerchantSettleBatch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.heepay.rpc.billing.model.SettleBatchMsgModel(other.success);
      }
    }

    public queryMerchantSettleBatch_result deepCopy() {
      return new queryMerchantSettleBatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.heepay.rpc.billing.model.SettleBatchMsgModel getSuccess() {
      return this.success;
    }

    public queryMerchantSettleBatch_result setSuccess(com.heepay.rpc.billing.model.SettleBatchMsgModel success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.heepay.rpc.billing.model.SettleBatchMsgModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMerchantSettleBatch_result)
        return this.equals((queryMerchantSettleBatch_result)that);
      return false;
    }

    public boolean equals(queryMerchantSettleBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMerchantSettleBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMerchantSettleBatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMerchantSettleBatch_resultStandardSchemeFactory implements SchemeFactory {
      public queryMerchantSettleBatch_resultStandardScheme getScheme() {
        return new queryMerchantSettleBatch_resultStandardScheme();
      }
    }

    private static class queryMerchantSettleBatch_resultStandardScheme extends StandardScheme<queryMerchantSettleBatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMerchantSettleBatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.heepay.rpc.billing.model.SettleBatchMsgModel();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMerchantSettleBatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMerchantSettleBatch_resultTupleSchemeFactory implements SchemeFactory {
      public queryMerchantSettleBatch_resultTupleScheme getScheme() {
        return new queryMerchantSettleBatch_resultTupleScheme();
      }
    }

    private static class queryMerchantSettleBatch_resultTupleScheme extends TupleScheme<queryMerchantSettleBatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMerchantSettleBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMerchantSettleBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.heepay.rpc.billing.model.SettleBatchMsgModel();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryChannelSettleBatch_args implements org.apache.thrift.TBase<queryChannelSettleBatch_args, queryChannelSettleBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryChannelSettleBatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryChannelSettleBatch_args");

    private static final org.apache.thrift.protocol.TField SETTLE_BATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("settleBatch", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryChannelSettleBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryChannelSettleBatch_argsTupleSchemeFactory());
    }

    public String settleBatch; // required
    public int pageNum; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTLE_BATCH((short)1, "settleBatch"),
      PAGE_NUM((short)2, "pageNum"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTLE_BATCH
            return SETTLE_BATCH;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTLE_BATCH, new org.apache.thrift.meta_data.FieldMetaData("settleBatch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryChannelSettleBatch_args.class, metaDataMap);
    }

    public queryChannelSettleBatch_args() {
    }

    public queryChannelSettleBatch_args(
      String settleBatch,
      int pageNum,
      int pageSize)
    {
      this();
      this.settleBatch = settleBatch;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryChannelSettleBatch_args(queryChannelSettleBatch_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSettleBatch()) {
        this.settleBatch = other.settleBatch;
      }
      this.pageNum = other.pageNum;
      this.pageSize = other.pageSize;
    }

    public queryChannelSettleBatch_args deepCopy() {
      return new queryChannelSettleBatch_args(this);
    }

    @Override
    public void clear() {
      this.settleBatch = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getSettleBatch() {
      return this.settleBatch;
    }

    public queryChannelSettleBatch_args setSettleBatch(String settleBatch) {
      this.settleBatch = settleBatch;
      return this;
    }

    public void unsetSettleBatch() {
      this.settleBatch = null;
    }

    /** Returns true if field settleBatch is set (has been assigned a value) and false otherwise */
    public boolean isSetSettleBatch() {
      return this.settleBatch != null;
    }

    public void setSettleBatchIsSet(boolean value) {
      if (!value) {
        this.settleBatch = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public queryChannelSettleBatch_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public queryChannelSettleBatch_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTLE_BATCH:
        if (value == null) {
          unsetSettleBatch();
        } else {
          setSettleBatch((String)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTLE_BATCH:
        return getSettleBatch();

      case PAGE_NUM:
        return getPageNum();

      case PAGE_SIZE:
        return getPageSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTLE_BATCH:
        return isSetSettleBatch();
      case PAGE_NUM:
        return isSetPageNum();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryChannelSettleBatch_args)
        return this.equals((queryChannelSettleBatch_args)that);
      return false;
    }

    public boolean equals(queryChannelSettleBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_settleBatch = true && this.isSetSettleBatch();
      boolean that_present_settleBatch = true && that.isSetSettleBatch();
      if (this_present_settleBatch || that_present_settleBatch) {
        if (!(this_present_settleBatch && that_present_settleBatch))
          return false;
        if (!this.settleBatch.equals(that.settleBatch))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_settleBatch = true && (isSetSettleBatch());
      list.add(present_settleBatch);
      if (present_settleBatch)
        list.add(settleBatch);

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryChannelSettleBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettleBatch()).compareTo(other.isSetSettleBatch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettleBatch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleBatch, other.settleBatch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryChannelSettleBatch_args(");
      boolean first = true;

      sb.append("settleBatch:");
      if (this.settleBatch == null) {
        sb.append("null");
      } else {
        sb.append(this.settleBatch);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryChannelSettleBatch_argsStandardSchemeFactory implements SchemeFactory {
      public queryChannelSettleBatch_argsStandardScheme getScheme() {
        return new queryChannelSettleBatch_argsStandardScheme();
      }
    }

    private static class queryChannelSettleBatch_argsStandardScheme extends StandardScheme<queryChannelSettleBatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryChannelSettleBatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTLE_BATCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.settleBatch = iprot.readString();
                struct.setSettleBatchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryChannelSettleBatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.settleBatch != null) {
          oprot.writeFieldBegin(SETTLE_BATCH_FIELD_DESC);
          oprot.writeString(struct.settleBatch);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryChannelSettleBatch_argsTupleSchemeFactory implements SchemeFactory {
      public queryChannelSettleBatch_argsTupleScheme getScheme() {
        return new queryChannelSettleBatch_argsTupleScheme();
      }
    }

    private static class queryChannelSettleBatch_argsTupleScheme extends TupleScheme<queryChannelSettleBatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryChannelSettleBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettleBatch()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSettleBatch()) {
          oprot.writeString(struct.settleBatch);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryChannelSettleBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.settleBatch = iprot.readString();
          struct.setSettleBatchIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class queryChannelSettleBatch_result implements org.apache.thrift.TBase<queryChannelSettleBatch_result, queryChannelSettleBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryChannelSettleBatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryChannelSettleBatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryChannelSettleBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryChannelSettleBatch_resultTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.SettleBatchMsgModel success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.SettleBatchMsgModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryChannelSettleBatch_result.class, metaDataMap);
    }

    public queryChannelSettleBatch_result() {
    }

    public queryChannelSettleBatch_result(
      com.heepay.rpc.billing.model.SettleBatchMsgModel success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryChannelSettleBatch_result(queryChannelSettleBatch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.heepay.rpc.billing.model.SettleBatchMsgModel(other.success);
      }
    }

    public queryChannelSettleBatch_result deepCopy() {
      return new queryChannelSettleBatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.heepay.rpc.billing.model.SettleBatchMsgModel getSuccess() {
      return this.success;
    }

    public queryChannelSettleBatch_result setSuccess(com.heepay.rpc.billing.model.SettleBatchMsgModel success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.heepay.rpc.billing.model.SettleBatchMsgModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryChannelSettleBatch_result)
        return this.equals((queryChannelSettleBatch_result)that);
      return false;
    }

    public boolean equals(queryChannelSettleBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryChannelSettleBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryChannelSettleBatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryChannelSettleBatch_resultStandardSchemeFactory implements SchemeFactory {
      public queryChannelSettleBatch_resultStandardScheme getScheme() {
        return new queryChannelSettleBatch_resultStandardScheme();
      }
    }

    private static class queryChannelSettleBatch_resultStandardScheme extends StandardScheme<queryChannelSettleBatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryChannelSettleBatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.heepay.rpc.billing.model.SettleBatchMsgModel();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryChannelSettleBatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryChannelSettleBatch_resultTupleSchemeFactory implements SchemeFactory {
      public queryChannelSettleBatch_resultTupleScheme getScheme() {
        return new queryChannelSettleBatch_resultTupleScheme();
      }
    }

    private static class queryChannelSettleBatch_resultTupleScheme extends TupleScheme<queryChannelSettleBatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryChannelSettleBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryChannelSettleBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.heepay.rpc.billing.model.SettleBatchMsgModel();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
