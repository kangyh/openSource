/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-13")
public class SettleMerchantDetail implements org.apache.thrift.TBase<SettleMerchantDetail, SettleMerchantDetail._Fields>, java.io.Serializable, Cloneable, Comparable<SettleMerchantDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SettleMerchantDetail");

  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MERCHANT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("productCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TRANS_NO_OLD_FIELD_DESC = new org.apache.thrift.protocol.TField("transNoOld", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REQUEST_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestAmount", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SUCCESS_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("successTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SETTLE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("settleTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SETTLE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("settleNo", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SETTLE_BATH_FIELD_DESC = new org.apache.thrift.protocol.TField("settleBath", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fee", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField FEE_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("feeWay", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField FEE_SETTLE_CYC_FIELD_DESC = new org.apache.thrift.protocol.TField("feeSettleCyc", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CHECK_BATH_FIELD_DESC = new org.apache.thrift.protocol.TField("checkBath", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField TRANS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transType", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField MERCHANT_ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantOrderNo", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SettleMerchantDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SettleMerchantDetailTupleSchemeFactory());
  }

  public String merchantId; // required
  public String merchantType; // required
  public String productCode; // required
  public String currency; // required
  public String transNo; // required
  public String transNoOld; // required
  public String requestAmount; // required
  public String successTime; // required
  public String settleTime; // required
  public String settleNo; // required
  public String settleBath; // required
  public String fee; // required
  public String feeWay; // required
  public String feeSettleCyc; // required
  public String checkBath; // required
  public String transType; // required
  public String merchantOrderNo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MERCHANT_ID((short)1, "merchantId"),
    MERCHANT_TYPE((short)2, "merchantType"),
    PRODUCT_CODE((short)3, "productCode"),
    CURRENCY((short)4, "currency"),
    TRANS_NO((short)5, "transNo"),
    TRANS_NO_OLD((short)6, "transNoOld"),
    REQUEST_AMOUNT((short)7, "requestAmount"),
    SUCCESS_TIME((short)8, "successTime"),
    SETTLE_TIME((short)9, "settleTime"),
    SETTLE_NO((short)10, "settleNo"),
    SETTLE_BATH((short)11, "settleBath"),
    FEE((short)12, "fee"),
    FEE_WAY((short)13, "feeWay"),
    FEE_SETTLE_CYC((short)14, "feeSettleCyc"),
    CHECK_BATH((short)15, "checkBath"),
    TRANS_TYPE((short)16, "transType"),
    MERCHANT_ORDER_NO((short)17, "merchantOrderNo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MERCHANT_ID
          return MERCHANT_ID;
        case 2: // MERCHANT_TYPE
          return MERCHANT_TYPE;
        case 3: // PRODUCT_CODE
          return PRODUCT_CODE;
        case 4: // CURRENCY
          return CURRENCY;
        case 5: // TRANS_NO
          return TRANS_NO;
        case 6: // TRANS_NO_OLD
          return TRANS_NO_OLD;
        case 7: // REQUEST_AMOUNT
          return REQUEST_AMOUNT;
        case 8: // SUCCESS_TIME
          return SUCCESS_TIME;
        case 9: // SETTLE_TIME
          return SETTLE_TIME;
        case 10: // SETTLE_NO
          return SETTLE_NO;
        case 11: // SETTLE_BATH
          return SETTLE_BATH;
        case 12: // FEE
          return FEE;
        case 13: // FEE_WAY
          return FEE_WAY;
        case 14: // FEE_SETTLE_CYC
          return FEE_SETTLE_CYC;
        case 15: // CHECK_BATH
          return CHECK_BATH;
        case 16: // TRANS_TYPE
          return TRANS_TYPE;
        case 17: // MERCHANT_ORDER_NO
          return MERCHANT_ORDER_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("merchantType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("productCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_NO_OLD, new org.apache.thrift.meta_data.FieldMetaData("transNoOld", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("requestAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCESS_TIME, new org.apache.thrift.meta_data.FieldMetaData("successTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_TIME, new org.apache.thrift.meta_data.FieldMetaData("settleTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_NO, new org.apache.thrift.meta_data.FieldMetaData("settleNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_BATH, new org.apache.thrift.meta_data.FieldMetaData("settleBath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE, new org.apache.thrift.meta_data.FieldMetaData("fee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE_WAY, new org.apache.thrift.meta_data.FieldMetaData("feeWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE_SETTLE_CYC, new org.apache.thrift.meta_data.FieldMetaData("feeSettleCyc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_BATH, new org.apache.thrift.meta_data.FieldMetaData("checkBath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("merchantOrderNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettleMerchantDetail.class, metaDataMap);
  }

  public SettleMerchantDetail() {
  }

  public SettleMerchantDetail(
    String merchantId,
    String merchantType,
    String productCode,
    String currency,
    String transNo,
    String transNoOld,
    String requestAmount,
    String successTime,
    String settleTime,
    String settleNo,
    String settleBath,
    String fee,
    String feeWay,
    String feeSettleCyc,
    String checkBath,
    String transType,
    String merchantOrderNo)
  {
    this();
    this.merchantId = merchantId;
    this.merchantType = merchantType;
    this.productCode = productCode;
    this.currency = currency;
    this.transNo = transNo;
    this.transNoOld = transNoOld;
    this.requestAmount = requestAmount;
    this.successTime = successTime;
    this.settleTime = settleTime;
    this.settleNo = settleNo;
    this.settleBath = settleBath;
    this.fee = fee;
    this.feeWay = feeWay;
    this.feeSettleCyc = feeSettleCyc;
    this.checkBath = checkBath;
    this.transType = transType;
    this.merchantOrderNo = merchantOrderNo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SettleMerchantDetail(SettleMerchantDetail other) {
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetMerchantType()) {
      this.merchantType = other.merchantType;
    }
    if (other.isSetProductCode()) {
      this.productCode = other.productCode;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    if (other.isSetTransNo()) {
      this.transNo = other.transNo;
    }
    if (other.isSetTransNoOld()) {
      this.transNoOld = other.transNoOld;
    }
    if (other.isSetRequestAmount()) {
      this.requestAmount = other.requestAmount;
    }
    if (other.isSetSuccessTime()) {
      this.successTime = other.successTime;
    }
    if (other.isSetSettleTime()) {
      this.settleTime = other.settleTime;
    }
    if (other.isSetSettleNo()) {
      this.settleNo = other.settleNo;
    }
    if (other.isSetSettleBath()) {
      this.settleBath = other.settleBath;
    }
    if (other.isSetFee()) {
      this.fee = other.fee;
    }
    if (other.isSetFeeWay()) {
      this.feeWay = other.feeWay;
    }
    if (other.isSetFeeSettleCyc()) {
      this.feeSettleCyc = other.feeSettleCyc;
    }
    if (other.isSetCheckBath()) {
      this.checkBath = other.checkBath;
    }
    if (other.isSetTransType()) {
      this.transType = other.transType;
    }
    if (other.isSetMerchantOrderNo()) {
      this.merchantOrderNo = other.merchantOrderNo;
    }
  }

  public SettleMerchantDetail deepCopy() {
    return new SettleMerchantDetail(this);
  }

  @Override
  public void clear() {
    this.merchantId = null;
    this.merchantType = null;
    this.productCode = null;
    this.currency = null;
    this.transNo = null;
    this.transNoOld = null;
    this.requestAmount = null;
    this.successTime = null;
    this.settleTime = null;
    this.settleNo = null;
    this.settleBath = null;
    this.fee = null;
    this.feeWay = null;
    this.feeSettleCyc = null;
    this.checkBath = null;
    this.transType = null;
    this.merchantOrderNo = null;
  }

  public String getMerchantId() {
    return this.merchantId;
  }

  public SettleMerchantDetail setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  public String getMerchantType() {
    return this.merchantType;
  }

  public SettleMerchantDetail setMerchantType(String merchantType) {
    this.merchantType = merchantType;
    return this;
  }

  public void unsetMerchantType() {
    this.merchantType = null;
  }

  /** Returns true if field merchantType is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantType() {
    return this.merchantType != null;
  }

  public void setMerchantTypeIsSet(boolean value) {
    if (!value) {
      this.merchantType = null;
    }
  }

  public String getProductCode() {
    return this.productCode;
  }

  public SettleMerchantDetail setProductCode(String productCode) {
    this.productCode = productCode;
    return this;
  }

  public void unsetProductCode() {
    this.productCode = null;
  }

  /** Returns true if field productCode is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCode() {
    return this.productCode != null;
  }

  public void setProductCodeIsSet(boolean value) {
    if (!value) {
      this.productCode = null;
    }
  }

  public String getCurrency() {
    return this.currency;
  }

  public SettleMerchantDetail setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public String getTransNo() {
    return this.transNo;
  }

  public SettleMerchantDetail setTransNo(String transNo) {
    this.transNo = transNo;
    return this;
  }

  public void unsetTransNo() {
    this.transNo = null;
  }

  /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTransNo() {
    return this.transNo != null;
  }

  public void setTransNoIsSet(boolean value) {
    if (!value) {
      this.transNo = null;
    }
  }

  public String getTransNoOld() {
    return this.transNoOld;
  }

  public SettleMerchantDetail setTransNoOld(String transNoOld) {
    this.transNoOld = transNoOld;
    return this;
  }

  public void unsetTransNoOld() {
    this.transNoOld = null;
  }

  /** Returns true if field transNoOld is set (has been assigned a value) and false otherwise */
  public boolean isSetTransNoOld() {
    return this.transNoOld != null;
  }

  public void setTransNoOldIsSet(boolean value) {
    if (!value) {
      this.transNoOld = null;
    }
  }

  public String getRequestAmount() {
    return this.requestAmount;
  }

  public SettleMerchantDetail setRequestAmount(String requestAmount) {
    this.requestAmount = requestAmount;
    return this;
  }

  public void unsetRequestAmount() {
    this.requestAmount = null;
  }

  /** Returns true if field requestAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestAmount() {
    return this.requestAmount != null;
  }

  public void setRequestAmountIsSet(boolean value) {
    if (!value) {
      this.requestAmount = null;
    }
  }

  public String getSuccessTime() {
    return this.successTime;
  }

  public SettleMerchantDetail setSuccessTime(String successTime) {
    this.successTime = successTime;
    return this;
  }

  public void unsetSuccessTime() {
    this.successTime = null;
  }

  /** Returns true if field successTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessTime() {
    return this.successTime != null;
  }

  public void setSuccessTimeIsSet(boolean value) {
    if (!value) {
      this.successTime = null;
    }
  }

  public String getSettleTime() {
    return this.settleTime;
  }

  public SettleMerchantDetail setSettleTime(String settleTime) {
    this.settleTime = settleTime;
    return this;
  }

  public void unsetSettleTime() {
    this.settleTime = null;
  }

  /** Returns true if field settleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleTime() {
    return this.settleTime != null;
  }

  public void setSettleTimeIsSet(boolean value) {
    if (!value) {
      this.settleTime = null;
    }
  }

  public String getSettleNo() {
    return this.settleNo;
  }

  public SettleMerchantDetail setSettleNo(String settleNo) {
    this.settleNo = settleNo;
    return this;
  }

  public void unsetSettleNo() {
    this.settleNo = null;
  }

  /** Returns true if field settleNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleNo() {
    return this.settleNo != null;
  }

  public void setSettleNoIsSet(boolean value) {
    if (!value) {
      this.settleNo = null;
    }
  }

  public String getSettleBath() {
    return this.settleBath;
  }

  public SettleMerchantDetail setSettleBath(String settleBath) {
    this.settleBath = settleBath;
    return this;
  }

  public void unsetSettleBath() {
    this.settleBath = null;
  }

  /** Returns true if field settleBath is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleBath() {
    return this.settleBath != null;
  }

  public void setSettleBathIsSet(boolean value) {
    if (!value) {
      this.settleBath = null;
    }
  }

  public String getFee() {
    return this.fee;
  }

  public SettleMerchantDetail setFee(String fee) {
    this.fee = fee;
    return this;
  }

  public void unsetFee() {
    this.fee = null;
  }

  /** Returns true if field fee is set (has been assigned a value) and false otherwise */
  public boolean isSetFee() {
    return this.fee != null;
  }

  public void setFeeIsSet(boolean value) {
    if (!value) {
      this.fee = null;
    }
  }

  public String getFeeWay() {
    return this.feeWay;
  }

  public SettleMerchantDetail setFeeWay(String feeWay) {
    this.feeWay = feeWay;
    return this;
  }

  public void unsetFeeWay() {
    this.feeWay = null;
  }

  /** Returns true if field feeWay is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeWay() {
    return this.feeWay != null;
  }

  public void setFeeWayIsSet(boolean value) {
    if (!value) {
      this.feeWay = null;
    }
  }

  public String getFeeSettleCyc() {
    return this.feeSettleCyc;
  }

  public SettleMerchantDetail setFeeSettleCyc(String feeSettleCyc) {
    this.feeSettleCyc = feeSettleCyc;
    return this;
  }

  public void unsetFeeSettleCyc() {
    this.feeSettleCyc = null;
  }

  /** Returns true if field feeSettleCyc is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeSettleCyc() {
    return this.feeSettleCyc != null;
  }

  public void setFeeSettleCycIsSet(boolean value) {
    if (!value) {
      this.feeSettleCyc = null;
    }
  }

  public String getCheckBath() {
    return this.checkBath;
  }

  public SettleMerchantDetail setCheckBath(String checkBath) {
    this.checkBath = checkBath;
    return this;
  }

  public void unsetCheckBath() {
    this.checkBath = null;
  }

  /** Returns true if field checkBath is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckBath() {
    return this.checkBath != null;
  }

  public void setCheckBathIsSet(boolean value) {
    if (!value) {
      this.checkBath = null;
    }
  }

  public String getTransType() {
    return this.transType;
  }

  public SettleMerchantDetail setTransType(String transType) {
    this.transType = transType;
    return this;
  }

  public void unsetTransType() {
    this.transType = null;
  }

  /** Returns true if field transType is set (has been assigned a value) and false otherwise */
  public boolean isSetTransType() {
    return this.transType != null;
  }

  public void setTransTypeIsSet(boolean value) {
    if (!value) {
      this.transType = null;
    }
  }

  public String getMerchantOrderNo() {
    return this.merchantOrderNo;
  }

  public SettleMerchantDetail setMerchantOrderNo(String merchantOrderNo) {
    this.merchantOrderNo = merchantOrderNo;
    return this;
  }

  public void unsetMerchantOrderNo() {
    this.merchantOrderNo = null;
  }

  /** Returns true if field merchantOrderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantOrderNo() {
    return this.merchantOrderNo != null;
  }

  public void setMerchantOrderNoIsSet(boolean value) {
    if (!value) {
      this.merchantOrderNo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case MERCHANT_TYPE:
      if (value == null) {
        unsetMerchantType();
      } else {
        setMerchantType((String)value);
      }
      break;

    case PRODUCT_CODE:
      if (value == null) {
        unsetProductCode();
      } else {
        setProductCode((String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case TRANS_NO:
      if (value == null) {
        unsetTransNo();
      } else {
        setTransNo((String)value);
      }
      break;

    case TRANS_NO_OLD:
      if (value == null) {
        unsetTransNoOld();
      } else {
        setTransNoOld((String)value);
      }
      break;

    case REQUEST_AMOUNT:
      if (value == null) {
        unsetRequestAmount();
      } else {
        setRequestAmount((String)value);
      }
      break;

    case SUCCESS_TIME:
      if (value == null) {
        unsetSuccessTime();
      } else {
        setSuccessTime((String)value);
      }
      break;

    case SETTLE_TIME:
      if (value == null) {
        unsetSettleTime();
      } else {
        setSettleTime((String)value);
      }
      break;

    case SETTLE_NO:
      if (value == null) {
        unsetSettleNo();
      } else {
        setSettleNo((String)value);
      }
      break;

    case SETTLE_BATH:
      if (value == null) {
        unsetSettleBath();
      } else {
        setSettleBath((String)value);
      }
      break;

    case FEE:
      if (value == null) {
        unsetFee();
      } else {
        setFee((String)value);
      }
      break;

    case FEE_WAY:
      if (value == null) {
        unsetFeeWay();
      } else {
        setFeeWay((String)value);
      }
      break;

    case FEE_SETTLE_CYC:
      if (value == null) {
        unsetFeeSettleCyc();
      } else {
        setFeeSettleCyc((String)value);
      }
      break;

    case CHECK_BATH:
      if (value == null) {
        unsetCheckBath();
      } else {
        setCheckBath((String)value);
      }
      break;

    case TRANS_TYPE:
      if (value == null) {
        unsetTransType();
      } else {
        setTransType((String)value);
      }
      break;

    case MERCHANT_ORDER_NO:
      if (value == null) {
        unsetMerchantOrderNo();
      } else {
        setMerchantOrderNo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MERCHANT_ID:
      return getMerchantId();

    case MERCHANT_TYPE:
      return getMerchantType();

    case PRODUCT_CODE:
      return getProductCode();

    case CURRENCY:
      return getCurrency();

    case TRANS_NO:
      return getTransNo();

    case TRANS_NO_OLD:
      return getTransNoOld();

    case REQUEST_AMOUNT:
      return getRequestAmount();

    case SUCCESS_TIME:
      return getSuccessTime();

    case SETTLE_TIME:
      return getSettleTime();

    case SETTLE_NO:
      return getSettleNo();

    case SETTLE_BATH:
      return getSettleBath();

    case FEE:
      return getFee();

    case FEE_WAY:
      return getFeeWay();

    case FEE_SETTLE_CYC:
      return getFeeSettleCyc();

    case CHECK_BATH:
      return getCheckBath();

    case TRANS_TYPE:
      return getTransType();

    case MERCHANT_ORDER_NO:
      return getMerchantOrderNo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MERCHANT_ID:
      return isSetMerchantId();
    case MERCHANT_TYPE:
      return isSetMerchantType();
    case PRODUCT_CODE:
      return isSetProductCode();
    case CURRENCY:
      return isSetCurrency();
    case TRANS_NO:
      return isSetTransNo();
    case TRANS_NO_OLD:
      return isSetTransNoOld();
    case REQUEST_AMOUNT:
      return isSetRequestAmount();
    case SUCCESS_TIME:
      return isSetSuccessTime();
    case SETTLE_TIME:
      return isSetSettleTime();
    case SETTLE_NO:
      return isSetSettleNo();
    case SETTLE_BATH:
      return isSetSettleBath();
    case FEE:
      return isSetFee();
    case FEE_WAY:
      return isSetFeeWay();
    case FEE_SETTLE_CYC:
      return isSetFeeSettleCyc();
    case CHECK_BATH:
      return isSetCheckBath();
    case TRANS_TYPE:
      return isSetTransType();
    case MERCHANT_ORDER_NO:
      return isSetMerchantOrderNo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SettleMerchantDetail)
      return this.equals((SettleMerchantDetail)that);
    return false;
  }

  public boolean equals(SettleMerchantDetail that) {
    if (that == null)
      return false;

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_merchantType = true && this.isSetMerchantType();
    boolean that_present_merchantType = true && that.isSetMerchantType();
    if (this_present_merchantType || that_present_merchantType) {
      if (!(this_present_merchantType && that_present_merchantType))
        return false;
      if (!this.merchantType.equals(that.merchantType))
        return false;
    }

    boolean this_present_productCode = true && this.isSetProductCode();
    boolean that_present_productCode = true && that.isSetProductCode();
    if (this_present_productCode || that_present_productCode) {
      if (!(this_present_productCode && that_present_productCode))
        return false;
      if (!this.productCode.equals(that.productCode))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_transNo = true && this.isSetTransNo();
    boolean that_present_transNo = true && that.isSetTransNo();
    if (this_present_transNo || that_present_transNo) {
      if (!(this_present_transNo && that_present_transNo))
        return false;
      if (!this.transNo.equals(that.transNo))
        return false;
    }

    boolean this_present_transNoOld = true && this.isSetTransNoOld();
    boolean that_present_transNoOld = true && that.isSetTransNoOld();
    if (this_present_transNoOld || that_present_transNoOld) {
      if (!(this_present_transNoOld && that_present_transNoOld))
        return false;
      if (!this.transNoOld.equals(that.transNoOld))
        return false;
    }

    boolean this_present_requestAmount = true && this.isSetRequestAmount();
    boolean that_present_requestAmount = true && that.isSetRequestAmount();
    if (this_present_requestAmount || that_present_requestAmount) {
      if (!(this_present_requestAmount && that_present_requestAmount))
        return false;
      if (!this.requestAmount.equals(that.requestAmount))
        return false;
    }

    boolean this_present_successTime = true && this.isSetSuccessTime();
    boolean that_present_successTime = true && that.isSetSuccessTime();
    if (this_present_successTime || that_present_successTime) {
      if (!(this_present_successTime && that_present_successTime))
        return false;
      if (!this.successTime.equals(that.successTime))
        return false;
    }

    boolean this_present_settleTime = true && this.isSetSettleTime();
    boolean that_present_settleTime = true && that.isSetSettleTime();
    if (this_present_settleTime || that_present_settleTime) {
      if (!(this_present_settleTime && that_present_settleTime))
        return false;
      if (!this.settleTime.equals(that.settleTime))
        return false;
    }

    boolean this_present_settleNo = true && this.isSetSettleNo();
    boolean that_present_settleNo = true && that.isSetSettleNo();
    if (this_present_settleNo || that_present_settleNo) {
      if (!(this_present_settleNo && that_present_settleNo))
        return false;
      if (!this.settleNo.equals(that.settleNo))
        return false;
    }

    boolean this_present_settleBath = true && this.isSetSettleBath();
    boolean that_present_settleBath = true && that.isSetSettleBath();
    if (this_present_settleBath || that_present_settleBath) {
      if (!(this_present_settleBath && that_present_settleBath))
        return false;
      if (!this.settleBath.equals(that.settleBath))
        return false;
    }

    boolean this_present_fee = true && this.isSetFee();
    boolean that_present_fee = true && that.isSetFee();
    if (this_present_fee || that_present_fee) {
      if (!(this_present_fee && that_present_fee))
        return false;
      if (!this.fee.equals(that.fee))
        return false;
    }

    boolean this_present_feeWay = true && this.isSetFeeWay();
    boolean that_present_feeWay = true && that.isSetFeeWay();
    if (this_present_feeWay || that_present_feeWay) {
      if (!(this_present_feeWay && that_present_feeWay))
        return false;
      if (!this.feeWay.equals(that.feeWay))
        return false;
    }

    boolean this_present_feeSettleCyc = true && this.isSetFeeSettleCyc();
    boolean that_present_feeSettleCyc = true && that.isSetFeeSettleCyc();
    if (this_present_feeSettleCyc || that_present_feeSettleCyc) {
      if (!(this_present_feeSettleCyc && that_present_feeSettleCyc))
        return false;
      if (!this.feeSettleCyc.equals(that.feeSettleCyc))
        return false;
    }

    boolean this_present_checkBath = true && this.isSetCheckBath();
    boolean that_present_checkBath = true && that.isSetCheckBath();
    if (this_present_checkBath || that_present_checkBath) {
      if (!(this_present_checkBath && that_present_checkBath))
        return false;
      if (!this.checkBath.equals(that.checkBath))
        return false;
    }

    boolean this_present_transType = true && this.isSetTransType();
    boolean that_present_transType = true && that.isSetTransType();
    if (this_present_transType || that_present_transType) {
      if (!(this_present_transType && that_present_transType))
        return false;
      if (!this.transType.equals(that.transType))
        return false;
    }

    boolean this_present_merchantOrderNo = true && this.isSetMerchantOrderNo();
    boolean that_present_merchantOrderNo = true && that.isSetMerchantOrderNo();
    if (this_present_merchantOrderNo || that_present_merchantOrderNo) {
      if (!(this_present_merchantOrderNo && that_present_merchantOrderNo))
        return false;
      if (!this.merchantOrderNo.equals(that.merchantOrderNo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_merchantType = true && (isSetMerchantType());
    list.add(present_merchantType);
    if (present_merchantType)
      list.add(merchantType);

    boolean present_productCode = true && (isSetProductCode());
    list.add(present_productCode);
    if (present_productCode)
      list.add(productCode);

    boolean present_currency = true && (isSetCurrency());
    list.add(present_currency);
    if (present_currency)
      list.add(currency);

    boolean present_transNo = true && (isSetTransNo());
    list.add(present_transNo);
    if (present_transNo)
      list.add(transNo);

    boolean present_transNoOld = true && (isSetTransNoOld());
    list.add(present_transNoOld);
    if (present_transNoOld)
      list.add(transNoOld);

    boolean present_requestAmount = true && (isSetRequestAmount());
    list.add(present_requestAmount);
    if (present_requestAmount)
      list.add(requestAmount);

    boolean present_successTime = true && (isSetSuccessTime());
    list.add(present_successTime);
    if (present_successTime)
      list.add(successTime);

    boolean present_settleTime = true && (isSetSettleTime());
    list.add(present_settleTime);
    if (present_settleTime)
      list.add(settleTime);

    boolean present_settleNo = true && (isSetSettleNo());
    list.add(present_settleNo);
    if (present_settleNo)
      list.add(settleNo);

    boolean present_settleBath = true && (isSetSettleBath());
    list.add(present_settleBath);
    if (present_settleBath)
      list.add(settleBath);

    boolean present_fee = true && (isSetFee());
    list.add(present_fee);
    if (present_fee)
      list.add(fee);

    boolean present_feeWay = true && (isSetFeeWay());
    list.add(present_feeWay);
    if (present_feeWay)
      list.add(feeWay);

    boolean present_feeSettleCyc = true && (isSetFeeSettleCyc());
    list.add(present_feeSettleCyc);
    if (present_feeSettleCyc)
      list.add(feeSettleCyc);

    boolean present_checkBath = true && (isSetCheckBath());
    list.add(present_checkBath);
    if (present_checkBath)
      list.add(checkBath);

    boolean present_transType = true && (isSetTransType());
    list.add(present_transType);
    if (present_transType)
      list.add(transType);

    boolean present_merchantOrderNo = true && (isSetMerchantOrderNo());
    list.add(present_merchantOrderNo);
    if (present_merchantOrderNo)
      list.add(merchantOrderNo);

    return list.hashCode();
  }

  @Override
  public int compareTo(SettleMerchantDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantType()).compareTo(other.isSetMerchantType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantType, other.merchantType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductCode()).compareTo(other.isSetProductCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCode, other.productCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransNoOld()).compareTo(other.isSetTransNoOld());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransNoOld()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNoOld, other.transNoOld);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestAmount()).compareTo(other.isSetRequestAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestAmount, other.requestAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessTime()).compareTo(other.isSetSuccessTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successTime, other.successTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleTime()).compareTo(other.isSetSettleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleTime, other.settleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleNo()).compareTo(other.isSetSettleNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleNo, other.settleNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleBath()).compareTo(other.isSetSettleBath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleBath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleBath, other.settleBath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFee()).compareTo(other.isSetFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fee, other.fee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeWay()).compareTo(other.isSetFeeWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeWay, other.feeWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeSettleCyc()).compareTo(other.isSetFeeSettleCyc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeSettleCyc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeSettleCyc, other.feeSettleCyc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckBath()).compareTo(other.isSetCheckBath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckBath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkBath, other.checkBath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransType()).compareTo(other.isSetTransType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transType, other.transType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantOrderNo()).compareTo(other.isSetMerchantOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantOrderNo, other.merchantOrderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SettleMerchantDetail(");
    boolean first = true;

    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantType:");
    if (this.merchantType == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productCode:");
    if (this.productCode == null) {
      sb.append("null");
    } else {
      sb.append(this.productCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transNo:");
    if (this.transNo == null) {
      sb.append("null");
    } else {
      sb.append(this.transNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transNoOld:");
    if (this.transNoOld == null) {
      sb.append("null");
    } else {
      sb.append(this.transNoOld);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestAmount:");
    if (this.requestAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.requestAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("successTime:");
    if (this.successTime == null) {
      sb.append("null");
    } else {
      sb.append(this.successTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleTime:");
    if (this.settleTime == null) {
      sb.append("null");
    } else {
      sb.append(this.settleTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleNo:");
    if (this.settleNo == null) {
      sb.append("null");
    } else {
      sb.append(this.settleNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleBath:");
    if (this.settleBath == null) {
      sb.append("null");
    } else {
      sb.append(this.settleBath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fee:");
    if (this.fee == null) {
      sb.append("null");
    } else {
      sb.append(this.fee);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeWay:");
    if (this.feeWay == null) {
      sb.append("null");
    } else {
      sb.append(this.feeWay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeSettleCyc:");
    if (this.feeSettleCyc == null) {
      sb.append("null");
    } else {
      sb.append(this.feeSettleCyc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkBath:");
    if (this.checkBath == null) {
      sb.append("null");
    } else {
      sb.append(this.checkBath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transType:");
    if (this.transType == null) {
      sb.append("null");
    } else {
      sb.append(this.transType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantOrderNo:");
    if (this.merchantOrderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantOrderNo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettleMerchantDetailStandardSchemeFactory implements SchemeFactory {
    public SettleMerchantDetailStandardScheme getScheme() {
      return new SettleMerchantDetailStandardScheme();
    }
  }

  private static class SettleMerchantDetailStandardScheme extends StandardScheme<SettleMerchantDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SettleMerchantDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MERCHANT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantType = iprot.readString();
              struct.setMerchantTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productCode = iprot.readString();
              struct.setProductCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRANS_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transNo = iprot.readString();
              struct.setTransNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRANS_NO_OLD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transNoOld = iprot.readString();
              struct.setTransNoOldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REQUEST_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestAmount = iprot.readString();
              struct.setRequestAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUCCESS_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.successTime = iprot.readString();
              struct.setSuccessTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SETTLE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleTime = iprot.readString();
              struct.setSettleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SETTLE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleNo = iprot.readString();
              struct.setSettleNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SETTLE_BATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleBath = iprot.readString();
              struct.setSettleBathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fee = iprot.readString();
              struct.setFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FEE_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feeWay = iprot.readString();
              struct.setFeeWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FEE_SETTLE_CYC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feeSettleCyc = iprot.readString();
              struct.setFeeSettleCycIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CHECK_BATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkBath = iprot.readString();
              struct.setCheckBathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TRANS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transType = iprot.readString();
              struct.setTransTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MERCHANT_ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantOrderNo = iprot.readString();
              struct.setMerchantOrderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SettleMerchantDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantType != null) {
        oprot.writeFieldBegin(MERCHANT_TYPE_FIELD_DESC);
        oprot.writeString(struct.merchantType);
        oprot.writeFieldEnd();
      }
      if (struct.productCode != null) {
        oprot.writeFieldBegin(PRODUCT_CODE_FIELD_DESC);
        oprot.writeString(struct.productCode);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.currency);
        oprot.writeFieldEnd();
      }
      if (struct.transNo != null) {
        oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
        oprot.writeString(struct.transNo);
        oprot.writeFieldEnd();
      }
      if (struct.transNoOld != null) {
        oprot.writeFieldBegin(TRANS_NO_OLD_FIELD_DESC);
        oprot.writeString(struct.transNoOld);
        oprot.writeFieldEnd();
      }
      if (struct.requestAmount != null) {
        oprot.writeFieldBegin(REQUEST_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.requestAmount);
        oprot.writeFieldEnd();
      }
      if (struct.successTime != null) {
        oprot.writeFieldBegin(SUCCESS_TIME_FIELD_DESC);
        oprot.writeString(struct.successTime);
        oprot.writeFieldEnd();
      }
      if (struct.settleTime != null) {
        oprot.writeFieldBegin(SETTLE_TIME_FIELD_DESC);
        oprot.writeString(struct.settleTime);
        oprot.writeFieldEnd();
      }
      if (struct.settleNo != null) {
        oprot.writeFieldBegin(SETTLE_NO_FIELD_DESC);
        oprot.writeString(struct.settleNo);
        oprot.writeFieldEnd();
      }
      if (struct.settleBath != null) {
        oprot.writeFieldBegin(SETTLE_BATH_FIELD_DESC);
        oprot.writeString(struct.settleBath);
        oprot.writeFieldEnd();
      }
      if (struct.fee != null) {
        oprot.writeFieldBegin(FEE_FIELD_DESC);
        oprot.writeString(struct.fee);
        oprot.writeFieldEnd();
      }
      if (struct.feeWay != null) {
        oprot.writeFieldBegin(FEE_WAY_FIELD_DESC);
        oprot.writeString(struct.feeWay);
        oprot.writeFieldEnd();
      }
      if (struct.feeSettleCyc != null) {
        oprot.writeFieldBegin(FEE_SETTLE_CYC_FIELD_DESC);
        oprot.writeString(struct.feeSettleCyc);
        oprot.writeFieldEnd();
      }
      if (struct.checkBath != null) {
        oprot.writeFieldBegin(CHECK_BATH_FIELD_DESC);
        oprot.writeString(struct.checkBath);
        oprot.writeFieldEnd();
      }
      if (struct.transType != null) {
        oprot.writeFieldBegin(TRANS_TYPE_FIELD_DESC);
        oprot.writeString(struct.transType);
        oprot.writeFieldEnd();
      }
      if (struct.merchantOrderNo != null) {
        oprot.writeFieldBegin(MERCHANT_ORDER_NO_FIELD_DESC);
        oprot.writeString(struct.merchantOrderNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SettleMerchantDetailTupleSchemeFactory implements SchemeFactory {
    public SettleMerchantDetailTupleScheme getScheme() {
      return new SettleMerchantDetailTupleScheme();
    }
  }

  private static class SettleMerchantDetailTupleScheme extends TupleScheme<SettleMerchantDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SettleMerchantDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMerchantId()) {
        optionals.set(0);
      }
      if (struct.isSetMerchantType()) {
        optionals.set(1);
      }
      if (struct.isSetProductCode()) {
        optionals.set(2);
      }
      if (struct.isSetCurrency()) {
        optionals.set(3);
      }
      if (struct.isSetTransNo()) {
        optionals.set(4);
      }
      if (struct.isSetTransNoOld()) {
        optionals.set(5);
      }
      if (struct.isSetRequestAmount()) {
        optionals.set(6);
      }
      if (struct.isSetSuccessTime()) {
        optionals.set(7);
      }
      if (struct.isSetSettleTime()) {
        optionals.set(8);
      }
      if (struct.isSetSettleNo()) {
        optionals.set(9);
      }
      if (struct.isSetSettleBath()) {
        optionals.set(10);
      }
      if (struct.isSetFee()) {
        optionals.set(11);
      }
      if (struct.isSetFeeWay()) {
        optionals.set(12);
      }
      if (struct.isSetFeeSettleCyc()) {
        optionals.set(13);
      }
      if (struct.isSetCheckBath()) {
        optionals.set(14);
      }
      if (struct.isSetTransType()) {
        optionals.set(15);
      }
      if (struct.isSetMerchantOrderNo()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetMerchantType()) {
        oprot.writeString(struct.merchantType);
      }
      if (struct.isSetProductCode()) {
        oprot.writeString(struct.productCode);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetTransNo()) {
        oprot.writeString(struct.transNo);
      }
      if (struct.isSetTransNoOld()) {
        oprot.writeString(struct.transNoOld);
      }
      if (struct.isSetRequestAmount()) {
        oprot.writeString(struct.requestAmount);
      }
      if (struct.isSetSuccessTime()) {
        oprot.writeString(struct.successTime);
      }
      if (struct.isSetSettleTime()) {
        oprot.writeString(struct.settleTime);
      }
      if (struct.isSetSettleNo()) {
        oprot.writeString(struct.settleNo);
      }
      if (struct.isSetSettleBath()) {
        oprot.writeString(struct.settleBath);
      }
      if (struct.isSetFee()) {
        oprot.writeString(struct.fee);
      }
      if (struct.isSetFeeWay()) {
        oprot.writeString(struct.feeWay);
      }
      if (struct.isSetFeeSettleCyc()) {
        oprot.writeString(struct.feeSettleCyc);
      }
      if (struct.isSetCheckBath()) {
        oprot.writeString(struct.checkBath);
      }
      if (struct.isSetTransType()) {
        oprot.writeString(struct.transType);
      }
      if (struct.isSetMerchantOrderNo()) {
        oprot.writeString(struct.merchantOrderNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SettleMerchantDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.merchantType = iprot.readString();
        struct.setMerchantTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.productCode = iprot.readString();
        struct.setProductCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.transNo = iprot.readString();
        struct.setTransNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.transNoOld = iprot.readString();
        struct.setTransNoOldIsSet(true);
      }
      if (incoming.get(6)) {
        struct.requestAmount = iprot.readString();
        struct.setRequestAmountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.successTime = iprot.readString();
        struct.setSuccessTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.settleTime = iprot.readString();
        struct.setSettleTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.settleNo = iprot.readString();
        struct.setSettleNoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.settleBath = iprot.readString();
        struct.setSettleBathIsSet(true);
      }
      if (incoming.get(11)) {
        struct.fee = iprot.readString();
        struct.setFeeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.feeWay = iprot.readString();
        struct.setFeeWayIsSet(true);
      }
      if (incoming.get(13)) {
        struct.feeSettleCyc = iprot.readString();
        struct.setFeeSettleCycIsSet(true);
      }
      if (incoming.get(14)) {
        struct.checkBath = iprot.readString();
        struct.setCheckBathIsSet(true);
      }
      if (incoming.get(15)) {
        struct.transType = iprot.readString();
        struct.setTransTypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.merchantOrderNo = iprot.readString();
        struct.setMerchantOrderNoIsSet(true);
      }
    }
  }

}

