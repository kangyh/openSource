/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-10")
public class ClearMerchantRecordService {

  public interface Iface {

    public int saveClearMerchantRecord(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) throws org.apache.thrift.TException;

    public List<com.heepay.rpc.billing.model.ClearMerchantRecordModel> queryByConditions(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) throws org.apache.thrift.TException;

    public int updateClearMerchantRecord(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) throws org.apache.thrift.TException;

    public void deleClearMerchantRecord(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) throws org.apache.thrift.TException;

    public String getClearMerchantRecordMessage(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) throws org.apache.thrift.TException;

    public void getClearMerchantRecord() throws org.apache.thrift.TException;

    public void settleDataSave(String message) throws org.apache.thrift.TException;

    public void saveClearExceptionData(String message) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void saveClearMerchantRecord(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByConditions(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateClearMerchantRecord(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleClearMerchantRecord(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getClearMerchantRecordMessage(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getClearMerchantRecord(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void settleDataSave(String message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveClearExceptionData(String message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int saveClearMerchantRecord(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) throws org.apache.thrift.TException
    {
      send_saveClearMerchantRecord(clearMerchantRecordModel);
      return recv_saveClearMerchantRecord();
    }

    public void send_saveClearMerchantRecord(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) throws org.apache.thrift.TException
    {
      saveClearMerchantRecord_args args = new saveClearMerchantRecord_args();
      args.setClearMerchantRecordModel(clearMerchantRecordModel);
      sendBase("saveClearMerchantRecord", args);
    }

    public int recv_saveClearMerchantRecord() throws org.apache.thrift.TException
    {
      saveClearMerchantRecord_result result = new saveClearMerchantRecord_result();
      receiveBase(result, "saveClearMerchantRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveClearMerchantRecord failed: unknown result");
    }

    public List<com.heepay.rpc.billing.model.ClearMerchantRecordModel> queryByConditions(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) throws org.apache.thrift.TException
    {
      send_queryByConditions(clearMerchantRecordModel);
      return recv_queryByConditions();
    }

    public void send_queryByConditions(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) throws org.apache.thrift.TException
    {
      queryByConditions_args args = new queryByConditions_args();
      args.setClearMerchantRecordModel(clearMerchantRecordModel);
      sendBase("queryByConditions", args);
    }

    public List<com.heepay.rpc.billing.model.ClearMerchantRecordModel> recv_queryByConditions() throws org.apache.thrift.TException
    {
      queryByConditions_result result = new queryByConditions_result();
      receiveBase(result, "queryByConditions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByConditions failed: unknown result");
    }

    public int updateClearMerchantRecord(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) throws org.apache.thrift.TException
    {
      send_updateClearMerchantRecord(clearMerchantRecordModel);
      return recv_updateClearMerchantRecord();
    }

    public void send_updateClearMerchantRecord(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) throws org.apache.thrift.TException
    {
      updateClearMerchantRecord_args args = new updateClearMerchantRecord_args();
      args.setClearMerchantRecordModel(clearMerchantRecordModel);
      sendBase("updateClearMerchantRecord", args);
    }

    public int recv_updateClearMerchantRecord() throws org.apache.thrift.TException
    {
      updateClearMerchantRecord_result result = new updateClearMerchantRecord_result();
      receiveBase(result, "updateClearMerchantRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateClearMerchantRecord failed: unknown result");
    }

    public void deleClearMerchantRecord(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) throws org.apache.thrift.TException
    {
      send_deleClearMerchantRecord(clearMerchantRecordModel);
      recv_deleClearMerchantRecord();
    }

    public void send_deleClearMerchantRecord(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) throws org.apache.thrift.TException
    {
      deleClearMerchantRecord_args args = new deleClearMerchantRecord_args();
      args.setClearMerchantRecordModel(clearMerchantRecordModel);
      sendBase("deleClearMerchantRecord", args);
    }

    public void recv_deleClearMerchantRecord() throws org.apache.thrift.TException
    {
      deleClearMerchantRecord_result result = new deleClearMerchantRecord_result();
      receiveBase(result, "deleClearMerchantRecord");
      return;
    }

    public String getClearMerchantRecordMessage(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) throws org.apache.thrift.TException
    {
      send_getClearMerchantRecordMessage(clearMerchantRecordModel);
      return recv_getClearMerchantRecordMessage();
    }

    public void send_getClearMerchantRecordMessage(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) throws org.apache.thrift.TException
    {
      getClearMerchantRecordMessage_args args = new getClearMerchantRecordMessage_args();
      args.setClearMerchantRecordModel(clearMerchantRecordModel);
      sendBase("getClearMerchantRecordMessage", args);
    }

    public String recv_getClearMerchantRecordMessage() throws org.apache.thrift.TException
    {
      getClearMerchantRecordMessage_result result = new getClearMerchantRecordMessage_result();
      receiveBase(result, "getClearMerchantRecordMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getClearMerchantRecordMessage failed: unknown result");
    }

    public void getClearMerchantRecord() throws org.apache.thrift.TException
    {
      send_getClearMerchantRecord();
      recv_getClearMerchantRecord();
    }

    public void send_getClearMerchantRecord() throws org.apache.thrift.TException
    {
      getClearMerchantRecord_args args = new getClearMerchantRecord_args();
      sendBase("getClearMerchantRecord", args);
    }

    public void recv_getClearMerchantRecord() throws org.apache.thrift.TException
    {
      getClearMerchantRecord_result result = new getClearMerchantRecord_result();
      receiveBase(result, "getClearMerchantRecord");
      return;
    }

    public void settleDataSave(String message) throws org.apache.thrift.TException
    {
      send_settleDataSave(message);
      recv_settleDataSave();
    }

    public void send_settleDataSave(String message) throws org.apache.thrift.TException
    {
      settleDataSave_args args = new settleDataSave_args();
      args.setMessage(message);
      sendBase("settleDataSave", args);
    }

    public void recv_settleDataSave() throws org.apache.thrift.TException
    {
      settleDataSave_result result = new settleDataSave_result();
      receiveBase(result, "settleDataSave");
      return;
    }

    public void saveClearExceptionData(String message) throws org.apache.thrift.TException
    {
      send_saveClearExceptionData(message);
      recv_saveClearExceptionData();
    }

    public void send_saveClearExceptionData(String message) throws org.apache.thrift.TException
    {
      saveClearExceptionData_args args = new saveClearExceptionData_args();
      args.setMessage(message);
      sendBase("saveClearExceptionData", args);
    }

    public void recv_saveClearExceptionData() throws org.apache.thrift.TException
    {
      saveClearExceptionData_result result = new saveClearExceptionData_result();
      receiveBase(result, "saveClearExceptionData");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveClearMerchantRecord(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveClearMerchantRecord_call method_call = new saveClearMerchantRecord_call(clearMerchantRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveClearMerchantRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel;
      public saveClearMerchantRecord_call(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clearMerchantRecordModel = clearMerchantRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveClearMerchantRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveClearMerchantRecord_args args = new saveClearMerchantRecord_args();
        args.setClearMerchantRecordModel(clearMerchantRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveClearMerchantRecord();
      }
    }

    public void queryByConditions(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByConditions_call method_call = new queryByConditions_call(clearMerchantRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByConditions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel;
      public queryByConditions_call(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clearMerchantRecordModel = clearMerchantRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByConditions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByConditions_args args = new queryByConditions_args();
        args.setClearMerchantRecordModel(clearMerchantRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.heepay.rpc.billing.model.ClearMerchantRecordModel> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByConditions();
      }
    }

    public void updateClearMerchantRecord(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateClearMerchantRecord_call method_call = new updateClearMerchantRecord_call(clearMerchantRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateClearMerchantRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel;
      public updateClearMerchantRecord_call(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clearMerchantRecordModel = clearMerchantRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateClearMerchantRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateClearMerchantRecord_args args = new updateClearMerchantRecord_args();
        args.setClearMerchantRecordModel(clearMerchantRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateClearMerchantRecord();
      }
    }

    public void deleClearMerchantRecord(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleClearMerchantRecord_call method_call = new deleClearMerchantRecord_call(clearMerchantRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleClearMerchantRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel;
      public deleClearMerchantRecord_call(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clearMerchantRecordModel = clearMerchantRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleClearMerchantRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleClearMerchantRecord_args args = new deleClearMerchantRecord_args();
        args.setClearMerchantRecordModel(clearMerchantRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleClearMerchantRecord();
      }
    }

    public void getClearMerchantRecordMessage(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClearMerchantRecordMessage_call method_call = new getClearMerchantRecordMessage_call(clearMerchantRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClearMerchantRecordMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel;
      public getClearMerchantRecordMessage_call(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clearMerchantRecordModel = clearMerchantRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClearMerchantRecordMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClearMerchantRecordMessage_args args = new getClearMerchantRecordMessage_args();
        args.setClearMerchantRecordModel(clearMerchantRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClearMerchantRecordMessage();
      }
    }

    public void getClearMerchantRecord(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClearMerchantRecord_call method_call = new getClearMerchantRecord_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClearMerchantRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getClearMerchantRecord_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClearMerchantRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClearMerchantRecord_args args = new getClearMerchantRecord_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_getClearMerchantRecord();
      }
    }

    public void settleDataSave(String message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      settleDataSave_call method_call = new settleDataSave_call(message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class settleDataSave_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String message;
      public settleDataSave_call(String message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.message = message;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("settleDataSave", org.apache.thrift.protocol.TMessageType.CALL, 0));
        settleDataSave_args args = new settleDataSave_args();
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_settleDataSave();
      }
    }

    public void saveClearExceptionData(String message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveClearExceptionData_call method_call = new saveClearExceptionData_call(message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveClearExceptionData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String message;
      public saveClearExceptionData_call(String message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.message = message;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveClearExceptionData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveClearExceptionData_args args = new saveClearExceptionData_args();
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveClearExceptionData();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("saveClearMerchantRecord", new saveClearMerchantRecord());
      processMap.put("queryByConditions", new queryByConditions());
      processMap.put("updateClearMerchantRecord", new updateClearMerchantRecord());
      processMap.put("deleClearMerchantRecord", new deleClearMerchantRecord());
      processMap.put("getClearMerchantRecordMessage", new getClearMerchantRecordMessage());
      processMap.put("getClearMerchantRecord", new getClearMerchantRecord());
      processMap.put("settleDataSave", new settleDataSave());
      processMap.put("saveClearExceptionData", new saveClearExceptionData());
      return processMap;
    }

    public static class saveClearMerchantRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveClearMerchantRecord_args> {
      public saveClearMerchantRecord() {
        super("saveClearMerchantRecord");
      }

      public saveClearMerchantRecord_args getEmptyArgsInstance() {
        return new saveClearMerchantRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveClearMerchantRecord_result getResult(I iface, saveClearMerchantRecord_args args) throws org.apache.thrift.TException {
        saveClearMerchantRecord_result result = new saveClearMerchantRecord_result();
        result.success = iface.saveClearMerchantRecord(args.clearMerchantRecordModel);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryByConditions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByConditions_args> {
      public queryByConditions() {
        super("queryByConditions");
      }

      public queryByConditions_args getEmptyArgsInstance() {
        return new queryByConditions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByConditions_result getResult(I iface, queryByConditions_args args) throws org.apache.thrift.TException {
        queryByConditions_result result = new queryByConditions_result();
        result.success = iface.queryByConditions(args.clearMerchantRecordModel);
        return result;
      }
    }

    public static class updateClearMerchantRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateClearMerchantRecord_args> {
      public updateClearMerchantRecord() {
        super("updateClearMerchantRecord");
      }

      public updateClearMerchantRecord_args getEmptyArgsInstance() {
        return new updateClearMerchantRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateClearMerchantRecord_result getResult(I iface, updateClearMerchantRecord_args args) throws org.apache.thrift.TException {
        updateClearMerchantRecord_result result = new updateClearMerchantRecord_result();
        result.success = iface.updateClearMerchantRecord(args.clearMerchantRecordModel);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleClearMerchantRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleClearMerchantRecord_args> {
      public deleClearMerchantRecord() {
        super("deleClearMerchantRecord");
      }

      public deleClearMerchantRecord_args getEmptyArgsInstance() {
        return new deleClearMerchantRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleClearMerchantRecord_result getResult(I iface, deleClearMerchantRecord_args args) throws org.apache.thrift.TException {
        deleClearMerchantRecord_result result = new deleClearMerchantRecord_result();
        iface.deleClearMerchantRecord(args.clearMerchantRecordModel);
        return result;
      }
    }

    public static class getClearMerchantRecordMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClearMerchantRecordMessage_args> {
      public getClearMerchantRecordMessage() {
        super("getClearMerchantRecordMessage");
      }

      public getClearMerchantRecordMessage_args getEmptyArgsInstance() {
        return new getClearMerchantRecordMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getClearMerchantRecordMessage_result getResult(I iface, getClearMerchantRecordMessage_args args) throws org.apache.thrift.TException {
        getClearMerchantRecordMessage_result result = new getClearMerchantRecordMessage_result();
        result.success = iface.getClearMerchantRecordMessage(args.clearMerchantRecordModel);
        return result;
      }
    }

    public static class getClearMerchantRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClearMerchantRecord_args> {
      public getClearMerchantRecord() {
        super("getClearMerchantRecord");
      }

      public getClearMerchantRecord_args getEmptyArgsInstance() {
        return new getClearMerchantRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getClearMerchantRecord_result getResult(I iface, getClearMerchantRecord_args args) throws org.apache.thrift.TException {
        getClearMerchantRecord_result result = new getClearMerchantRecord_result();
        iface.getClearMerchantRecord();
        return result;
      }
    }

    public static class settleDataSave<I extends Iface> extends org.apache.thrift.ProcessFunction<I, settleDataSave_args> {
      public settleDataSave() {
        super("settleDataSave");
      }

      public settleDataSave_args getEmptyArgsInstance() {
        return new settleDataSave_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public settleDataSave_result getResult(I iface, settleDataSave_args args) throws org.apache.thrift.TException {
        settleDataSave_result result = new settleDataSave_result();
        iface.settleDataSave(args.message);
        return result;
      }
    }

    public static class saveClearExceptionData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveClearExceptionData_args> {
      public saveClearExceptionData() {
        super("saveClearExceptionData");
      }

      public saveClearExceptionData_args getEmptyArgsInstance() {
        return new saveClearExceptionData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveClearExceptionData_result getResult(I iface, saveClearExceptionData_args args) throws org.apache.thrift.TException {
        saveClearExceptionData_result result = new saveClearExceptionData_result();
        iface.saveClearExceptionData(args.message);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("saveClearMerchantRecord", new saveClearMerchantRecord());
      processMap.put("queryByConditions", new queryByConditions());
      processMap.put("updateClearMerchantRecord", new updateClearMerchantRecord());
      processMap.put("deleClearMerchantRecord", new deleClearMerchantRecord());
      processMap.put("getClearMerchantRecordMessage", new getClearMerchantRecordMessage());
      processMap.put("getClearMerchantRecord", new getClearMerchantRecord());
      processMap.put("settleDataSave", new settleDataSave());
      processMap.put("saveClearExceptionData", new saveClearExceptionData());
      return processMap;
    }

    public static class saveClearMerchantRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveClearMerchantRecord_args, Integer> {
      public saveClearMerchantRecord() {
        super("saveClearMerchantRecord");
      }

      public saveClearMerchantRecord_args getEmptyArgsInstance() {
        return new saveClearMerchantRecord_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveClearMerchantRecord_result result = new saveClearMerchantRecord_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveClearMerchantRecord_result result = new saveClearMerchantRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveClearMerchantRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveClearMerchantRecord(args.clearMerchantRecordModel,resultHandler);
      }
    }

    public static class queryByConditions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByConditions_args, List<com.heepay.rpc.billing.model.ClearMerchantRecordModel>> {
      public queryByConditions() {
        super("queryByConditions");
      }

      public queryByConditions_args getEmptyArgsInstance() {
        return new queryByConditions_args();
      }

      public AsyncMethodCallback<List<com.heepay.rpc.billing.model.ClearMerchantRecordModel>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.heepay.rpc.billing.model.ClearMerchantRecordModel>>() { 
          public void onComplete(List<com.heepay.rpc.billing.model.ClearMerchantRecordModel> o) {
            queryByConditions_result result = new queryByConditions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByConditions_result result = new queryByConditions_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByConditions_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.heepay.rpc.billing.model.ClearMerchantRecordModel>> resultHandler) throws TException {
        iface.queryByConditions(args.clearMerchantRecordModel,resultHandler);
      }
    }

    public static class updateClearMerchantRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateClearMerchantRecord_args, Integer> {
      public updateClearMerchantRecord() {
        super("updateClearMerchantRecord");
      }

      public updateClearMerchantRecord_args getEmptyArgsInstance() {
        return new updateClearMerchantRecord_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateClearMerchantRecord_result result = new updateClearMerchantRecord_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateClearMerchantRecord_result result = new updateClearMerchantRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateClearMerchantRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateClearMerchantRecord(args.clearMerchantRecordModel,resultHandler);
      }
    }

    public static class deleClearMerchantRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleClearMerchantRecord_args, Void> {
      public deleClearMerchantRecord() {
        super("deleClearMerchantRecord");
      }

      public deleClearMerchantRecord_args getEmptyArgsInstance() {
        return new deleClearMerchantRecord_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleClearMerchantRecord_result result = new deleClearMerchantRecord_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleClearMerchantRecord_result result = new deleClearMerchantRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleClearMerchantRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleClearMerchantRecord(args.clearMerchantRecordModel,resultHandler);
      }
    }

    public static class getClearMerchantRecordMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getClearMerchantRecordMessage_args, String> {
      public getClearMerchantRecordMessage() {
        super("getClearMerchantRecordMessage");
      }

      public getClearMerchantRecordMessage_args getEmptyArgsInstance() {
        return new getClearMerchantRecordMessage_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getClearMerchantRecordMessage_result result = new getClearMerchantRecordMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getClearMerchantRecordMessage_result result = new getClearMerchantRecordMessage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getClearMerchantRecordMessage_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getClearMerchantRecordMessage(args.clearMerchantRecordModel,resultHandler);
      }
    }

    public static class getClearMerchantRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getClearMerchantRecord_args, Void> {
      public getClearMerchantRecord() {
        super("getClearMerchantRecord");
      }

      public getClearMerchantRecord_args getEmptyArgsInstance() {
        return new getClearMerchantRecord_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            getClearMerchantRecord_result result = new getClearMerchantRecord_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getClearMerchantRecord_result result = new getClearMerchantRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getClearMerchantRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.getClearMerchantRecord(resultHandler);
      }
    }

    public static class settleDataSave<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, settleDataSave_args, Void> {
      public settleDataSave() {
        super("settleDataSave");
      }

      public settleDataSave_args getEmptyArgsInstance() {
        return new settleDataSave_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            settleDataSave_result result = new settleDataSave_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            settleDataSave_result result = new settleDataSave_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, settleDataSave_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.settleDataSave(args.message,resultHandler);
      }
    }

    public static class saveClearExceptionData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveClearExceptionData_args, Void> {
      public saveClearExceptionData() {
        super("saveClearExceptionData");
      }

      public saveClearExceptionData_args getEmptyArgsInstance() {
        return new saveClearExceptionData_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveClearExceptionData_result result = new saveClearExceptionData_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveClearExceptionData_result result = new saveClearExceptionData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveClearExceptionData_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.saveClearExceptionData(args.message,resultHandler);
      }
    }

  }

  public static class saveClearMerchantRecord_args implements org.apache.thrift.TBase<saveClearMerchantRecord_args, saveClearMerchantRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveClearMerchantRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveClearMerchantRecord_args");

    private static final org.apache.thrift.protocol.TField CLEAR_MERCHANT_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("clearMerchantRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveClearMerchantRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveClearMerchantRecord_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLEAR_MERCHANT_RECORD_MODEL((short)1, "clearMerchantRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLEAR_MERCHANT_RECORD_MODEL
            return CLEAR_MERCHANT_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLEAR_MERCHANT_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("clearMerchantRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.ClearMerchantRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveClearMerchantRecord_args.class, metaDataMap);
    }

    public saveClearMerchantRecord_args() {
    }

    public saveClearMerchantRecord_args(
      com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel)
    {
      this();
      this.clearMerchantRecordModel = clearMerchantRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveClearMerchantRecord_args(saveClearMerchantRecord_args other) {
      if (other.isSetClearMerchantRecordModel()) {
        this.clearMerchantRecordModel = new com.heepay.rpc.billing.model.ClearMerchantRecordModel(other.clearMerchantRecordModel);
      }
    }

    public saveClearMerchantRecord_args deepCopy() {
      return new saveClearMerchantRecord_args(this);
    }

    @Override
    public void clear() {
      this.clearMerchantRecordModel = null;
    }

    public com.heepay.rpc.billing.model.ClearMerchantRecordModel getClearMerchantRecordModel() {
      return this.clearMerchantRecordModel;
    }

    public saveClearMerchantRecord_args setClearMerchantRecordModel(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) {
      this.clearMerchantRecordModel = clearMerchantRecordModel;
      return this;
    }

    public void unsetClearMerchantRecordModel() {
      this.clearMerchantRecordModel = null;
    }

    /** Returns true if field clearMerchantRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetClearMerchantRecordModel() {
      return this.clearMerchantRecordModel != null;
    }

    public void setClearMerchantRecordModelIsSet(boolean value) {
      if (!value) {
        this.clearMerchantRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLEAR_MERCHANT_RECORD_MODEL:
        if (value == null) {
          unsetClearMerchantRecordModel();
        } else {
          setClearMerchantRecordModel((com.heepay.rpc.billing.model.ClearMerchantRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLEAR_MERCHANT_RECORD_MODEL:
        return getClearMerchantRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLEAR_MERCHANT_RECORD_MODEL:
        return isSetClearMerchantRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveClearMerchantRecord_args)
        return this.equals((saveClearMerchantRecord_args)that);
      return false;
    }

    public boolean equals(saveClearMerchantRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_clearMerchantRecordModel = true && this.isSetClearMerchantRecordModel();
      boolean that_present_clearMerchantRecordModel = true && that.isSetClearMerchantRecordModel();
      if (this_present_clearMerchantRecordModel || that_present_clearMerchantRecordModel) {
        if (!(this_present_clearMerchantRecordModel && that_present_clearMerchantRecordModel))
          return false;
        if (!this.clearMerchantRecordModel.equals(that.clearMerchantRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clearMerchantRecordModel = true && (isSetClearMerchantRecordModel());
      list.add(present_clearMerchantRecordModel);
      if (present_clearMerchantRecordModel)
        list.add(clearMerchantRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveClearMerchantRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClearMerchantRecordModel()).compareTo(other.isSetClearMerchantRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClearMerchantRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearMerchantRecordModel, other.clearMerchantRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveClearMerchantRecord_args(");
      boolean first = true;

      sb.append("clearMerchantRecordModel:");
      if (this.clearMerchantRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.clearMerchantRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (clearMerchantRecordModel != null) {
        clearMerchantRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveClearMerchantRecord_argsStandardSchemeFactory implements SchemeFactory {
      public saveClearMerchantRecord_argsStandardScheme getScheme() {
        return new saveClearMerchantRecord_argsStandardScheme();
      }
    }

    private static class saveClearMerchantRecord_argsStandardScheme extends StandardScheme<saveClearMerchantRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLEAR_MERCHANT_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clearMerchantRecordModel = new com.heepay.rpc.billing.model.ClearMerchantRecordModel();
                struct.clearMerchantRecordModel.read(iprot);
                struct.setClearMerchantRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clearMerchantRecordModel != null) {
          oprot.writeFieldBegin(CLEAR_MERCHANT_RECORD_MODEL_FIELD_DESC);
          struct.clearMerchantRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveClearMerchantRecord_argsTupleSchemeFactory implements SchemeFactory {
      public saveClearMerchantRecord_argsTupleScheme getScheme() {
        return new saveClearMerchantRecord_argsTupleScheme();
      }
    }

    private static class saveClearMerchantRecord_argsTupleScheme extends TupleScheme<saveClearMerchantRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClearMerchantRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClearMerchantRecordModel()) {
          struct.clearMerchantRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clearMerchantRecordModel = new com.heepay.rpc.billing.model.ClearMerchantRecordModel();
          struct.clearMerchantRecordModel.read(iprot);
          struct.setClearMerchantRecordModelIsSet(true);
        }
      }
    }

  }

  public static class saveClearMerchantRecord_result implements org.apache.thrift.TBase<saveClearMerchantRecord_result, saveClearMerchantRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveClearMerchantRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveClearMerchantRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveClearMerchantRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveClearMerchantRecord_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveClearMerchantRecord_result.class, metaDataMap);
    }

    public saveClearMerchantRecord_result() {
    }

    public saveClearMerchantRecord_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveClearMerchantRecord_result(saveClearMerchantRecord_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveClearMerchantRecord_result deepCopy() {
      return new saveClearMerchantRecord_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveClearMerchantRecord_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveClearMerchantRecord_result)
        return this.equals((saveClearMerchantRecord_result)that);
      return false;
    }

    public boolean equals(saveClearMerchantRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveClearMerchantRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveClearMerchantRecord_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveClearMerchantRecord_resultStandardSchemeFactory implements SchemeFactory {
      public saveClearMerchantRecord_resultStandardScheme getScheme() {
        return new saveClearMerchantRecord_resultStandardScheme();
      }
    }

    private static class saveClearMerchantRecord_resultStandardScheme extends StandardScheme<saveClearMerchantRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveClearMerchantRecord_resultTupleSchemeFactory implements SchemeFactory {
      public saveClearMerchantRecord_resultTupleScheme getScheme() {
        return new saveClearMerchantRecord_resultTupleScheme();
      }
    }

    private static class saveClearMerchantRecord_resultTupleScheme extends TupleScheme<saveClearMerchantRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryByConditions_args implements org.apache.thrift.TBase<queryByConditions_args, queryByConditions_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByConditions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByConditions_args");

    private static final org.apache.thrift.protocol.TField CLEAR_MERCHANT_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("clearMerchantRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByConditions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByConditions_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLEAR_MERCHANT_RECORD_MODEL((short)1, "clearMerchantRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLEAR_MERCHANT_RECORD_MODEL
            return CLEAR_MERCHANT_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLEAR_MERCHANT_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("clearMerchantRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.ClearMerchantRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByConditions_args.class, metaDataMap);
    }

    public queryByConditions_args() {
    }

    public queryByConditions_args(
      com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel)
    {
      this();
      this.clearMerchantRecordModel = clearMerchantRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByConditions_args(queryByConditions_args other) {
      if (other.isSetClearMerchantRecordModel()) {
        this.clearMerchantRecordModel = new com.heepay.rpc.billing.model.ClearMerchantRecordModel(other.clearMerchantRecordModel);
      }
    }

    public queryByConditions_args deepCopy() {
      return new queryByConditions_args(this);
    }

    @Override
    public void clear() {
      this.clearMerchantRecordModel = null;
    }

    public com.heepay.rpc.billing.model.ClearMerchantRecordModel getClearMerchantRecordModel() {
      return this.clearMerchantRecordModel;
    }

    public queryByConditions_args setClearMerchantRecordModel(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) {
      this.clearMerchantRecordModel = clearMerchantRecordModel;
      return this;
    }

    public void unsetClearMerchantRecordModel() {
      this.clearMerchantRecordModel = null;
    }

    /** Returns true if field clearMerchantRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetClearMerchantRecordModel() {
      return this.clearMerchantRecordModel != null;
    }

    public void setClearMerchantRecordModelIsSet(boolean value) {
      if (!value) {
        this.clearMerchantRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLEAR_MERCHANT_RECORD_MODEL:
        if (value == null) {
          unsetClearMerchantRecordModel();
        } else {
          setClearMerchantRecordModel((com.heepay.rpc.billing.model.ClearMerchantRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLEAR_MERCHANT_RECORD_MODEL:
        return getClearMerchantRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLEAR_MERCHANT_RECORD_MODEL:
        return isSetClearMerchantRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByConditions_args)
        return this.equals((queryByConditions_args)that);
      return false;
    }

    public boolean equals(queryByConditions_args that) {
      if (that == null)
        return false;

      boolean this_present_clearMerchantRecordModel = true && this.isSetClearMerchantRecordModel();
      boolean that_present_clearMerchantRecordModel = true && that.isSetClearMerchantRecordModel();
      if (this_present_clearMerchantRecordModel || that_present_clearMerchantRecordModel) {
        if (!(this_present_clearMerchantRecordModel && that_present_clearMerchantRecordModel))
          return false;
        if (!this.clearMerchantRecordModel.equals(that.clearMerchantRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clearMerchantRecordModel = true && (isSetClearMerchantRecordModel());
      list.add(present_clearMerchantRecordModel);
      if (present_clearMerchantRecordModel)
        list.add(clearMerchantRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryByConditions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClearMerchantRecordModel()).compareTo(other.isSetClearMerchantRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClearMerchantRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearMerchantRecordModel, other.clearMerchantRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByConditions_args(");
      boolean first = true;

      sb.append("clearMerchantRecordModel:");
      if (this.clearMerchantRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.clearMerchantRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (clearMerchantRecordModel != null) {
        clearMerchantRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByConditions_argsStandardSchemeFactory implements SchemeFactory {
      public queryByConditions_argsStandardScheme getScheme() {
        return new queryByConditions_argsStandardScheme();
      }
    }

    private static class queryByConditions_argsStandardScheme extends StandardScheme<queryByConditions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByConditions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLEAR_MERCHANT_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clearMerchantRecordModel = new com.heepay.rpc.billing.model.ClearMerchantRecordModel();
                struct.clearMerchantRecordModel.read(iprot);
                struct.setClearMerchantRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByConditions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clearMerchantRecordModel != null) {
          oprot.writeFieldBegin(CLEAR_MERCHANT_RECORD_MODEL_FIELD_DESC);
          struct.clearMerchantRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByConditions_argsTupleSchemeFactory implements SchemeFactory {
      public queryByConditions_argsTupleScheme getScheme() {
        return new queryByConditions_argsTupleScheme();
      }
    }

    private static class queryByConditions_argsTupleScheme extends TupleScheme<queryByConditions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByConditions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClearMerchantRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClearMerchantRecordModel()) {
          struct.clearMerchantRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByConditions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clearMerchantRecordModel = new com.heepay.rpc.billing.model.ClearMerchantRecordModel();
          struct.clearMerchantRecordModel.read(iprot);
          struct.setClearMerchantRecordModelIsSet(true);
        }
      }
    }

  }

  public static class queryByConditions_result implements org.apache.thrift.TBase<queryByConditions_result, queryByConditions_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByConditions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByConditions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByConditions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByConditions_resultTupleSchemeFactory());
    }

    public List<com.heepay.rpc.billing.model.ClearMerchantRecordModel> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.ClearMerchantRecordModel.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByConditions_result.class, metaDataMap);
    }

    public queryByConditions_result() {
    }

    public queryByConditions_result(
      List<com.heepay.rpc.billing.model.ClearMerchantRecordModel> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByConditions_result(queryByConditions_result other) {
      if (other.isSetSuccess()) {
        List<com.heepay.rpc.billing.model.ClearMerchantRecordModel> __this__success = new ArrayList<com.heepay.rpc.billing.model.ClearMerchantRecordModel>(other.success.size());
        for (com.heepay.rpc.billing.model.ClearMerchantRecordModel other_element : other.success) {
          __this__success.add(new com.heepay.rpc.billing.model.ClearMerchantRecordModel(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryByConditions_result deepCopy() {
      return new queryByConditions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.heepay.rpc.billing.model.ClearMerchantRecordModel> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.heepay.rpc.billing.model.ClearMerchantRecordModel elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.heepay.rpc.billing.model.ClearMerchantRecordModel>();
      }
      this.success.add(elem);
    }

    public List<com.heepay.rpc.billing.model.ClearMerchantRecordModel> getSuccess() {
      return this.success;
    }

    public queryByConditions_result setSuccess(List<com.heepay.rpc.billing.model.ClearMerchantRecordModel> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.heepay.rpc.billing.model.ClearMerchantRecordModel>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByConditions_result)
        return this.equals((queryByConditions_result)that);
      return false;
    }

    public boolean equals(queryByConditions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryByConditions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByConditions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByConditions_resultStandardSchemeFactory implements SchemeFactory {
      public queryByConditions_resultStandardScheme getScheme() {
        return new queryByConditions_resultStandardScheme();
      }
    }

    private static class queryByConditions_resultStandardScheme extends StandardScheme<queryByConditions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByConditions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.heepay.rpc.billing.model.ClearMerchantRecordModel>(_list0.size);
                  com.heepay.rpc.billing.model.ClearMerchantRecordModel _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.heepay.rpc.billing.model.ClearMerchantRecordModel();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByConditions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.heepay.rpc.billing.model.ClearMerchantRecordModel _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByConditions_resultTupleSchemeFactory implements SchemeFactory {
      public queryByConditions_resultTupleScheme getScheme() {
        return new queryByConditions_resultTupleScheme();
      }
    }

    private static class queryByConditions_resultTupleScheme extends TupleScheme<queryByConditions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByConditions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.heepay.rpc.billing.model.ClearMerchantRecordModel _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByConditions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.heepay.rpc.billing.model.ClearMerchantRecordModel>(_list5.size);
            com.heepay.rpc.billing.model.ClearMerchantRecordModel _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.heepay.rpc.billing.model.ClearMerchantRecordModel();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateClearMerchantRecord_args implements org.apache.thrift.TBase<updateClearMerchantRecord_args, updateClearMerchantRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateClearMerchantRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateClearMerchantRecord_args");

    private static final org.apache.thrift.protocol.TField CLEAR_MERCHANT_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("clearMerchantRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateClearMerchantRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateClearMerchantRecord_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLEAR_MERCHANT_RECORD_MODEL((short)1, "clearMerchantRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLEAR_MERCHANT_RECORD_MODEL
            return CLEAR_MERCHANT_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLEAR_MERCHANT_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("clearMerchantRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.ClearMerchantRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateClearMerchantRecord_args.class, metaDataMap);
    }

    public updateClearMerchantRecord_args() {
    }

    public updateClearMerchantRecord_args(
      com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel)
    {
      this();
      this.clearMerchantRecordModel = clearMerchantRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateClearMerchantRecord_args(updateClearMerchantRecord_args other) {
      if (other.isSetClearMerchantRecordModel()) {
        this.clearMerchantRecordModel = new com.heepay.rpc.billing.model.ClearMerchantRecordModel(other.clearMerchantRecordModel);
      }
    }

    public updateClearMerchantRecord_args deepCopy() {
      return new updateClearMerchantRecord_args(this);
    }

    @Override
    public void clear() {
      this.clearMerchantRecordModel = null;
    }

    public com.heepay.rpc.billing.model.ClearMerchantRecordModel getClearMerchantRecordModel() {
      return this.clearMerchantRecordModel;
    }

    public updateClearMerchantRecord_args setClearMerchantRecordModel(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) {
      this.clearMerchantRecordModel = clearMerchantRecordModel;
      return this;
    }

    public void unsetClearMerchantRecordModel() {
      this.clearMerchantRecordModel = null;
    }

    /** Returns true if field clearMerchantRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetClearMerchantRecordModel() {
      return this.clearMerchantRecordModel != null;
    }

    public void setClearMerchantRecordModelIsSet(boolean value) {
      if (!value) {
        this.clearMerchantRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLEAR_MERCHANT_RECORD_MODEL:
        if (value == null) {
          unsetClearMerchantRecordModel();
        } else {
          setClearMerchantRecordModel((com.heepay.rpc.billing.model.ClearMerchantRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLEAR_MERCHANT_RECORD_MODEL:
        return getClearMerchantRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLEAR_MERCHANT_RECORD_MODEL:
        return isSetClearMerchantRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateClearMerchantRecord_args)
        return this.equals((updateClearMerchantRecord_args)that);
      return false;
    }

    public boolean equals(updateClearMerchantRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_clearMerchantRecordModel = true && this.isSetClearMerchantRecordModel();
      boolean that_present_clearMerchantRecordModel = true && that.isSetClearMerchantRecordModel();
      if (this_present_clearMerchantRecordModel || that_present_clearMerchantRecordModel) {
        if (!(this_present_clearMerchantRecordModel && that_present_clearMerchantRecordModel))
          return false;
        if (!this.clearMerchantRecordModel.equals(that.clearMerchantRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clearMerchantRecordModel = true && (isSetClearMerchantRecordModel());
      list.add(present_clearMerchantRecordModel);
      if (present_clearMerchantRecordModel)
        list.add(clearMerchantRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateClearMerchantRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClearMerchantRecordModel()).compareTo(other.isSetClearMerchantRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClearMerchantRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearMerchantRecordModel, other.clearMerchantRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateClearMerchantRecord_args(");
      boolean first = true;

      sb.append("clearMerchantRecordModel:");
      if (this.clearMerchantRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.clearMerchantRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (clearMerchantRecordModel != null) {
        clearMerchantRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateClearMerchantRecord_argsStandardSchemeFactory implements SchemeFactory {
      public updateClearMerchantRecord_argsStandardScheme getScheme() {
        return new updateClearMerchantRecord_argsStandardScheme();
      }
    }

    private static class updateClearMerchantRecord_argsStandardScheme extends StandardScheme<updateClearMerchantRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLEAR_MERCHANT_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clearMerchantRecordModel = new com.heepay.rpc.billing.model.ClearMerchantRecordModel();
                struct.clearMerchantRecordModel.read(iprot);
                struct.setClearMerchantRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clearMerchantRecordModel != null) {
          oprot.writeFieldBegin(CLEAR_MERCHANT_RECORD_MODEL_FIELD_DESC);
          struct.clearMerchantRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateClearMerchantRecord_argsTupleSchemeFactory implements SchemeFactory {
      public updateClearMerchantRecord_argsTupleScheme getScheme() {
        return new updateClearMerchantRecord_argsTupleScheme();
      }
    }

    private static class updateClearMerchantRecord_argsTupleScheme extends TupleScheme<updateClearMerchantRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClearMerchantRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClearMerchantRecordModel()) {
          struct.clearMerchantRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clearMerchantRecordModel = new com.heepay.rpc.billing.model.ClearMerchantRecordModel();
          struct.clearMerchantRecordModel.read(iprot);
          struct.setClearMerchantRecordModelIsSet(true);
        }
      }
    }

  }

  public static class updateClearMerchantRecord_result implements org.apache.thrift.TBase<updateClearMerchantRecord_result, updateClearMerchantRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateClearMerchantRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateClearMerchantRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateClearMerchantRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateClearMerchantRecord_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateClearMerchantRecord_result.class, metaDataMap);
    }

    public updateClearMerchantRecord_result() {
    }

    public updateClearMerchantRecord_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateClearMerchantRecord_result(updateClearMerchantRecord_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateClearMerchantRecord_result deepCopy() {
      return new updateClearMerchantRecord_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateClearMerchantRecord_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateClearMerchantRecord_result)
        return this.equals((updateClearMerchantRecord_result)that);
      return false;
    }

    public boolean equals(updateClearMerchantRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateClearMerchantRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateClearMerchantRecord_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateClearMerchantRecord_resultStandardSchemeFactory implements SchemeFactory {
      public updateClearMerchantRecord_resultStandardScheme getScheme() {
        return new updateClearMerchantRecord_resultStandardScheme();
      }
    }

    private static class updateClearMerchantRecord_resultStandardScheme extends StandardScheme<updateClearMerchantRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateClearMerchantRecord_resultTupleSchemeFactory implements SchemeFactory {
      public updateClearMerchantRecord_resultTupleScheme getScheme() {
        return new updateClearMerchantRecord_resultTupleScheme();
      }
    }

    private static class updateClearMerchantRecord_resultTupleScheme extends TupleScheme<updateClearMerchantRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleClearMerchantRecord_args implements org.apache.thrift.TBase<deleClearMerchantRecord_args, deleClearMerchantRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleClearMerchantRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleClearMerchantRecord_args");

    private static final org.apache.thrift.protocol.TField CLEAR_MERCHANT_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("clearMerchantRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleClearMerchantRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleClearMerchantRecord_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLEAR_MERCHANT_RECORD_MODEL((short)1, "clearMerchantRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLEAR_MERCHANT_RECORD_MODEL
            return CLEAR_MERCHANT_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLEAR_MERCHANT_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("clearMerchantRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.ClearMerchantRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleClearMerchantRecord_args.class, metaDataMap);
    }

    public deleClearMerchantRecord_args() {
    }

    public deleClearMerchantRecord_args(
      com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel)
    {
      this();
      this.clearMerchantRecordModel = clearMerchantRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleClearMerchantRecord_args(deleClearMerchantRecord_args other) {
      if (other.isSetClearMerchantRecordModel()) {
        this.clearMerchantRecordModel = new com.heepay.rpc.billing.model.ClearMerchantRecordModel(other.clearMerchantRecordModel);
      }
    }

    public deleClearMerchantRecord_args deepCopy() {
      return new deleClearMerchantRecord_args(this);
    }

    @Override
    public void clear() {
      this.clearMerchantRecordModel = null;
    }

    public com.heepay.rpc.billing.model.ClearMerchantRecordModel getClearMerchantRecordModel() {
      return this.clearMerchantRecordModel;
    }

    public deleClearMerchantRecord_args setClearMerchantRecordModel(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) {
      this.clearMerchantRecordModel = clearMerchantRecordModel;
      return this;
    }

    public void unsetClearMerchantRecordModel() {
      this.clearMerchantRecordModel = null;
    }

    /** Returns true if field clearMerchantRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetClearMerchantRecordModel() {
      return this.clearMerchantRecordModel != null;
    }

    public void setClearMerchantRecordModelIsSet(boolean value) {
      if (!value) {
        this.clearMerchantRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLEAR_MERCHANT_RECORD_MODEL:
        if (value == null) {
          unsetClearMerchantRecordModel();
        } else {
          setClearMerchantRecordModel((com.heepay.rpc.billing.model.ClearMerchantRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLEAR_MERCHANT_RECORD_MODEL:
        return getClearMerchantRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLEAR_MERCHANT_RECORD_MODEL:
        return isSetClearMerchantRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleClearMerchantRecord_args)
        return this.equals((deleClearMerchantRecord_args)that);
      return false;
    }

    public boolean equals(deleClearMerchantRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_clearMerchantRecordModel = true && this.isSetClearMerchantRecordModel();
      boolean that_present_clearMerchantRecordModel = true && that.isSetClearMerchantRecordModel();
      if (this_present_clearMerchantRecordModel || that_present_clearMerchantRecordModel) {
        if (!(this_present_clearMerchantRecordModel && that_present_clearMerchantRecordModel))
          return false;
        if (!this.clearMerchantRecordModel.equals(that.clearMerchantRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clearMerchantRecordModel = true && (isSetClearMerchantRecordModel());
      list.add(present_clearMerchantRecordModel);
      if (present_clearMerchantRecordModel)
        list.add(clearMerchantRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleClearMerchantRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClearMerchantRecordModel()).compareTo(other.isSetClearMerchantRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClearMerchantRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearMerchantRecordModel, other.clearMerchantRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleClearMerchantRecord_args(");
      boolean first = true;

      sb.append("clearMerchantRecordModel:");
      if (this.clearMerchantRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.clearMerchantRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (clearMerchantRecordModel != null) {
        clearMerchantRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleClearMerchantRecord_argsStandardSchemeFactory implements SchemeFactory {
      public deleClearMerchantRecord_argsStandardScheme getScheme() {
        return new deleClearMerchantRecord_argsStandardScheme();
      }
    }

    private static class deleClearMerchantRecord_argsStandardScheme extends StandardScheme<deleClearMerchantRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLEAR_MERCHANT_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clearMerchantRecordModel = new com.heepay.rpc.billing.model.ClearMerchantRecordModel();
                struct.clearMerchantRecordModel.read(iprot);
                struct.setClearMerchantRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clearMerchantRecordModel != null) {
          oprot.writeFieldBegin(CLEAR_MERCHANT_RECORD_MODEL_FIELD_DESC);
          struct.clearMerchantRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleClearMerchantRecord_argsTupleSchemeFactory implements SchemeFactory {
      public deleClearMerchantRecord_argsTupleScheme getScheme() {
        return new deleClearMerchantRecord_argsTupleScheme();
      }
    }

    private static class deleClearMerchantRecord_argsTupleScheme extends TupleScheme<deleClearMerchantRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClearMerchantRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClearMerchantRecordModel()) {
          struct.clearMerchantRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clearMerchantRecordModel = new com.heepay.rpc.billing.model.ClearMerchantRecordModel();
          struct.clearMerchantRecordModel.read(iprot);
          struct.setClearMerchantRecordModelIsSet(true);
        }
      }
    }

  }

  public static class deleClearMerchantRecord_result implements org.apache.thrift.TBase<deleClearMerchantRecord_result, deleClearMerchantRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleClearMerchantRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleClearMerchantRecord_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleClearMerchantRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleClearMerchantRecord_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleClearMerchantRecord_result.class, metaDataMap);
    }

    public deleClearMerchantRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleClearMerchantRecord_result(deleClearMerchantRecord_result other) {
    }

    public deleClearMerchantRecord_result deepCopy() {
      return new deleClearMerchantRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleClearMerchantRecord_result)
        return this.equals((deleClearMerchantRecord_result)that);
      return false;
    }

    public boolean equals(deleClearMerchantRecord_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(deleClearMerchantRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleClearMerchantRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleClearMerchantRecord_resultStandardSchemeFactory implements SchemeFactory {
      public deleClearMerchantRecord_resultStandardScheme getScheme() {
        return new deleClearMerchantRecord_resultStandardScheme();
      }
    }

    private static class deleClearMerchantRecord_resultStandardScheme extends StandardScheme<deleClearMerchantRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleClearMerchantRecord_resultTupleSchemeFactory implements SchemeFactory {
      public deleClearMerchantRecord_resultTupleScheme getScheme() {
        return new deleClearMerchantRecord_resultTupleScheme();
      }
    }

    private static class deleClearMerchantRecord_resultTupleScheme extends TupleScheme<deleClearMerchantRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getClearMerchantRecordMessage_args implements org.apache.thrift.TBase<getClearMerchantRecordMessage_args, getClearMerchantRecordMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getClearMerchantRecordMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClearMerchantRecordMessage_args");

    private static final org.apache.thrift.protocol.TField CLEAR_MERCHANT_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("clearMerchantRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClearMerchantRecordMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClearMerchantRecordMessage_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLEAR_MERCHANT_RECORD_MODEL((short)1, "clearMerchantRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLEAR_MERCHANT_RECORD_MODEL
            return CLEAR_MERCHANT_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLEAR_MERCHANT_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("clearMerchantRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.ClearMerchantRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClearMerchantRecordMessage_args.class, metaDataMap);
    }

    public getClearMerchantRecordMessage_args() {
    }

    public getClearMerchantRecordMessage_args(
      com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel)
    {
      this();
      this.clearMerchantRecordModel = clearMerchantRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClearMerchantRecordMessage_args(getClearMerchantRecordMessage_args other) {
      if (other.isSetClearMerchantRecordModel()) {
        this.clearMerchantRecordModel = new com.heepay.rpc.billing.model.ClearMerchantRecordModel(other.clearMerchantRecordModel);
      }
    }

    public getClearMerchantRecordMessage_args deepCopy() {
      return new getClearMerchantRecordMessage_args(this);
    }

    @Override
    public void clear() {
      this.clearMerchantRecordModel = null;
    }

    public com.heepay.rpc.billing.model.ClearMerchantRecordModel getClearMerchantRecordModel() {
      return this.clearMerchantRecordModel;
    }

    public getClearMerchantRecordMessage_args setClearMerchantRecordModel(com.heepay.rpc.billing.model.ClearMerchantRecordModel clearMerchantRecordModel) {
      this.clearMerchantRecordModel = clearMerchantRecordModel;
      return this;
    }

    public void unsetClearMerchantRecordModel() {
      this.clearMerchantRecordModel = null;
    }

    /** Returns true if field clearMerchantRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetClearMerchantRecordModel() {
      return this.clearMerchantRecordModel != null;
    }

    public void setClearMerchantRecordModelIsSet(boolean value) {
      if (!value) {
        this.clearMerchantRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLEAR_MERCHANT_RECORD_MODEL:
        if (value == null) {
          unsetClearMerchantRecordModel();
        } else {
          setClearMerchantRecordModel((com.heepay.rpc.billing.model.ClearMerchantRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLEAR_MERCHANT_RECORD_MODEL:
        return getClearMerchantRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLEAR_MERCHANT_RECORD_MODEL:
        return isSetClearMerchantRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClearMerchantRecordMessage_args)
        return this.equals((getClearMerchantRecordMessage_args)that);
      return false;
    }

    public boolean equals(getClearMerchantRecordMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_clearMerchantRecordModel = true && this.isSetClearMerchantRecordModel();
      boolean that_present_clearMerchantRecordModel = true && that.isSetClearMerchantRecordModel();
      if (this_present_clearMerchantRecordModel || that_present_clearMerchantRecordModel) {
        if (!(this_present_clearMerchantRecordModel && that_present_clearMerchantRecordModel))
          return false;
        if (!this.clearMerchantRecordModel.equals(that.clearMerchantRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clearMerchantRecordModel = true && (isSetClearMerchantRecordModel());
      list.add(present_clearMerchantRecordModel);
      if (present_clearMerchantRecordModel)
        list.add(clearMerchantRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClearMerchantRecordMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClearMerchantRecordModel()).compareTo(other.isSetClearMerchantRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClearMerchantRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearMerchantRecordModel, other.clearMerchantRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClearMerchantRecordMessage_args(");
      boolean first = true;

      sb.append("clearMerchantRecordModel:");
      if (this.clearMerchantRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.clearMerchantRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (clearMerchantRecordModel != null) {
        clearMerchantRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClearMerchantRecordMessage_argsStandardSchemeFactory implements SchemeFactory {
      public getClearMerchantRecordMessage_argsStandardScheme getScheme() {
        return new getClearMerchantRecordMessage_argsStandardScheme();
      }
    }

    private static class getClearMerchantRecordMessage_argsStandardScheme extends StandardScheme<getClearMerchantRecordMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClearMerchantRecordMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLEAR_MERCHANT_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clearMerchantRecordModel = new com.heepay.rpc.billing.model.ClearMerchantRecordModel();
                struct.clearMerchantRecordModel.read(iprot);
                struct.setClearMerchantRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClearMerchantRecordMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clearMerchantRecordModel != null) {
          oprot.writeFieldBegin(CLEAR_MERCHANT_RECORD_MODEL_FIELD_DESC);
          struct.clearMerchantRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClearMerchantRecordMessage_argsTupleSchemeFactory implements SchemeFactory {
      public getClearMerchantRecordMessage_argsTupleScheme getScheme() {
        return new getClearMerchantRecordMessage_argsTupleScheme();
      }
    }

    private static class getClearMerchantRecordMessage_argsTupleScheme extends TupleScheme<getClearMerchantRecordMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClearMerchantRecordMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClearMerchantRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClearMerchantRecordModel()) {
          struct.clearMerchantRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClearMerchantRecordMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clearMerchantRecordModel = new com.heepay.rpc.billing.model.ClearMerchantRecordModel();
          struct.clearMerchantRecordModel.read(iprot);
          struct.setClearMerchantRecordModelIsSet(true);
        }
      }
    }

  }

  public static class getClearMerchantRecordMessage_result implements org.apache.thrift.TBase<getClearMerchantRecordMessage_result, getClearMerchantRecordMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getClearMerchantRecordMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClearMerchantRecordMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClearMerchantRecordMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClearMerchantRecordMessage_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClearMerchantRecordMessage_result.class, metaDataMap);
    }

    public getClearMerchantRecordMessage_result() {
    }

    public getClearMerchantRecordMessage_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClearMerchantRecordMessage_result(getClearMerchantRecordMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getClearMerchantRecordMessage_result deepCopy() {
      return new getClearMerchantRecordMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getClearMerchantRecordMessage_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClearMerchantRecordMessage_result)
        return this.equals((getClearMerchantRecordMessage_result)that);
      return false;
    }

    public boolean equals(getClearMerchantRecordMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClearMerchantRecordMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClearMerchantRecordMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClearMerchantRecordMessage_resultStandardSchemeFactory implements SchemeFactory {
      public getClearMerchantRecordMessage_resultStandardScheme getScheme() {
        return new getClearMerchantRecordMessage_resultStandardScheme();
      }
    }

    private static class getClearMerchantRecordMessage_resultStandardScheme extends StandardScheme<getClearMerchantRecordMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClearMerchantRecordMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClearMerchantRecordMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClearMerchantRecordMessage_resultTupleSchemeFactory implements SchemeFactory {
      public getClearMerchantRecordMessage_resultTupleScheme getScheme() {
        return new getClearMerchantRecordMessage_resultTupleScheme();
      }
    }

    private static class getClearMerchantRecordMessage_resultTupleScheme extends TupleScheme<getClearMerchantRecordMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClearMerchantRecordMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClearMerchantRecordMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getClearMerchantRecord_args implements org.apache.thrift.TBase<getClearMerchantRecord_args, getClearMerchantRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<getClearMerchantRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClearMerchantRecord_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClearMerchantRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClearMerchantRecord_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClearMerchantRecord_args.class, metaDataMap);
    }

    public getClearMerchantRecord_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClearMerchantRecord_args(getClearMerchantRecord_args other) {
    }

    public getClearMerchantRecord_args deepCopy() {
      return new getClearMerchantRecord_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClearMerchantRecord_args)
        return this.equals((getClearMerchantRecord_args)that);
      return false;
    }

    public boolean equals(getClearMerchantRecord_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getClearMerchantRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClearMerchantRecord_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClearMerchantRecord_argsStandardSchemeFactory implements SchemeFactory {
      public getClearMerchantRecord_argsStandardScheme getScheme() {
        return new getClearMerchantRecord_argsStandardScheme();
      }
    }

    private static class getClearMerchantRecord_argsStandardScheme extends StandardScheme<getClearMerchantRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClearMerchantRecord_argsTupleSchemeFactory implements SchemeFactory {
      public getClearMerchantRecord_argsTupleScheme getScheme() {
        return new getClearMerchantRecord_argsTupleScheme();
      }
    }

    private static class getClearMerchantRecord_argsTupleScheme extends TupleScheme<getClearMerchantRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClearMerchantRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getClearMerchantRecord_result implements org.apache.thrift.TBase<getClearMerchantRecord_result, getClearMerchantRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<getClearMerchantRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClearMerchantRecord_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClearMerchantRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClearMerchantRecord_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClearMerchantRecord_result.class, metaDataMap);
    }

    public getClearMerchantRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClearMerchantRecord_result(getClearMerchantRecord_result other) {
    }

    public getClearMerchantRecord_result deepCopy() {
      return new getClearMerchantRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClearMerchantRecord_result)
        return this.equals((getClearMerchantRecord_result)that);
      return false;
    }

    public boolean equals(getClearMerchantRecord_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getClearMerchantRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClearMerchantRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClearMerchantRecord_resultStandardSchemeFactory implements SchemeFactory {
      public getClearMerchantRecord_resultStandardScheme getScheme() {
        return new getClearMerchantRecord_resultStandardScheme();
      }
    }

    private static class getClearMerchantRecord_resultStandardScheme extends StandardScheme<getClearMerchantRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClearMerchantRecord_resultTupleSchemeFactory implements SchemeFactory {
      public getClearMerchantRecord_resultTupleScheme getScheme() {
        return new getClearMerchantRecord_resultTupleScheme();
      }
    }

    private static class getClearMerchantRecord_resultTupleScheme extends TupleScheme<getClearMerchantRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClearMerchantRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class settleDataSave_args implements org.apache.thrift.TBase<settleDataSave_args, settleDataSave_args._Fields>, java.io.Serializable, Cloneable, Comparable<settleDataSave_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("settleDataSave_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new settleDataSave_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new settleDataSave_argsTupleSchemeFactory());
    }

    public String message; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE((short)1, "message");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(settleDataSave_args.class, metaDataMap);
    }

    public settleDataSave_args() {
    }

    public settleDataSave_args(
      String message)
    {
      this();
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public settleDataSave_args(settleDataSave_args other) {
      if (other.isSetMessage()) {
        this.message = other.message;
      }
    }

    public settleDataSave_args deepCopy() {
      return new settleDataSave_args(this);
    }

    @Override
    public void clear() {
      this.message = null;
    }

    public String getMessage() {
      return this.message;
    }

    public settleDataSave_args setMessage(String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE:
        return getMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE:
        return isSetMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof settleDataSave_args)
        return this.equals((settleDataSave_args)that);
      return false;
    }

    public boolean equals(settleDataSave_args that) {
      if (that == null)
        return false;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_message = true && (isSetMessage());
      list.add(present_message);
      if (present_message)
        list.add(message);

      return list.hashCode();
    }

    @Override
    public int compareTo(settleDataSave_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("settleDataSave_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class settleDataSave_argsStandardSchemeFactory implements SchemeFactory {
      public settleDataSave_argsStandardScheme getScheme() {
        return new settleDataSave_argsStandardScheme();
      }
    }

    private static class settleDataSave_argsStandardScheme extends StandardScheme<settleDataSave_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, settleDataSave_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, settleDataSave_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class settleDataSave_argsTupleSchemeFactory implements SchemeFactory {
      public settleDataSave_argsTupleScheme getScheme() {
        return new settleDataSave_argsTupleScheme();
      }
    }

    private static class settleDataSave_argsTupleScheme extends TupleScheme<settleDataSave_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, settleDataSave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessage()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, settleDataSave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
      }
    }

  }

  public static class settleDataSave_result implements org.apache.thrift.TBase<settleDataSave_result, settleDataSave_result._Fields>, java.io.Serializable, Cloneable, Comparable<settleDataSave_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("settleDataSave_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new settleDataSave_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new settleDataSave_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(settleDataSave_result.class, metaDataMap);
    }

    public settleDataSave_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public settleDataSave_result(settleDataSave_result other) {
    }

    public settleDataSave_result deepCopy() {
      return new settleDataSave_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof settleDataSave_result)
        return this.equals((settleDataSave_result)that);
      return false;
    }

    public boolean equals(settleDataSave_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(settleDataSave_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("settleDataSave_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class settleDataSave_resultStandardSchemeFactory implements SchemeFactory {
      public settleDataSave_resultStandardScheme getScheme() {
        return new settleDataSave_resultStandardScheme();
      }
    }

    private static class settleDataSave_resultStandardScheme extends StandardScheme<settleDataSave_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, settleDataSave_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, settleDataSave_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class settleDataSave_resultTupleSchemeFactory implements SchemeFactory {
      public settleDataSave_resultTupleScheme getScheme() {
        return new settleDataSave_resultTupleScheme();
      }
    }

    private static class settleDataSave_resultTupleScheme extends TupleScheme<settleDataSave_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, settleDataSave_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, settleDataSave_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveClearExceptionData_args implements org.apache.thrift.TBase<saveClearExceptionData_args, saveClearExceptionData_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveClearExceptionData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveClearExceptionData_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveClearExceptionData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveClearExceptionData_argsTupleSchemeFactory());
    }

    public String message; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE((short)1, "message");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveClearExceptionData_args.class, metaDataMap);
    }

    public saveClearExceptionData_args() {
    }

    public saveClearExceptionData_args(
      String message)
    {
      this();
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveClearExceptionData_args(saveClearExceptionData_args other) {
      if (other.isSetMessage()) {
        this.message = other.message;
      }
    }

    public saveClearExceptionData_args deepCopy() {
      return new saveClearExceptionData_args(this);
    }

    @Override
    public void clear() {
      this.message = null;
    }

    public String getMessage() {
      return this.message;
    }

    public saveClearExceptionData_args setMessage(String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE:
        return getMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE:
        return isSetMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveClearExceptionData_args)
        return this.equals((saveClearExceptionData_args)that);
      return false;
    }

    public boolean equals(saveClearExceptionData_args that) {
      if (that == null)
        return false;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_message = true && (isSetMessage());
      list.add(present_message);
      if (present_message)
        list.add(message);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveClearExceptionData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveClearExceptionData_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveClearExceptionData_argsStandardSchemeFactory implements SchemeFactory {
      public saveClearExceptionData_argsStandardScheme getScheme() {
        return new saveClearExceptionData_argsStandardScheme();
      }
    }

    private static class saveClearExceptionData_argsStandardScheme extends StandardScheme<saveClearExceptionData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveClearExceptionData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveClearExceptionData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveClearExceptionData_argsTupleSchemeFactory implements SchemeFactory {
      public saveClearExceptionData_argsTupleScheme getScheme() {
        return new saveClearExceptionData_argsTupleScheme();
      }
    }

    private static class saveClearExceptionData_argsTupleScheme extends TupleScheme<saveClearExceptionData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveClearExceptionData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessage()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveClearExceptionData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
      }
    }

  }

  public static class saveClearExceptionData_result implements org.apache.thrift.TBase<saveClearExceptionData_result, saveClearExceptionData_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveClearExceptionData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveClearExceptionData_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveClearExceptionData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveClearExceptionData_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveClearExceptionData_result.class, metaDataMap);
    }

    public saveClearExceptionData_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveClearExceptionData_result(saveClearExceptionData_result other) {
    }

    public saveClearExceptionData_result deepCopy() {
      return new saveClearExceptionData_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveClearExceptionData_result)
        return this.equals((saveClearExceptionData_result)that);
      return false;
    }

    public boolean equals(saveClearExceptionData_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(saveClearExceptionData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveClearExceptionData_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveClearExceptionData_resultStandardSchemeFactory implements SchemeFactory {
      public saveClearExceptionData_resultStandardScheme getScheme() {
        return new saveClearExceptionData_resultStandardScheme();
      }
    }

    private static class saveClearExceptionData_resultStandardScheme extends StandardScheme<saveClearExceptionData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveClearExceptionData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveClearExceptionData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveClearExceptionData_resultTupleSchemeFactory implements SchemeFactory {
      public saveClearExceptionData_resultTupleScheme getScheme() {
        return new saveClearExceptionData_resultTupleScheme();
      }
    }

    private static class saveClearExceptionData_resultTupleScheme extends TupleScheme<saveClearExceptionData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveClearExceptionData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveClearExceptionData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
