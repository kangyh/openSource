/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-12")
public class SettleChannelRecordService {

  public interface Iface {

    public List<com.heepay.rpc.billing.model.SettleChannelRecordModel> saveSettleChannelRecord(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) throws org.apache.thrift.TException;

    public List<com.heepay.rpc.billing.model.SettleChannelRecordModel> query(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) throws org.apache.thrift.TException;

    public void updateSettleChannelRecord(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) throws org.apache.thrift.TException;

    public void deleteSettleChannelRecord(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) throws org.apache.thrift.TException;

    public String getSettleChannelRecordMessage() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void saveSettleChannelRecord(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSettleChannelRecord(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteSettleChannelRecord(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSettleChannelRecordMessage(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.heepay.rpc.billing.model.SettleChannelRecordModel> saveSettleChannelRecord(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) throws org.apache.thrift.TException
    {
      send_saveSettleChannelRecord(settleChannelRecordModel);
      return recv_saveSettleChannelRecord();
    }

    public void send_saveSettleChannelRecord(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) throws org.apache.thrift.TException
    {
      saveSettleChannelRecord_args args = new saveSettleChannelRecord_args();
      args.setSettleChannelRecordModel(settleChannelRecordModel);
      sendBase("saveSettleChannelRecord", args);
    }

    public List<com.heepay.rpc.billing.model.SettleChannelRecordModel> recv_saveSettleChannelRecord() throws org.apache.thrift.TException
    {
      saveSettleChannelRecord_result result = new saveSettleChannelRecord_result();
      receiveBase(result, "saveSettleChannelRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveSettleChannelRecord failed: unknown result");
    }

    public List<com.heepay.rpc.billing.model.SettleChannelRecordModel> query(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) throws org.apache.thrift.TException
    {
      send_query(settleChannelRecordModel);
      return recv_query();
    }

    public void send_query(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) throws org.apache.thrift.TException
    {
      query_args args = new query_args();
      args.setSettleChannelRecordModel(settleChannelRecordModel);
      sendBase("query", args);
    }

    public List<com.heepay.rpc.billing.model.SettleChannelRecordModel> recv_query() throws org.apache.thrift.TException
    {
      query_result result = new query_result();
      receiveBase(result, "query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query failed: unknown result");
    }

    public void updateSettleChannelRecord(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) throws org.apache.thrift.TException
    {
      send_updateSettleChannelRecord(settleChannelRecordModel);
      recv_updateSettleChannelRecord();
    }

    public void send_updateSettleChannelRecord(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) throws org.apache.thrift.TException
    {
      updateSettleChannelRecord_args args = new updateSettleChannelRecord_args();
      args.setSettleChannelRecordModel(settleChannelRecordModel);
      sendBase("updateSettleChannelRecord", args);
    }

    public void recv_updateSettleChannelRecord() throws org.apache.thrift.TException
    {
      updateSettleChannelRecord_result result = new updateSettleChannelRecord_result();
      receiveBase(result, "updateSettleChannelRecord");
      return;
    }

    public void deleteSettleChannelRecord(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) throws org.apache.thrift.TException
    {
      send_deleteSettleChannelRecord(settleChannelRecordModel);
      recv_deleteSettleChannelRecord();
    }

    public void send_deleteSettleChannelRecord(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) throws org.apache.thrift.TException
    {
      deleteSettleChannelRecord_args args = new deleteSettleChannelRecord_args();
      args.setSettleChannelRecordModel(settleChannelRecordModel);
      sendBase("deleteSettleChannelRecord", args);
    }

    public void recv_deleteSettleChannelRecord() throws org.apache.thrift.TException
    {
      deleteSettleChannelRecord_result result = new deleteSettleChannelRecord_result();
      receiveBase(result, "deleteSettleChannelRecord");
      return;
    }

    public String getSettleChannelRecordMessage() throws org.apache.thrift.TException
    {
      send_getSettleChannelRecordMessage();
      return recv_getSettleChannelRecordMessage();
    }

    public void send_getSettleChannelRecordMessage() throws org.apache.thrift.TException
    {
      getSettleChannelRecordMessage_args args = new getSettleChannelRecordMessage_args();
      sendBase("getSettleChannelRecordMessage", args);
    }

    public String recv_getSettleChannelRecordMessage() throws org.apache.thrift.TException
    {
      getSettleChannelRecordMessage_result result = new getSettleChannelRecordMessage_result();
      receiveBase(result, "getSettleChannelRecordMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSettleChannelRecordMessage failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveSettleChannelRecord(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveSettleChannelRecord_call method_call = new saveSettleChannelRecord_call(settleChannelRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveSettleChannelRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel;
      public saveSettleChannelRecord_call(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.settleChannelRecordModel = settleChannelRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveSettleChannelRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveSettleChannelRecord_args args = new saveSettleChannelRecord_args();
        args.setSettleChannelRecordModel(settleChannelRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.heepay.rpc.billing.model.SettleChannelRecordModel> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveSettleChannelRecord();
      }
    }

    public void query(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_call method_call = new query_call(settleChannelRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel;
      public query_call(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.settleChannelRecordModel = settleChannelRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_args args = new query_args();
        args.setSettleChannelRecordModel(settleChannelRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.heepay.rpc.billing.model.SettleChannelRecordModel> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query();
      }
    }

    public void updateSettleChannelRecord(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSettleChannelRecord_call method_call = new updateSettleChannelRecord_call(settleChannelRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSettleChannelRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel;
      public updateSettleChannelRecord_call(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.settleChannelRecordModel = settleChannelRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSettleChannelRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSettleChannelRecord_args args = new updateSettleChannelRecord_args();
        args.setSettleChannelRecordModel(settleChannelRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateSettleChannelRecord();
      }
    }

    public void deleteSettleChannelRecord(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSettleChannelRecord_call method_call = new deleteSettleChannelRecord_call(settleChannelRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSettleChannelRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel;
      public deleteSettleChannelRecord_call(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.settleChannelRecordModel = settleChannelRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSettleChannelRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSettleChannelRecord_args args = new deleteSettleChannelRecord_args();
        args.setSettleChannelRecordModel(settleChannelRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteSettleChannelRecord();
      }
    }

    public void getSettleChannelRecordMessage(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSettleChannelRecordMessage_call method_call = new getSettleChannelRecordMessage_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSettleChannelRecordMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getSettleChannelRecordMessage_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSettleChannelRecordMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSettleChannelRecordMessage_args args = new getSettleChannelRecordMessage_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSettleChannelRecordMessage();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("saveSettleChannelRecord", new saveSettleChannelRecord());
      processMap.put("query", new query());
      processMap.put("updateSettleChannelRecord", new updateSettleChannelRecord());
      processMap.put("deleteSettleChannelRecord", new deleteSettleChannelRecord());
      processMap.put("getSettleChannelRecordMessage", new getSettleChannelRecordMessage());
      return processMap;
    }

    public static class saveSettleChannelRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveSettleChannelRecord_args> {
      public saveSettleChannelRecord() {
        super("saveSettleChannelRecord");
      }

      public saveSettleChannelRecord_args getEmptyArgsInstance() {
        return new saveSettleChannelRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveSettleChannelRecord_result getResult(I iface, saveSettleChannelRecord_args args) throws org.apache.thrift.TException {
        saveSettleChannelRecord_result result = new saveSettleChannelRecord_result();
        result.success = iface.saveSettleChannelRecord(args.settleChannelRecordModel);
        return result;
      }
    }

    public static class query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_args> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_result getResult(I iface, query_args args) throws org.apache.thrift.TException {
        query_result result = new query_result();
        result.success = iface.query(args.settleChannelRecordModel);
        return result;
      }
    }

    public static class updateSettleChannelRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSettleChannelRecord_args> {
      public updateSettleChannelRecord() {
        super("updateSettleChannelRecord");
      }

      public updateSettleChannelRecord_args getEmptyArgsInstance() {
        return new updateSettleChannelRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSettleChannelRecord_result getResult(I iface, updateSettleChannelRecord_args args) throws org.apache.thrift.TException {
        updateSettleChannelRecord_result result = new updateSettleChannelRecord_result();
        iface.updateSettleChannelRecord(args.settleChannelRecordModel);
        return result;
      }
    }

    public static class deleteSettleChannelRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSettleChannelRecord_args> {
      public deleteSettleChannelRecord() {
        super("deleteSettleChannelRecord");
      }

      public deleteSettleChannelRecord_args getEmptyArgsInstance() {
        return new deleteSettleChannelRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSettleChannelRecord_result getResult(I iface, deleteSettleChannelRecord_args args) throws org.apache.thrift.TException {
        deleteSettleChannelRecord_result result = new deleteSettleChannelRecord_result();
        iface.deleteSettleChannelRecord(args.settleChannelRecordModel);
        return result;
      }
    }

    public static class getSettleChannelRecordMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSettleChannelRecordMessage_args> {
      public getSettleChannelRecordMessage() {
        super("getSettleChannelRecordMessage");
      }

      public getSettleChannelRecordMessage_args getEmptyArgsInstance() {
        return new getSettleChannelRecordMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSettleChannelRecordMessage_result getResult(I iface, getSettleChannelRecordMessage_args args) throws org.apache.thrift.TException {
        getSettleChannelRecordMessage_result result = new getSettleChannelRecordMessage_result();
        result.success = iface.getSettleChannelRecordMessage();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("saveSettleChannelRecord", new saveSettleChannelRecord());
      processMap.put("query", new query());
      processMap.put("updateSettleChannelRecord", new updateSettleChannelRecord());
      processMap.put("deleteSettleChannelRecord", new deleteSettleChannelRecord());
      processMap.put("getSettleChannelRecordMessage", new getSettleChannelRecordMessage());
      return processMap;
    }

    public static class saveSettleChannelRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveSettleChannelRecord_args, List<com.heepay.rpc.billing.model.SettleChannelRecordModel>> {
      public saveSettleChannelRecord() {
        super("saveSettleChannelRecord");
      }

      public saveSettleChannelRecord_args getEmptyArgsInstance() {
        return new saveSettleChannelRecord_args();
      }

      public AsyncMethodCallback<List<com.heepay.rpc.billing.model.SettleChannelRecordModel>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.heepay.rpc.billing.model.SettleChannelRecordModel>>() { 
          public void onComplete(List<com.heepay.rpc.billing.model.SettleChannelRecordModel> o) {
            saveSettleChannelRecord_result result = new saveSettleChannelRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveSettleChannelRecord_result result = new saveSettleChannelRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveSettleChannelRecord_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.heepay.rpc.billing.model.SettleChannelRecordModel>> resultHandler) throws TException {
        iface.saveSettleChannelRecord(args.settleChannelRecordModel,resultHandler);
      }
    }

    public static class query<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_args, List<com.heepay.rpc.billing.model.SettleChannelRecordModel>> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      public AsyncMethodCallback<List<com.heepay.rpc.billing.model.SettleChannelRecordModel>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.heepay.rpc.billing.model.SettleChannelRecordModel>>() { 
          public void onComplete(List<com.heepay.rpc.billing.model.SettleChannelRecordModel> o) {
            query_result result = new query_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_result result = new query_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.heepay.rpc.billing.model.SettleChannelRecordModel>> resultHandler) throws TException {
        iface.query(args.settleChannelRecordModel,resultHandler);
      }
    }

    public static class updateSettleChannelRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSettleChannelRecord_args, Void> {
      public updateSettleChannelRecord() {
        super("updateSettleChannelRecord");
      }

      public updateSettleChannelRecord_args getEmptyArgsInstance() {
        return new updateSettleChannelRecord_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateSettleChannelRecord_result result = new updateSettleChannelRecord_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSettleChannelRecord_result result = new updateSettleChannelRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSettleChannelRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateSettleChannelRecord(args.settleChannelRecordModel,resultHandler);
      }
    }

    public static class deleteSettleChannelRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSettleChannelRecord_args, Void> {
      public deleteSettleChannelRecord() {
        super("deleteSettleChannelRecord");
      }

      public deleteSettleChannelRecord_args getEmptyArgsInstance() {
        return new deleteSettleChannelRecord_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteSettleChannelRecord_result result = new deleteSettleChannelRecord_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteSettleChannelRecord_result result = new deleteSettleChannelRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSettleChannelRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteSettleChannelRecord(args.settleChannelRecordModel,resultHandler);
      }
    }

    public static class getSettleChannelRecordMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSettleChannelRecordMessage_args, String> {
      public getSettleChannelRecordMessage() {
        super("getSettleChannelRecordMessage");
      }

      public getSettleChannelRecordMessage_args getEmptyArgsInstance() {
        return new getSettleChannelRecordMessage_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getSettleChannelRecordMessage_result result = new getSettleChannelRecordMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSettleChannelRecordMessage_result result = new getSettleChannelRecordMessage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSettleChannelRecordMessage_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getSettleChannelRecordMessage(resultHandler);
      }
    }

  }

  public static class saveSettleChannelRecord_args implements org.apache.thrift.TBase<saveSettleChannelRecord_args, saveSettleChannelRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveSettleChannelRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveSettleChannelRecord_args");

    private static final org.apache.thrift.protocol.TField SETTLE_CHANNEL_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("settleChannelRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveSettleChannelRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveSettleChannelRecord_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTLE_CHANNEL_RECORD_MODEL((short)1, "settleChannelRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTLE_CHANNEL_RECORD_MODEL
            return SETTLE_CHANNEL_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTLE_CHANNEL_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("settleChannelRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.SettleChannelRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveSettleChannelRecord_args.class, metaDataMap);
    }

    public saveSettleChannelRecord_args() {
    }

    public saveSettleChannelRecord_args(
      com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel)
    {
      this();
      this.settleChannelRecordModel = settleChannelRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveSettleChannelRecord_args(saveSettleChannelRecord_args other) {
      if (other.isSetSettleChannelRecordModel()) {
        this.settleChannelRecordModel = new com.heepay.rpc.billing.model.SettleChannelRecordModel(other.settleChannelRecordModel);
      }
    }

    public saveSettleChannelRecord_args deepCopy() {
      return new saveSettleChannelRecord_args(this);
    }

    @Override
    public void clear() {
      this.settleChannelRecordModel = null;
    }

    public com.heepay.rpc.billing.model.SettleChannelRecordModel getSettleChannelRecordModel() {
      return this.settleChannelRecordModel;
    }

    public saveSettleChannelRecord_args setSettleChannelRecordModel(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) {
      this.settleChannelRecordModel = settleChannelRecordModel;
      return this;
    }

    public void unsetSettleChannelRecordModel() {
      this.settleChannelRecordModel = null;
    }

    /** Returns true if field settleChannelRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetSettleChannelRecordModel() {
      return this.settleChannelRecordModel != null;
    }

    public void setSettleChannelRecordModelIsSet(boolean value) {
      if (!value) {
        this.settleChannelRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTLE_CHANNEL_RECORD_MODEL:
        if (value == null) {
          unsetSettleChannelRecordModel();
        } else {
          setSettleChannelRecordModel((com.heepay.rpc.billing.model.SettleChannelRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTLE_CHANNEL_RECORD_MODEL:
        return getSettleChannelRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTLE_CHANNEL_RECORD_MODEL:
        return isSetSettleChannelRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveSettleChannelRecord_args)
        return this.equals((saveSettleChannelRecord_args)that);
      return false;
    }

    public boolean equals(saveSettleChannelRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_settleChannelRecordModel = true && this.isSetSettleChannelRecordModel();
      boolean that_present_settleChannelRecordModel = true && that.isSetSettleChannelRecordModel();
      if (this_present_settleChannelRecordModel || that_present_settleChannelRecordModel) {
        if (!(this_present_settleChannelRecordModel && that_present_settleChannelRecordModel))
          return false;
        if (!this.settleChannelRecordModel.equals(that.settleChannelRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_settleChannelRecordModel = true && (isSetSettleChannelRecordModel());
      list.add(present_settleChannelRecordModel);
      if (present_settleChannelRecordModel)
        list.add(settleChannelRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveSettleChannelRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettleChannelRecordModel()).compareTo(other.isSetSettleChannelRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettleChannelRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleChannelRecordModel, other.settleChannelRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveSettleChannelRecord_args(");
      boolean first = true;

      sb.append("settleChannelRecordModel:");
      if (this.settleChannelRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.settleChannelRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (settleChannelRecordModel != null) {
        settleChannelRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveSettleChannelRecord_argsStandardSchemeFactory implements SchemeFactory {
      public saveSettleChannelRecord_argsStandardScheme getScheme() {
        return new saveSettleChannelRecord_argsStandardScheme();
      }
    }

    private static class saveSettleChannelRecord_argsStandardScheme extends StandardScheme<saveSettleChannelRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveSettleChannelRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTLE_CHANNEL_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.settleChannelRecordModel = new com.heepay.rpc.billing.model.SettleChannelRecordModel();
                struct.settleChannelRecordModel.read(iprot);
                struct.setSettleChannelRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveSettleChannelRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.settleChannelRecordModel != null) {
          oprot.writeFieldBegin(SETTLE_CHANNEL_RECORD_MODEL_FIELD_DESC);
          struct.settleChannelRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveSettleChannelRecord_argsTupleSchemeFactory implements SchemeFactory {
      public saveSettleChannelRecord_argsTupleScheme getScheme() {
        return new saveSettleChannelRecord_argsTupleScheme();
      }
    }

    private static class saveSettleChannelRecord_argsTupleScheme extends TupleScheme<saveSettleChannelRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveSettleChannelRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettleChannelRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSettleChannelRecordModel()) {
          struct.settleChannelRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveSettleChannelRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.settleChannelRecordModel = new com.heepay.rpc.billing.model.SettleChannelRecordModel();
          struct.settleChannelRecordModel.read(iprot);
          struct.setSettleChannelRecordModelIsSet(true);
        }
      }
    }

  }

  public static class saveSettleChannelRecord_result implements org.apache.thrift.TBase<saveSettleChannelRecord_result, saveSettleChannelRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveSettleChannelRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveSettleChannelRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveSettleChannelRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveSettleChannelRecord_resultTupleSchemeFactory());
    }

    public List<com.heepay.rpc.billing.model.SettleChannelRecordModel> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.SettleChannelRecordModel.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveSettleChannelRecord_result.class, metaDataMap);
    }

    public saveSettleChannelRecord_result() {
    }

    public saveSettleChannelRecord_result(
      List<com.heepay.rpc.billing.model.SettleChannelRecordModel> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveSettleChannelRecord_result(saveSettleChannelRecord_result other) {
      if (other.isSetSuccess()) {
        List<com.heepay.rpc.billing.model.SettleChannelRecordModel> __this__success = new ArrayList<com.heepay.rpc.billing.model.SettleChannelRecordModel>(other.success.size());
        for (com.heepay.rpc.billing.model.SettleChannelRecordModel other_element : other.success) {
          __this__success.add(new com.heepay.rpc.billing.model.SettleChannelRecordModel(other_element));
        }
        this.success = __this__success;
      }
    }

    public saveSettleChannelRecord_result deepCopy() {
      return new saveSettleChannelRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.heepay.rpc.billing.model.SettleChannelRecordModel> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.heepay.rpc.billing.model.SettleChannelRecordModel elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.heepay.rpc.billing.model.SettleChannelRecordModel>();
      }
      this.success.add(elem);
    }

    public List<com.heepay.rpc.billing.model.SettleChannelRecordModel> getSuccess() {
      return this.success;
    }

    public saveSettleChannelRecord_result setSuccess(List<com.heepay.rpc.billing.model.SettleChannelRecordModel> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.heepay.rpc.billing.model.SettleChannelRecordModel>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveSettleChannelRecord_result)
        return this.equals((saveSettleChannelRecord_result)that);
      return false;
    }

    public boolean equals(saveSettleChannelRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveSettleChannelRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveSettleChannelRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveSettleChannelRecord_resultStandardSchemeFactory implements SchemeFactory {
      public saveSettleChannelRecord_resultStandardScheme getScheme() {
        return new saveSettleChannelRecord_resultStandardScheme();
      }
    }

    private static class saveSettleChannelRecord_resultStandardScheme extends StandardScheme<saveSettleChannelRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveSettleChannelRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.heepay.rpc.billing.model.SettleChannelRecordModel>(_list0.size);
                  com.heepay.rpc.billing.model.SettleChannelRecordModel _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.heepay.rpc.billing.model.SettleChannelRecordModel();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveSettleChannelRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.heepay.rpc.billing.model.SettleChannelRecordModel _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveSettleChannelRecord_resultTupleSchemeFactory implements SchemeFactory {
      public saveSettleChannelRecord_resultTupleScheme getScheme() {
        return new saveSettleChannelRecord_resultTupleScheme();
      }
    }

    private static class saveSettleChannelRecord_resultTupleScheme extends TupleScheme<saveSettleChannelRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveSettleChannelRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.heepay.rpc.billing.model.SettleChannelRecordModel _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveSettleChannelRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.heepay.rpc.billing.model.SettleChannelRecordModel>(_list5.size);
            com.heepay.rpc.billing.model.SettleChannelRecordModel _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.heepay.rpc.billing.model.SettleChannelRecordModel();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class query_args implements org.apache.thrift.TBase<query_args, query_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_args");

    private static final org.apache.thrift.protocol.TField SETTLE_CHANNEL_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("settleChannelRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTLE_CHANNEL_RECORD_MODEL((short)1, "settleChannelRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTLE_CHANNEL_RECORD_MODEL
            return SETTLE_CHANNEL_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTLE_CHANNEL_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("settleChannelRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.SettleChannelRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_args.class, metaDataMap);
    }

    public query_args() {
    }

    public query_args(
      com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel)
    {
      this();
      this.settleChannelRecordModel = settleChannelRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_args(query_args other) {
      if (other.isSetSettleChannelRecordModel()) {
        this.settleChannelRecordModel = new com.heepay.rpc.billing.model.SettleChannelRecordModel(other.settleChannelRecordModel);
      }
    }

    public query_args deepCopy() {
      return new query_args(this);
    }

    @Override
    public void clear() {
      this.settleChannelRecordModel = null;
    }

    public com.heepay.rpc.billing.model.SettleChannelRecordModel getSettleChannelRecordModel() {
      return this.settleChannelRecordModel;
    }

    public query_args setSettleChannelRecordModel(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) {
      this.settleChannelRecordModel = settleChannelRecordModel;
      return this;
    }

    public void unsetSettleChannelRecordModel() {
      this.settleChannelRecordModel = null;
    }

    /** Returns true if field settleChannelRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetSettleChannelRecordModel() {
      return this.settleChannelRecordModel != null;
    }

    public void setSettleChannelRecordModelIsSet(boolean value) {
      if (!value) {
        this.settleChannelRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTLE_CHANNEL_RECORD_MODEL:
        if (value == null) {
          unsetSettleChannelRecordModel();
        } else {
          setSettleChannelRecordModel((com.heepay.rpc.billing.model.SettleChannelRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTLE_CHANNEL_RECORD_MODEL:
        return getSettleChannelRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTLE_CHANNEL_RECORD_MODEL:
        return isSetSettleChannelRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_args)
        return this.equals((query_args)that);
      return false;
    }

    public boolean equals(query_args that) {
      if (that == null)
        return false;

      boolean this_present_settleChannelRecordModel = true && this.isSetSettleChannelRecordModel();
      boolean that_present_settleChannelRecordModel = true && that.isSetSettleChannelRecordModel();
      if (this_present_settleChannelRecordModel || that_present_settleChannelRecordModel) {
        if (!(this_present_settleChannelRecordModel && that_present_settleChannelRecordModel))
          return false;
        if (!this.settleChannelRecordModel.equals(that.settleChannelRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_settleChannelRecordModel = true && (isSetSettleChannelRecordModel());
      list.add(present_settleChannelRecordModel);
      if (present_settleChannelRecordModel)
        list.add(settleChannelRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettleChannelRecordModel()).compareTo(other.isSetSettleChannelRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettleChannelRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleChannelRecordModel, other.settleChannelRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_args(");
      boolean first = true;

      sb.append("settleChannelRecordModel:");
      if (this.settleChannelRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.settleChannelRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (settleChannelRecordModel != null) {
        settleChannelRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_argsStandardSchemeFactory implements SchemeFactory {
      public query_argsStandardScheme getScheme() {
        return new query_argsStandardScheme();
      }
    }

    private static class query_argsStandardScheme extends StandardScheme<query_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTLE_CHANNEL_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.settleChannelRecordModel = new com.heepay.rpc.billing.model.SettleChannelRecordModel();
                struct.settleChannelRecordModel.read(iprot);
                struct.setSettleChannelRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.settleChannelRecordModel != null) {
          oprot.writeFieldBegin(SETTLE_CHANNEL_RECORD_MODEL_FIELD_DESC);
          struct.settleChannelRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_argsTupleSchemeFactory implements SchemeFactory {
      public query_argsTupleScheme getScheme() {
        return new query_argsTupleScheme();
      }
    }

    private static class query_argsTupleScheme extends TupleScheme<query_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettleChannelRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSettleChannelRecordModel()) {
          struct.settleChannelRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.settleChannelRecordModel = new com.heepay.rpc.billing.model.SettleChannelRecordModel();
          struct.settleChannelRecordModel.read(iprot);
          struct.setSettleChannelRecordModelIsSet(true);
        }
      }
    }

  }

  public static class query_result implements org.apache.thrift.TBase<query_result, query_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_resultTupleSchemeFactory());
    }

    public List<com.heepay.rpc.billing.model.SettleChannelRecordModel> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.SettleChannelRecordModel.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_result.class, metaDataMap);
    }

    public query_result() {
    }

    public query_result(
      List<com.heepay.rpc.billing.model.SettleChannelRecordModel> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_result(query_result other) {
      if (other.isSetSuccess()) {
        List<com.heepay.rpc.billing.model.SettleChannelRecordModel> __this__success = new ArrayList<com.heepay.rpc.billing.model.SettleChannelRecordModel>(other.success.size());
        for (com.heepay.rpc.billing.model.SettleChannelRecordModel other_element : other.success) {
          __this__success.add(new com.heepay.rpc.billing.model.SettleChannelRecordModel(other_element));
        }
        this.success = __this__success;
      }
    }

    public query_result deepCopy() {
      return new query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.heepay.rpc.billing.model.SettleChannelRecordModel> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.heepay.rpc.billing.model.SettleChannelRecordModel elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.heepay.rpc.billing.model.SettleChannelRecordModel>();
      }
      this.success.add(elem);
    }

    public List<com.heepay.rpc.billing.model.SettleChannelRecordModel> getSuccess() {
      return this.success;
    }

    public query_result setSuccess(List<com.heepay.rpc.billing.model.SettleChannelRecordModel> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.heepay.rpc.billing.model.SettleChannelRecordModel>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_result)
        return this.equals((query_result)that);
      return false;
    }

    public boolean equals(query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_resultStandardSchemeFactory implements SchemeFactory {
      public query_resultStandardScheme getScheme() {
        return new query_resultStandardScheme();
      }
    }

    private static class query_resultStandardScheme extends StandardScheme<query_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.heepay.rpc.billing.model.SettleChannelRecordModel>(_list8.size);
                  com.heepay.rpc.billing.model.SettleChannelRecordModel _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.heepay.rpc.billing.model.SettleChannelRecordModel();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.heepay.rpc.billing.model.SettleChannelRecordModel _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_resultTupleSchemeFactory implements SchemeFactory {
      public query_resultTupleScheme getScheme() {
        return new query_resultTupleScheme();
      }
    }

    private static class query_resultTupleScheme extends TupleScheme<query_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.heepay.rpc.billing.model.SettleChannelRecordModel _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.heepay.rpc.billing.model.SettleChannelRecordModel>(_list13.size);
            com.heepay.rpc.billing.model.SettleChannelRecordModel _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.heepay.rpc.billing.model.SettleChannelRecordModel();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateSettleChannelRecord_args implements org.apache.thrift.TBase<updateSettleChannelRecord_args, updateSettleChannelRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSettleChannelRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSettleChannelRecord_args");

    private static final org.apache.thrift.protocol.TField SETTLE_CHANNEL_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("settleChannelRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSettleChannelRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSettleChannelRecord_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTLE_CHANNEL_RECORD_MODEL((short)1, "settleChannelRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTLE_CHANNEL_RECORD_MODEL
            return SETTLE_CHANNEL_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTLE_CHANNEL_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("settleChannelRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.SettleChannelRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSettleChannelRecord_args.class, metaDataMap);
    }

    public updateSettleChannelRecord_args() {
    }

    public updateSettleChannelRecord_args(
      com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel)
    {
      this();
      this.settleChannelRecordModel = settleChannelRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSettleChannelRecord_args(updateSettleChannelRecord_args other) {
      if (other.isSetSettleChannelRecordModel()) {
        this.settleChannelRecordModel = new com.heepay.rpc.billing.model.SettleChannelRecordModel(other.settleChannelRecordModel);
      }
    }

    public updateSettleChannelRecord_args deepCopy() {
      return new updateSettleChannelRecord_args(this);
    }

    @Override
    public void clear() {
      this.settleChannelRecordModel = null;
    }

    public com.heepay.rpc.billing.model.SettleChannelRecordModel getSettleChannelRecordModel() {
      return this.settleChannelRecordModel;
    }

    public updateSettleChannelRecord_args setSettleChannelRecordModel(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) {
      this.settleChannelRecordModel = settleChannelRecordModel;
      return this;
    }

    public void unsetSettleChannelRecordModel() {
      this.settleChannelRecordModel = null;
    }

    /** Returns true if field settleChannelRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetSettleChannelRecordModel() {
      return this.settleChannelRecordModel != null;
    }

    public void setSettleChannelRecordModelIsSet(boolean value) {
      if (!value) {
        this.settleChannelRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTLE_CHANNEL_RECORD_MODEL:
        if (value == null) {
          unsetSettleChannelRecordModel();
        } else {
          setSettleChannelRecordModel((com.heepay.rpc.billing.model.SettleChannelRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTLE_CHANNEL_RECORD_MODEL:
        return getSettleChannelRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTLE_CHANNEL_RECORD_MODEL:
        return isSetSettleChannelRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSettleChannelRecord_args)
        return this.equals((updateSettleChannelRecord_args)that);
      return false;
    }

    public boolean equals(updateSettleChannelRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_settleChannelRecordModel = true && this.isSetSettleChannelRecordModel();
      boolean that_present_settleChannelRecordModel = true && that.isSetSettleChannelRecordModel();
      if (this_present_settleChannelRecordModel || that_present_settleChannelRecordModel) {
        if (!(this_present_settleChannelRecordModel && that_present_settleChannelRecordModel))
          return false;
        if (!this.settleChannelRecordModel.equals(that.settleChannelRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_settleChannelRecordModel = true && (isSetSettleChannelRecordModel());
      list.add(present_settleChannelRecordModel);
      if (present_settleChannelRecordModel)
        list.add(settleChannelRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSettleChannelRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettleChannelRecordModel()).compareTo(other.isSetSettleChannelRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettleChannelRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleChannelRecordModel, other.settleChannelRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSettleChannelRecord_args(");
      boolean first = true;

      sb.append("settleChannelRecordModel:");
      if (this.settleChannelRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.settleChannelRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (settleChannelRecordModel != null) {
        settleChannelRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSettleChannelRecord_argsStandardSchemeFactory implements SchemeFactory {
      public updateSettleChannelRecord_argsStandardScheme getScheme() {
        return new updateSettleChannelRecord_argsStandardScheme();
      }
    }

    private static class updateSettleChannelRecord_argsStandardScheme extends StandardScheme<updateSettleChannelRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSettleChannelRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTLE_CHANNEL_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.settleChannelRecordModel = new com.heepay.rpc.billing.model.SettleChannelRecordModel();
                struct.settleChannelRecordModel.read(iprot);
                struct.setSettleChannelRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSettleChannelRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.settleChannelRecordModel != null) {
          oprot.writeFieldBegin(SETTLE_CHANNEL_RECORD_MODEL_FIELD_DESC);
          struct.settleChannelRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSettleChannelRecord_argsTupleSchemeFactory implements SchemeFactory {
      public updateSettleChannelRecord_argsTupleScheme getScheme() {
        return new updateSettleChannelRecord_argsTupleScheme();
      }
    }

    private static class updateSettleChannelRecord_argsTupleScheme extends TupleScheme<updateSettleChannelRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSettleChannelRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettleChannelRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSettleChannelRecordModel()) {
          struct.settleChannelRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSettleChannelRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.settleChannelRecordModel = new com.heepay.rpc.billing.model.SettleChannelRecordModel();
          struct.settleChannelRecordModel.read(iprot);
          struct.setSettleChannelRecordModelIsSet(true);
        }
      }
    }

  }

  public static class updateSettleChannelRecord_result implements org.apache.thrift.TBase<updateSettleChannelRecord_result, updateSettleChannelRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSettleChannelRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSettleChannelRecord_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSettleChannelRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSettleChannelRecord_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSettleChannelRecord_result.class, metaDataMap);
    }

    public updateSettleChannelRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSettleChannelRecord_result(updateSettleChannelRecord_result other) {
    }

    public updateSettleChannelRecord_result deepCopy() {
      return new updateSettleChannelRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSettleChannelRecord_result)
        return this.equals((updateSettleChannelRecord_result)that);
      return false;
    }

    public boolean equals(updateSettleChannelRecord_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSettleChannelRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSettleChannelRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSettleChannelRecord_resultStandardSchemeFactory implements SchemeFactory {
      public updateSettleChannelRecord_resultStandardScheme getScheme() {
        return new updateSettleChannelRecord_resultStandardScheme();
      }
    }

    private static class updateSettleChannelRecord_resultStandardScheme extends StandardScheme<updateSettleChannelRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSettleChannelRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSettleChannelRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSettleChannelRecord_resultTupleSchemeFactory implements SchemeFactory {
      public updateSettleChannelRecord_resultTupleScheme getScheme() {
        return new updateSettleChannelRecord_resultTupleScheme();
      }
    }

    private static class updateSettleChannelRecord_resultTupleScheme extends TupleScheme<updateSettleChannelRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSettleChannelRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSettleChannelRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteSettleChannelRecord_args implements org.apache.thrift.TBase<deleteSettleChannelRecord_args, deleteSettleChannelRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSettleChannelRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSettleChannelRecord_args");

    private static final org.apache.thrift.protocol.TField SETTLE_CHANNEL_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("settleChannelRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSettleChannelRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSettleChannelRecord_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTLE_CHANNEL_RECORD_MODEL((short)1, "settleChannelRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTLE_CHANNEL_RECORD_MODEL
            return SETTLE_CHANNEL_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTLE_CHANNEL_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("settleChannelRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.SettleChannelRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSettleChannelRecord_args.class, metaDataMap);
    }

    public deleteSettleChannelRecord_args() {
    }

    public deleteSettleChannelRecord_args(
      com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel)
    {
      this();
      this.settleChannelRecordModel = settleChannelRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSettleChannelRecord_args(deleteSettleChannelRecord_args other) {
      if (other.isSetSettleChannelRecordModel()) {
        this.settleChannelRecordModel = new com.heepay.rpc.billing.model.SettleChannelRecordModel(other.settleChannelRecordModel);
      }
    }

    public deleteSettleChannelRecord_args deepCopy() {
      return new deleteSettleChannelRecord_args(this);
    }

    @Override
    public void clear() {
      this.settleChannelRecordModel = null;
    }

    public com.heepay.rpc.billing.model.SettleChannelRecordModel getSettleChannelRecordModel() {
      return this.settleChannelRecordModel;
    }

    public deleteSettleChannelRecord_args setSettleChannelRecordModel(com.heepay.rpc.billing.model.SettleChannelRecordModel settleChannelRecordModel) {
      this.settleChannelRecordModel = settleChannelRecordModel;
      return this;
    }

    public void unsetSettleChannelRecordModel() {
      this.settleChannelRecordModel = null;
    }

    /** Returns true if field settleChannelRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetSettleChannelRecordModel() {
      return this.settleChannelRecordModel != null;
    }

    public void setSettleChannelRecordModelIsSet(boolean value) {
      if (!value) {
        this.settleChannelRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTLE_CHANNEL_RECORD_MODEL:
        if (value == null) {
          unsetSettleChannelRecordModel();
        } else {
          setSettleChannelRecordModel((com.heepay.rpc.billing.model.SettleChannelRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTLE_CHANNEL_RECORD_MODEL:
        return getSettleChannelRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTLE_CHANNEL_RECORD_MODEL:
        return isSetSettleChannelRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSettleChannelRecord_args)
        return this.equals((deleteSettleChannelRecord_args)that);
      return false;
    }

    public boolean equals(deleteSettleChannelRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_settleChannelRecordModel = true && this.isSetSettleChannelRecordModel();
      boolean that_present_settleChannelRecordModel = true && that.isSetSettleChannelRecordModel();
      if (this_present_settleChannelRecordModel || that_present_settleChannelRecordModel) {
        if (!(this_present_settleChannelRecordModel && that_present_settleChannelRecordModel))
          return false;
        if (!this.settleChannelRecordModel.equals(that.settleChannelRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_settleChannelRecordModel = true && (isSetSettleChannelRecordModel());
      list.add(present_settleChannelRecordModel);
      if (present_settleChannelRecordModel)
        list.add(settleChannelRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSettleChannelRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettleChannelRecordModel()).compareTo(other.isSetSettleChannelRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettleChannelRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleChannelRecordModel, other.settleChannelRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSettleChannelRecord_args(");
      boolean first = true;

      sb.append("settleChannelRecordModel:");
      if (this.settleChannelRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.settleChannelRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (settleChannelRecordModel != null) {
        settleChannelRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSettleChannelRecord_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSettleChannelRecord_argsStandardScheme getScheme() {
        return new deleteSettleChannelRecord_argsStandardScheme();
      }
    }

    private static class deleteSettleChannelRecord_argsStandardScheme extends StandardScheme<deleteSettleChannelRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSettleChannelRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTLE_CHANNEL_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.settleChannelRecordModel = new com.heepay.rpc.billing.model.SettleChannelRecordModel();
                struct.settleChannelRecordModel.read(iprot);
                struct.setSettleChannelRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSettleChannelRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.settleChannelRecordModel != null) {
          oprot.writeFieldBegin(SETTLE_CHANNEL_RECORD_MODEL_FIELD_DESC);
          struct.settleChannelRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSettleChannelRecord_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSettleChannelRecord_argsTupleScheme getScheme() {
        return new deleteSettleChannelRecord_argsTupleScheme();
      }
    }

    private static class deleteSettleChannelRecord_argsTupleScheme extends TupleScheme<deleteSettleChannelRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSettleChannelRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettleChannelRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSettleChannelRecordModel()) {
          struct.settleChannelRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSettleChannelRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.settleChannelRecordModel = new com.heepay.rpc.billing.model.SettleChannelRecordModel();
          struct.settleChannelRecordModel.read(iprot);
          struct.setSettleChannelRecordModelIsSet(true);
        }
      }
    }

  }

  public static class deleteSettleChannelRecord_result implements org.apache.thrift.TBase<deleteSettleChannelRecord_result, deleteSettleChannelRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSettleChannelRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSettleChannelRecord_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSettleChannelRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSettleChannelRecord_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSettleChannelRecord_result.class, metaDataMap);
    }

    public deleteSettleChannelRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSettleChannelRecord_result(deleteSettleChannelRecord_result other) {
    }

    public deleteSettleChannelRecord_result deepCopy() {
      return new deleteSettleChannelRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSettleChannelRecord_result)
        return this.equals((deleteSettleChannelRecord_result)that);
      return false;
    }

    public boolean equals(deleteSettleChannelRecord_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSettleChannelRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSettleChannelRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSettleChannelRecord_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSettleChannelRecord_resultStandardScheme getScheme() {
        return new deleteSettleChannelRecord_resultStandardScheme();
      }
    }

    private static class deleteSettleChannelRecord_resultStandardScheme extends StandardScheme<deleteSettleChannelRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSettleChannelRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSettleChannelRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSettleChannelRecord_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSettleChannelRecord_resultTupleScheme getScheme() {
        return new deleteSettleChannelRecord_resultTupleScheme();
      }
    }

    private static class deleteSettleChannelRecord_resultTupleScheme extends TupleScheme<deleteSettleChannelRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSettleChannelRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSettleChannelRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getSettleChannelRecordMessage_args implements org.apache.thrift.TBase<getSettleChannelRecordMessage_args, getSettleChannelRecordMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSettleChannelRecordMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSettleChannelRecordMessage_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSettleChannelRecordMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSettleChannelRecordMessage_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSettleChannelRecordMessage_args.class, metaDataMap);
    }

    public getSettleChannelRecordMessage_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSettleChannelRecordMessage_args(getSettleChannelRecordMessage_args other) {
    }

    public getSettleChannelRecordMessage_args deepCopy() {
      return new getSettleChannelRecordMessage_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSettleChannelRecordMessage_args)
        return this.equals((getSettleChannelRecordMessage_args)that);
      return false;
    }

    public boolean equals(getSettleChannelRecordMessage_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getSettleChannelRecordMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSettleChannelRecordMessage_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSettleChannelRecordMessage_argsStandardSchemeFactory implements SchemeFactory {
      public getSettleChannelRecordMessage_argsStandardScheme getScheme() {
        return new getSettleChannelRecordMessage_argsStandardScheme();
      }
    }

    private static class getSettleChannelRecordMessage_argsStandardScheme extends StandardScheme<getSettleChannelRecordMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSettleChannelRecordMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSettleChannelRecordMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSettleChannelRecordMessage_argsTupleSchemeFactory implements SchemeFactory {
      public getSettleChannelRecordMessage_argsTupleScheme getScheme() {
        return new getSettleChannelRecordMessage_argsTupleScheme();
      }
    }

    private static class getSettleChannelRecordMessage_argsTupleScheme extends TupleScheme<getSettleChannelRecordMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSettleChannelRecordMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSettleChannelRecordMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getSettleChannelRecordMessage_result implements org.apache.thrift.TBase<getSettleChannelRecordMessage_result, getSettleChannelRecordMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSettleChannelRecordMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSettleChannelRecordMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSettleChannelRecordMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSettleChannelRecordMessage_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSettleChannelRecordMessage_result.class, metaDataMap);
    }

    public getSettleChannelRecordMessage_result() {
    }

    public getSettleChannelRecordMessage_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSettleChannelRecordMessage_result(getSettleChannelRecordMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getSettleChannelRecordMessage_result deepCopy() {
      return new getSettleChannelRecordMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getSettleChannelRecordMessage_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSettleChannelRecordMessage_result)
        return this.equals((getSettleChannelRecordMessage_result)that);
      return false;
    }

    public boolean equals(getSettleChannelRecordMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSettleChannelRecordMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSettleChannelRecordMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSettleChannelRecordMessage_resultStandardSchemeFactory implements SchemeFactory {
      public getSettleChannelRecordMessage_resultStandardScheme getScheme() {
        return new getSettleChannelRecordMessage_resultStandardScheme();
      }
    }

    private static class getSettleChannelRecordMessage_resultStandardScheme extends StandardScheme<getSettleChannelRecordMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSettleChannelRecordMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSettleChannelRecordMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSettleChannelRecordMessage_resultTupleSchemeFactory implements SchemeFactory {
      public getSettleChannelRecordMessage_resultTupleScheme getScheme() {
        return new getSettleChannelRecordMessage_resultTupleScheme();
      }
    }

    private static class getSettleChannelRecordMessage_resultTupleScheme extends TupleScheme<getSettleChannelRecordMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSettleChannelRecordMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSettleChannelRecordMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
