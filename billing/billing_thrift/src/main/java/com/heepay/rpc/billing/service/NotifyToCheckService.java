/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-17")
public class NotifyToCheckService {

  public interface Iface {

    public void notifyToCheck(String channelCode, String channelType, String remoteAdress, String date) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void notifyToCheck(String channelCode, String channelType, String remoteAdress, String date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void notifyToCheck(String channelCode, String channelType, String remoteAdress, String date) throws org.apache.thrift.TException
    {
      send_notifyToCheck(channelCode, channelType, remoteAdress, date);
      recv_notifyToCheck();
    }

    public void send_notifyToCheck(String channelCode, String channelType, String remoteAdress, String date) throws org.apache.thrift.TException
    {
      notifyToCheck_args args = new notifyToCheck_args();
      args.setChannelCode(channelCode);
      args.setChannelType(channelType);
      args.setRemoteAdress(remoteAdress);
      args.setDate(date);
      sendBase("notifyToCheck", args);
    }

    public void recv_notifyToCheck() throws org.apache.thrift.TException
    {
      notifyToCheck_result result = new notifyToCheck_result();
      receiveBase(result, "notifyToCheck");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void notifyToCheck(String channelCode, String channelType, String remoteAdress, String date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyToCheck_call method_call = new notifyToCheck_call(channelCode, channelType, remoteAdress, date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyToCheck_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelCode;
      private String channelType;
      private String remoteAdress;
      private String date;
      public notifyToCheck_call(String channelCode, String channelType, String remoteAdress, String date, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelCode = channelCode;
        this.channelType = channelType;
        this.remoteAdress = remoteAdress;
        this.date = date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyToCheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyToCheck_args args = new notifyToCheck_args();
        args.setChannelCode(channelCode);
        args.setChannelType(channelType);
        args.setRemoteAdress(remoteAdress);
        args.setDate(date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_notifyToCheck();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("notifyToCheck", new notifyToCheck());
      return processMap;
    }

    public static class notifyToCheck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyToCheck_args> {
      public notifyToCheck() {
        super("notifyToCheck");
      }

      public notifyToCheck_args getEmptyArgsInstance() {
        return new notifyToCheck_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public notifyToCheck_result getResult(I iface, notifyToCheck_args args) throws org.apache.thrift.TException {
        notifyToCheck_result result = new notifyToCheck_result();
        iface.notifyToCheck(args.channelCode, args.channelType, args.remoteAdress, args.date);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("notifyToCheck", new notifyToCheck());
      return processMap;
    }

    public static class notifyToCheck<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, notifyToCheck_args, Void> {
      public notifyToCheck() {
        super("notifyToCheck");
      }

      public notifyToCheck_args getEmptyArgsInstance() {
        return new notifyToCheck_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            notifyToCheck_result result = new notifyToCheck_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            notifyToCheck_result result = new notifyToCheck_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, notifyToCheck_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.notifyToCheck(args.channelCode, args.channelType, args.remoteAdress, args.date,resultHandler);
      }
    }

  }

  public static class notifyToCheck_args implements org.apache.thrift.TBase<notifyToCheck_args, notifyToCheck_args._Fields>, java.io.Serializable, Cloneable, Comparable<notifyToCheck_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyToCheck_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REMOTE_ADRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAdress", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyToCheck_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyToCheck_argsTupleSchemeFactory());
    }

    public String channelCode; // required
    public String channelType; // required
    public String remoteAdress; // required
    public String date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_CODE((short)1, "channelCode"),
      CHANNEL_TYPE((short)2, "channelType"),
      REMOTE_ADRESS((short)3, "remoteAdress"),
      DATE((short)4, "date");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_CODE
            return CHANNEL_CODE;
          case 2: // CHANNEL_TYPE
            return CHANNEL_TYPE;
          case 3: // REMOTE_ADRESS
            return REMOTE_ADRESS;
          case 4: // DATE
            return DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("channelType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REMOTE_ADRESS, new org.apache.thrift.meta_data.FieldMetaData("remoteAdress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyToCheck_args.class, metaDataMap);
    }

    public notifyToCheck_args() {
    }

    public notifyToCheck_args(
      String channelCode,
      String channelType,
      String remoteAdress,
      String date)
    {
      this();
      this.channelCode = channelCode;
      this.channelType = channelType;
      this.remoteAdress = remoteAdress;
      this.date = date;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyToCheck_args(notifyToCheck_args other) {
      if (other.isSetChannelCode()) {
        this.channelCode = other.channelCode;
      }
      if (other.isSetChannelType()) {
        this.channelType = other.channelType;
      }
      if (other.isSetRemoteAdress()) {
        this.remoteAdress = other.remoteAdress;
      }
      if (other.isSetDate()) {
        this.date = other.date;
      }
    }

    public notifyToCheck_args deepCopy() {
      return new notifyToCheck_args(this);
    }

    @Override
    public void clear() {
      this.channelCode = null;
      this.channelType = null;
      this.remoteAdress = null;
      this.date = null;
    }

    public String getChannelCode() {
      return this.channelCode;
    }

    public notifyToCheck_args setChannelCode(String channelCode) {
      this.channelCode = channelCode;
      return this;
    }

    public void unsetChannelCode() {
      this.channelCode = null;
    }

    /** Returns true if field channelCode is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelCode() {
      return this.channelCode != null;
    }

    public void setChannelCodeIsSet(boolean value) {
      if (!value) {
        this.channelCode = null;
      }
    }

    public String getChannelType() {
      return this.channelType;
    }

    public notifyToCheck_args setChannelType(String channelType) {
      this.channelType = channelType;
      return this;
    }

    public void unsetChannelType() {
      this.channelType = null;
    }

    /** Returns true if field channelType is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelType() {
      return this.channelType != null;
    }

    public void setChannelTypeIsSet(boolean value) {
      if (!value) {
        this.channelType = null;
      }
    }

    public String getRemoteAdress() {
      return this.remoteAdress;
    }

    public notifyToCheck_args setRemoteAdress(String remoteAdress) {
      this.remoteAdress = remoteAdress;
      return this;
    }

    public void unsetRemoteAdress() {
      this.remoteAdress = null;
    }

    /** Returns true if field remoteAdress is set (has been assigned a value) and false otherwise */
    public boolean isSetRemoteAdress() {
      return this.remoteAdress != null;
    }

    public void setRemoteAdressIsSet(boolean value) {
      if (!value) {
        this.remoteAdress = null;
      }
    }

    public String getDate() {
      return this.date;
    }

    public notifyToCheck_args setDate(String date) {
      this.date = date;
      return this;
    }

    public void unsetDate() {
      this.date = null;
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return this.date != null;
    }

    public void setDateIsSet(boolean value) {
      if (!value) {
        this.date = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_CODE:
        if (value == null) {
          unsetChannelCode();
        } else {
          setChannelCode((String)value);
        }
        break;

      case CHANNEL_TYPE:
        if (value == null) {
          unsetChannelType();
        } else {
          setChannelType((String)value);
        }
        break;

      case REMOTE_ADRESS:
        if (value == null) {
          unsetRemoteAdress();
        } else {
          setRemoteAdress((String)value);
        }
        break;

      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_CODE:
        return getChannelCode();

      case CHANNEL_TYPE:
        return getChannelType();

      case REMOTE_ADRESS:
        return getRemoteAdress();

      case DATE:
        return getDate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_CODE:
        return isSetChannelCode();
      case CHANNEL_TYPE:
        return isSetChannelType();
      case REMOTE_ADRESS:
        return isSetRemoteAdress();
      case DATE:
        return isSetDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyToCheck_args)
        return this.equals((notifyToCheck_args)that);
      return false;
    }

    public boolean equals(notifyToCheck_args that) {
      if (that == null)
        return false;

      boolean this_present_channelCode = true && this.isSetChannelCode();
      boolean that_present_channelCode = true && that.isSetChannelCode();
      if (this_present_channelCode || that_present_channelCode) {
        if (!(this_present_channelCode && that_present_channelCode))
          return false;
        if (!this.channelCode.equals(that.channelCode))
          return false;
      }

      boolean this_present_channelType = true && this.isSetChannelType();
      boolean that_present_channelType = true && that.isSetChannelType();
      if (this_present_channelType || that_present_channelType) {
        if (!(this_present_channelType && that_present_channelType))
          return false;
        if (!this.channelType.equals(that.channelType))
          return false;
      }

      boolean this_present_remoteAdress = true && this.isSetRemoteAdress();
      boolean that_present_remoteAdress = true && that.isSetRemoteAdress();
      if (this_present_remoteAdress || that_present_remoteAdress) {
        if (!(this_present_remoteAdress && that_present_remoteAdress))
          return false;
        if (!this.remoteAdress.equals(that.remoteAdress))
          return false;
      }

      boolean this_present_date = true && this.isSetDate();
      boolean that_present_date = true && that.isSetDate();
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (!this.date.equals(that.date))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelCode = true && (isSetChannelCode());
      list.add(present_channelCode);
      if (present_channelCode)
        list.add(channelCode);

      boolean present_channelType = true && (isSetChannelType());
      list.add(present_channelType);
      if (present_channelType)
        list.add(channelType);

      boolean present_remoteAdress = true && (isSetRemoteAdress());
      list.add(present_remoteAdress);
      if (present_remoteAdress)
        list.add(remoteAdress);

      boolean present_date = true && (isSetDate());
      list.add(present_date);
      if (present_date)
        list.add(date);

      return list.hashCode();
    }

    @Override
    public int compareTo(notifyToCheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelCode()).compareTo(other.isSetChannelCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCode, other.channelCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelType()).compareTo(other.isSetChannelType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelType, other.channelType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRemoteAdress()).compareTo(other.isSetRemoteAdress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemoteAdress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAdress, other.remoteAdress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyToCheck_args(");
      boolean first = true;

      sb.append("channelCode:");
      if (this.channelCode == null) {
        sb.append("null");
      } else {
        sb.append(this.channelCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelType:");
      if (this.channelType == null) {
        sb.append("null");
      } else {
        sb.append(this.channelType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("remoteAdress:");
      if (this.remoteAdress == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteAdress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyToCheck_argsStandardSchemeFactory implements SchemeFactory {
      public notifyToCheck_argsStandardScheme getScheme() {
        return new notifyToCheck_argsStandardScheme();
      }
    }

    private static class notifyToCheck_argsStandardScheme extends StandardScheme<notifyToCheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyToCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelCode = iprot.readString();
                struct.setChannelCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelType = iprot.readString();
                struct.setChannelTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REMOTE_ADRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.remoteAdress = iprot.readString();
                struct.setRemoteAdressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.date = iprot.readString();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyToCheck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelCode != null) {
          oprot.writeFieldBegin(CHANNEL_CODE_FIELD_DESC);
          oprot.writeString(struct.channelCode);
          oprot.writeFieldEnd();
        }
        if (struct.channelType != null) {
          oprot.writeFieldBegin(CHANNEL_TYPE_FIELD_DESC);
          oprot.writeString(struct.channelType);
          oprot.writeFieldEnd();
        }
        if (struct.remoteAdress != null) {
          oprot.writeFieldBegin(REMOTE_ADRESS_FIELD_DESC);
          oprot.writeString(struct.remoteAdress);
          oprot.writeFieldEnd();
        }
        if (struct.date != null) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyToCheck_argsTupleSchemeFactory implements SchemeFactory {
      public notifyToCheck_argsTupleScheme getScheme() {
        return new notifyToCheck_argsTupleScheme();
      }
    }

    private static class notifyToCheck_argsTupleScheme extends TupleScheme<notifyToCheck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyToCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelCode()) {
          optionals.set(0);
        }
        if (struct.isSetChannelType()) {
          optionals.set(1);
        }
        if (struct.isSetRemoteAdress()) {
          optionals.set(2);
        }
        if (struct.isSetDate()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetChannelCode()) {
          oprot.writeString(struct.channelCode);
        }
        if (struct.isSetChannelType()) {
          oprot.writeString(struct.channelType);
        }
        if (struct.isSetRemoteAdress()) {
          oprot.writeString(struct.remoteAdress);
        }
        if (struct.isSetDate()) {
          oprot.writeString(struct.date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyToCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.channelCode = iprot.readString();
          struct.setChannelCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelType = iprot.readString();
          struct.setChannelTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.remoteAdress = iprot.readString();
          struct.setRemoteAdressIsSet(true);
        }
        if (incoming.get(3)) {
          struct.date = iprot.readString();
          struct.setDateIsSet(true);
        }
      }
    }

  }

  public static class notifyToCheck_result implements org.apache.thrift.TBase<notifyToCheck_result, notifyToCheck_result._Fields>, java.io.Serializable, Cloneable, Comparable<notifyToCheck_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyToCheck_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyToCheck_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyToCheck_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyToCheck_result.class, metaDataMap);
    }

    public notifyToCheck_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyToCheck_result(notifyToCheck_result other) {
    }

    public notifyToCheck_result deepCopy() {
      return new notifyToCheck_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyToCheck_result)
        return this.equals((notifyToCheck_result)that);
      return false;
    }

    public boolean equals(notifyToCheck_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(notifyToCheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyToCheck_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyToCheck_resultStandardSchemeFactory implements SchemeFactory {
      public notifyToCheck_resultStandardScheme getScheme() {
        return new notifyToCheck_resultStandardScheme();
      }
    }

    private static class notifyToCheck_resultStandardScheme extends StandardScheme<notifyToCheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyToCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyToCheck_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyToCheck_resultTupleSchemeFactory implements SchemeFactory {
      public notifyToCheck_resultTupleScheme getScheme() {
        return new notifyToCheck_resultTupleScheme();
      }
    }

    private static class notifyToCheck_resultTupleScheme extends TupleScheme<notifyToCheck_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyToCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyToCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
