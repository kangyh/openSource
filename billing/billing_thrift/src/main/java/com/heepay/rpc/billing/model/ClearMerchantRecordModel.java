/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-17")
public class ClearMerchantRecordModel implements org.apache.thrift.TBase<ClearMerchantRecordModel, ClearMerchantRecordModel._Fields>, java.io.Serializable, Cloneable, Comparable<ClearMerchantRecordModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClearMerchantRecordModel");

  private static final org.apache.thrift.protocol.TField CLEARING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clearingId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("productCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_AMOUNT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestAmountAmount", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MERCHANT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CHECK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("checkTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FEE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("feeTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fee", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TRANS_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("transNo", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TRANS_NO_OLD_FIELD_DESC = new org.apache.thrift.protocol.TField("transNoOld", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FEE_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("feeWay", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SETTLE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("settleTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SETTLE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("settleNo", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SETTLE_TIME_PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("settleTimePlan", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SETTLE_CYC_FIELD_DESC = new org.apache.thrift.protocol.TField("settleCyc", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField SETTLE_BATH_FIELD_DESC = new org.apache.thrift.protocol.TField("settleBath", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField FEE_SETTLE_CYC_FIELD_DESC = new org.apache.thrift.protocol.TField("feeSettleCyc", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CHECK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkStatus", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CHECK_FLG_FIELD_DESC = new org.apache.thrift.protocol.TField("checkFlg", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField SETTLE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("settleStatus", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("finishTime", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SETTLE_AMOUNT_PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("settleAmountPlan", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField TRANS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transType", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField SUCCESS_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("successAmount", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField SUCCESS_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("successTime", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField MERCHANT_ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantOrderNo", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField BUSI_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("busiTime", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField AGENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("agentName", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField AGENT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("agentCode", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardType", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField ACCOUNT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("accountNo", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField PAY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("payTime", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField PAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payType", org.apache.thrift.protocol.TType.STRING, (short)36);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClearMerchantRecordModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClearMerchantRecordModelTupleSchemeFactory());
  }

  public long clearingId; // required
  public String productCode; // required
  public String requestAmountAmount; // required
  public String merchantType; // required
  public String checkTime; // required
  public String currency; // required
  public String feeTime; // required
  public String fee; // required
  public String transNo; // required
  public String transNoOld; // required
  public String feeWay; // required
  public String settleTime; // required
  public String settleNo; // required
  public String settleTimePlan; // required
  public String settleCyc; // required
  public String settleBath; // required
  public String feeSettleCyc; // required
  public String checkStatus; // required
  public String checkFlg; // required
  public String settleStatus; // required
  public String finishTime; // required
  public String settleAmountPlan; // required
  public int merchantId; // required
  public String transType; // required
  public String successAmount; // required
  public String successTime; // required
  public String merchantOrderNo; // required
  public String busiTime; // required
  public String agentName; // required
  public String agentCode; // required
  public String bankCardType; // required
  public String merchantName; // required
  public String accountNo; // required
  public String createTime; // required
  public String payTime; // required
  public String payType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLEARING_ID((short)1, "clearingId"),
    PRODUCT_CODE((short)2, "productCode"),
    REQUEST_AMOUNT_AMOUNT((short)3, "requestAmountAmount"),
    MERCHANT_TYPE((short)4, "merchantType"),
    CHECK_TIME((short)5, "checkTime"),
    CURRENCY((short)6, "currency"),
    FEE_TIME((short)7, "feeTime"),
    FEE((short)8, "fee"),
    TRANS_NO((short)9, "transNo"),
    TRANS_NO_OLD((short)10, "transNoOld"),
    FEE_WAY((short)11, "feeWay"),
    SETTLE_TIME((short)12, "settleTime"),
    SETTLE_NO((short)13, "settleNo"),
    SETTLE_TIME_PLAN((short)14, "settleTimePlan"),
    SETTLE_CYC((short)15, "settleCyc"),
    SETTLE_BATH((short)16, "settleBath"),
    FEE_SETTLE_CYC((short)17, "feeSettleCyc"),
    CHECK_STATUS((short)18, "checkStatus"),
    CHECK_FLG((short)19, "checkFlg"),
    SETTLE_STATUS((short)20, "settleStatus"),
    FINISH_TIME((short)21, "finishTime"),
    SETTLE_AMOUNT_PLAN((short)22, "settleAmountPlan"),
    MERCHANT_ID((short)23, "merchantId"),
    TRANS_TYPE((short)24, "transType"),
    SUCCESS_AMOUNT((short)25, "successAmount"),
    SUCCESS_TIME((short)26, "successTime"),
    MERCHANT_ORDER_NO((short)27, "merchantOrderNo"),
    BUSI_TIME((short)28, "busiTime"),
    AGENT_NAME((short)29, "agentName"),
    AGENT_CODE((short)30, "agentCode"),
    BANK_CARD_TYPE((short)31, "bankCardType"),
    MERCHANT_NAME((short)32, "merchantName"),
    ACCOUNT_NO((short)33, "accountNo"),
    CREATE_TIME((short)34, "createTime"),
    PAY_TIME((short)35, "payTime"),
    PAY_TYPE((short)36, "payType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLEARING_ID
          return CLEARING_ID;
        case 2: // PRODUCT_CODE
          return PRODUCT_CODE;
        case 3: // REQUEST_AMOUNT_AMOUNT
          return REQUEST_AMOUNT_AMOUNT;
        case 4: // MERCHANT_TYPE
          return MERCHANT_TYPE;
        case 5: // CHECK_TIME
          return CHECK_TIME;
        case 6: // CURRENCY
          return CURRENCY;
        case 7: // FEE_TIME
          return FEE_TIME;
        case 8: // FEE
          return FEE;
        case 9: // TRANS_NO
          return TRANS_NO;
        case 10: // TRANS_NO_OLD
          return TRANS_NO_OLD;
        case 11: // FEE_WAY
          return FEE_WAY;
        case 12: // SETTLE_TIME
          return SETTLE_TIME;
        case 13: // SETTLE_NO
          return SETTLE_NO;
        case 14: // SETTLE_TIME_PLAN
          return SETTLE_TIME_PLAN;
        case 15: // SETTLE_CYC
          return SETTLE_CYC;
        case 16: // SETTLE_BATH
          return SETTLE_BATH;
        case 17: // FEE_SETTLE_CYC
          return FEE_SETTLE_CYC;
        case 18: // CHECK_STATUS
          return CHECK_STATUS;
        case 19: // CHECK_FLG
          return CHECK_FLG;
        case 20: // SETTLE_STATUS
          return SETTLE_STATUS;
        case 21: // FINISH_TIME
          return FINISH_TIME;
        case 22: // SETTLE_AMOUNT_PLAN
          return SETTLE_AMOUNT_PLAN;
        case 23: // MERCHANT_ID
          return MERCHANT_ID;
        case 24: // TRANS_TYPE
          return TRANS_TYPE;
        case 25: // SUCCESS_AMOUNT
          return SUCCESS_AMOUNT;
        case 26: // SUCCESS_TIME
          return SUCCESS_TIME;
        case 27: // MERCHANT_ORDER_NO
          return MERCHANT_ORDER_NO;
        case 28: // BUSI_TIME
          return BUSI_TIME;
        case 29: // AGENT_NAME
          return AGENT_NAME;
        case 30: // AGENT_CODE
          return AGENT_CODE;
        case 31: // BANK_CARD_TYPE
          return BANK_CARD_TYPE;
        case 32: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 33: // ACCOUNT_NO
          return ACCOUNT_NO;
        case 34: // CREATE_TIME
          return CREATE_TIME;
        case 35: // PAY_TIME
          return PAY_TIME;
        case 36: // PAY_TYPE
          return PAY_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLEARINGID_ISSET_ID = 0;
  private static final int __MERCHANTID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLEARING_ID, new org.apache.thrift.meta_data.FieldMetaData("clearingId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("productCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_AMOUNT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("requestAmountAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("merchantType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_TIME, new org.apache.thrift.meta_data.FieldMetaData("checkTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE_TIME, new org.apache.thrift.meta_data.FieldMetaData("feeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE, new org.apache.thrift.meta_data.FieldMetaData("fee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_NO, new org.apache.thrift.meta_data.FieldMetaData("transNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_NO_OLD, new org.apache.thrift.meta_data.FieldMetaData("transNoOld", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE_WAY, new org.apache.thrift.meta_data.FieldMetaData("feeWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_TIME, new org.apache.thrift.meta_data.FieldMetaData("settleTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_NO, new org.apache.thrift.meta_data.FieldMetaData("settleNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_TIME_PLAN, new org.apache.thrift.meta_data.FieldMetaData("settleTimePlan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_CYC, new org.apache.thrift.meta_data.FieldMetaData("settleCyc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_BATH, new org.apache.thrift.meta_data.FieldMetaData("settleBath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE_SETTLE_CYC, new org.apache.thrift.meta_data.FieldMetaData("feeSettleCyc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("checkStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_FLG, new org.apache.thrift.meta_data.FieldMetaData("checkFlg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("settleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("finishTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_AMOUNT_PLAN, new org.apache.thrift.meta_data.FieldMetaData("settleAmountPlan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCESS_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("successAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCESS_TIME, new org.apache.thrift.meta_data.FieldMetaData("successTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("merchantOrderNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSI_TIME, new org.apache.thrift.meta_data.FieldMetaData("busiTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("agentName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGENT_CODE, new org.apache.thrift.meta_data.FieldMetaData("agentCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_NO, new org.apache.thrift.meta_data.FieldMetaData("accountNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_TIME, new org.apache.thrift.meta_data.FieldMetaData("payTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClearMerchantRecordModel.class, metaDataMap);
  }

  public ClearMerchantRecordModel() {
  }

  public ClearMerchantRecordModel(
    long clearingId,
    String productCode,
    String requestAmountAmount,
    String merchantType,
    String checkTime,
    String currency,
    String feeTime,
    String fee,
    String transNo,
    String transNoOld,
    String feeWay,
    String settleTime,
    String settleNo,
    String settleTimePlan,
    String settleCyc,
    String settleBath,
    String feeSettleCyc,
    String checkStatus,
    String checkFlg,
    String settleStatus,
    String finishTime,
    String settleAmountPlan,
    int merchantId,
    String transType,
    String successAmount,
    String successTime,
    String merchantOrderNo,
    String busiTime,
    String agentName,
    String agentCode,
    String bankCardType,
    String merchantName,
    String accountNo,
    String createTime,
    String payTime,
    String payType)
  {
    this();
    this.clearingId = clearingId;
    setClearingIdIsSet(true);
    this.productCode = productCode;
    this.requestAmountAmount = requestAmountAmount;
    this.merchantType = merchantType;
    this.checkTime = checkTime;
    this.currency = currency;
    this.feeTime = feeTime;
    this.fee = fee;
    this.transNo = transNo;
    this.transNoOld = transNoOld;
    this.feeWay = feeWay;
    this.settleTime = settleTime;
    this.settleNo = settleNo;
    this.settleTimePlan = settleTimePlan;
    this.settleCyc = settleCyc;
    this.settleBath = settleBath;
    this.feeSettleCyc = feeSettleCyc;
    this.checkStatus = checkStatus;
    this.checkFlg = checkFlg;
    this.settleStatus = settleStatus;
    this.finishTime = finishTime;
    this.settleAmountPlan = settleAmountPlan;
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    this.transType = transType;
    this.successAmount = successAmount;
    this.successTime = successTime;
    this.merchantOrderNo = merchantOrderNo;
    this.busiTime = busiTime;
    this.agentName = agentName;
    this.agentCode = agentCode;
    this.bankCardType = bankCardType;
    this.merchantName = merchantName;
    this.accountNo = accountNo;
    this.createTime = createTime;
    this.payTime = payTime;
    this.payType = payType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClearMerchantRecordModel(ClearMerchantRecordModel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.clearingId = other.clearingId;
    if (other.isSetProductCode()) {
      this.productCode = other.productCode;
    }
    if (other.isSetRequestAmountAmount()) {
      this.requestAmountAmount = other.requestAmountAmount;
    }
    if (other.isSetMerchantType()) {
      this.merchantType = other.merchantType;
    }
    if (other.isSetCheckTime()) {
      this.checkTime = other.checkTime;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    if (other.isSetFeeTime()) {
      this.feeTime = other.feeTime;
    }
    if (other.isSetFee()) {
      this.fee = other.fee;
    }
    if (other.isSetTransNo()) {
      this.transNo = other.transNo;
    }
    if (other.isSetTransNoOld()) {
      this.transNoOld = other.transNoOld;
    }
    if (other.isSetFeeWay()) {
      this.feeWay = other.feeWay;
    }
    if (other.isSetSettleTime()) {
      this.settleTime = other.settleTime;
    }
    if (other.isSetSettleNo()) {
      this.settleNo = other.settleNo;
    }
    if (other.isSetSettleTimePlan()) {
      this.settleTimePlan = other.settleTimePlan;
    }
    if (other.isSetSettleCyc()) {
      this.settleCyc = other.settleCyc;
    }
    if (other.isSetSettleBath()) {
      this.settleBath = other.settleBath;
    }
    if (other.isSetFeeSettleCyc()) {
      this.feeSettleCyc = other.feeSettleCyc;
    }
    if (other.isSetCheckStatus()) {
      this.checkStatus = other.checkStatus;
    }
    if (other.isSetCheckFlg()) {
      this.checkFlg = other.checkFlg;
    }
    if (other.isSetSettleStatus()) {
      this.settleStatus = other.settleStatus;
    }
    if (other.isSetFinishTime()) {
      this.finishTime = other.finishTime;
    }
    if (other.isSetSettleAmountPlan()) {
      this.settleAmountPlan = other.settleAmountPlan;
    }
    this.merchantId = other.merchantId;
    if (other.isSetTransType()) {
      this.transType = other.transType;
    }
    if (other.isSetSuccessAmount()) {
      this.successAmount = other.successAmount;
    }
    if (other.isSetSuccessTime()) {
      this.successTime = other.successTime;
    }
    if (other.isSetMerchantOrderNo()) {
      this.merchantOrderNo = other.merchantOrderNo;
    }
    if (other.isSetBusiTime()) {
      this.busiTime = other.busiTime;
    }
    if (other.isSetAgentName()) {
      this.agentName = other.agentName;
    }
    if (other.isSetAgentCode()) {
      this.agentCode = other.agentCode;
    }
    if (other.isSetBankCardType()) {
      this.bankCardType = other.bankCardType;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    if (other.isSetAccountNo()) {
      this.accountNo = other.accountNo;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetPayTime()) {
      this.payTime = other.payTime;
    }
    if (other.isSetPayType()) {
      this.payType = other.payType;
    }
  }

  public ClearMerchantRecordModel deepCopy() {
    return new ClearMerchantRecordModel(this);
  }

  @Override
  public void clear() {
    setClearingIdIsSet(false);
    this.clearingId = 0;
    this.productCode = null;
    this.requestAmountAmount = null;
    this.merchantType = null;
    this.checkTime = null;
    this.currency = null;
    this.feeTime = null;
    this.fee = null;
    this.transNo = null;
    this.transNoOld = null;
    this.feeWay = null;
    this.settleTime = null;
    this.settleNo = null;
    this.settleTimePlan = null;
    this.settleCyc = null;
    this.settleBath = null;
    this.feeSettleCyc = null;
    this.checkStatus = null;
    this.checkFlg = null;
    this.settleStatus = null;
    this.finishTime = null;
    this.settleAmountPlan = null;
    setMerchantIdIsSet(false);
    this.merchantId = 0;
    this.transType = null;
    this.successAmount = null;
    this.successTime = null;
    this.merchantOrderNo = null;
    this.busiTime = null;
    this.agentName = null;
    this.agentCode = null;
    this.bankCardType = null;
    this.merchantName = null;
    this.accountNo = null;
    this.createTime = null;
    this.payTime = null;
    this.payType = null;
  }

  public long getClearingId() {
    return this.clearingId;
  }

  public ClearMerchantRecordModel setClearingId(long clearingId) {
    this.clearingId = clearingId;
    setClearingIdIsSet(true);
    return this;
  }

  public void unsetClearingId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLEARINGID_ISSET_ID);
  }

  /** Returns true if field clearingId is set (has been assigned a value) and false otherwise */
  public boolean isSetClearingId() {
    return EncodingUtils.testBit(__isset_bitfield, __CLEARINGID_ISSET_ID);
  }

  public void setClearingIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLEARINGID_ISSET_ID, value);
  }

  public String getProductCode() {
    return this.productCode;
  }

  public ClearMerchantRecordModel setProductCode(String productCode) {
    this.productCode = productCode;
    return this;
  }

  public void unsetProductCode() {
    this.productCode = null;
  }

  /** Returns true if field productCode is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCode() {
    return this.productCode != null;
  }

  public void setProductCodeIsSet(boolean value) {
    if (!value) {
      this.productCode = null;
    }
  }

  public String getRequestAmountAmount() {
    return this.requestAmountAmount;
  }

  public ClearMerchantRecordModel setRequestAmountAmount(String requestAmountAmount) {
    this.requestAmountAmount = requestAmountAmount;
    return this;
  }

  public void unsetRequestAmountAmount() {
    this.requestAmountAmount = null;
  }

  /** Returns true if field requestAmountAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestAmountAmount() {
    return this.requestAmountAmount != null;
  }

  public void setRequestAmountAmountIsSet(boolean value) {
    if (!value) {
      this.requestAmountAmount = null;
    }
  }

  public String getMerchantType() {
    return this.merchantType;
  }

  public ClearMerchantRecordModel setMerchantType(String merchantType) {
    this.merchantType = merchantType;
    return this;
  }

  public void unsetMerchantType() {
    this.merchantType = null;
  }

  /** Returns true if field merchantType is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantType() {
    return this.merchantType != null;
  }

  public void setMerchantTypeIsSet(boolean value) {
    if (!value) {
      this.merchantType = null;
    }
  }

  public String getCheckTime() {
    return this.checkTime;
  }

  public ClearMerchantRecordModel setCheckTime(String checkTime) {
    this.checkTime = checkTime;
    return this;
  }

  public void unsetCheckTime() {
    this.checkTime = null;
  }

  /** Returns true if field checkTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckTime() {
    return this.checkTime != null;
  }

  public void setCheckTimeIsSet(boolean value) {
    if (!value) {
      this.checkTime = null;
    }
  }

  public String getCurrency() {
    return this.currency;
  }

  public ClearMerchantRecordModel setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public String getFeeTime() {
    return this.feeTime;
  }

  public ClearMerchantRecordModel setFeeTime(String feeTime) {
    this.feeTime = feeTime;
    return this;
  }

  public void unsetFeeTime() {
    this.feeTime = null;
  }

  /** Returns true if field feeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeTime() {
    return this.feeTime != null;
  }

  public void setFeeTimeIsSet(boolean value) {
    if (!value) {
      this.feeTime = null;
    }
  }

  public String getFee() {
    return this.fee;
  }

  public ClearMerchantRecordModel setFee(String fee) {
    this.fee = fee;
    return this;
  }

  public void unsetFee() {
    this.fee = null;
  }

  /** Returns true if field fee is set (has been assigned a value) and false otherwise */
  public boolean isSetFee() {
    return this.fee != null;
  }

  public void setFeeIsSet(boolean value) {
    if (!value) {
      this.fee = null;
    }
  }

  public String getTransNo() {
    return this.transNo;
  }

  public ClearMerchantRecordModel setTransNo(String transNo) {
    this.transNo = transNo;
    return this;
  }

  public void unsetTransNo() {
    this.transNo = null;
  }

  /** Returns true if field transNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTransNo() {
    return this.transNo != null;
  }

  public void setTransNoIsSet(boolean value) {
    if (!value) {
      this.transNo = null;
    }
  }

  public String getTransNoOld() {
    return this.transNoOld;
  }

  public ClearMerchantRecordModel setTransNoOld(String transNoOld) {
    this.transNoOld = transNoOld;
    return this;
  }

  public void unsetTransNoOld() {
    this.transNoOld = null;
  }

  /** Returns true if field transNoOld is set (has been assigned a value) and false otherwise */
  public boolean isSetTransNoOld() {
    return this.transNoOld != null;
  }

  public void setTransNoOldIsSet(boolean value) {
    if (!value) {
      this.transNoOld = null;
    }
  }

  public String getFeeWay() {
    return this.feeWay;
  }

  public ClearMerchantRecordModel setFeeWay(String feeWay) {
    this.feeWay = feeWay;
    return this;
  }

  public void unsetFeeWay() {
    this.feeWay = null;
  }

  /** Returns true if field feeWay is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeWay() {
    return this.feeWay != null;
  }

  public void setFeeWayIsSet(boolean value) {
    if (!value) {
      this.feeWay = null;
    }
  }

  public String getSettleTime() {
    return this.settleTime;
  }

  public ClearMerchantRecordModel setSettleTime(String settleTime) {
    this.settleTime = settleTime;
    return this;
  }

  public void unsetSettleTime() {
    this.settleTime = null;
  }

  /** Returns true if field settleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleTime() {
    return this.settleTime != null;
  }

  public void setSettleTimeIsSet(boolean value) {
    if (!value) {
      this.settleTime = null;
    }
  }

  public String getSettleNo() {
    return this.settleNo;
  }

  public ClearMerchantRecordModel setSettleNo(String settleNo) {
    this.settleNo = settleNo;
    return this;
  }

  public void unsetSettleNo() {
    this.settleNo = null;
  }

  /** Returns true if field settleNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleNo() {
    return this.settleNo != null;
  }

  public void setSettleNoIsSet(boolean value) {
    if (!value) {
      this.settleNo = null;
    }
  }

  public String getSettleTimePlan() {
    return this.settleTimePlan;
  }

  public ClearMerchantRecordModel setSettleTimePlan(String settleTimePlan) {
    this.settleTimePlan = settleTimePlan;
    return this;
  }

  public void unsetSettleTimePlan() {
    this.settleTimePlan = null;
  }

  /** Returns true if field settleTimePlan is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleTimePlan() {
    return this.settleTimePlan != null;
  }

  public void setSettleTimePlanIsSet(boolean value) {
    if (!value) {
      this.settleTimePlan = null;
    }
  }

  public String getSettleCyc() {
    return this.settleCyc;
  }

  public ClearMerchantRecordModel setSettleCyc(String settleCyc) {
    this.settleCyc = settleCyc;
    return this;
  }

  public void unsetSettleCyc() {
    this.settleCyc = null;
  }

  /** Returns true if field settleCyc is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleCyc() {
    return this.settleCyc != null;
  }

  public void setSettleCycIsSet(boolean value) {
    if (!value) {
      this.settleCyc = null;
    }
  }

  public String getSettleBath() {
    return this.settleBath;
  }

  public ClearMerchantRecordModel setSettleBath(String settleBath) {
    this.settleBath = settleBath;
    return this;
  }

  public void unsetSettleBath() {
    this.settleBath = null;
  }

  /** Returns true if field settleBath is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleBath() {
    return this.settleBath != null;
  }

  public void setSettleBathIsSet(boolean value) {
    if (!value) {
      this.settleBath = null;
    }
  }

  public String getFeeSettleCyc() {
    return this.feeSettleCyc;
  }

  public ClearMerchantRecordModel setFeeSettleCyc(String feeSettleCyc) {
    this.feeSettleCyc = feeSettleCyc;
    return this;
  }

  public void unsetFeeSettleCyc() {
    this.feeSettleCyc = null;
  }

  /** Returns true if field feeSettleCyc is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeSettleCyc() {
    return this.feeSettleCyc != null;
  }

  public void setFeeSettleCycIsSet(boolean value) {
    if (!value) {
      this.feeSettleCyc = null;
    }
  }

  public String getCheckStatus() {
    return this.checkStatus;
  }

  public ClearMerchantRecordModel setCheckStatus(String checkStatus) {
    this.checkStatus = checkStatus;
    return this;
  }

  public void unsetCheckStatus() {
    this.checkStatus = null;
  }

  /** Returns true if field checkStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckStatus() {
    return this.checkStatus != null;
  }

  public void setCheckStatusIsSet(boolean value) {
    if (!value) {
      this.checkStatus = null;
    }
  }

  public String getCheckFlg() {
    return this.checkFlg;
  }

  public ClearMerchantRecordModel setCheckFlg(String checkFlg) {
    this.checkFlg = checkFlg;
    return this;
  }

  public void unsetCheckFlg() {
    this.checkFlg = null;
  }

  /** Returns true if field checkFlg is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckFlg() {
    return this.checkFlg != null;
  }

  public void setCheckFlgIsSet(boolean value) {
    if (!value) {
      this.checkFlg = null;
    }
  }

  public String getSettleStatus() {
    return this.settleStatus;
  }

  public ClearMerchantRecordModel setSettleStatus(String settleStatus) {
    this.settleStatus = settleStatus;
    return this;
  }

  public void unsetSettleStatus() {
    this.settleStatus = null;
  }

  /** Returns true if field settleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleStatus() {
    return this.settleStatus != null;
  }

  public void setSettleStatusIsSet(boolean value) {
    if (!value) {
      this.settleStatus = null;
    }
  }

  public String getFinishTime() {
    return this.finishTime;
  }

  public ClearMerchantRecordModel setFinishTime(String finishTime) {
    this.finishTime = finishTime;
    return this;
  }

  public void unsetFinishTime() {
    this.finishTime = null;
  }

  /** Returns true if field finishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishTime() {
    return this.finishTime != null;
  }

  public void setFinishTimeIsSet(boolean value) {
    if (!value) {
      this.finishTime = null;
    }
  }

  public String getSettleAmountPlan() {
    return this.settleAmountPlan;
  }

  public ClearMerchantRecordModel setSettleAmountPlan(String settleAmountPlan) {
    this.settleAmountPlan = settleAmountPlan;
    return this;
  }

  public void unsetSettleAmountPlan() {
    this.settleAmountPlan = null;
  }

  /** Returns true if field settleAmountPlan is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleAmountPlan() {
    return this.settleAmountPlan != null;
  }

  public void setSettleAmountPlanIsSet(boolean value) {
    if (!value) {
      this.settleAmountPlan = null;
    }
  }

  public int getMerchantId() {
    return this.merchantId;
  }

  public ClearMerchantRecordModel setMerchantId(int merchantId) {
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    return this;
  }

  public void unsetMerchantId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  public void setMerchantIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTID_ISSET_ID, value);
  }

  public String getTransType() {
    return this.transType;
  }

  public ClearMerchantRecordModel setTransType(String transType) {
    this.transType = transType;
    return this;
  }

  public void unsetTransType() {
    this.transType = null;
  }

  /** Returns true if field transType is set (has been assigned a value) and false otherwise */
  public boolean isSetTransType() {
    return this.transType != null;
  }

  public void setTransTypeIsSet(boolean value) {
    if (!value) {
      this.transType = null;
    }
  }

  public String getSuccessAmount() {
    return this.successAmount;
  }

  public ClearMerchantRecordModel setSuccessAmount(String successAmount) {
    this.successAmount = successAmount;
    return this;
  }

  public void unsetSuccessAmount() {
    this.successAmount = null;
  }

  /** Returns true if field successAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessAmount() {
    return this.successAmount != null;
  }

  public void setSuccessAmountIsSet(boolean value) {
    if (!value) {
      this.successAmount = null;
    }
  }

  public String getSuccessTime() {
    return this.successTime;
  }

  public ClearMerchantRecordModel setSuccessTime(String successTime) {
    this.successTime = successTime;
    return this;
  }

  public void unsetSuccessTime() {
    this.successTime = null;
  }

  /** Returns true if field successTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessTime() {
    return this.successTime != null;
  }

  public void setSuccessTimeIsSet(boolean value) {
    if (!value) {
      this.successTime = null;
    }
  }

  public String getMerchantOrderNo() {
    return this.merchantOrderNo;
  }

  public ClearMerchantRecordModel setMerchantOrderNo(String merchantOrderNo) {
    this.merchantOrderNo = merchantOrderNo;
    return this;
  }

  public void unsetMerchantOrderNo() {
    this.merchantOrderNo = null;
  }

  /** Returns true if field merchantOrderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantOrderNo() {
    return this.merchantOrderNo != null;
  }

  public void setMerchantOrderNoIsSet(boolean value) {
    if (!value) {
      this.merchantOrderNo = null;
    }
  }

  public String getBusiTime() {
    return this.busiTime;
  }

  public ClearMerchantRecordModel setBusiTime(String busiTime) {
    this.busiTime = busiTime;
    return this;
  }

  public void unsetBusiTime() {
    this.busiTime = null;
  }

  /** Returns true if field busiTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBusiTime() {
    return this.busiTime != null;
  }

  public void setBusiTimeIsSet(boolean value) {
    if (!value) {
      this.busiTime = null;
    }
  }

  public String getAgentName() {
    return this.agentName;
  }

  public ClearMerchantRecordModel setAgentName(String agentName) {
    this.agentName = agentName;
    return this;
  }

  public void unsetAgentName() {
    this.agentName = null;
  }

  /** Returns true if field agentName is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentName() {
    return this.agentName != null;
  }

  public void setAgentNameIsSet(boolean value) {
    if (!value) {
      this.agentName = null;
    }
  }

  public String getAgentCode() {
    return this.agentCode;
  }

  public ClearMerchantRecordModel setAgentCode(String agentCode) {
    this.agentCode = agentCode;
    return this;
  }

  public void unsetAgentCode() {
    this.agentCode = null;
  }

  /** Returns true if field agentCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentCode() {
    return this.agentCode != null;
  }

  public void setAgentCodeIsSet(boolean value) {
    if (!value) {
      this.agentCode = null;
    }
  }

  public String getBankCardType() {
    return this.bankCardType;
  }

  public ClearMerchantRecordModel setBankCardType(String bankCardType) {
    this.bankCardType = bankCardType;
    return this;
  }

  public void unsetBankCardType() {
    this.bankCardType = null;
  }

  /** Returns true if field bankCardType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardType() {
    return this.bankCardType != null;
  }

  public void setBankCardTypeIsSet(boolean value) {
    if (!value) {
      this.bankCardType = null;
    }
  }

  public String getMerchantName() {
    return this.merchantName;
  }

  public ClearMerchantRecordModel setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  public String getAccountNo() {
    return this.accountNo;
  }

  public ClearMerchantRecordModel setAccountNo(String accountNo) {
    this.accountNo = accountNo;
    return this;
  }

  public void unsetAccountNo() {
    this.accountNo = null;
  }

  /** Returns true if field accountNo is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountNo() {
    return this.accountNo != null;
  }

  public void setAccountNoIsSet(boolean value) {
    if (!value) {
      this.accountNo = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public ClearMerchantRecordModel setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getPayTime() {
    return this.payTime;
  }

  public ClearMerchantRecordModel setPayTime(String payTime) {
    this.payTime = payTime;
    return this;
  }

  public void unsetPayTime() {
    this.payTime = null;
  }

  /** Returns true if field payTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPayTime() {
    return this.payTime != null;
  }

  public void setPayTimeIsSet(boolean value) {
    if (!value) {
      this.payTime = null;
    }
  }

  public String getPayType() {
    return this.payType;
  }

  public ClearMerchantRecordModel setPayType(String payType) {
    this.payType = payType;
    return this;
  }

  public void unsetPayType() {
    this.payType = null;
  }

  /** Returns true if field payType is set (has been assigned a value) and false otherwise */
  public boolean isSetPayType() {
    return this.payType != null;
  }

  public void setPayTypeIsSet(boolean value) {
    if (!value) {
      this.payType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLEARING_ID:
      if (value == null) {
        unsetClearingId();
      } else {
        setClearingId((Long)value);
      }
      break;

    case PRODUCT_CODE:
      if (value == null) {
        unsetProductCode();
      } else {
        setProductCode((String)value);
      }
      break;

    case REQUEST_AMOUNT_AMOUNT:
      if (value == null) {
        unsetRequestAmountAmount();
      } else {
        setRequestAmountAmount((String)value);
      }
      break;

    case MERCHANT_TYPE:
      if (value == null) {
        unsetMerchantType();
      } else {
        setMerchantType((String)value);
      }
      break;

    case CHECK_TIME:
      if (value == null) {
        unsetCheckTime();
      } else {
        setCheckTime((String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case FEE_TIME:
      if (value == null) {
        unsetFeeTime();
      } else {
        setFeeTime((String)value);
      }
      break;

    case FEE:
      if (value == null) {
        unsetFee();
      } else {
        setFee((String)value);
      }
      break;

    case TRANS_NO:
      if (value == null) {
        unsetTransNo();
      } else {
        setTransNo((String)value);
      }
      break;

    case TRANS_NO_OLD:
      if (value == null) {
        unsetTransNoOld();
      } else {
        setTransNoOld((String)value);
      }
      break;

    case FEE_WAY:
      if (value == null) {
        unsetFeeWay();
      } else {
        setFeeWay((String)value);
      }
      break;

    case SETTLE_TIME:
      if (value == null) {
        unsetSettleTime();
      } else {
        setSettleTime((String)value);
      }
      break;

    case SETTLE_NO:
      if (value == null) {
        unsetSettleNo();
      } else {
        setSettleNo((String)value);
      }
      break;

    case SETTLE_TIME_PLAN:
      if (value == null) {
        unsetSettleTimePlan();
      } else {
        setSettleTimePlan((String)value);
      }
      break;

    case SETTLE_CYC:
      if (value == null) {
        unsetSettleCyc();
      } else {
        setSettleCyc((String)value);
      }
      break;

    case SETTLE_BATH:
      if (value == null) {
        unsetSettleBath();
      } else {
        setSettleBath((String)value);
      }
      break;

    case FEE_SETTLE_CYC:
      if (value == null) {
        unsetFeeSettleCyc();
      } else {
        setFeeSettleCyc((String)value);
      }
      break;

    case CHECK_STATUS:
      if (value == null) {
        unsetCheckStatus();
      } else {
        setCheckStatus((String)value);
      }
      break;

    case CHECK_FLG:
      if (value == null) {
        unsetCheckFlg();
      } else {
        setCheckFlg((String)value);
      }
      break;

    case SETTLE_STATUS:
      if (value == null) {
        unsetSettleStatus();
      } else {
        setSettleStatus((String)value);
      }
      break;

    case FINISH_TIME:
      if (value == null) {
        unsetFinishTime();
      } else {
        setFinishTime((String)value);
      }
      break;

    case SETTLE_AMOUNT_PLAN:
      if (value == null) {
        unsetSettleAmountPlan();
      } else {
        setSettleAmountPlan((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((Integer)value);
      }
      break;

    case TRANS_TYPE:
      if (value == null) {
        unsetTransType();
      } else {
        setTransType((String)value);
      }
      break;

    case SUCCESS_AMOUNT:
      if (value == null) {
        unsetSuccessAmount();
      } else {
        setSuccessAmount((String)value);
      }
      break;

    case SUCCESS_TIME:
      if (value == null) {
        unsetSuccessTime();
      } else {
        setSuccessTime((String)value);
      }
      break;

    case MERCHANT_ORDER_NO:
      if (value == null) {
        unsetMerchantOrderNo();
      } else {
        setMerchantOrderNo((String)value);
      }
      break;

    case BUSI_TIME:
      if (value == null) {
        unsetBusiTime();
      } else {
        setBusiTime((String)value);
      }
      break;

    case AGENT_NAME:
      if (value == null) {
        unsetAgentName();
      } else {
        setAgentName((String)value);
      }
      break;

    case AGENT_CODE:
      if (value == null) {
        unsetAgentCode();
      } else {
        setAgentCode((String)value);
      }
      break;

    case BANK_CARD_TYPE:
      if (value == null) {
        unsetBankCardType();
      } else {
        setBankCardType((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case ACCOUNT_NO:
      if (value == null) {
        unsetAccountNo();
      } else {
        setAccountNo((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case PAY_TIME:
      if (value == null) {
        unsetPayTime();
      } else {
        setPayTime((String)value);
      }
      break;

    case PAY_TYPE:
      if (value == null) {
        unsetPayType();
      } else {
        setPayType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLEARING_ID:
      return getClearingId();

    case PRODUCT_CODE:
      return getProductCode();

    case REQUEST_AMOUNT_AMOUNT:
      return getRequestAmountAmount();

    case MERCHANT_TYPE:
      return getMerchantType();

    case CHECK_TIME:
      return getCheckTime();

    case CURRENCY:
      return getCurrency();

    case FEE_TIME:
      return getFeeTime();

    case FEE:
      return getFee();

    case TRANS_NO:
      return getTransNo();

    case TRANS_NO_OLD:
      return getTransNoOld();

    case FEE_WAY:
      return getFeeWay();

    case SETTLE_TIME:
      return getSettleTime();

    case SETTLE_NO:
      return getSettleNo();

    case SETTLE_TIME_PLAN:
      return getSettleTimePlan();

    case SETTLE_CYC:
      return getSettleCyc();

    case SETTLE_BATH:
      return getSettleBath();

    case FEE_SETTLE_CYC:
      return getFeeSettleCyc();

    case CHECK_STATUS:
      return getCheckStatus();

    case CHECK_FLG:
      return getCheckFlg();

    case SETTLE_STATUS:
      return getSettleStatus();

    case FINISH_TIME:
      return getFinishTime();

    case SETTLE_AMOUNT_PLAN:
      return getSettleAmountPlan();

    case MERCHANT_ID:
      return getMerchantId();

    case TRANS_TYPE:
      return getTransType();

    case SUCCESS_AMOUNT:
      return getSuccessAmount();

    case SUCCESS_TIME:
      return getSuccessTime();

    case MERCHANT_ORDER_NO:
      return getMerchantOrderNo();

    case BUSI_TIME:
      return getBusiTime();

    case AGENT_NAME:
      return getAgentName();

    case AGENT_CODE:
      return getAgentCode();

    case BANK_CARD_TYPE:
      return getBankCardType();

    case MERCHANT_NAME:
      return getMerchantName();

    case ACCOUNT_NO:
      return getAccountNo();

    case CREATE_TIME:
      return getCreateTime();

    case PAY_TIME:
      return getPayTime();

    case PAY_TYPE:
      return getPayType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLEARING_ID:
      return isSetClearingId();
    case PRODUCT_CODE:
      return isSetProductCode();
    case REQUEST_AMOUNT_AMOUNT:
      return isSetRequestAmountAmount();
    case MERCHANT_TYPE:
      return isSetMerchantType();
    case CHECK_TIME:
      return isSetCheckTime();
    case CURRENCY:
      return isSetCurrency();
    case FEE_TIME:
      return isSetFeeTime();
    case FEE:
      return isSetFee();
    case TRANS_NO:
      return isSetTransNo();
    case TRANS_NO_OLD:
      return isSetTransNoOld();
    case FEE_WAY:
      return isSetFeeWay();
    case SETTLE_TIME:
      return isSetSettleTime();
    case SETTLE_NO:
      return isSetSettleNo();
    case SETTLE_TIME_PLAN:
      return isSetSettleTimePlan();
    case SETTLE_CYC:
      return isSetSettleCyc();
    case SETTLE_BATH:
      return isSetSettleBath();
    case FEE_SETTLE_CYC:
      return isSetFeeSettleCyc();
    case CHECK_STATUS:
      return isSetCheckStatus();
    case CHECK_FLG:
      return isSetCheckFlg();
    case SETTLE_STATUS:
      return isSetSettleStatus();
    case FINISH_TIME:
      return isSetFinishTime();
    case SETTLE_AMOUNT_PLAN:
      return isSetSettleAmountPlan();
    case MERCHANT_ID:
      return isSetMerchantId();
    case TRANS_TYPE:
      return isSetTransType();
    case SUCCESS_AMOUNT:
      return isSetSuccessAmount();
    case SUCCESS_TIME:
      return isSetSuccessTime();
    case MERCHANT_ORDER_NO:
      return isSetMerchantOrderNo();
    case BUSI_TIME:
      return isSetBusiTime();
    case AGENT_NAME:
      return isSetAgentName();
    case AGENT_CODE:
      return isSetAgentCode();
    case BANK_CARD_TYPE:
      return isSetBankCardType();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case ACCOUNT_NO:
      return isSetAccountNo();
    case CREATE_TIME:
      return isSetCreateTime();
    case PAY_TIME:
      return isSetPayTime();
    case PAY_TYPE:
      return isSetPayType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClearMerchantRecordModel)
      return this.equals((ClearMerchantRecordModel)that);
    return false;
  }

  public boolean equals(ClearMerchantRecordModel that) {
    if (that == null)
      return false;

    boolean this_present_clearingId = true;
    boolean that_present_clearingId = true;
    if (this_present_clearingId || that_present_clearingId) {
      if (!(this_present_clearingId && that_present_clearingId))
        return false;
      if (this.clearingId != that.clearingId)
        return false;
    }

    boolean this_present_productCode = true && this.isSetProductCode();
    boolean that_present_productCode = true && that.isSetProductCode();
    if (this_present_productCode || that_present_productCode) {
      if (!(this_present_productCode && that_present_productCode))
        return false;
      if (!this.productCode.equals(that.productCode))
        return false;
    }

    boolean this_present_requestAmountAmount = true && this.isSetRequestAmountAmount();
    boolean that_present_requestAmountAmount = true && that.isSetRequestAmountAmount();
    if (this_present_requestAmountAmount || that_present_requestAmountAmount) {
      if (!(this_present_requestAmountAmount && that_present_requestAmountAmount))
        return false;
      if (!this.requestAmountAmount.equals(that.requestAmountAmount))
        return false;
    }

    boolean this_present_merchantType = true && this.isSetMerchantType();
    boolean that_present_merchantType = true && that.isSetMerchantType();
    if (this_present_merchantType || that_present_merchantType) {
      if (!(this_present_merchantType && that_present_merchantType))
        return false;
      if (!this.merchantType.equals(that.merchantType))
        return false;
    }

    boolean this_present_checkTime = true && this.isSetCheckTime();
    boolean that_present_checkTime = true && that.isSetCheckTime();
    if (this_present_checkTime || that_present_checkTime) {
      if (!(this_present_checkTime && that_present_checkTime))
        return false;
      if (!this.checkTime.equals(that.checkTime))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_feeTime = true && this.isSetFeeTime();
    boolean that_present_feeTime = true && that.isSetFeeTime();
    if (this_present_feeTime || that_present_feeTime) {
      if (!(this_present_feeTime && that_present_feeTime))
        return false;
      if (!this.feeTime.equals(that.feeTime))
        return false;
    }

    boolean this_present_fee = true && this.isSetFee();
    boolean that_present_fee = true && that.isSetFee();
    if (this_present_fee || that_present_fee) {
      if (!(this_present_fee && that_present_fee))
        return false;
      if (!this.fee.equals(that.fee))
        return false;
    }

    boolean this_present_transNo = true && this.isSetTransNo();
    boolean that_present_transNo = true && that.isSetTransNo();
    if (this_present_transNo || that_present_transNo) {
      if (!(this_present_transNo && that_present_transNo))
        return false;
      if (!this.transNo.equals(that.transNo))
        return false;
    }

    boolean this_present_transNoOld = true && this.isSetTransNoOld();
    boolean that_present_transNoOld = true && that.isSetTransNoOld();
    if (this_present_transNoOld || that_present_transNoOld) {
      if (!(this_present_transNoOld && that_present_transNoOld))
        return false;
      if (!this.transNoOld.equals(that.transNoOld))
        return false;
    }

    boolean this_present_feeWay = true && this.isSetFeeWay();
    boolean that_present_feeWay = true && that.isSetFeeWay();
    if (this_present_feeWay || that_present_feeWay) {
      if (!(this_present_feeWay && that_present_feeWay))
        return false;
      if (!this.feeWay.equals(that.feeWay))
        return false;
    }

    boolean this_present_settleTime = true && this.isSetSettleTime();
    boolean that_present_settleTime = true && that.isSetSettleTime();
    if (this_present_settleTime || that_present_settleTime) {
      if (!(this_present_settleTime && that_present_settleTime))
        return false;
      if (!this.settleTime.equals(that.settleTime))
        return false;
    }

    boolean this_present_settleNo = true && this.isSetSettleNo();
    boolean that_present_settleNo = true && that.isSetSettleNo();
    if (this_present_settleNo || that_present_settleNo) {
      if (!(this_present_settleNo && that_present_settleNo))
        return false;
      if (!this.settleNo.equals(that.settleNo))
        return false;
    }

    boolean this_present_settleTimePlan = true && this.isSetSettleTimePlan();
    boolean that_present_settleTimePlan = true && that.isSetSettleTimePlan();
    if (this_present_settleTimePlan || that_present_settleTimePlan) {
      if (!(this_present_settleTimePlan && that_present_settleTimePlan))
        return false;
      if (!this.settleTimePlan.equals(that.settleTimePlan))
        return false;
    }

    boolean this_present_settleCyc = true && this.isSetSettleCyc();
    boolean that_present_settleCyc = true && that.isSetSettleCyc();
    if (this_present_settleCyc || that_present_settleCyc) {
      if (!(this_present_settleCyc && that_present_settleCyc))
        return false;
      if (!this.settleCyc.equals(that.settleCyc))
        return false;
    }

    boolean this_present_settleBath = true && this.isSetSettleBath();
    boolean that_present_settleBath = true && that.isSetSettleBath();
    if (this_present_settleBath || that_present_settleBath) {
      if (!(this_present_settleBath && that_present_settleBath))
        return false;
      if (!this.settleBath.equals(that.settleBath))
        return false;
    }

    boolean this_present_feeSettleCyc = true && this.isSetFeeSettleCyc();
    boolean that_present_feeSettleCyc = true && that.isSetFeeSettleCyc();
    if (this_present_feeSettleCyc || that_present_feeSettleCyc) {
      if (!(this_present_feeSettleCyc && that_present_feeSettleCyc))
        return false;
      if (!this.feeSettleCyc.equals(that.feeSettleCyc))
        return false;
    }

    boolean this_present_checkStatus = true && this.isSetCheckStatus();
    boolean that_present_checkStatus = true && that.isSetCheckStatus();
    if (this_present_checkStatus || that_present_checkStatus) {
      if (!(this_present_checkStatus && that_present_checkStatus))
        return false;
      if (!this.checkStatus.equals(that.checkStatus))
        return false;
    }

    boolean this_present_checkFlg = true && this.isSetCheckFlg();
    boolean that_present_checkFlg = true && that.isSetCheckFlg();
    if (this_present_checkFlg || that_present_checkFlg) {
      if (!(this_present_checkFlg && that_present_checkFlg))
        return false;
      if (!this.checkFlg.equals(that.checkFlg))
        return false;
    }

    boolean this_present_settleStatus = true && this.isSetSettleStatus();
    boolean that_present_settleStatus = true && that.isSetSettleStatus();
    if (this_present_settleStatus || that_present_settleStatus) {
      if (!(this_present_settleStatus && that_present_settleStatus))
        return false;
      if (!this.settleStatus.equals(that.settleStatus))
        return false;
    }

    boolean this_present_finishTime = true && this.isSetFinishTime();
    boolean that_present_finishTime = true && that.isSetFinishTime();
    if (this_present_finishTime || that_present_finishTime) {
      if (!(this_present_finishTime && that_present_finishTime))
        return false;
      if (!this.finishTime.equals(that.finishTime))
        return false;
    }

    boolean this_present_settleAmountPlan = true && this.isSetSettleAmountPlan();
    boolean that_present_settleAmountPlan = true && that.isSetSettleAmountPlan();
    if (this_present_settleAmountPlan || that_present_settleAmountPlan) {
      if (!(this_present_settleAmountPlan && that_present_settleAmountPlan))
        return false;
      if (!this.settleAmountPlan.equals(that.settleAmountPlan))
        return false;
    }

    boolean this_present_merchantId = true;
    boolean that_present_merchantId = true;
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (this.merchantId != that.merchantId)
        return false;
    }

    boolean this_present_transType = true && this.isSetTransType();
    boolean that_present_transType = true && that.isSetTransType();
    if (this_present_transType || that_present_transType) {
      if (!(this_present_transType && that_present_transType))
        return false;
      if (!this.transType.equals(that.transType))
        return false;
    }

    boolean this_present_successAmount = true && this.isSetSuccessAmount();
    boolean that_present_successAmount = true && that.isSetSuccessAmount();
    if (this_present_successAmount || that_present_successAmount) {
      if (!(this_present_successAmount && that_present_successAmount))
        return false;
      if (!this.successAmount.equals(that.successAmount))
        return false;
    }

    boolean this_present_successTime = true && this.isSetSuccessTime();
    boolean that_present_successTime = true && that.isSetSuccessTime();
    if (this_present_successTime || that_present_successTime) {
      if (!(this_present_successTime && that_present_successTime))
        return false;
      if (!this.successTime.equals(that.successTime))
        return false;
    }

    boolean this_present_merchantOrderNo = true && this.isSetMerchantOrderNo();
    boolean that_present_merchantOrderNo = true && that.isSetMerchantOrderNo();
    if (this_present_merchantOrderNo || that_present_merchantOrderNo) {
      if (!(this_present_merchantOrderNo && that_present_merchantOrderNo))
        return false;
      if (!this.merchantOrderNo.equals(that.merchantOrderNo))
        return false;
    }

    boolean this_present_busiTime = true && this.isSetBusiTime();
    boolean that_present_busiTime = true && that.isSetBusiTime();
    if (this_present_busiTime || that_present_busiTime) {
      if (!(this_present_busiTime && that_present_busiTime))
        return false;
      if (!this.busiTime.equals(that.busiTime))
        return false;
    }

    boolean this_present_agentName = true && this.isSetAgentName();
    boolean that_present_agentName = true && that.isSetAgentName();
    if (this_present_agentName || that_present_agentName) {
      if (!(this_present_agentName && that_present_agentName))
        return false;
      if (!this.agentName.equals(that.agentName))
        return false;
    }

    boolean this_present_agentCode = true && this.isSetAgentCode();
    boolean that_present_agentCode = true && that.isSetAgentCode();
    if (this_present_agentCode || that_present_agentCode) {
      if (!(this_present_agentCode && that_present_agentCode))
        return false;
      if (!this.agentCode.equals(that.agentCode))
        return false;
    }

    boolean this_present_bankCardType = true && this.isSetBankCardType();
    boolean that_present_bankCardType = true && that.isSetBankCardType();
    if (this_present_bankCardType || that_present_bankCardType) {
      if (!(this_present_bankCardType && that_present_bankCardType))
        return false;
      if (!this.bankCardType.equals(that.bankCardType))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_accountNo = true && this.isSetAccountNo();
    boolean that_present_accountNo = true && that.isSetAccountNo();
    if (this_present_accountNo || that_present_accountNo) {
      if (!(this_present_accountNo && that_present_accountNo))
        return false;
      if (!this.accountNo.equals(that.accountNo))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_payTime = true && this.isSetPayTime();
    boolean that_present_payTime = true && that.isSetPayTime();
    if (this_present_payTime || that_present_payTime) {
      if (!(this_present_payTime && that_present_payTime))
        return false;
      if (!this.payTime.equals(that.payTime))
        return false;
    }

    boolean this_present_payType = true && this.isSetPayType();
    boolean that_present_payType = true && that.isSetPayType();
    if (this_present_payType || that_present_payType) {
      if (!(this_present_payType && that_present_payType))
        return false;
      if (!this.payType.equals(that.payType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clearingId = true;
    list.add(present_clearingId);
    if (present_clearingId)
      list.add(clearingId);

    boolean present_productCode = true && (isSetProductCode());
    list.add(present_productCode);
    if (present_productCode)
      list.add(productCode);

    boolean present_requestAmountAmount = true && (isSetRequestAmountAmount());
    list.add(present_requestAmountAmount);
    if (present_requestAmountAmount)
      list.add(requestAmountAmount);

    boolean present_merchantType = true && (isSetMerchantType());
    list.add(present_merchantType);
    if (present_merchantType)
      list.add(merchantType);

    boolean present_checkTime = true && (isSetCheckTime());
    list.add(present_checkTime);
    if (present_checkTime)
      list.add(checkTime);

    boolean present_currency = true && (isSetCurrency());
    list.add(present_currency);
    if (present_currency)
      list.add(currency);

    boolean present_feeTime = true && (isSetFeeTime());
    list.add(present_feeTime);
    if (present_feeTime)
      list.add(feeTime);

    boolean present_fee = true && (isSetFee());
    list.add(present_fee);
    if (present_fee)
      list.add(fee);

    boolean present_transNo = true && (isSetTransNo());
    list.add(present_transNo);
    if (present_transNo)
      list.add(transNo);

    boolean present_transNoOld = true && (isSetTransNoOld());
    list.add(present_transNoOld);
    if (present_transNoOld)
      list.add(transNoOld);

    boolean present_feeWay = true && (isSetFeeWay());
    list.add(present_feeWay);
    if (present_feeWay)
      list.add(feeWay);

    boolean present_settleTime = true && (isSetSettleTime());
    list.add(present_settleTime);
    if (present_settleTime)
      list.add(settleTime);

    boolean present_settleNo = true && (isSetSettleNo());
    list.add(present_settleNo);
    if (present_settleNo)
      list.add(settleNo);

    boolean present_settleTimePlan = true && (isSetSettleTimePlan());
    list.add(present_settleTimePlan);
    if (present_settleTimePlan)
      list.add(settleTimePlan);

    boolean present_settleCyc = true && (isSetSettleCyc());
    list.add(present_settleCyc);
    if (present_settleCyc)
      list.add(settleCyc);

    boolean present_settleBath = true && (isSetSettleBath());
    list.add(present_settleBath);
    if (present_settleBath)
      list.add(settleBath);

    boolean present_feeSettleCyc = true && (isSetFeeSettleCyc());
    list.add(present_feeSettleCyc);
    if (present_feeSettleCyc)
      list.add(feeSettleCyc);

    boolean present_checkStatus = true && (isSetCheckStatus());
    list.add(present_checkStatus);
    if (present_checkStatus)
      list.add(checkStatus);

    boolean present_checkFlg = true && (isSetCheckFlg());
    list.add(present_checkFlg);
    if (present_checkFlg)
      list.add(checkFlg);

    boolean present_settleStatus = true && (isSetSettleStatus());
    list.add(present_settleStatus);
    if (present_settleStatus)
      list.add(settleStatus);

    boolean present_finishTime = true && (isSetFinishTime());
    list.add(present_finishTime);
    if (present_finishTime)
      list.add(finishTime);

    boolean present_settleAmountPlan = true && (isSetSettleAmountPlan());
    list.add(present_settleAmountPlan);
    if (present_settleAmountPlan)
      list.add(settleAmountPlan);

    boolean present_merchantId = true;
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_transType = true && (isSetTransType());
    list.add(present_transType);
    if (present_transType)
      list.add(transType);

    boolean present_successAmount = true && (isSetSuccessAmount());
    list.add(present_successAmount);
    if (present_successAmount)
      list.add(successAmount);

    boolean present_successTime = true && (isSetSuccessTime());
    list.add(present_successTime);
    if (present_successTime)
      list.add(successTime);

    boolean present_merchantOrderNo = true && (isSetMerchantOrderNo());
    list.add(present_merchantOrderNo);
    if (present_merchantOrderNo)
      list.add(merchantOrderNo);

    boolean present_busiTime = true && (isSetBusiTime());
    list.add(present_busiTime);
    if (present_busiTime)
      list.add(busiTime);

    boolean present_agentName = true && (isSetAgentName());
    list.add(present_agentName);
    if (present_agentName)
      list.add(agentName);

    boolean present_agentCode = true && (isSetAgentCode());
    list.add(present_agentCode);
    if (present_agentCode)
      list.add(agentCode);

    boolean present_bankCardType = true && (isSetBankCardType());
    list.add(present_bankCardType);
    if (present_bankCardType)
      list.add(bankCardType);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_accountNo = true && (isSetAccountNo());
    list.add(present_accountNo);
    if (present_accountNo)
      list.add(accountNo);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_payTime = true && (isSetPayTime());
    list.add(present_payTime);
    if (present_payTime)
      list.add(payTime);

    boolean present_payType = true && (isSetPayType());
    list.add(present_payType);
    if (present_payType)
      list.add(payType);

    return list.hashCode();
  }

  @Override
  public int compareTo(ClearMerchantRecordModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClearingId()).compareTo(other.isSetClearingId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearingId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearingId, other.clearingId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductCode()).compareTo(other.isSetProductCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCode, other.productCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestAmountAmount()).compareTo(other.isSetRequestAmountAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestAmountAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestAmountAmount, other.requestAmountAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantType()).compareTo(other.isSetMerchantType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantType, other.merchantType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckTime()).compareTo(other.isSetCheckTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkTime, other.checkTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeTime()).compareTo(other.isSetFeeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeTime, other.feeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFee()).compareTo(other.isSetFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fee, other.fee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransNo()).compareTo(other.isSetTransNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNo, other.transNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransNoOld()).compareTo(other.isSetTransNoOld());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransNoOld()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transNoOld, other.transNoOld);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeWay()).compareTo(other.isSetFeeWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeWay, other.feeWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleTime()).compareTo(other.isSetSettleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleTime, other.settleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleNo()).compareTo(other.isSetSettleNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleNo, other.settleNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleTimePlan()).compareTo(other.isSetSettleTimePlan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleTimePlan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleTimePlan, other.settleTimePlan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleCyc()).compareTo(other.isSetSettleCyc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleCyc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleCyc, other.settleCyc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleBath()).compareTo(other.isSetSettleBath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleBath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleBath, other.settleBath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeSettleCyc()).compareTo(other.isSetFeeSettleCyc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeSettleCyc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeSettleCyc, other.feeSettleCyc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckStatus()).compareTo(other.isSetCheckStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkStatus, other.checkStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckFlg()).compareTo(other.isSetCheckFlg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckFlg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkFlg, other.checkFlg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleStatus()).compareTo(other.isSetSettleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleStatus, other.settleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishTime()).compareTo(other.isSetFinishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishTime, other.finishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleAmountPlan()).compareTo(other.isSetSettleAmountPlan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleAmountPlan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleAmountPlan, other.settleAmountPlan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransType()).compareTo(other.isSetTransType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transType, other.transType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessAmount()).compareTo(other.isSetSuccessAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successAmount, other.successAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessTime()).compareTo(other.isSetSuccessTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successTime, other.successTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantOrderNo()).compareTo(other.isSetMerchantOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantOrderNo, other.merchantOrderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusiTime()).compareTo(other.isSetBusiTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusiTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busiTime, other.busiTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgentName()).compareTo(other.isSetAgentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentName, other.agentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgentCode()).compareTo(other.isSetAgentCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentCode, other.agentCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardType()).compareTo(other.isSetBankCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardType, other.bankCardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountNo()).compareTo(other.isSetAccountNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountNo, other.accountNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayTime()).compareTo(other.isSetPayTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payTime, other.payTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayType()).compareTo(other.isSetPayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payType, other.payType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClearMerchantRecordModel(");
    boolean first = true;

    sb.append("clearingId:");
    sb.append(this.clearingId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productCode:");
    if (this.productCode == null) {
      sb.append("null");
    } else {
      sb.append(this.productCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestAmountAmount:");
    if (this.requestAmountAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.requestAmountAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantType:");
    if (this.merchantType == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkTime:");
    if (this.checkTime == null) {
      sb.append("null");
    } else {
      sb.append(this.checkTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeTime:");
    if (this.feeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.feeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fee:");
    if (this.fee == null) {
      sb.append("null");
    } else {
      sb.append(this.fee);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transNo:");
    if (this.transNo == null) {
      sb.append("null");
    } else {
      sb.append(this.transNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transNoOld:");
    if (this.transNoOld == null) {
      sb.append("null");
    } else {
      sb.append(this.transNoOld);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeWay:");
    if (this.feeWay == null) {
      sb.append("null");
    } else {
      sb.append(this.feeWay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleTime:");
    if (this.settleTime == null) {
      sb.append("null");
    } else {
      sb.append(this.settleTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleNo:");
    if (this.settleNo == null) {
      sb.append("null");
    } else {
      sb.append(this.settleNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleTimePlan:");
    if (this.settleTimePlan == null) {
      sb.append("null");
    } else {
      sb.append(this.settleTimePlan);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleCyc:");
    if (this.settleCyc == null) {
      sb.append("null");
    } else {
      sb.append(this.settleCyc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleBath:");
    if (this.settleBath == null) {
      sb.append("null");
    } else {
      sb.append(this.settleBath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeSettleCyc:");
    if (this.feeSettleCyc == null) {
      sb.append("null");
    } else {
      sb.append(this.feeSettleCyc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkStatus:");
    if (this.checkStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.checkStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkFlg:");
    if (this.checkFlg == null) {
      sb.append("null");
    } else {
      sb.append(this.checkFlg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleStatus:");
    if (this.settleStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.settleStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishTime:");
    if (this.finishTime == null) {
      sb.append("null");
    } else {
      sb.append(this.finishTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleAmountPlan:");
    if (this.settleAmountPlan == null) {
      sb.append("null");
    } else {
      sb.append(this.settleAmountPlan);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    sb.append(this.merchantId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transType:");
    if (this.transType == null) {
      sb.append("null");
    } else {
      sb.append(this.transType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("successAmount:");
    if (this.successAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.successAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("successTime:");
    if (this.successTime == null) {
      sb.append("null");
    } else {
      sb.append(this.successTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantOrderNo:");
    if (this.merchantOrderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantOrderNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("busiTime:");
    if (this.busiTime == null) {
      sb.append("null");
    } else {
      sb.append(this.busiTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentName:");
    if (this.agentName == null) {
      sb.append("null");
    } else {
      sb.append(this.agentName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentCode:");
    if (this.agentCode == null) {
      sb.append("null");
    } else {
      sb.append(this.agentCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardType:");
    if (this.bankCardType == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCardType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantName:");
    if (this.merchantName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountNo:");
    if (this.accountNo == null) {
      sb.append("null");
    } else {
      sb.append(this.accountNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payTime:");
    if (this.payTime == null) {
      sb.append("null");
    } else {
      sb.append(this.payTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payType:");
    if (this.payType == null) {
      sb.append("null");
    } else {
      sb.append(this.payType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'clearingId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClearMerchantRecordModelStandardSchemeFactory implements SchemeFactory {
    public ClearMerchantRecordModelStandardScheme getScheme() {
      return new ClearMerchantRecordModelStandardScheme();
    }
  }

  private static class ClearMerchantRecordModelStandardScheme extends StandardScheme<ClearMerchantRecordModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClearMerchantRecordModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLEARING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.clearingId = iprot.readI64();
              struct.setClearingIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productCode = iprot.readString();
              struct.setProductCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_AMOUNT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestAmountAmount = iprot.readString();
              struct.setRequestAmountAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MERCHANT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantType = iprot.readString();
              struct.setMerchantTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHECK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkTime = iprot.readString();
              struct.setCheckTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FEE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feeTime = iprot.readString();
              struct.setFeeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fee = iprot.readString();
              struct.setFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRANS_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transNo = iprot.readString();
              struct.setTransNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TRANS_NO_OLD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transNoOld = iprot.readString();
              struct.setTransNoOldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FEE_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feeWay = iprot.readString();
              struct.setFeeWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SETTLE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleTime = iprot.readString();
              struct.setSettleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SETTLE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleNo = iprot.readString();
              struct.setSettleNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SETTLE_TIME_PLAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleTimePlan = iprot.readString();
              struct.setSettleTimePlanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SETTLE_CYC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleCyc = iprot.readString();
              struct.setSettleCycIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SETTLE_BATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleBath = iprot.readString();
              struct.setSettleBathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FEE_SETTLE_CYC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feeSettleCyc = iprot.readString();
              struct.setFeeSettleCycIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CHECK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkStatus = iprot.readString();
              struct.setCheckStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CHECK_FLG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkFlg = iprot.readString();
              struct.setCheckFlgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SETTLE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleStatus = iprot.readString();
              struct.setSettleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.finishTime = iprot.readString();
              struct.setFinishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SETTLE_AMOUNT_PLAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleAmountPlan = iprot.readString();
              struct.setSettleAmountPlanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.merchantId = iprot.readI32();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TRANS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transType = iprot.readString();
              struct.setTransTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SUCCESS_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.successAmount = iprot.readString();
              struct.setSuccessAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // SUCCESS_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.successTime = iprot.readString();
              struct.setSuccessTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MERCHANT_ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantOrderNo = iprot.readString();
              struct.setMerchantOrderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // BUSI_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.busiTime = iprot.readString();
              struct.setBusiTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // AGENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentName = iprot.readString();
              struct.setAgentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // AGENT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentCode = iprot.readString();
              struct.setAgentCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // BANK_CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCardType = iprot.readString();
              struct.setBankCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // ACCOUNT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountNo = iprot.readString();
              struct.setAccountNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // PAY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payTime = iprot.readString();
              struct.setPayTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // PAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payType = iprot.readString();
              struct.setPayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetClearingId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'clearingId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClearMerchantRecordModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CLEARING_ID_FIELD_DESC);
      oprot.writeI64(struct.clearingId);
      oprot.writeFieldEnd();
      if (struct.productCode != null) {
        oprot.writeFieldBegin(PRODUCT_CODE_FIELD_DESC);
        oprot.writeString(struct.productCode);
        oprot.writeFieldEnd();
      }
      if (struct.requestAmountAmount != null) {
        oprot.writeFieldBegin(REQUEST_AMOUNT_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.requestAmountAmount);
        oprot.writeFieldEnd();
      }
      if (struct.merchantType != null) {
        oprot.writeFieldBegin(MERCHANT_TYPE_FIELD_DESC);
        oprot.writeString(struct.merchantType);
        oprot.writeFieldEnd();
      }
      if (struct.checkTime != null) {
        oprot.writeFieldBegin(CHECK_TIME_FIELD_DESC);
        oprot.writeString(struct.checkTime);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.currency);
        oprot.writeFieldEnd();
      }
      if (struct.feeTime != null) {
        oprot.writeFieldBegin(FEE_TIME_FIELD_DESC);
        oprot.writeString(struct.feeTime);
        oprot.writeFieldEnd();
      }
      if (struct.fee != null) {
        oprot.writeFieldBegin(FEE_FIELD_DESC);
        oprot.writeString(struct.fee);
        oprot.writeFieldEnd();
      }
      if (struct.transNo != null) {
        oprot.writeFieldBegin(TRANS_NO_FIELD_DESC);
        oprot.writeString(struct.transNo);
        oprot.writeFieldEnd();
      }
      if (struct.transNoOld != null) {
        oprot.writeFieldBegin(TRANS_NO_OLD_FIELD_DESC);
        oprot.writeString(struct.transNoOld);
        oprot.writeFieldEnd();
      }
      if (struct.feeWay != null) {
        oprot.writeFieldBegin(FEE_WAY_FIELD_DESC);
        oprot.writeString(struct.feeWay);
        oprot.writeFieldEnd();
      }
      if (struct.settleTime != null) {
        oprot.writeFieldBegin(SETTLE_TIME_FIELD_DESC);
        oprot.writeString(struct.settleTime);
        oprot.writeFieldEnd();
      }
      if (struct.settleNo != null) {
        oprot.writeFieldBegin(SETTLE_NO_FIELD_DESC);
        oprot.writeString(struct.settleNo);
        oprot.writeFieldEnd();
      }
      if (struct.settleTimePlan != null) {
        oprot.writeFieldBegin(SETTLE_TIME_PLAN_FIELD_DESC);
        oprot.writeString(struct.settleTimePlan);
        oprot.writeFieldEnd();
      }
      if (struct.settleCyc != null) {
        oprot.writeFieldBegin(SETTLE_CYC_FIELD_DESC);
        oprot.writeString(struct.settleCyc);
        oprot.writeFieldEnd();
      }
      if (struct.settleBath != null) {
        oprot.writeFieldBegin(SETTLE_BATH_FIELD_DESC);
        oprot.writeString(struct.settleBath);
        oprot.writeFieldEnd();
      }
      if (struct.feeSettleCyc != null) {
        oprot.writeFieldBegin(FEE_SETTLE_CYC_FIELD_DESC);
        oprot.writeString(struct.feeSettleCyc);
        oprot.writeFieldEnd();
      }
      if (struct.checkStatus != null) {
        oprot.writeFieldBegin(CHECK_STATUS_FIELD_DESC);
        oprot.writeString(struct.checkStatus);
        oprot.writeFieldEnd();
      }
      if (struct.checkFlg != null) {
        oprot.writeFieldBegin(CHECK_FLG_FIELD_DESC);
        oprot.writeString(struct.checkFlg);
        oprot.writeFieldEnd();
      }
      if (struct.settleStatus != null) {
        oprot.writeFieldBegin(SETTLE_STATUS_FIELD_DESC);
        oprot.writeString(struct.settleStatus);
        oprot.writeFieldEnd();
      }
      if (struct.finishTime != null) {
        oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
        oprot.writeString(struct.finishTime);
        oprot.writeFieldEnd();
      }
      if (struct.settleAmountPlan != null) {
        oprot.writeFieldBegin(SETTLE_AMOUNT_PLAN_FIELD_DESC);
        oprot.writeString(struct.settleAmountPlan);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
      oprot.writeI32(struct.merchantId);
      oprot.writeFieldEnd();
      if (struct.transType != null) {
        oprot.writeFieldBegin(TRANS_TYPE_FIELD_DESC);
        oprot.writeString(struct.transType);
        oprot.writeFieldEnd();
      }
      if (struct.successAmount != null) {
        oprot.writeFieldBegin(SUCCESS_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.successAmount);
        oprot.writeFieldEnd();
      }
      if (struct.successTime != null) {
        oprot.writeFieldBegin(SUCCESS_TIME_FIELD_DESC);
        oprot.writeString(struct.successTime);
        oprot.writeFieldEnd();
      }
      if (struct.merchantOrderNo != null) {
        oprot.writeFieldBegin(MERCHANT_ORDER_NO_FIELD_DESC);
        oprot.writeString(struct.merchantOrderNo);
        oprot.writeFieldEnd();
      }
      if (struct.busiTime != null) {
        oprot.writeFieldBegin(BUSI_TIME_FIELD_DESC);
        oprot.writeString(struct.busiTime);
        oprot.writeFieldEnd();
      }
      if (struct.agentName != null) {
        oprot.writeFieldBegin(AGENT_NAME_FIELD_DESC);
        oprot.writeString(struct.agentName);
        oprot.writeFieldEnd();
      }
      if (struct.agentCode != null) {
        oprot.writeFieldBegin(AGENT_CODE_FIELD_DESC);
        oprot.writeString(struct.agentCode);
        oprot.writeFieldEnd();
      }
      if (struct.bankCardType != null) {
        oprot.writeFieldBegin(BANK_CARD_TYPE_FIELD_DESC);
        oprot.writeString(struct.bankCardType);
        oprot.writeFieldEnd();
      }
      if (struct.merchantName != null) {
        oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantName);
        oprot.writeFieldEnd();
      }
      if (struct.accountNo != null) {
        oprot.writeFieldBegin(ACCOUNT_NO_FIELD_DESC);
        oprot.writeString(struct.accountNo);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.payTime != null) {
        oprot.writeFieldBegin(PAY_TIME_FIELD_DESC);
        oprot.writeString(struct.payTime);
        oprot.writeFieldEnd();
      }
      if (struct.payType != null) {
        oprot.writeFieldBegin(PAY_TYPE_FIELD_DESC);
        oprot.writeString(struct.payType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClearMerchantRecordModelTupleSchemeFactory implements SchemeFactory {
    public ClearMerchantRecordModelTupleScheme getScheme() {
      return new ClearMerchantRecordModelTupleScheme();
    }
  }

  private static class ClearMerchantRecordModelTupleScheme extends TupleScheme<ClearMerchantRecordModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClearMerchantRecordModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.clearingId);
      BitSet optionals = new BitSet();
      if (struct.isSetProductCode()) {
        optionals.set(0);
      }
      if (struct.isSetRequestAmountAmount()) {
        optionals.set(1);
      }
      if (struct.isSetMerchantType()) {
        optionals.set(2);
      }
      if (struct.isSetCheckTime()) {
        optionals.set(3);
      }
      if (struct.isSetCurrency()) {
        optionals.set(4);
      }
      if (struct.isSetFeeTime()) {
        optionals.set(5);
      }
      if (struct.isSetFee()) {
        optionals.set(6);
      }
      if (struct.isSetTransNo()) {
        optionals.set(7);
      }
      if (struct.isSetTransNoOld()) {
        optionals.set(8);
      }
      if (struct.isSetFeeWay()) {
        optionals.set(9);
      }
      if (struct.isSetSettleTime()) {
        optionals.set(10);
      }
      if (struct.isSetSettleNo()) {
        optionals.set(11);
      }
      if (struct.isSetSettleTimePlan()) {
        optionals.set(12);
      }
      if (struct.isSetSettleCyc()) {
        optionals.set(13);
      }
      if (struct.isSetSettleBath()) {
        optionals.set(14);
      }
      if (struct.isSetFeeSettleCyc()) {
        optionals.set(15);
      }
      if (struct.isSetCheckStatus()) {
        optionals.set(16);
      }
      if (struct.isSetCheckFlg()) {
        optionals.set(17);
      }
      if (struct.isSetSettleStatus()) {
        optionals.set(18);
      }
      if (struct.isSetFinishTime()) {
        optionals.set(19);
      }
      if (struct.isSetSettleAmountPlan()) {
        optionals.set(20);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(21);
      }
      if (struct.isSetTransType()) {
        optionals.set(22);
      }
      if (struct.isSetSuccessAmount()) {
        optionals.set(23);
      }
      if (struct.isSetSuccessTime()) {
        optionals.set(24);
      }
      if (struct.isSetMerchantOrderNo()) {
        optionals.set(25);
      }
      if (struct.isSetBusiTime()) {
        optionals.set(26);
      }
      if (struct.isSetAgentName()) {
        optionals.set(27);
      }
      if (struct.isSetAgentCode()) {
        optionals.set(28);
      }
      if (struct.isSetBankCardType()) {
        optionals.set(29);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(30);
      }
      if (struct.isSetAccountNo()) {
        optionals.set(31);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(32);
      }
      if (struct.isSetPayTime()) {
        optionals.set(33);
      }
      if (struct.isSetPayType()) {
        optionals.set(34);
      }
      oprot.writeBitSet(optionals, 35);
      if (struct.isSetProductCode()) {
        oprot.writeString(struct.productCode);
      }
      if (struct.isSetRequestAmountAmount()) {
        oprot.writeString(struct.requestAmountAmount);
      }
      if (struct.isSetMerchantType()) {
        oprot.writeString(struct.merchantType);
      }
      if (struct.isSetCheckTime()) {
        oprot.writeString(struct.checkTime);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetFeeTime()) {
        oprot.writeString(struct.feeTime);
      }
      if (struct.isSetFee()) {
        oprot.writeString(struct.fee);
      }
      if (struct.isSetTransNo()) {
        oprot.writeString(struct.transNo);
      }
      if (struct.isSetTransNoOld()) {
        oprot.writeString(struct.transNoOld);
      }
      if (struct.isSetFeeWay()) {
        oprot.writeString(struct.feeWay);
      }
      if (struct.isSetSettleTime()) {
        oprot.writeString(struct.settleTime);
      }
      if (struct.isSetSettleNo()) {
        oprot.writeString(struct.settleNo);
      }
      if (struct.isSetSettleTimePlan()) {
        oprot.writeString(struct.settleTimePlan);
      }
      if (struct.isSetSettleCyc()) {
        oprot.writeString(struct.settleCyc);
      }
      if (struct.isSetSettleBath()) {
        oprot.writeString(struct.settleBath);
      }
      if (struct.isSetFeeSettleCyc()) {
        oprot.writeString(struct.feeSettleCyc);
      }
      if (struct.isSetCheckStatus()) {
        oprot.writeString(struct.checkStatus);
      }
      if (struct.isSetCheckFlg()) {
        oprot.writeString(struct.checkFlg);
      }
      if (struct.isSetSettleStatus()) {
        oprot.writeString(struct.settleStatus);
      }
      if (struct.isSetFinishTime()) {
        oprot.writeString(struct.finishTime);
      }
      if (struct.isSetSettleAmountPlan()) {
        oprot.writeString(struct.settleAmountPlan);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeI32(struct.merchantId);
      }
      if (struct.isSetTransType()) {
        oprot.writeString(struct.transType);
      }
      if (struct.isSetSuccessAmount()) {
        oprot.writeString(struct.successAmount);
      }
      if (struct.isSetSuccessTime()) {
        oprot.writeString(struct.successTime);
      }
      if (struct.isSetMerchantOrderNo()) {
        oprot.writeString(struct.merchantOrderNo);
      }
      if (struct.isSetBusiTime()) {
        oprot.writeString(struct.busiTime);
      }
      if (struct.isSetAgentName()) {
        oprot.writeString(struct.agentName);
      }
      if (struct.isSetAgentCode()) {
        oprot.writeString(struct.agentCode);
      }
      if (struct.isSetBankCardType()) {
        oprot.writeString(struct.bankCardType);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetAccountNo()) {
        oprot.writeString(struct.accountNo);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetPayTime()) {
        oprot.writeString(struct.payTime);
      }
      if (struct.isSetPayType()) {
        oprot.writeString(struct.payType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClearMerchantRecordModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.clearingId = iprot.readI64();
      struct.setClearingIdIsSet(true);
      BitSet incoming = iprot.readBitSet(35);
      if (incoming.get(0)) {
        struct.productCode = iprot.readString();
        struct.setProductCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.requestAmountAmount = iprot.readString();
        struct.setRequestAmountAmountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.merchantType = iprot.readString();
        struct.setMerchantTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.checkTime = iprot.readString();
        struct.setCheckTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.feeTime = iprot.readString();
        struct.setFeeTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fee = iprot.readString();
        struct.setFeeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.transNo = iprot.readString();
        struct.setTransNoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.transNoOld = iprot.readString();
        struct.setTransNoOldIsSet(true);
      }
      if (incoming.get(9)) {
        struct.feeWay = iprot.readString();
        struct.setFeeWayIsSet(true);
      }
      if (incoming.get(10)) {
        struct.settleTime = iprot.readString();
        struct.setSettleTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.settleNo = iprot.readString();
        struct.setSettleNoIsSet(true);
      }
      if (incoming.get(12)) {
        struct.settleTimePlan = iprot.readString();
        struct.setSettleTimePlanIsSet(true);
      }
      if (incoming.get(13)) {
        struct.settleCyc = iprot.readString();
        struct.setSettleCycIsSet(true);
      }
      if (incoming.get(14)) {
        struct.settleBath = iprot.readString();
        struct.setSettleBathIsSet(true);
      }
      if (incoming.get(15)) {
        struct.feeSettleCyc = iprot.readString();
        struct.setFeeSettleCycIsSet(true);
      }
      if (incoming.get(16)) {
        struct.checkStatus = iprot.readString();
        struct.setCheckStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.checkFlg = iprot.readString();
        struct.setCheckFlgIsSet(true);
      }
      if (incoming.get(18)) {
        struct.settleStatus = iprot.readString();
        struct.setSettleStatusIsSet(true);
      }
      if (incoming.get(19)) {
        struct.finishTime = iprot.readString();
        struct.setFinishTimeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.settleAmountPlan = iprot.readString();
        struct.setSettleAmountPlanIsSet(true);
      }
      if (incoming.get(21)) {
        struct.merchantId = iprot.readI32();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(22)) {
        struct.transType = iprot.readString();
        struct.setTransTypeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.successAmount = iprot.readString();
        struct.setSuccessAmountIsSet(true);
      }
      if (incoming.get(24)) {
        struct.successTime = iprot.readString();
        struct.setSuccessTimeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.merchantOrderNo = iprot.readString();
        struct.setMerchantOrderNoIsSet(true);
      }
      if (incoming.get(26)) {
        struct.busiTime = iprot.readString();
        struct.setBusiTimeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.agentName = iprot.readString();
        struct.setAgentNameIsSet(true);
      }
      if (incoming.get(28)) {
        struct.agentCode = iprot.readString();
        struct.setAgentCodeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.bankCardType = iprot.readString();
        struct.setBankCardTypeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(31)) {
        struct.accountNo = iprot.readString();
        struct.setAccountNoIsSet(true);
      }
      if (incoming.get(32)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(33)) {
        struct.payTime = iprot.readString();
        struct.setPayTimeIsSet(true);
      }
      if (incoming.get(34)) {
        struct.payType = iprot.readString();
        struct.setPayTypeIsSet(true);
      }
    }
  }

}

