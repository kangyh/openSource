/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.rpc.billing.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-07")
public class ClearChannelRecordService {

  public interface Iface {

    public void saveClearChannelRecord(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) throws org.apache.thrift.TException;

    public List<com.heepay.rpc.billing.model.ClearChannelRecordModel> query(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) throws org.apache.thrift.TException;

    public void update(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) throws org.apache.thrift.TException;

    public void deleteBankcard(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void saveClearChannelRecord(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void update(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBankcard(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void saveClearChannelRecord(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) throws org.apache.thrift.TException
    {
      send_saveClearChannelRecord(clearChannelRecordModel);
      recv_saveClearChannelRecord();
    }

    public void send_saveClearChannelRecord(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) throws org.apache.thrift.TException
    {
      saveClearChannelRecord_args args = new saveClearChannelRecord_args();
      args.setClearChannelRecordModel(clearChannelRecordModel);
      sendBase("saveClearChannelRecord", args);
    }

    public void recv_saveClearChannelRecord() throws org.apache.thrift.TException
    {
      saveClearChannelRecord_result result = new saveClearChannelRecord_result();
      receiveBase(result, "saveClearChannelRecord");
      return;
    }

    public List<com.heepay.rpc.billing.model.ClearChannelRecordModel> query(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) throws org.apache.thrift.TException
    {
      send_query(clearChannelRecordModel);
      return recv_query();
    }

    public void send_query(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) throws org.apache.thrift.TException
    {
      query_args args = new query_args();
      args.setClearChannelRecordModel(clearChannelRecordModel);
      sendBase("query", args);
    }

    public List<com.heepay.rpc.billing.model.ClearChannelRecordModel> recv_query() throws org.apache.thrift.TException
    {
      query_result result = new query_result();
      receiveBase(result, "query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query failed: unknown result");
    }

    public void update(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) throws org.apache.thrift.TException
    {
      send_update(clearChannelRecordModel);
      recv_update();
    }

    public void send_update(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) throws org.apache.thrift.TException
    {
      update_args args = new update_args();
      args.setClearChannelRecordModel(clearChannelRecordModel);
      sendBase("update", args);
    }

    public void recv_update() throws org.apache.thrift.TException
    {
      update_result result = new update_result();
      receiveBase(result, "update");
      return;
    }

    public void deleteBankcard(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) throws org.apache.thrift.TException
    {
      send_deleteBankcard(clearChannelRecordModel);
      recv_deleteBankcard();
    }

    public void send_deleteBankcard(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) throws org.apache.thrift.TException
    {
      deleteBankcard_args args = new deleteBankcard_args();
      args.setClearChannelRecordModel(clearChannelRecordModel);
      sendBase("deleteBankcard", args);
    }

    public void recv_deleteBankcard() throws org.apache.thrift.TException
    {
      deleteBankcard_result result = new deleteBankcard_result();
      receiveBase(result, "deleteBankcard");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveClearChannelRecord(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveClearChannelRecord_call method_call = new saveClearChannelRecord_call(clearChannelRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveClearChannelRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel;
      public saveClearChannelRecord_call(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clearChannelRecordModel = clearChannelRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveClearChannelRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveClearChannelRecord_args args = new saveClearChannelRecord_args();
        args.setClearChannelRecordModel(clearChannelRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveClearChannelRecord();
      }
    }

    public void query(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_call method_call = new query_call(clearChannelRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel;
      public query_call(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clearChannelRecordModel = clearChannelRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_args args = new query_args();
        args.setClearChannelRecordModel(clearChannelRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.heepay.rpc.billing.model.ClearChannelRecordModel> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query();
      }
    }

    public void update(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_call method_call = new update_call(clearChannelRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel;
      public update_call(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clearChannelRecordModel = clearChannelRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_args args = new update_args();
        args.setClearChannelRecordModel(clearChannelRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_update();
      }
    }

    public void deleteBankcard(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBankcard_call method_call = new deleteBankcard_call(clearChannelRecordModel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBankcard_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel;
      public deleteBankcard_call(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clearChannelRecordModel = clearChannelRecordModel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBankcard", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBankcard_args args = new deleteBankcard_args();
        args.setClearChannelRecordModel(clearChannelRecordModel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteBankcard();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("saveClearChannelRecord", new saveClearChannelRecord());
      processMap.put("query", new query());
      processMap.put("update", new update());
      processMap.put("deleteBankcard", new deleteBankcard());
      return processMap;
    }

    public static class saveClearChannelRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveClearChannelRecord_args> {
      public saveClearChannelRecord() {
        super("saveClearChannelRecord");
      }

      public saveClearChannelRecord_args getEmptyArgsInstance() {
        return new saveClearChannelRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveClearChannelRecord_result getResult(I iface, saveClearChannelRecord_args args) throws org.apache.thrift.TException {
        saveClearChannelRecord_result result = new saveClearChannelRecord_result();
        iface.saveClearChannelRecord(args.clearChannelRecordModel);
        return result;
      }
    }

    public static class query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_args> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_result getResult(I iface, query_args args) throws org.apache.thrift.TException {
        query_result result = new query_result();
        result.success = iface.query(args.clearChannelRecordModel);
        return result;
      }
    }

    public static class update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_args> {
      public update() {
        super("update");
      }

      public update_args getEmptyArgsInstance() {
        return new update_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public update_result getResult(I iface, update_args args) throws org.apache.thrift.TException {
        update_result result = new update_result();
        iface.update(args.clearChannelRecordModel);
        return result;
      }
    }

    public static class deleteBankcard<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBankcard_args> {
      public deleteBankcard() {
        super("deleteBankcard");
      }

      public deleteBankcard_args getEmptyArgsInstance() {
        return new deleteBankcard_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBankcard_result getResult(I iface, deleteBankcard_args args) throws org.apache.thrift.TException {
        deleteBankcard_result result = new deleteBankcard_result();
        iface.deleteBankcard(args.clearChannelRecordModel);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("saveClearChannelRecord", new saveClearChannelRecord());
      processMap.put("query", new query());
      processMap.put("update", new update());
      processMap.put("deleteBankcard", new deleteBankcard());
      return processMap;
    }

    public static class saveClearChannelRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveClearChannelRecord_args, Void> {
      public saveClearChannelRecord() {
        super("saveClearChannelRecord");
      }

      public saveClearChannelRecord_args getEmptyArgsInstance() {
        return new saveClearChannelRecord_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveClearChannelRecord_result result = new saveClearChannelRecord_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveClearChannelRecord_result result = new saveClearChannelRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveClearChannelRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.saveClearChannelRecord(args.clearChannelRecordModel,resultHandler);
      }
    }

    public static class query<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_args, List<com.heepay.rpc.billing.model.ClearChannelRecordModel>> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      public AsyncMethodCallback<List<com.heepay.rpc.billing.model.ClearChannelRecordModel>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.heepay.rpc.billing.model.ClearChannelRecordModel>>() { 
          public void onComplete(List<com.heepay.rpc.billing.model.ClearChannelRecordModel> o) {
            query_result result = new query_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_result result = new query_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.heepay.rpc.billing.model.ClearChannelRecordModel>> resultHandler) throws TException {
        iface.query(args.clearChannelRecordModel,resultHandler);
      }
    }

    public static class update<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, update_args, Void> {
      public update() {
        super("update");
      }

      public update_args getEmptyArgsInstance() {
        return new update_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            update_result result = new update_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            update_result result = new update_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, update_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.update(args.clearChannelRecordModel,resultHandler);
      }
    }

    public static class deleteBankcard<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBankcard_args, Void> {
      public deleteBankcard() {
        super("deleteBankcard");
      }

      public deleteBankcard_args getEmptyArgsInstance() {
        return new deleteBankcard_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteBankcard_result result = new deleteBankcard_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBankcard_result result = new deleteBankcard_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBankcard_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteBankcard(args.clearChannelRecordModel,resultHandler);
      }
    }

  }

  public static class saveClearChannelRecord_args implements org.apache.thrift.TBase<saveClearChannelRecord_args, saveClearChannelRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveClearChannelRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveClearChannelRecord_args");

    private static final org.apache.thrift.protocol.TField CLEAR_CHANNEL_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("clearChannelRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveClearChannelRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveClearChannelRecord_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLEAR_CHANNEL_RECORD_MODEL((short)1, "clearChannelRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLEAR_CHANNEL_RECORD_MODEL
            return CLEAR_CHANNEL_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLEAR_CHANNEL_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("clearChannelRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.ClearChannelRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveClearChannelRecord_args.class, metaDataMap);
    }

    public saveClearChannelRecord_args() {
    }

    public saveClearChannelRecord_args(
      com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel)
    {
      this();
      this.clearChannelRecordModel = clearChannelRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveClearChannelRecord_args(saveClearChannelRecord_args other) {
      if (other.isSetClearChannelRecordModel()) {
        this.clearChannelRecordModel = new com.heepay.rpc.billing.model.ClearChannelRecordModel(other.clearChannelRecordModel);
      }
    }

    public saveClearChannelRecord_args deepCopy() {
      return new saveClearChannelRecord_args(this);
    }

    @Override
    public void clear() {
      this.clearChannelRecordModel = null;
    }

    public com.heepay.rpc.billing.model.ClearChannelRecordModel getClearChannelRecordModel() {
      return this.clearChannelRecordModel;
    }

    public saveClearChannelRecord_args setClearChannelRecordModel(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) {
      this.clearChannelRecordModel = clearChannelRecordModel;
      return this;
    }

    public void unsetClearChannelRecordModel() {
      this.clearChannelRecordModel = null;
    }

    /** Returns true if field clearChannelRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetClearChannelRecordModel() {
      return this.clearChannelRecordModel != null;
    }

    public void setClearChannelRecordModelIsSet(boolean value) {
      if (!value) {
        this.clearChannelRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLEAR_CHANNEL_RECORD_MODEL:
        if (value == null) {
          unsetClearChannelRecordModel();
        } else {
          setClearChannelRecordModel((com.heepay.rpc.billing.model.ClearChannelRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLEAR_CHANNEL_RECORD_MODEL:
        return getClearChannelRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLEAR_CHANNEL_RECORD_MODEL:
        return isSetClearChannelRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveClearChannelRecord_args)
        return this.equals((saveClearChannelRecord_args)that);
      return false;
    }

    public boolean equals(saveClearChannelRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_clearChannelRecordModel = true && this.isSetClearChannelRecordModel();
      boolean that_present_clearChannelRecordModel = true && that.isSetClearChannelRecordModel();
      if (this_present_clearChannelRecordModel || that_present_clearChannelRecordModel) {
        if (!(this_present_clearChannelRecordModel && that_present_clearChannelRecordModel))
          return false;
        if (!this.clearChannelRecordModel.equals(that.clearChannelRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clearChannelRecordModel = true && (isSetClearChannelRecordModel());
      list.add(present_clearChannelRecordModel);
      if (present_clearChannelRecordModel)
        list.add(clearChannelRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveClearChannelRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClearChannelRecordModel()).compareTo(other.isSetClearChannelRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClearChannelRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearChannelRecordModel, other.clearChannelRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveClearChannelRecord_args(");
      boolean first = true;

      sb.append("clearChannelRecordModel:");
      if (this.clearChannelRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.clearChannelRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (clearChannelRecordModel != null) {
        clearChannelRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveClearChannelRecord_argsStandardSchemeFactory implements SchemeFactory {
      public saveClearChannelRecord_argsStandardScheme getScheme() {
        return new saveClearChannelRecord_argsStandardScheme();
      }
    }

    private static class saveClearChannelRecord_argsStandardScheme extends StandardScheme<saveClearChannelRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveClearChannelRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLEAR_CHANNEL_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clearChannelRecordModel = new com.heepay.rpc.billing.model.ClearChannelRecordModel();
                struct.clearChannelRecordModel.read(iprot);
                struct.setClearChannelRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveClearChannelRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clearChannelRecordModel != null) {
          oprot.writeFieldBegin(CLEAR_CHANNEL_RECORD_MODEL_FIELD_DESC);
          struct.clearChannelRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveClearChannelRecord_argsTupleSchemeFactory implements SchemeFactory {
      public saveClearChannelRecord_argsTupleScheme getScheme() {
        return new saveClearChannelRecord_argsTupleScheme();
      }
    }

    private static class saveClearChannelRecord_argsTupleScheme extends TupleScheme<saveClearChannelRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveClearChannelRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClearChannelRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClearChannelRecordModel()) {
          struct.clearChannelRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveClearChannelRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clearChannelRecordModel = new com.heepay.rpc.billing.model.ClearChannelRecordModel();
          struct.clearChannelRecordModel.read(iprot);
          struct.setClearChannelRecordModelIsSet(true);
        }
      }
    }

  }

  public static class saveClearChannelRecord_result implements org.apache.thrift.TBase<saveClearChannelRecord_result, saveClearChannelRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveClearChannelRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveClearChannelRecord_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveClearChannelRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveClearChannelRecord_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveClearChannelRecord_result.class, metaDataMap);
    }

    public saveClearChannelRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveClearChannelRecord_result(saveClearChannelRecord_result other) {
    }

    public saveClearChannelRecord_result deepCopy() {
      return new saveClearChannelRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveClearChannelRecord_result)
        return this.equals((saveClearChannelRecord_result)that);
      return false;
    }

    public boolean equals(saveClearChannelRecord_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(saveClearChannelRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveClearChannelRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveClearChannelRecord_resultStandardSchemeFactory implements SchemeFactory {
      public saveClearChannelRecord_resultStandardScheme getScheme() {
        return new saveClearChannelRecord_resultStandardScheme();
      }
    }

    private static class saveClearChannelRecord_resultStandardScheme extends StandardScheme<saveClearChannelRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveClearChannelRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveClearChannelRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveClearChannelRecord_resultTupleSchemeFactory implements SchemeFactory {
      public saveClearChannelRecord_resultTupleScheme getScheme() {
        return new saveClearChannelRecord_resultTupleScheme();
      }
    }

    private static class saveClearChannelRecord_resultTupleScheme extends TupleScheme<saveClearChannelRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveClearChannelRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveClearChannelRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class query_args implements org.apache.thrift.TBase<query_args, query_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_args");

    private static final org.apache.thrift.protocol.TField CLEAR_CHANNEL_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("clearChannelRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLEAR_CHANNEL_RECORD_MODEL((short)1, "clearChannelRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLEAR_CHANNEL_RECORD_MODEL
            return CLEAR_CHANNEL_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLEAR_CHANNEL_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("clearChannelRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.ClearChannelRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_args.class, metaDataMap);
    }

    public query_args() {
    }

    public query_args(
      com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel)
    {
      this();
      this.clearChannelRecordModel = clearChannelRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_args(query_args other) {
      if (other.isSetClearChannelRecordModel()) {
        this.clearChannelRecordModel = new com.heepay.rpc.billing.model.ClearChannelRecordModel(other.clearChannelRecordModel);
      }
    }

    public query_args deepCopy() {
      return new query_args(this);
    }

    @Override
    public void clear() {
      this.clearChannelRecordModel = null;
    }

    public com.heepay.rpc.billing.model.ClearChannelRecordModel getClearChannelRecordModel() {
      return this.clearChannelRecordModel;
    }

    public query_args setClearChannelRecordModel(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) {
      this.clearChannelRecordModel = clearChannelRecordModel;
      return this;
    }

    public void unsetClearChannelRecordModel() {
      this.clearChannelRecordModel = null;
    }

    /** Returns true if field clearChannelRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetClearChannelRecordModel() {
      return this.clearChannelRecordModel != null;
    }

    public void setClearChannelRecordModelIsSet(boolean value) {
      if (!value) {
        this.clearChannelRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLEAR_CHANNEL_RECORD_MODEL:
        if (value == null) {
          unsetClearChannelRecordModel();
        } else {
          setClearChannelRecordModel((com.heepay.rpc.billing.model.ClearChannelRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLEAR_CHANNEL_RECORD_MODEL:
        return getClearChannelRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLEAR_CHANNEL_RECORD_MODEL:
        return isSetClearChannelRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_args)
        return this.equals((query_args)that);
      return false;
    }

    public boolean equals(query_args that) {
      if (that == null)
        return false;

      boolean this_present_clearChannelRecordModel = true && this.isSetClearChannelRecordModel();
      boolean that_present_clearChannelRecordModel = true && that.isSetClearChannelRecordModel();
      if (this_present_clearChannelRecordModel || that_present_clearChannelRecordModel) {
        if (!(this_present_clearChannelRecordModel && that_present_clearChannelRecordModel))
          return false;
        if (!this.clearChannelRecordModel.equals(that.clearChannelRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clearChannelRecordModel = true && (isSetClearChannelRecordModel());
      list.add(present_clearChannelRecordModel);
      if (present_clearChannelRecordModel)
        list.add(clearChannelRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClearChannelRecordModel()).compareTo(other.isSetClearChannelRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClearChannelRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearChannelRecordModel, other.clearChannelRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_args(");
      boolean first = true;

      sb.append("clearChannelRecordModel:");
      if (this.clearChannelRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.clearChannelRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (clearChannelRecordModel != null) {
        clearChannelRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_argsStandardSchemeFactory implements SchemeFactory {
      public query_argsStandardScheme getScheme() {
        return new query_argsStandardScheme();
      }
    }

    private static class query_argsStandardScheme extends StandardScheme<query_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLEAR_CHANNEL_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clearChannelRecordModel = new com.heepay.rpc.billing.model.ClearChannelRecordModel();
                struct.clearChannelRecordModel.read(iprot);
                struct.setClearChannelRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clearChannelRecordModel != null) {
          oprot.writeFieldBegin(CLEAR_CHANNEL_RECORD_MODEL_FIELD_DESC);
          struct.clearChannelRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_argsTupleSchemeFactory implements SchemeFactory {
      public query_argsTupleScheme getScheme() {
        return new query_argsTupleScheme();
      }
    }

    private static class query_argsTupleScheme extends TupleScheme<query_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClearChannelRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClearChannelRecordModel()) {
          struct.clearChannelRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clearChannelRecordModel = new com.heepay.rpc.billing.model.ClearChannelRecordModel();
          struct.clearChannelRecordModel.read(iprot);
          struct.setClearChannelRecordModelIsSet(true);
        }
      }
    }

  }

  public static class query_result implements org.apache.thrift.TBase<query_result, query_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_resultTupleSchemeFactory());
    }

    public List<com.heepay.rpc.billing.model.ClearChannelRecordModel> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.ClearChannelRecordModel.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_result.class, metaDataMap);
    }

    public query_result() {
    }

    public query_result(
      List<com.heepay.rpc.billing.model.ClearChannelRecordModel> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_result(query_result other) {
      if (other.isSetSuccess()) {
        List<com.heepay.rpc.billing.model.ClearChannelRecordModel> __this__success = new ArrayList<com.heepay.rpc.billing.model.ClearChannelRecordModel>(other.success.size());
        for (com.heepay.rpc.billing.model.ClearChannelRecordModel other_element : other.success) {
          __this__success.add(new com.heepay.rpc.billing.model.ClearChannelRecordModel(other_element));
        }
        this.success = __this__success;
      }
    }

    public query_result deepCopy() {
      return new query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.heepay.rpc.billing.model.ClearChannelRecordModel> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.heepay.rpc.billing.model.ClearChannelRecordModel elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.heepay.rpc.billing.model.ClearChannelRecordModel>();
      }
      this.success.add(elem);
    }

    public List<com.heepay.rpc.billing.model.ClearChannelRecordModel> getSuccess() {
      return this.success;
    }

    public query_result setSuccess(List<com.heepay.rpc.billing.model.ClearChannelRecordModel> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.heepay.rpc.billing.model.ClearChannelRecordModel>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_result)
        return this.equals((query_result)that);
      return false;
    }

    public boolean equals(query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_resultStandardSchemeFactory implements SchemeFactory {
      public query_resultStandardScheme getScheme() {
        return new query_resultStandardScheme();
      }
    }

    private static class query_resultStandardScheme extends StandardScheme<query_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.heepay.rpc.billing.model.ClearChannelRecordModel>(_list0.size);
                  com.heepay.rpc.billing.model.ClearChannelRecordModel _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.heepay.rpc.billing.model.ClearChannelRecordModel();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.heepay.rpc.billing.model.ClearChannelRecordModel _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_resultTupleSchemeFactory implements SchemeFactory {
      public query_resultTupleScheme getScheme() {
        return new query_resultTupleScheme();
      }
    }

    private static class query_resultTupleScheme extends TupleScheme<query_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.heepay.rpc.billing.model.ClearChannelRecordModel _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.heepay.rpc.billing.model.ClearChannelRecordModel>(_list5.size);
            com.heepay.rpc.billing.model.ClearChannelRecordModel _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.heepay.rpc.billing.model.ClearChannelRecordModel();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class update_args implements org.apache.thrift.TBase<update_args, update_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_args");

    private static final org.apache.thrift.protocol.TField CLEAR_CHANNEL_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("clearChannelRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLEAR_CHANNEL_RECORD_MODEL((short)1, "clearChannelRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLEAR_CHANNEL_RECORD_MODEL
            return CLEAR_CHANNEL_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLEAR_CHANNEL_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("clearChannelRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.ClearChannelRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_args.class, metaDataMap);
    }

    public update_args() {
    }

    public update_args(
      com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel)
    {
      this();
      this.clearChannelRecordModel = clearChannelRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_args(update_args other) {
      if (other.isSetClearChannelRecordModel()) {
        this.clearChannelRecordModel = new com.heepay.rpc.billing.model.ClearChannelRecordModel(other.clearChannelRecordModel);
      }
    }

    public update_args deepCopy() {
      return new update_args(this);
    }

    @Override
    public void clear() {
      this.clearChannelRecordModel = null;
    }

    public com.heepay.rpc.billing.model.ClearChannelRecordModel getClearChannelRecordModel() {
      return this.clearChannelRecordModel;
    }

    public update_args setClearChannelRecordModel(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) {
      this.clearChannelRecordModel = clearChannelRecordModel;
      return this;
    }

    public void unsetClearChannelRecordModel() {
      this.clearChannelRecordModel = null;
    }

    /** Returns true if field clearChannelRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetClearChannelRecordModel() {
      return this.clearChannelRecordModel != null;
    }

    public void setClearChannelRecordModelIsSet(boolean value) {
      if (!value) {
        this.clearChannelRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLEAR_CHANNEL_RECORD_MODEL:
        if (value == null) {
          unsetClearChannelRecordModel();
        } else {
          setClearChannelRecordModel((com.heepay.rpc.billing.model.ClearChannelRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLEAR_CHANNEL_RECORD_MODEL:
        return getClearChannelRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLEAR_CHANNEL_RECORD_MODEL:
        return isSetClearChannelRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_args)
        return this.equals((update_args)that);
      return false;
    }

    public boolean equals(update_args that) {
      if (that == null)
        return false;

      boolean this_present_clearChannelRecordModel = true && this.isSetClearChannelRecordModel();
      boolean that_present_clearChannelRecordModel = true && that.isSetClearChannelRecordModel();
      if (this_present_clearChannelRecordModel || that_present_clearChannelRecordModel) {
        if (!(this_present_clearChannelRecordModel && that_present_clearChannelRecordModel))
          return false;
        if (!this.clearChannelRecordModel.equals(that.clearChannelRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clearChannelRecordModel = true && (isSetClearChannelRecordModel());
      list.add(present_clearChannelRecordModel);
      if (present_clearChannelRecordModel)
        list.add(clearChannelRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClearChannelRecordModel()).compareTo(other.isSetClearChannelRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClearChannelRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearChannelRecordModel, other.clearChannelRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_args(");
      boolean first = true;

      sb.append("clearChannelRecordModel:");
      if (this.clearChannelRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.clearChannelRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (clearChannelRecordModel != null) {
        clearChannelRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_argsStandardSchemeFactory implements SchemeFactory {
      public update_argsStandardScheme getScheme() {
        return new update_argsStandardScheme();
      }
    }

    private static class update_argsStandardScheme extends StandardScheme<update_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLEAR_CHANNEL_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clearChannelRecordModel = new com.heepay.rpc.billing.model.ClearChannelRecordModel();
                struct.clearChannelRecordModel.read(iprot);
                struct.setClearChannelRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clearChannelRecordModel != null) {
          oprot.writeFieldBegin(CLEAR_CHANNEL_RECORD_MODEL_FIELD_DESC);
          struct.clearChannelRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_argsTupleSchemeFactory implements SchemeFactory {
      public update_argsTupleScheme getScheme() {
        return new update_argsTupleScheme();
      }
    }

    private static class update_argsTupleScheme extends TupleScheme<update_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClearChannelRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClearChannelRecordModel()) {
          struct.clearChannelRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clearChannelRecordModel = new com.heepay.rpc.billing.model.ClearChannelRecordModel();
          struct.clearChannelRecordModel.read(iprot);
          struct.setClearChannelRecordModelIsSet(true);
        }
      }
    }

  }

  public static class update_result implements org.apache.thrift.TBase<update_result, update_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_result.class, metaDataMap);
    }

    public update_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_result(update_result other) {
    }

    public update_result deepCopy() {
      return new update_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_result)
        return this.equals((update_result)that);
      return false;
    }

    public boolean equals(update_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(update_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_resultStandardSchemeFactory implements SchemeFactory {
      public update_resultStandardScheme getScheme() {
        return new update_resultStandardScheme();
      }
    }

    private static class update_resultStandardScheme extends StandardScheme<update_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_resultTupleSchemeFactory implements SchemeFactory {
      public update_resultTupleScheme getScheme() {
        return new update_resultTupleScheme();
      }
    }

    private static class update_resultTupleScheme extends TupleScheme<update_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteBankcard_args implements org.apache.thrift.TBase<deleteBankcard_args, deleteBankcard_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBankcard_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBankcard_args");

    private static final org.apache.thrift.protocol.TField CLEAR_CHANNEL_RECORD_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("clearChannelRecordModel", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBankcard_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBankcard_argsTupleSchemeFactory());
    }

    public com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLEAR_CHANNEL_RECORD_MODEL((short)1, "clearChannelRecordModel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLEAR_CHANNEL_RECORD_MODEL
            return CLEAR_CHANNEL_RECORD_MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLEAR_CHANNEL_RECORD_MODEL, new org.apache.thrift.meta_data.FieldMetaData("clearChannelRecordModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.heepay.rpc.billing.model.ClearChannelRecordModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBankcard_args.class, metaDataMap);
    }

    public deleteBankcard_args() {
    }

    public deleteBankcard_args(
      com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel)
    {
      this();
      this.clearChannelRecordModel = clearChannelRecordModel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBankcard_args(deleteBankcard_args other) {
      if (other.isSetClearChannelRecordModel()) {
        this.clearChannelRecordModel = new com.heepay.rpc.billing.model.ClearChannelRecordModel(other.clearChannelRecordModel);
      }
    }

    public deleteBankcard_args deepCopy() {
      return new deleteBankcard_args(this);
    }

    @Override
    public void clear() {
      this.clearChannelRecordModel = null;
    }

    public com.heepay.rpc.billing.model.ClearChannelRecordModel getClearChannelRecordModel() {
      return this.clearChannelRecordModel;
    }

    public deleteBankcard_args setClearChannelRecordModel(com.heepay.rpc.billing.model.ClearChannelRecordModel clearChannelRecordModel) {
      this.clearChannelRecordModel = clearChannelRecordModel;
      return this;
    }

    public void unsetClearChannelRecordModel() {
      this.clearChannelRecordModel = null;
    }

    /** Returns true if field clearChannelRecordModel is set (has been assigned a value) and false otherwise */
    public boolean isSetClearChannelRecordModel() {
      return this.clearChannelRecordModel != null;
    }

    public void setClearChannelRecordModelIsSet(boolean value) {
      if (!value) {
        this.clearChannelRecordModel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLEAR_CHANNEL_RECORD_MODEL:
        if (value == null) {
          unsetClearChannelRecordModel();
        } else {
          setClearChannelRecordModel((com.heepay.rpc.billing.model.ClearChannelRecordModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLEAR_CHANNEL_RECORD_MODEL:
        return getClearChannelRecordModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLEAR_CHANNEL_RECORD_MODEL:
        return isSetClearChannelRecordModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBankcard_args)
        return this.equals((deleteBankcard_args)that);
      return false;
    }

    public boolean equals(deleteBankcard_args that) {
      if (that == null)
        return false;

      boolean this_present_clearChannelRecordModel = true && this.isSetClearChannelRecordModel();
      boolean that_present_clearChannelRecordModel = true && that.isSetClearChannelRecordModel();
      if (this_present_clearChannelRecordModel || that_present_clearChannelRecordModel) {
        if (!(this_present_clearChannelRecordModel && that_present_clearChannelRecordModel))
          return false;
        if (!this.clearChannelRecordModel.equals(that.clearChannelRecordModel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clearChannelRecordModel = true && (isSetClearChannelRecordModel());
      list.add(present_clearChannelRecordModel);
      if (present_clearChannelRecordModel)
        list.add(clearChannelRecordModel);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBankcard_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClearChannelRecordModel()).compareTo(other.isSetClearChannelRecordModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClearChannelRecordModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearChannelRecordModel, other.clearChannelRecordModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBankcard_args(");
      boolean first = true;

      sb.append("clearChannelRecordModel:");
      if (this.clearChannelRecordModel == null) {
        sb.append("null");
      } else {
        sb.append(this.clearChannelRecordModel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (clearChannelRecordModel != null) {
        clearChannelRecordModel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBankcard_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBankcard_argsStandardScheme getScheme() {
        return new deleteBankcard_argsStandardScheme();
      }
    }

    private static class deleteBankcard_argsStandardScheme extends StandardScheme<deleteBankcard_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBankcard_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLEAR_CHANNEL_RECORD_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clearChannelRecordModel = new com.heepay.rpc.billing.model.ClearChannelRecordModel();
                struct.clearChannelRecordModel.read(iprot);
                struct.setClearChannelRecordModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBankcard_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clearChannelRecordModel != null) {
          oprot.writeFieldBegin(CLEAR_CHANNEL_RECORD_MODEL_FIELD_DESC);
          struct.clearChannelRecordModel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBankcard_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBankcard_argsTupleScheme getScheme() {
        return new deleteBankcard_argsTupleScheme();
      }
    }

    private static class deleteBankcard_argsTupleScheme extends TupleScheme<deleteBankcard_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBankcard_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClearChannelRecordModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClearChannelRecordModel()) {
          struct.clearChannelRecordModel.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBankcard_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clearChannelRecordModel = new com.heepay.rpc.billing.model.ClearChannelRecordModel();
          struct.clearChannelRecordModel.read(iprot);
          struct.setClearChannelRecordModelIsSet(true);
        }
      }
    }

  }

  public static class deleteBankcard_result implements org.apache.thrift.TBase<deleteBankcard_result, deleteBankcard_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBankcard_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBankcard_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBankcard_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBankcard_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBankcard_result.class, metaDataMap);
    }

    public deleteBankcard_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBankcard_result(deleteBankcard_result other) {
    }

    public deleteBankcard_result deepCopy() {
      return new deleteBankcard_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBankcard_result)
        return this.equals((deleteBankcard_result)that);
      return false;
    }

    public boolean equals(deleteBankcard_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBankcard_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBankcard_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBankcard_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBankcard_resultStandardScheme getScheme() {
        return new deleteBankcard_resultStandardScheme();
      }
    }

    private static class deleteBankcard_resultStandardScheme extends StandardScheme<deleteBankcard_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBankcard_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBankcard_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBankcard_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBankcard_resultTupleScheme getScheme() {
        return new deleteBankcard_resultTupleScheme();
      }
    }

    private static class deleteBankcard_resultTupleScheme extends TupleScheme<deleteBankcard_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBankcard_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBankcard_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
