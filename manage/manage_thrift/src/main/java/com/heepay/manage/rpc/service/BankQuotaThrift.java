/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-05")
public class BankQuotaThrift implements org.apache.thrift.TBase<BankQuotaThrift, BankQuotaThrift._Fields>, java.io.Serializable, Cloneable, Comparable<BankQuotaThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BankQuotaThrift");

  private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PERLIMIT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("perlimitAmount", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DAYLIMIT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("daylimitAmount", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MONLIMIT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("monlimitAmount", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BankQuotaThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BankQuotaThriftTupleSchemeFactory());
  }

  public String bankId; // required
  public String bankName; // required
  public String bankCardType; // required
  public String perlimitAmount; // required
  public String daylimitAmount; // required
  public String monlimitAmount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BANK_ID((short)1, "bankId"),
    BANK_NAME((short)2, "bankName"),
    BANK_CARD_TYPE((short)3, "bankCardType"),
    PERLIMIT_AMOUNT((short)4, "perlimitAmount"),
    DAYLIMIT_AMOUNT((short)5, "daylimitAmount"),
    MONLIMIT_AMOUNT((short)6, "monlimitAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BANK_ID
          return BANK_ID;
        case 2: // BANK_NAME
          return BANK_NAME;
        case 3: // BANK_CARD_TYPE
          return BANK_CARD_TYPE;
        case 4: // PERLIMIT_AMOUNT
          return PERLIMIT_AMOUNT;
        case 5: // DAYLIMIT_AMOUNT
          return DAYLIMIT_AMOUNT;
        case 6: // MONLIMIT_AMOUNT
          return MONLIMIT_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERLIMIT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("perlimitAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAYLIMIT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("daylimitAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONLIMIT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("monlimitAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BankQuotaThrift.class, metaDataMap);
  }

  public BankQuotaThrift() {
  }

  public BankQuotaThrift(
    String bankId,
    String bankName,
    String bankCardType,
    String perlimitAmount,
    String daylimitAmount,
    String monlimitAmount)
  {
    this();
    this.bankId = bankId;
    this.bankName = bankName;
    this.bankCardType = bankCardType;
    this.perlimitAmount = perlimitAmount;
    this.daylimitAmount = daylimitAmount;
    this.monlimitAmount = monlimitAmount;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BankQuotaThrift(BankQuotaThrift other) {
    if (other.isSetBankId()) {
      this.bankId = other.bankId;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    if (other.isSetBankCardType()) {
      this.bankCardType = other.bankCardType;
    }
    if (other.isSetPerlimitAmount()) {
      this.perlimitAmount = other.perlimitAmount;
    }
    if (other.isSetDaylimitAmount()) {
      this.daylimitAmount = other.daylimitAmount;
    }
    if (other.isSetMonlimitAmount()) {
      this.monlimitAmount = other.monlimitAmount;
    }
  }

  public BankQuotaThrift deepCopy() {
    return new BankQuotaThrift(this);
  }

  @Override
  public void clear() {
    this.bankId = null;
    this.bankName = null;
    this.bankCardType = null;
    this.perlimitAmount = null;
    this.daylimitAmount = null;
    this.monlimitAmount = null;
  }

  public String getBankId() {
    return this.bankId;
  }

  public BankQuotaThrift setBankId(String bankId) {
    this.bankId = bankId;
    return this;
  }

  public void unsetBankId() {
    this.bankId = null;
  }

  /** Returns true if field bankId is set (has been assigned a value) and false otherwise */
  public boolean isSetBankId() {
    return this.bankId != null;
  }

  public void setBankIdIsSet(boolean value) {
    if (!value) {
      this.bankId = null;
    }
  }

  public String getBankName() {
    return this.bankName;
  }

  public BankQuotaThrift setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  public String getBankCardType() {
    return this.bankCardType;
  }

  public BankQuotaThrift setBankCardType(String bankCardType) {
    this.bankCardType = bankCardType;
    return this;
  }

  public void unsetBankCardType() {
    this.bankCardType = null;
  }

  /** Returns true if field bankCardType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardType() {
    return this.bankCardType != null;
  }

  public void setBankCardTypeIsSet(boolean value) {
    if (!value) {
      this.bankCardType = null;
    }
  }

  public String getPerlimitAmount() {
    return this.perlimitAmount;
  }

  public BankQuotaThrift setPerlimitAmount(String perlimitAmount) {
    this.perlimitAmount = perlimitAmount;
    return this;
  }

  public void unsetPerlimitAmount() {
    this.perlimitAmount = null;
  }

  /** Returns true if field perlimitAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetPerlimitAmount() {
    return this.perlimitAmount != null;
  }

  public void setPerlimitAmountIsSet(boolean value) {
    if (!value) {
      this.perlimitAmount = null;
    }
  }

  public String getDaylimitAmount() {
    return this.daylimitAmount;
  }

  public BankQuotaThrift setDaylimitAmount(String daylimitAmount) {
    this.daylimitAmount = daylimitAmount;
    return this;
  }

  public void unsetDaylimitAmount() {
    this.daylimitAmount = null;
  }

  /** Returns true if field daylimitAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetDaylimitAmount() {
    return this.daylimitAmount != null;
  }

  public void setDaylimitAmountIsSet(boolean value) {
    if (!value) {
      this.daylimitAmount = null;
    }
  }

  public String getMonlimitAmount() {
    return this.monlimitAmount;
  }

  public BankQuotaThrift setMonlimitAmount(String monlimitAmount) {
    this.monlimitAmount = monlimitAmount;
    return this;
  }

  public void unsetMonlimitAmount() {
    this.monlimitAmount = null;
  }

  /** Returns true if field monlimitAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetMonlimitAmount() {
    return this.monlimitAmount != null;
  }

  public void setMonlimitAmountIsSet(boolean value) {
    if (!value) {
      this.monlimitAmount = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BANK_ID:
      if (value == null) {
        unsetBankId();
      } else {
        setBankId((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case BANK_CARD_TYPE:
      if (value == null) {
        unsetBankCardType();
      } else {
        setBankCardType((String)value);
      }
      break;

    case PERLIMIT_AMOUNT:
      if (value == null) {
        unsetPerlimitAmount();
      } else {
        setPerlimitAmount((String)value);
      }
      break;

    case DAYLIMIT_AMOUNT:
      if (value == null) {
        unsetDaylimitAmount();
      } else {
        setDaylimitAmount((String)value);
      }
      break;

    case MONLIMIT_AMOUNT:
      if (value == null) {
        unsetMonlimitAmount();
      } else {
        setMonlimitAmount((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BANK_ID:
      return getBankId();

    case BANK_NAME:
      return getBankName();

    case BANK_CARD_TYPE:
      return getBankCardType();

    case PERLIMIT_AMOUNT:
      return getPerlimitAmount();

    case DAYLIMIT_AMOUNT:
      return getDaylimitAmount();

    case MONLIMIT_AMOUNT:
      return getMonlimitAmount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BANK_ID:
      return isSetBankId();
    case BANK_NAME:
      return isSetBankName();
    case BANK_CARD_TYPE:
      return isSetBankCardType();
    case PERLIMIT_AMOUNT:
      return isSetPerlimitAmount();
    case DAYLIMIT_AMOUNT:
      return isSetDaylimitAmount();
    case MONLIMIT_AMOUNT:
      return isSetMonlimitAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BankQuotaThrift)
      return this.equals((BankQuotaThrift)that);
    return false;
  }

  public boolean equals(BankQuotaThrift that) {
    if (that == null)
      return false;

    boolean this_present_bankId = true && this.isSetBankId();
    boolean that_present_bankId = true && that.isSetBankId();
    if (this_present_bankId || that_present_bankId) {
      if (!(this_present_bankId && that_present_bankId))
        return false;
      if (!this.bankId.equals(that.bankId))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_bankCardType = true && this.isSetBankCardType();
    boolean that_present_bankCardType = true && that.isSetBankCardType();
    if (this_present_bankCardType || that_present_bankCardType) {
      if (!(this_present_bankCardType && that_present_bankCardType))
        return false;
      if (!this.bankCardType.equals(that.bankCardType))
        return false;
    }

    boolean this_present_perlimitAmount = true && this.isSetPerlimitAmount();
    boolean that_present_perlimitAmount = true && that.isSetPerlimitAmount();
    if (this_present_perlimitAmount || that_present_perlimitAmount) {
      if (!(this_present_perlimitAmount && that_present_perlimitAmount))
        return false;
      if (!this.perlimitAmount.equals(that.perlimitAmount))
        return false;
    }

    boolean this_present_daylimitAmount = true && this.isSetDaylimitAmount();
    boolean that_present_daylimitAmount = true && that.isSetDaylimitAmount();
    if (this_present_daylimitAmount || that_present_daylimitAmount) {
      if (!(this_present_daylimitAmount && that_present_daylimitAmount))
        return false;
      if (!this.daylimitAmount.equals(that.daylimitAmount))
        return false;
    }

    boolean this_present_monlimitAmount = true && this.isSetMonlimitAmount();
    boolean that_present_monlimitAmount = true && that.isSetMonlimitAmount();
    if (this_present_monlimitAmount || that_present_monlimitAmount) {
      if (!(this_present_monlimitAmount && that_present_monlimitAmount))
        return false;
      if (!this.monlimitAmount.equals(that.monlimitAmount))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bankId = true && (isSetBankId());
    list.add(present_bankId);
    if (present_bankId)
      list.add(bankId);

    boolean present_bankName = true && (isSetBankName());
    list.add(present_bankName);
    if (present_bankName)
      list.add(bankName);

    boolean present_bankCardType = true && (isSetBankCardType());
    list.add(present_bankCardType);
    if (present_bankCardType)
      list.add(bankCardType);

    boolean present_perlimitAmount = true && (isSetPerlimitAmount());
    list.add(present_perlimitAmount);
    if (present_perlimitAmount)
      list.add(perlimitAmount);

    boolean present_daylimitAmount = true && (isSetDaylimitAmount());
    list.add(present_daylimitAmount);
    if (present_daylimitAmount)
      list.add(daylimitAmount);

    boolean present_monlimitAmount = true && (isSetMonlimitAmount());
    list.add(present_monlimitAmount);
    if (present_monlimitAmount)
      list.add(monlimitAmount);

    return list.hashCode();
  }

  @Override
  public int compareTo(BankQuotaThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBankId()).compareTo(other.isSetBankId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankId, other.bankId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardType()).compareTo(other.isSetBankCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardType, other.bankCardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerlimitAmount()).compareTo(other.isSetPerlimitAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerlimitAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perlimitAmount, other.perlimitAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDaylimitAmount()).compareTo(other.isSetDaylimitAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDaylimitAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.daylimitAmount, other.daylimitAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonlimitAmount()).compareTo(other.isSetMonlimitAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonlimitAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monlimitAmount, other.monlimitAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BankQuotaThrift(");
    boolean first = true;

    sb.append("bankId:");
    if (this.bankId == null) {
      sb.append("null");
    } else {
      sb.append(this.bankId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardType:");
    if (this.bankCardType == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCardType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("perlimitAmount:");
    if (this.perlimitAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.perlimitAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("daylimitAmount:");
    if (this.daylimitAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.daylimitAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monlimitAmount:");
    if (this.monlimitAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.monlimitAmount);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BankQuotaThriftStandardSchemeFactory implements SchemeFactory {
    public BankQuotaThriftStandardScheme getScheme() {
      return new BankQuotaThriftStandardScheme();
    }
  }

  private static class BankQuotaThriftStandardScheme extends StandardScheme<BankQuotaThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BankQuotaThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BANK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankId = iprot.readString();
              struct.setBankIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BANK_CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCardType = iprot.readString();
              struct.setBankCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PERLIMIT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.perlimitAmount = iprot.readString();
              struct.setPerlimitAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DAYLIMIT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.daylimitAmount = iprot.readString();
              struct.setDaylimitAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MONLIMIT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.monlimitAmount = iprot.readString();
              struct.setMonlimitAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BankQuotaThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bankId != null) {
        oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
        oprot.writeString(struct.bankId);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      if (struct.bankCardType != null) {
        oprot.writeFieldBegin(BANK_CARD_TYPE_FIELD_DESC);
        oprot.writeString(struct.bankCardType);
        oprot.writeFieldEnd();
      }
      if (struct.perlimitAmount != null) {
        oprot.writeFieldBegin(PERLIMIT_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.perlimitAmount);
        oprot.writeFieldEnd();
      }
      if (struct.daylimitAmount != null) {
        oprot.writeFieldBegin(DAYLIMIT_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.daylimitAmount);
        oprot.writeFieldEnd();
      }
      if (struct.monlimitAmount != null) {
        oprot.writeFieldBegin(MONLIMIT_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.monlimitAmount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BankQuotaThriftTupleSchemeFactory implements SchemeFactory {
    public BankQuotaThriftTupleScheme getScheme() {
      return new BankQuotaThriftTupleScheme();
    }
  }

  private static class BankQuotaThriftTupleScheme extends TupleScheme<BankQuotaThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BankQuotaThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBankId()) {
        optionals.set(0);
      }
      if (struct.isSetBankName()) {
        optionals.set(1);
      }
      if (struct.isSetBankCardType()) {
        optionals.set(2);
      }
      if (struct.isSetPerlimitAmount()) {
        optionals.set(3);
      }
      if (struct.isSetDaylimitAmount()) {
        optionals.set(4);
      }
      if (struct.isSetMonlimitAmount()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetBankId()) {
        oprot.writeString(struct.bankId);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetBankCardType()) {
        oprot.writeString(struct.bankCardType);
      }
      if (struct.isSetPerlimitAmount()) {
        oprot.writeString(struct.perlimitAmount);
      }
      if (struct.isSetDaylimitAmount()) {
        oprot.writeString(struct.daylimitAmount);
      }
      if (struct.isSetMonlimitAmount()) {
        oprot.writeString(struct.monlimitAmount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BankQuotaThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.bankId = iprot.readString();
        struct.setBankIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bankCardType = iprot.readString();
        struct.setBankCardTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.perlimitAmount = iprot.readString();
        struct.setPerlimitAmountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.daylimitAmount = iprot.readString();
        struct.setDaylimitAmountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.monlimitAmount = iprot.readString();
        struct.setMonlimitAmountIsSet(true);
      }
    }
  }

}

