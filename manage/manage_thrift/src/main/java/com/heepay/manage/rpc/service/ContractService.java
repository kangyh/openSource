/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-12")
public class ContractService {

  public interface Iface {

    public ContractThrift getContract(String contractId, String companyName, String address, String linkMan, String phone, String linkManB, String phoneB) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getContract(String contractId, String companyName, String address, String linkMan, String phone, String linkManB, String phoneB, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ContractThrift getContract(String contractId, String companyName, String address, String linkMan, String phone, String linkManB, String phoneB) throws org.apache.thrift.TException
    {
      send_getContract(contractId, companyName, address, linkMan, phone, linkManB, phoneB);
      return recv_getContract();
    }

    public void send_getContract(String contractId, String companyName, String address, String linkMan, String phone, String linkManB, String phoneB) throws org.apache.thrift.TException
    {
      getContract_args args = new getContract_args();
      args.setContractId(contractId);
      args.setCompanyName(companyName);
      args.setAddress(address);
      args.setLinkMan(linkMan);
      args.setPhone(phone);
      args.setLinkManB(linkManB);
      args.setPhoneB(phoneB);
      sendBase("getContract", args);
    }

    public ContractThrift recv_getContract() throws org.apache.thrift.TException
    {
      getContract_result result = new getContract_result();
      receiveBase(result, "getContract");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getContract failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getContract(String contractId, String companyName, String address, String linkMan, String phone, String linkManB, String phoneB, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getContract_call method_call = new getContract_call(contractId, companyName, address, linkMan, phone, linkManB, phoneB, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getContract_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String contractId;
      private String companyName;
      private String address;
      private String linkMan;
      private String phone;
      private String linkManB;
      private String phoneB;
      public getContract_call(String contractId, String companyName, String address, String linkMan, String phone, String linkManB, String phoneB, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.contractId = contractId;
        this.companyName = companyName;
        this.address = address;
        this.linkMan = linkMan;
        this.phone = phone;
        this.linkManB = linkManB;
        this.phoneB = phoneB;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getContract", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getContract_args args = new getContract_args();
        args.setContractId(contractId);
        args.setCompanyName(companyName);
        args.setAddress(address);
        args.setLinkMan(linkMan);
        args.setPhone(phone);
        args.setLinkManB(linkManB);
        args.setPhoneB(phoneB);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ContractThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getContract();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getContract", new getContract());
      return processMap;
    }

    public static class getContract<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getContract_args> {
      public getContract() {
        super("getContract");
      }

      public getContract_args getEmptyArgsInstance() {
        return new getContract_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getContract_result getResult(I iface, getContract_args args) throws org.apache.thrift.TException {
        getContract_result result = new getContract_result();
        result.success = iface.getContract(args.contractId, args.companyName, args.address, args.linkMan, args.phone, args.linkManB, args.phoneB);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getContract", new getContract());
      return processMap;
    }

    public static class getContract<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getContract_args, ContractThrift> {
      public getContract() {
        super("getContract");
      }

      public getContract_args getEmptyArgsInstance() {
        return new getContract_args();
      }

      public AsyncMethodCallback<ContractThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ContractThrift>() { 
          public void onComplete(ContractThrift o) {
            getContract_result result = new getContract_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getContract_result result = new getContract_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getContract_args args, org.apache.thrift.async.AsyncMethodCallback<ContractThrift> resultHandler) throws TException {
        iface.getContract(args.contractId, args.companyName, args.address, args.linkMan, args.phone, args.linkManB, args.phoneB,resultHandler);
      }
    }

  }

  public static class getContract_args implements org.apache.thrift.TBase<getContract_args, getContract_args._Fields>, java.io.Serializable, Cloneable, Comparable<getContract_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getContract_args");

    private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COMPANY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("companyName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField LINK_MAN_FIELD_DESC = new org.apache.thrift.protocol.TField("linkMan", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField LINK_MAN_B_FIELD_DESC = new org.apache.thrift.protocol.TField("linkManB", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField PHONE_B_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneB", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getContract_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getContract_argsTupleSchemeFactory());
    }

    public String contractId; // required
    public String companyName; // required
    public String address; // required
    public String linkMan; // required
    public String phone; // required
    public String linkManB; // required
    public String phoneB; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTRACT_ID((short)1, "contractId"),
      COMPANY_NAME((short)2, "companyName"),
      ADDRESS((short)3, "address"),
      LINK_MAN((short)4, "linkMan"),
      PHONE((short)5, "phone"),
      LINK_MAN_B((short)6, "linkManB"),
      PHONE_B((short)7, "phoneB");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTRACT_ID
            return CONTRACT_ID;
          case 2: // COMPANY_NAME
            return COMPANY_NAME;
          case 3: // ADDRESS
            return ADDRESS;
          case 4: // LINK_MAN
            return LINK_MAN;
          case 5: // PHONE
            return PHONE;
          case 6: // LINK_MAN_B
            return LINK_MAN_B;
          case 7: // PHONE_B
            return PHONE_B;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contractId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMPANY_NAME, new org.apache.thrift.meta_data.FieldMetaData("companyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINK_MAN, new org.apache.thrift.meta_data.FieldMetaData("linkMan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINK_MAN_B, new org.apache.thrift.meta_data.FieldMetaData("linkManB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PHONE_B, new org.apache.thrift.meta_data.FieldMetaData("phoneB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getContract_args.class, metaDataMap);
    }

    public getContract_args() {
    }

    public getContract_args(
      String contractId,
      String companyName,
      String address,
      String linkMan,
      String phone,
      String linkManB,
      String phoneB)
    {
      this();
      this.contractId = contractId;
      this.companyName = companyName;
      this.address = address;
      this.linkMan = linkMan;
      this.phone = phone;
      this.linkManB = linkManB;
      this.phoneB = phoneB;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContract_args(getContract_args other) {
      if (other.isSetContractId()) {
        this.contractId = other.contractId;
      }
      if (other.isSetCompanyName()) {
        this.companyName = other.companyName;
      }
      if (other.isSetAddress()) {
        this.address = other.address;
      }
      if (other.isSetLinkMan()) {
        this.linkMan = other.linkMan;
      }
      if (other.isSetPhone()) {
        this.phone = other.phone;
      }
      if (other.isSetLinkManB()) {
        this.linkManB = other.linkManB;
      }
      if (other.isSetPhoneB()) {
        this.phoneB = other.phoneB;
      }
    }

    public getContract_args deepCopy() {
      return new getContract_args(this);
    }

    @Override
    public void clear() {
      this.contractId = null;
      this.companyName = null;
      this.address = null;
      this.linkMan = null;
      this.phone = null;
      this.linkManB = null;
      this.phoneB = null;
    }

    public String getContractId() {
      return this.contractId;
    }

    public getContract_args setContractId(String contractId) {
      this.contractId = contractId;
      return this;
    }

    public void unsetContractId() {
      this.contractId = null;
    }

    /** Returns true if field contractId is set (has been assigned a value) and false otherwise */
    public boolean isSetContractId() {
      return this.contractId != null;
    }

    public void setContractIdIsSet(boolean value) {
      if (!value) {
        this.contractId = null;
      }
    }

    public String getCompanyName() {
      return this.companyName;
    }

    public getContract_args setCompanyName(String companyName) {
      this.companyName = companyName;
      return this;
    }

    public void unsetCompanyName() {
      this.companyName = null;
    }

    /** Returns true if field companyName is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyName() {
      return this.companyName != null;
    }

    public void setCompanyNameIsSet(boolean value) {
      if (!value) {
        this.companyName = null;
      }
    }

    public String getAddress() {
      return this.address;
    }

    public getContract_args setAddress(String address) {
      this.address = address;
      return this;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    public String getLinkMan() {
      return this.linkMan;
    }

    public getContract_args setLinkMan(String linkMan) {
      this.linkMan = linkMan;
      return this;
    }

    public void unsetLinkMan() {
      this.linkMan = null;
    }

    /** Returns true if field linkMan is set (has been assigned a value) and false otherwise */
    public boolean isSetLinkMan() {
      return this.linkMan != null;
    }

    public void setLinkManIsSet(boolean value) {
      if (!value) {
        this.linkMan = null;
      }
    }

    public String getPhone() {
      return this.phone;
    }

    public getContract_args setPhone(String phone) {
      this.phone = phone;
      return this;
    }

    public void unsetPhone() {
      this.phone = null;
    }

    /** Returns true if field phone is set (has been assigned a value) and false otherwise */
    public boolean isSetPhone() {
      return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
      if (!value) {
        this.phone = null;
      }
    }

    public String getLinkManB() {
      return this.linkManB;
    }

    public getContract_args setLinkManB(String linkManB) {
      this.linkManB = linkManB;
      return this;
    }

    public void unsetLinkManB() {
      this.linkManB = null;
    }

    /** Returns true if field linkManB is set (has been assigned a value) and false otherwise */
    public boolean isSetLinkManB() {
      return this.linkManB != null;
    }

    public void setLinkManBIsSet(boolean value) {
      if (!value) {
        this.linkManB = null;
      }
    }

    public String getPhoneB() {
      return this.phoneB;
    }

    public getContract_args setPhoneB(String phoneB) {
      this.phoneB = phoneB;
      return this;
    }

    public void unsetPhoneB() {
      this.phoneB = null;
    }

    /** Returns true if field phoneB is set (has been assigned a value) and false otherwise */
    public boolean isSetPhoneB() {
      return this.phoneB != null;
    }

    public void setPhoneBIsSet(boolean value) {
      if (!value) {
        this.phoneB = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTRACT_ID:
        if (value == null) {
          unsetContractId();
        } else {
          setContractId((String)value);
        }
        break;

      case COMPANY_NAME:
        if (value == null) {
          unsetCompanyName();
        } else {
          setCompanyName((String)value);
        }
        break;

      case ADDRESS:
        if (value == null) {
          unsetAddress();
        } else {
          setAddress((String)value);
        }
        break;

      case LINK_MAN:
        if (value == null) {
          unsetLinkMan();
        } else {
          setLinkMan((String)value);
        }
        break;

      case PHONE:
        if (value == null) {
          unsetPhone();
        } else {
          setPhone((String)value);
        }
        break;

      case LINK_MAN_B:
        if (value == null) {
          unsetLinkManB();
        } else {
          setLinkManB((String)value);
        }
        break;

      case PHONE_B:
        if (value == null) {
          unsetPhoneB();
        } else {
          setPhoneB((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTRACT_ID:
        return getContractId();

      case COMPANY_NAME:
        return getCompanyName();

      case ADDRESS:
        return getAddress();

      case LINK_MAN:
        return getLinkMan();

      case PHONE:
        return getPhone();

      case LINK_MAN_B:
        return getLinkManB();

      case PHONE_B:
        return getPhoneB();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTRACT_ID:
        return isSetContractId();
      case COMPANY_NAME:
        return isSetCompanyName();
      case ADDRESS:
        return isSetAddress();
      case LINK_MAN:
        return isSetLinkMan();
      case PHONE:
        return isSetPhone();
      case LINK_MAN_B:
        return isSetLinkManB();
      case PHONE_B:
        return isSetPhoneB();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContract_args)
        return this.equals((getContract_args)that);
      return false;
    }

    public boolean equals(getContract_args that) {
      if (that == null)
        return false;

      boolean this_present_contractId = true && this.isSetContractId();
      boolean that_present_contractId = true && that.isSetContractId();
      if (this_present_contractId || that_present_contractId) {
        if (!(this_present_contractId && that_present_contractId))
          return false;
        if (!this.contractId.equals(that.contractId))
          return false;
      }

      boolean this_present_companyName = true && this.isSetCompanyName();
      boolean that_present_companyName = true && that.isSetCompanyName();
      if (this_present_companyName || that_present_companyName) {
        if (!(this_present_companyName && that_present_companyName))
          return false;
        if (!this.companyName.equals(that.companyName))
          return false;
      }

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address))
          return false;
        if (!this.address.equals(that.address))
          return false;
      }

      boolean this_present_linkMan = true && this.isSetLinkMan();
      boolean that_present_linkMan = true && that.isSetLinkMan();
      if (this_present_linkMan || that_present_linkMan) {
        if (!(this_present_linkMan && that_present_linkMan))
          return false;
        if (!this.linkMan.equals(that.linkMan))
          return false;
      }

      boolean this_present_phone = true && this.isSetPhone();
      boolean that_present_phone = true && that.isSetPhone();
      if (this_present_phone || that_present_phone) {
        if (!(this_present_phone && that_present_phone))
          return false;
        if (!this.phone.equals(that.phone))
          return false;
      }

      boolean this_present_linkManB = true && this.isSetLinkManB();
      boolean that_present_linkManB = true && that.isSetLinkManB();
      if (this_present_linkManB || that_present_linkManB) {
        if (!(this_present_linkManB && that_present_linkManB))
          return false;
        if (!this.linkManB.equals(that.linkManB))
          return false;
      }

      boolean this_present_phoneB = true && this.isSetPhoneB();
      boolean that_present_phoneB = true && that.isSetPhoneB();
      if (this_present_phoneB || that_present_phoneB) {
        if (!(this_present_phoneB && that_present_phoneB))
          return false;
        if (!this.phoneB.equals(that.phoneB))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_contractId = true && (isSetContractId());
      list.add(present_contractId);
      if (present_contractId)
        list.add(contractId);

      boolean present_companyName = true && (isSetCompanyName());
      list.add(present_companyName);
      if (present_companyName)
        list.add(companyName);

      boolean present_address = true && (isSetAddress());
      list.add(present_address);
      if (present_address)
        list.add(address);

      boolean present_linkMan = true && (isSetLinkMan());
      list.add(present_linkMan);
      if (present_linkMan)
        list.add(linkMan);

      boolean present_phone = true && (isSetPhone());
      list.add(present_phone);
      if (present_phone)
        list.add(phone);

      boolean present_linkManB = true && (isSetLinkManB());
      list.add(present_linkManB);
      if (present_linkManB)
        list.add(linkManB);

      boolean present_phoneB = true && (isSetPhoneB());
      list.add(present_phoneB);
      if (present_phoneB)
        list.add(phoneB);

      return list.hashCode();
    }

    @Override
    public int compareTo(getContract_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetContractId()).compareTo(other.isSetContractId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractId, other.contractId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCompanyName()).compareTo(other.isSetCompanyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyName, other.companyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLinkMan()).compareTo(other.isSetLinkMan());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkMan()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkMan, other.linkMan);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhone()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLinkManB()).compareTo(other.isSetLinkManB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkManB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkManB, other.linkManB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPhoneB()).compareTo(other.isSetPhoneB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhoneB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneB, other.phoneB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getContract_args(");
      boolean first = true;

      sb.append("contractId:");
      if (this.contractId == null) {
        sb.append("null");
      } else {
        sb.append(this.contractId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("companyName:");
      if (this.companyName == null) {
        sb.append("null");
      } else {
        sb.append(this.companyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkMan:");
      if (this.linkMan == null) {
        sb.append("null");
      } else {
        sb.append(this.linkMan);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkManB:");
      if (this.linkManB == null) {
        sb.append("null");
      } else {
        sb.append(this.linkManB);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phoneB:");
      if (this.phoneB == null) {
        sb.append("null");
      } else {
        sb.append(this.phoneB);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getContract_argsStandardSchemeFactory implements SchemeFactory {
      public getContract_argsStandardScheme getScheme() {
        return new getContract_argsStandardScheme();
      }
    }

    private static class getContract_argsStandardScheme extends StandardScheme<getContract_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getContract_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTRACT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.contractId = iprot.readString();
                struct.setContractIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPANY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.companyName = iprot.readString();
                struct.setCompanyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.address = iprot.readString();
                struct.setAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LINK_MAN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.linkMan = iprot.readString();
                struct.setLinkManIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PHONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phone = iprot.readString();
                struct.setPhoneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LINK_MAN_B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.linkManB = iprot.readString();
                struct.setLinkManBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // PHONE_B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phoneB = iprot.readString();
                struct.setPhoneBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getContract_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.contractId != null) {
          oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
          oprot.writeString(struct.contractId);
          oprot.writeFieldEnd();
        }
        if (struct.companyName != null) {
          oprot.writeFieldBegin(COMPANY_NAME_FIELD_DESC);
          oprot.writeString(struct.companyName);
          oprot.writeFieldEnd();
        }
        if (struct.address != null) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          oprot.writeString(struct.address);
          oprot.writeFieldEnd();
        }
        if (struct.linkMan != null) {
          oprot.writeFieldBegin(LINK_MAN_FIELD_DESC);
          oprot.writeString(struct.linkMan);
          oprot.writeFieldEnd();
        }
        if (struct.phone != null) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
        if (struct.linkManB != null) {
          oprot.writeFieldBegin(LINK_MAN_B_FIELD_DESC);
          oprot.writeString(struct.linkManB);
          oprot.writeFieldEnd();
        }
        if (struct.phoneB != null) {
          oprot.writeFieldBegin(PHONE_B_FIELD_DESC);
          oprot.writeString(struct.phoneB);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getContract_argsTupleSchemeFactory implements SchemeFactory {
      public getContract_argsTupleScheme getScheme() {
        return new getContract_argsTupleScheme();
      }
    }

    private static class getContract_argsTupleScheme extends TupleScheme<getContract_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getContract_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContractId()) {
          optionals.set(0);
        }
        if (struct.isSetCompanyName()) {
          optionals.set(1);
        }
        if (struct.isSetAddress()) {
          optionals.set(2);
        }
        if (struct.isSetLinkMan()) {
          optionals.set(3);
        }
        if (struct.isSetPhone()) {
          optionals.set(4);
        }
        if (struct.isSetLinkManB()) {
          optionals.set(5);
        }
        if (struct.isSetPhoneB()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetContractId()) {
          oprot.writeString(struct.contractId);
        }
        if (struct.isSetCompanyName()) {
          oprot.writeString(struct.companyName);
        }
        if (struct.isSetAddress()) {
          oprot.writeString(struct.address);
        }
        if (struct.isSetLinkMan()) {
          oprot.writeString(struct.linkMan);
        }
        if (struct.isSetPhone()) {
          oprot.writeString(struct.phone);
        }
        if (struct.isSetLinkManB()) {
          oprot.writeString(struct.linkManB);
        }
        if (struct.isSetPhoneB()) {
          oprot.writeString(struct.phoneB);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getContract_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.contractId = iprot.readString();
          struct.setContractIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.companyName = iprot.readString();
          struct.setCompanyNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.address = iprot.readString();
          struct.setAddressIsSet(true);
        }
        if (incoming.get(3)) {
          struct.linkMan = iprot.readString();
          struct.setLinkManIsSet(true);
        }
        if (incoming.get(4)) {
          struct.phone = iprot.readString();
          struct.setPhoneIsSet(true);
        }
        if (incoming.get(5)) {
          struct.linkManB = iprot.readString();
          struct.setLinkManBIsSet(true);
        }
        if (incoming.get(6)) {
          struct.phoneB = iprot.readString();
          struct.setPhoneBIsSet(true);
        }
      }
    }

  }

  public static class getContract_result implements org.apache.thrift.TBase<getContract_result, getContract_result._Fields>, java.io.Serializable, Cloneable, Comparable<getContract_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getContract_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getContract_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getContract_resultTupleSchemeFactory());
    }

    public ContractThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContractThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getContract_result.class, metaDataMap);
    }

    public getContract_result() {
    }

    public getContract_result(
      ContractThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContract_result(getContract_result other) {
      if (other.isSetSuccess()) {
        this.success = new ContractThrift(other.success);
      }
    }

    public getContract_result deepCopy() {
      return new getContract_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ContractThrift getSuccess() {
      return this.success;
    }

    public getContract_result setSuccess(ContractThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ContractThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContract_result)
        return this.equals((getContract_result)that);
      return false;
    }

    public boolean equals(getContract_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getContract_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getContract_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getContract_resultStandardSchemeFactory implements SchemeFactory {
      public getContract_resultStandardScheme getScheme() {
        return new getContract_resultStandardScheme();
      }
    }

    private static class getContract_resultStandardScheme extends StandardScheme<getContract_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getContract_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ContractThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getContract_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getContract_resultTupleSchemeFactory implements SchemeFactory {
      public getContract_resultTupleScheme getScheme() {
        return new getContract_resultTupleScheme();
      }
    }

    private static class getContract_resultTupleScheme extends TupleScheme<getContract_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getContract_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getContract_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ContractThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
