/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-30")
public class MerchantOperationLogThrift implements org.apache.thrift.TBase<MerchantOperationLogThrift, MerchantOperationLogThrift._Fields>, java.io.Serializable, Cloneable, Comparable<MerchantOperationLogThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MerchantOperationLogThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OPERATE_FUNCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("operateFunction", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OPERATE_BEHAVIOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operateBehavior", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CURRENT_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("currentIp", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OPERATE_OLD_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("operateOldData", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OPERATE_NEW_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("operateNewData", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField HEADER_USER_AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("headerUserAgent", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REQUEST_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("requestUrl", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MerchantOperationLogThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MerchantOperationLogThriftTupleSchemeFactory());
  }

  public String id; // required
  public String merchantId; // required
  public String employeeId; // required
  public String operateFunction; // required
  public String operateBehavior; // required
  public String currentIp; // required
  public String operateOldData; // required
  public String operateNewData; // required
  public String headerUserAgent; // required
  public String requestUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MERCHANT_ID((short)2, "merchantId"),
    EMPLOYEE_ID((short)3, "employeeId"),
    OPERATE_FUNCTION((short)4, "operateFunction"),
    OPERATE_BEHAVIOR((short)5, "operateBehavior"),
    CURRENT_IP((short)6, "currentIp"),
    OPERATE_OLD_DATA((short)7, "operateOldData"),
    OPERATE_NEW_DATA((short)8, "operateNewData"),
    HEADER_USER_AGENT((short)9, "headerUserAgent"),
    REQUEST_URL((short)10, "requestUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MERCHANT_ID
          return MERCHANT_ID;
        case 3: // EMPLOYEE_ID
          return EMPLOYEE_ID;
        case 4: // OPERATE_FUNCTION
          return OPERATE_FUNCTION;
        case 5: // OPERATE_BEHAVIOR
          return OPERATE_BEHAVIOR;
        case 6: // CURRENT_IP
          return CURRENT_IP;
        case 7: // OPERATE_OLD_DATA
          return OPERATE_OLD_DATA;
        case 8: // OPERATE_NEW_DATA
          return OPERATE_NEW_DATA;
        case 9: // HEADER_USER_AGENT
          return HEADER_USER_AGENT;
        case 10: // REQUEST_URL
          return REQUEST_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATE_FUNCTION, new org.apache.thrift.meta_data.FieldMetaData("operateFunction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATE_BEHAVIOR, new org.apache.thrift.meta_data.FieldMetaData("operateBehavior", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_IP, new org.apache.thrift.meta_data.FieldMetaData("currentIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATE_OLD_DATA, new org.apache.thrift.meta_data.FieldMetaData("operateOldData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATE_NEW_DATA, new org.apache.thrift.meta_data.FieldMetaData("operateNewData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEADER_USER_AGENT, new org.apache.thrift.meta_data.FieldMetaData("headerUserAgent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_URL, new org.apache.thrift.meta_data.FieldMetaData("requestUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MerchantOperationLogThrift.class, metaDataMap);
  }

  public MerchantOperationLogThrift() {
  }

  public MerchantOperationLogThrift(
    String id,
    String merchantId,
    String employeeId,
    String operateFunction,
    String operateBehavior,
    String currentIp,
    String operateOldData,
    String operateNewData,
    String headerUserAgent,
    String requestUrl)
  {
    this();
    this.id = id;
    this.merchantId = merchantId;
    this.employeeId = employeeId;
    this.operateFunction = operateFunction;
    this.operateBehavior = operateBehavior;
    this.currentIp = currentIp;
    this.operateOldData = operateOldData;
    this.operateNewData = operateNewData;
    this.headerUserAgent = headerUserAgent;
    this.requestUrl = requestUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MerchantOperationLogThrift(MerchantOperationLogThrift other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetEmployeeId()) {
      this.employeeId = other.employeeId;
    }
    if (other.isSetOperateFunction()) {
      this.operateFunction = other.operateFunction;
    }
    if (other.isSetOperateBehavior()) {
      this.operateBehavior = other.operateBehavior;
    }
    if (other.isSetCurrentIp()) {
      this.currentIp = other.currentIp;
    }
    if (other.isSetOperateOldData()) {
      this.operateOldData = other.operateOldData;
    }
    if (other.isSetOperateNewData()) {
      this.operateNewData = other.operateNewData;
    }
    if (other.isSetHeaderUserAgent()) {
      this.headerUserAgent = other.headerUserAgent;
    }
    if (other.isSetRequestUrl()) {
      this.requestUrl = other.requestUrl;
    }
  }

  public MerchantOperationLogThrift deepCopy() {
    return new MerchantOperationLogThrift(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.merchantId = null;
    this.employeeId = null;
    this.operateFunction = null;
    this.operateBehavior = null;
    this.currentIp = null;
    this.operateOldData = null;
    this.operateNewData = null;
    this.headerUserAgent = null;
    this.requestUrl = null;
  }

  public String getId() {
    return this.id;
  }

  public MerchantOperationLogThrift setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getMerchantId() {
    return this.merchantId;
  }

  public MerchantOperationLogThrift setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  public String getEmployeeId() {
    return this.employeeId;
  }

  public MerchantOperationLogThrift setEmployeeId(String employeeId) {
    this.employeeId = employeeId;
    return this;
  }

  public void unsetEmployeeId() {
    this.employeeId = null;
  }

  /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployeeId() {
    return this.employeeId != null;
  }

  public void setEmployeeIdIsSet(boolean value) {
    if (!value) {
      this.employeeId = null;
    }
  }

  public String getOperateFunction() {
    return this.operateFunction;
  }

  public MerchantOperationLogThrift setOperateFunction(String operateFunction) {
    this.operateFunction = operateFunction;
    return this;
  }

  public void unsetOperateFunction() {
    this.operateFunction = null;
  }

  /** Returns true if field operateFunction is set (has been assigned a value) and false otherwise */
  public boolean isSetOperateFunction() {
    return this.operateFunction != null;
  }

  public void setOperateFunctionIsSet(boolean value) {
    if (!value) {
      this.operateFunction = null;
    }
  }

  public String getOperateBehavior() {
    return this.operateBehavior;
  }

  public MerchantOperationLogThrift setOperateBehavior(String operateBehavior) {
    this.operateBehavior = operateBehavior;
    return this;
  }

  public void unsetOperateBehavior() {
    this.operateBehavior = null;
  }

  /** Returns true if field operateBehavior is set (has been assigned a value) and false otherwise */
  public boolean isSetOperateBehavior() {
    return this.operateBehavior != null;
  }

  public void setOperateBehaviorIsSet(boolean value) {
    if (!value) {
      this.operateBehavior = null;
    }
  }

  public String getCurrentIp() {
    return this.currentIp;
  }

  public MerchantOperationLogThrift setCurrentIp(String currentIp) {
    this.currentIp = currentIp;
    return this;
  }

  public void unsetCurrentIp() {
    this.currentIp = null;
  }

  /** Returns true if field currentIp is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentIp() {
    return this.currentIp != null;
  }

  public void setCurrentIpIsSet(boolean value) {
    if (!value) {
      this.currentIp = null;
    }
  }

  public String getOperateOldData() {
    return this.operateOldData;
  }

  public MerchantOperationLogThrift setOperateOldData(String operateOldData) {
    this.operateOldData = operateOldData;
    return this;
  }

  public void unsetOperateOldData() {
    this.operateOldData = null;
  }

  /** Returns true if field operateOldData is set (has been assigned a value) and false otherwise */
  public boolean isSetOperateOldData() {
    return this.operateOldData != null;
  }

  public void setOperateOldDataIsSet(boolean value) {
    if (!value) {
      this.operateOldData = null;
    }
  }

  public String getOperateNewData() {
    return this.operateNewData;
  }

  public MerchantOperationLogThrift setOperateNewData(String operateNewData) {
    this.operateNewData = operateNewData;
    return this;
  }

  public void unsetOperateNewData() {
    this.operateNewData = null;
  }

  /** Returns true if field operateNewData is set (has been assigned a value) and false otherwise */
  public boolean isSetOperateNewData() {
    return this.operateNewData != null;
  }

  public void setOperateNewDataIsSet(boolean value) {
    if (!value) {
      this.operateNewData = null;
    }
  }

  public String getHeaderUserAgent() {
    return this.headerUserAgent;
  }

  public MerchantOperationLogThrift setHeaderUserAgent(String headerUserAgent) {
    this.headerUserAgent = headerUserAgent;
    return this;
  }

  public void unsetHeaderUserAgent() {
    this.headerUserAgent = null;
  }

  /** Returns true if field headerUserAgent is set (has been assigned a value) and false otherwise */
  public boolean isSetHeaderUserAgent() {
    return this.headerUserAgent != null;
  }

  public void setHeaderUserAgentIsSet(boolean value) {
    if (!value) {
      this.headerUserAgent = null;
    }
  }

  public String getRequestUrl() {
    return this.requestUrl;
  }

  public MerchantOperationLogThrift setRequestUrl(String requestUrl) {
    this.requestUrl = requestUrl;
    return this;
  }

  public void unsetRequestUrl() {
    this.requestUrl = null;
  }

  /** Returns true if field requestUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestUrl() {
    return this.requestUrl != null;
  }

  public void setRequestUrlIsSet(boolean value) {
    if (!value) {
      this.requestUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case EMPLOYEE_ID:
      if (value == null) {
        unsetEmployeeId();
      } else {
        setEmployeeId((String)value);
      }
      break;

    case OPERATE_FUNCTION:
      if (value == null) {
        unsetOperateFunction();
      } else {
        setOperateFunction((String)value);
      }
      break;

    case OPERATE_BEHAVIOR:
      if (value == null) {
        unsetOperateBehavior();
      } else {
        setOperateBehavior((String)value);
      }
      break;

    case CURRENT_IP:
      if (value == null) {
        unsetCurrentIp();
      } else {
        setCurrentIp((String)value);
      }
      break;

    case OPERATE_OLD_DATA:
      if (value == null) {
        unsetOperateOldData();
      } else {
        setOperateOldData((String)value);
      }
      break;

    case OPERATE_NEW_DATA:
      if (value == null) {
        unsetOperateNewData();
      } else {
        setOperateNewData((String)value);
      }
      break;

    case HEADER_USER_AGENT:
      if (value == null) {
        unsetHeaderUserAgent();
      } else {
        setHeaderUserAgent((String)value);
      }
      break;

    case REQUEST_URL:
      if (value == null) {
        unsetRequestUrl();
      } else {
        setRequestUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case MERCHANT_ID:
      return getMerchantId();

    case EMPLOYEE_ID:
      return getEmployeeId();

    case OPERATE_FUNCTION:
      return getOperateFunction();

    case OPERATE_BEHAVIOR:
      return getOperateBehavior();

    case CURRENT_IP:
      return getCurrentIp();

    case OPERATE_OLD_DATA:
      return getOperateOldData();

    case OPERATE_NEW_DATA:
      return getOperateNewData();

    case HEADER_USER_AGENT:
      return getHeaderUserAgent();

    case REQUEST_URL:
      return getRequestUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MERCHANT_ID:
      return isSetMerchantId();
    case EMPLOYEE_ID:
      return isSetEmployeeId();
    case OPERATE_FUNCTION:
      return isSetOperateFunction();
    case OPERATE_BEHAVIOR:
      return isSetOperateBehavior();
    case CURRENT_IP:
      return isSetCurrentIp();
    case OPERATE_OLD_DATA:
      return isSetOperateOldData();
    case OPERATE_NEW_DATA:
      return isSetOperateNewData();
    case HEADER_USER_AGENT:
      return isSetHeaderUserAgent();
    case REQUEST_URL:
      return isSetRequestUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MerchantOperationLogThrift)
      return this.equals((MerchantOperationLogThrift)that);
    return false;
  }

  public boolean equals(MerchantOperationLogThrift that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_employeeId = true && this.isSetEmployeeId();
    boolean that_present_employeeId = true && that.isSetEmployeeId();
    if (this_present_employeeId || that_present_employeeId) {
      if (!(this_present_employeeId && that_present_employeeId))
        return false;
      if (!this.employeeId.equals(that.employeeId))
        return false;
    }

    boolean this_present_operateFunction = true && this.isSetOperateFunction();
    boolean that_present_operateFunction = true && that.isSetOperateFunction();
    if (this_present_operateFunction || that_present_operateFunction) {
      if (!(this_present_operateFunction && that_present_operateFunction))
        return false;
      if (!this.operateFunction.equals(that.operateFunction))
        return false;
    }

    boolean this_present_operateBehavior = true && this.isSetOperateBehavior();
    boolean that_present_operateBehavior = true && that.isSetOperateBehavior();
    if (this_present_operateBehavior || that_present_operateBehavior) {
      if (!(this_present_operateBehavior && that_present_operateBehavior))
        return false;
      if (!this.operateBehavior.equals(that.operateBehavior))
        return false;
    }

    boolean this_present_currentIp = true && this.isSetCurrentIp();
    boolean that_present_currentIp = true && that.isSetCurrentIp();
    if (this_present_currentIp || that_present_currentIp) {
      if (!(this_present_currentIp && that_present_currentIp))
        return false;
      if (!this.currentIp.equals(that.currentIp))
        return false;
    }

    boolean this_present_operateOldData = true && this.isSetOperateOldData();
    boolean that_present_operateOldData = true && that.isSetOperateOldData();
    if (this_present_operateOldData || that_present_operateOldData) {
      if (!(this_present_operateOldData && that_present_operateOldData))
        return false;
      if (!this.operateOldData.equals(that.operateOldData))
        return false;
    }

    boolean this_present_operateNewData = true && this.isSetOperateNewData();
    boolean that_present_operateNewData = true && that.isSetOperateNewData();
    if (this_present_operateNewData || that_present_operateNewData) {
      if (!(this_present_operateNewData && that_present_operateNewData))
        return false;
      if (!this.operateNewData.equals(that.operateNewData))
        return false;
    }

    boolean this_present_headerUserAgent = true && this.isSetHeaderUserAgent();
    boolean that_present_headerUserAgent = true && that.isSetHeaderUserAgent();
    if (this_present_headerUserAgent || that_present_headerUserAgent) {
      if (!(this_present_headerUserAgent && that_present_headerUserAgent))
        return false;
      if (!this.headerUserAgent.equals(that.headerUserAgent))
        return false;
    }

    boolean this_present_requestUrl = true && this.isSetRequestUrl();
    boolean that_present_requestUrl = true && that.isSetRequestUrl();
    if (this_present_requestUrl || that_present_requestUrl) {
      if (!(this_present_requestUrl && that_present_requestUrl))
        return false;
      if (!this.requestUrl.equals(that.requestUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_employeeId = true && (isSetEmployeeId());
    list.add(present_employeeId);
    if (present_employeeId)
      list.add(employeeId);

    boolean present_operateFunction = true && (isSetOperateFunction());
    list.add(present_operateFunction);
    if (present_operateFunction)
      list.add(operateFunction);

    boolean present_operateBehavior = true && (isSetOperateBehavior());
    list.add(present_operateBehavior);
    if (present_operateBehavior)
      list.add(operateBehavior);

    boolean present_currentIp = true && (isSetCurrentIp());
    list.add(present_currentIp);
    if (present_currentIp)
      list.add(currentIp);

    boolean present_operateOldData = true && (isSetOperateOldData());
    list.add(present_operateOldData);
    if (present_operateOldData)
      list.add(operateOldData);

    boolean present_operateNewData = true && (isSetOperateNewData());
    list.add(present_operateNewData);
    if (present_operateNewData)
      list.add(operateNewData);

    boolean present_headerUserAgent = true && (isSetHeaderUserAgent());
    list.add(present_headerUserAgent);
    if (present_headerUserAgent)
      list.add(headerUserAgent);

    boolean present_requestUrl = true && (isSetRequestUrl());
    list.add(present_requestUrl);
    if (present_requestUrl)
      list.add(requestUrl);

    return list.hashCode();
  }

  @Override
  public int compareTo(MerchantOperationLogThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployeeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperateFunction()).compareTo(other.isSetOperateFunction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperateFunction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateFunction, other.operateFunction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperateBehavior()).compareTo(other.isSetOperateBehavior());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperateBehavior()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateBehavior, other.operateBehavior);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentIp()).compareTo(other.isSetCurrentIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentIp, other.currentIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperateOldData()).compareTo(other.isSetOperateOldData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperateOldData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateOldData, other.operateOldData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperateNewData()).compareTo(other.isSetOperateNewData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperateNewData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateNewData, other.operateNewData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeaderUserAgent()).compareTo(other.isSetHeaderUserAgent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeaderUserAgent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headerUserAgent, other.headerUserAgent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestUrl()).compareTo(other.isSetRequestUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestUrl, other.requestUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MerchantOperationLogThrift(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("employeeId:");
    if (this.employeeId == null) {
      sb.append("null");
    } else {
      sb.append(this.employeeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operateFunction:");
    if (this.operateFunction == null) {
      sb.append("null");
    } else {
      sb.append(this.operateFunction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operateBehavior:");
    if (this.operateBehavior == null) {
      sb.append("null");
    } else {
      sb.append(this.operateBehavior);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentIp:");
    if (this.currentIp == null) {
      sb.append("null");
    } else {
      sb.append(this.currentIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operateOldData:");
    if (this.operateOldData == null) {
      sb.append("null");
    } else {
      sb.append(this.operateOldData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operateNewData:");
    if (this.operateNewData == null) {
      sb.append("null");
    } else {
      sb.append(this.operateNewData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("headerUserAgent:");
    if (this.headerUserAgent == null) {
      sb.append("null");
    } else {
      sb.append(this.headerUserAgent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestUrl:");
    if (this.requestUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.requestUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MerchantOperationLogThriftStandardSchemeFactory implements SchemeFactory {
    public MerchantOperationLogThriftStandardScheme getScheme() {
      return new MerchantOperationLogThriftStandardScheme();
    }
  }

  private static class MerchantOperationLogThriftStandardScheme extends StandardScheme<MerchantOperationLogThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MerchantOperationLogThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMPLOYEE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.employeeId = iprot.readString();
              struct.setEmployeeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPERATE_FUNCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operateFunction = iprot.readString();
              struct.setOperateFunctionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPERATE_BEHAVIOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operateBehavior = iprot.readString();
              struct.setOperateBehaviorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURRENT_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currentIp = iprot.readString();
              struct.setCurrentIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPERATE_OLD_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operateOldData = iprot.readString();
              struct.setOperateOldDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPERATE_NEW_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operateNewData = iprot.readString();
              struct.setOperateNewDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HEADER_USER_AGENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headerUserAgent = iprot.readString();
              struct.setHeaderUserAgentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REQUEST_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestUrl = iprot.readString();
              struct.setRequestUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MerchantOperationLogThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.employeeId != null) {
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeString(struct.employeeId);
        oprot.writeFieldEnd();
      }
      if (struct.operateFunction != null) {
        oprot.writeFieldBegin(OPERATE_FUNCTION_FIELD_DESC);
        oprot.writeString(struct.operateFunction);
        oprot.writeFieldEnd();
      }
      if (struct.operateBehavior != null) {
        oprot.writeFieldBegin(OPERATE_BEHAVIOR_FIELD_DESC);
        oprot.writeString(struct.operateBehavior);
        oprot.writeFieldEnd();
      }
      if (struct.currentIp != null) {
        oprot.writeFieldBegin(CURRENT_IP_FIELD_DESC);
        oprot.writeString(struct.currentIp);
        oprot.writeFieldEnd();
      }
      if (struct.operateOldData != null) {
        oprot.writeFieldBegin(OPERATE_OLD_DATA_FIELD_DESC);
        oprot.writeString(struct.operateOldData);
        oprot.writeFieldEnd();
      }
      if (struct.operateNewData != null) {
        oprot.writeFieldBegin(OPERATE_NEW_DATA_FIELD_DESC);
        oprot.writeString(struct.operateNewData);
        oprot.writeFieldEnd();
      }
      if (struct.headerUserAgent != null) {
        oprot.writeFieldBegin(HEADER_USER_AGENT_FIELD_DESC);
        oprot.writeString(struct.headerUserAgent);
        oprot.writeFieldEnd();
      }
      if (struct.requestUrl != null) {
        oprot.writeFieldBegin(REQUEST_URL_FIELD_DESC);
        oprot.writeString(struct.requestUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MerchantOperationLogThriftTupleSchemeFactory implements SchemeFactory {
    public MerchantOperationLogThriftTupleScheme getScheme() {
      return new MerchantOperationLogThriftTupleScheme();
    }
  }

  private static class MerchantOperationLogThriftTupleScheme extends TupleScheme<MerchantOperationLogThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MerchantOperationLogThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(1);
      }
      if (struct.isSetEmployeeId()) {
        optionals.set(2);
      }
      if (struct.isSetOperateFunction()) {
        optionals.set(3);
      }
      if (struct.isSetOperateBehavior()) {
        optionals.set(4);
      }
      if (struct.isSetCurrentIp()) {
        optionals.set(5);
      }
      if (struct.isSetOperateOldData()) {
        optionals.set(6);
      }
      if (struct.isSetOperateNewData()) {
        optionals.set(7);
      }
      if (struct.isSetHeaderUserAgent()) {
        optionals.set(8);
      }
      if (struct.isSetRequestUrl()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetEmployeeId()) {
        oprot.writeString(struct.employeeId);
      }
      if (struct.isSetOperateFunction()) {
        oprot.writeString(struct.operateFunction);
      }
      if (struct.isSetOperateBehavior()) {
        oprot.writeString(struct.operateBehavior);
      }
      if (struct.isSetCurrentIp()) {
        oprot.writeString(struct.currentIp);
      }
      if (struct.isSetOperateOldData()) {
        oprot.writeString(struct.operateOldData);
      }
      if (struct.isSetOperateNewData()) {
        oprot.writeString(struct.operateNewData);
      }
      if (struct.isSetHeaderUserAgent()) {
        oprot.writeString(struct.headerUserAgent);
      }
      if (struct.isSetRequestUrl()) {
        oprot.writeString(struct.requestUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MerchantOperationLogThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.employeeId = iprot.readString();
        struct.setEmployeeIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.operateFunction = iprot.readString();
        struct.setOperateFunctionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.operateBehavior = iprot.readString();
        struct.setOperateBehaviorIsSet(true);
      }
      if (incoming.get(5)) {
        struct.currentIp = iprot.readString();
        struct.setCurrentIpIsSet(true);
      }
      if (incoming.get(6)) {
        struct.operateOldData = iprot.readString();
        struct.setOperateOldDataIsSet(true);
      }
      if (incoming.get(7)) {
        struct.operateNewData = iprot.readString();
        struct.setOperateNewDataIsSet(true);
      }
      if (incoming.get(8)) {
        struct.headerUserAgent = iprot.readString();
        struct.setHeaderUserAgentIsSet(true);
      }
      if (incoming.get(9)) {
        struct.requestUrl = iprot.readString();
        struct.setRequestUrlIsSet(true);
      }
    }
  }

}

