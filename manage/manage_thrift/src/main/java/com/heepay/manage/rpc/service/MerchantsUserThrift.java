/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-07-11")
public class MerchantsUserThrift implements org.apache.thrift.TBase<MerchantsUserThrift, MerchantsUserThrift._Fields>, java.io.Serializable, Cloneable, Comparable<MerchantsUserThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MerchantsUserThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOGIN_NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginNickname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOGIN_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loginPassword", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PAY_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("payPassword", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SECRET_QUESTION_FIELD_DESC = new org.apache.thrift.protocol.TField("secretQuestion", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ANSWER_SECRET_QUESTION_FIELD_DESC = new org.apache.thrift.protocol.TField("answerSecretQuestion", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField QQ_FIELD_DESC = new org.apache.thrift.protocol.TField("qq", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LINK_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("linkAddress", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("remarks", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ID_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("idNo", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REALNAME_AUTH_SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("realnameAuthSign", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField BANKCARD_AUTH_SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("bankcardAuthSign", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField FACE_AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("faceAuth", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField LIFE_AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("lifeAuth", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField USER_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("userLevel", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MerchantsUserThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MerchantsUserThriftTupleSchemeFactory());
  }

  public String id; // required
  public String loginName; // required
  public String loginNickname; // required
  public String userType; // required
  public String loginPassword; // required
  public String payPassword; // required
  public String secretQuestion; // required
  public String answerSecretQuestion; // required
  public String phone; // required
  public String mobile; // required
  public String qq; // required
  public String linkAddress; // required
  public String status; // required
  public String remarks; // required
  public String source; // required
  public String merchantId; // required
  public String idNo; // required
  public String realnameAuthSign; // required
  public String bankcardAuthSign; // required
  public String faceAuth; // required
  public String lifeAuth; // required
  public String userLevel; // required
  public String realName; // required
  public String createTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    LOGIN_NAME((short)2, "loginName"),
    LOGIN_NICKNAME((short)3, "loginNickname"),
    USER_TYPE((short)4, "userType"),
    LOGIN_PASSWORD((short)5, "loginPassword"),
    PAY_PASSWORD((short)6, "payPassword"),
    SECRET_QUESTION((short)7, "secretQuestion"),
    ANSWER_SECRET_QUESTION((short)8, "answerSecretQuestion"),
    PHONE((short)9, "phone"),
    MOBILE((short)10, "mobile"),
    QQ((short)11, "qq"),
    LINK_ADDRESS((short)12, "linkAddress"),
    STATUS((short)13, "status"),
    REMARKS((short)14, "remarks"),
    SOURCE((short)15, "source"),
    MERCHANT_ID((short)16, "merchantId"),
    ID_NO((short)17, "idNo"),
    REALNAME_AUTH_SIGN((short)18, "realnameAuthSign"),
    BANKCARD_AUTH_SIGN((short)19, "bankcardAuthSign"),
    FACE_AUTH((short)20, "faceAuth"),
    LIFE_AUTH((short)21, "lifeAuth"),
    USER_LEVEL((short)22, "userLevel"),
    REAL_NAME((short)23, "realName"),
    CREATE_TIME((short)24, "createTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // LOGIN_NAME
          return LOGIN_NAME;
        case 3: // LOGIN_NICKNAME
          return LOGIN_NICKNAME;
        case 4: // USER_TYPE
          return USER_TYPE;
        case 5: // LOGIN_PASSWORD
          return LOGIN_PASSWORD;
        case 6: // PAY_PASSWORD
          return PAY_PASSWORD;
        case 7: // SECRET_QUESTION
          return SECRET_QUESTION;
        case 8: // ANSWER_SECRET_QUESTION
          return ANSWER_SECRET_QUESTION;
        case 9: // PHONE
          return PHONE;
        case 10: // MOBILE
          return MOBILE;
        case 11: // QQ
          return QQ;
        case 12: // LINK_ADDRESS
          return LINK_ADDRESS;
        case 13: // STATUS
          return STATUS;
        case 14: // REMARKS
          return REMARKS;
        case 15: // SOURCE
          return SOURCE;
        case 16: // MERCHANT_ID
          return MERCHANT_ID;
        case 17: // ID_NO
          return ID_NO;
        case 18: // REALNAME_AUTH_SIGN
          return REALNAME_AUTH_SIGN;
        case 19: // BANKCARD_AUTH_SIGN
          return BANKCARD_AUTH_SIGN;
        case 20: // FACE_AUTH
          return FACE_AUTH;
        case 21: // LIFE_AUTH
          return LIFE_AUTH;
        case 22: // USER_LEVEL
          return USER_LEVEL;
        case 23: // REAL_NAME
          return REAL_NAME;
        case 24: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("loginNickname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("loginPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("payPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECRET_QUESTION, new org.apache.thrift.meta_data.FieldMetaData("secretQuestion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANSWER_SECRET_QUESTION, new org.apache.thrift.meta_data.FieldMetaData("answerSecretQuestion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QQ, new org.apache.thrift.meta_data.FieldMetaData("qq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("linkAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARKS, new org.apache.thrift.meta_data.FieldMetaData("remarks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_NO, new org.apache.thrift.meta_data.FieldMetaData("idNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REALNAME_AUTH_SIGN, new org.apache.thrift.meta_data.FieldMetaData("realnameAuthSign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANKCARD_AUTH_SIGN, new org.apache.thrift.meta_data.FieldMetaData("bankcardAuthSign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACE_AUTH, new org.apache.thrift.meta_data.FieldMetaData("faceAuth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIFE_AUTH, new org.apache.thrift.meta_data.FieldMetaData("lifeAuth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("userLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MerchantsUserThrift.class, metaDataMap);
  }

  public MerchantsUserThrift() {
  }

  public MerchantsUserThrift(
    String id,
    String loginName,
    String loginNickname,
    String userType,
    String loginPassword,
    String payPassword,
    String secretQuestion,
    String answerSecretQuestion,
    String phone,
    String mobile,
    String qq,
    String linkAddress,
    String status,
    String remarks,
    String source,
    String merchantId,
    String idNo,
    String realnameAuthSign,
    String bankcardAuthSign,
    String faceAuth,
    String lifeAuth,
    String userLevel,
    String realName,
    String createTime)
  {
    this();
    this.id = id;
    this.loginName = loginName;
    this.loginNickname = loginNickname;
    this.userType = userType;
    this.loginPassword = loginPassword;
    this.payPassword = payPassword;
    this.secretQuestion = secretQuestion;
    this.answerSecretQuestion = answerSecretQuestion;
    this.phone = phone;
    this.mobile = mobile;
    this.qq = qq;
    this.linkAddress = linkAddress;
    this.status = status;
    this.remarks = remarks;
    this.source = source;
    this.merchantId = merchantId;
    this.idNo = idNo;
    this.realnameAuthSign = realnameAuthSign;
    this.bankcardAuthSign = bankcardAuthSign;
    this.faceAuth = faceAuth;
    this.lifeAuth = lifeAuth;
    this.userLevel = userLevel;
    this.realName = realName;
    this.createTime = createTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MerchantsUserThrift(MerchantsUserThrift other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetLoginName()) {
      this.loginName = other.loginName;
    }
    if (other.isSetLoginNickname()) {
      this.loginNickname = other.loginNickname;
    }
    if (other.isSetUserType()) {
      this.userType = other.userType;
    }
    if (other.isSetLoginPassword()) {
      this.loginPassword = other.loginPassword;
    }
    if (other.isSetPayPassword()) {
      this.payPassword = other.payPassword;
    }
    if (other.isSetSecretQuestion()) {
      this.secretQuestion = other.secretQuestion;
    }
    if (other.isSetAnswerSecretQuestion()) {
      this.answerSecretQuestion = other.answerSecretQuestion;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetQq()) {
      this.qq = other.qq;
    }
    if (other.isSetLinkAddress()) {
      this.linkAddress = other.linkAddress;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetRemarks()) {
      this.remarks = other.remarks;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetIdNo()) {
      this.idNo = other.idNo;
    }
    if (other.isSetRealnameAuthSign()) {
      this.realnameAuthSign = other.realnameAuthSign;
    }
    if (other.isSetBankcardAuthSign()) {
      this.bankcardAuthSign = other.bankcardAuthSign;
    }
    if (other.isSetFaceAuth()) {
      this.faceAuth = other.faceAuth;
    }
    if (other.isSetLifeAuth()) {
      this.lifeAuth = other.lifeAuth;
    }
    if (other.isSetUserLevel()) {
      this.userLevel = other.userLevel;
    }
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
  }

  public MerchantsUserThrift deepCopy() {
    return new MerchantsUserThrift(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.loginName = null;
    this.loginNickname = null;
    this.userType = null;
    this.loginPassword = null;
    this.payPassword = null;
    this.secretQuestion = null;
    this.answerSecretQuestion = null;
    this.phone = null;
    this.mobile = null;
    this.qq = null;
    this.linkAddress = null;
    this.status = null;
    this.remarks = null;
    this.source = null;
    this.merchantId = null;
    this.idNo = null;
    this.realnameAuthSign = null;
    this.bankcardAuthSign = null;
    this.faceAuth = null;
    this.lifeAuth = null;
    this.userLevel = null;
    this.realName = null;
    this.createTime = null;
  }

  public String getId() {
    return this.id;
  }

  public MerchantsUserThrift setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getLoginName() {
    return this.loginName;
  }

  public MerchantsUserThrift setLoginName(String loginName) {
    this.loginName = loginName;
    return this;
  }

  public void unsetLoginName() {
    this.loginName = null;
  }

  /** Returns true if field loginName is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginName() {
    return this.loginName != null;
  }

  public void setLoginNameIsSet(boolean value) {
    if (!value) {
      this.loginName = null;
    }
  }

  public String getLoginNickname() {
    return this.loginNickname;
  }

  public MerchantsUserThrift setLoginNickname(String loginNickname) {
    this.loginNickname = loginNickname;
    return this;
  }

  public void unsetLoginNickname() {
    this.loginNickname = null;
  }

  /** Returns true if field loginNickname is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginNickname() {
    return this.loginNickname != null;
  }

  public void setLoginNicknameIsSet(boolean value) {
    if (!value) {
      this.loginNickname = null;
    }
  }

  public String getUserType() {
    return this.userType;
  }

  public MerchantsUserThrift setUserType(String userType) {
    this.userType = userType;
    return this;
  }

  public void unsetUserType() {
    this.userType = null;
  }

  /** Returns true if field userType is set (has been assigned a value) and false otherwise */
  public boolean isSetUserType() {
    return this.userType != null;
  }

  public void setUserTypeIsSet(boolean value) {
    if (!value) {
      this.userType = null;
    }
  }

  public String getLoginPassword() {
    return this.loginPassword;
  }

  public MerchantsUserThrift setLoginPassword(String loginPassword) {
    this.loginPassword = loginPassword;
    return this;
  }

  public void unsetLoginPassword() {
    this.loginPassword = null;
  }

  /** Returns true if field loginPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginPassword() {
    return this.loginPassword != null;
  }

  public void setLoginPasswordIsSet(boolean value) {
    if (!value) {
      this.loginPassword = null;
    }
  }

  public String getPayPassword() {
    return this.payPassword;
  }

  public MerchantsUserThrift setPayPassword(String payPassword) {
    this.payPassword = payPassword;
    return this;
  }

  public void unsetPayPassword() {
    this.payPassword = null;
  }

  /** Returns true if field payPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetPayPassword() {
    return this.payPassword != null;
  }

  public void setPayPasswordIsSet(boolean value) {
    if (!value) {
      this.payPassword = null;
    }
  }

  public String getSecretQuestion() {
    return this.secretQuestion;
  }

  public MerchantsUserThrift setSecretQuestion(String secretQuestion) {
    this.secretQuestion = secretQuestion;
    return this;
  }

  public void unsetSecretQuestion() {
    this.secretQuestion = null;
  }

  /** Returns true if field secretQuestion is set (has been assigned a value) and false otherwise */
  public boolean isSetSecretQuestion() {
    return this.secretQuestion != null;
  }

  public void setSecretQuestionIsSet(boolean value) {
    if (!value) {
      this.secretQuestion = null;
    }
  }

  public String getAnswerSecretQuestion() {
    return this.answerSecretQuestion;
  }

  public MerchantsUserThrift setAnswerSecretQuestion(String answerSecretQuestion) {
    this.answerSecretQuestion = answerSecretQuestion;
    return this;
  }

  public void unsetAnswerSecretQuestion() {
    this.answerSecretQuestion = null;
  }

  /** Returns true if field answerSecretQuestion is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerSecretQuestion() {
    return this.answerSecretQuestion != null;
  }

  public void setAnswerSecretQuestionIsSet(boolean value) {
    if (!value) {
      this.answerSecretQuestion = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public MerchantsUserThrift setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public MerchantsUserThrift setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getQq() {
    return this.qq;
  }

  public MerchantsUserThrift setQq(String qq) {
    this.qq = qq;
    return this;
  }

  public void unsetQq() {
    this.qq = null;
  }

  /** Returns true if field qq is set (has been assigned a value) and false otherwise */
  public boolean isSetQq() {
    return this.qq != null;
  }

  public void setQqIsSet(boolean value) {
    if (!value) {
      this.qq = null;
    }
  }

  public String getLinkAddress() {
    return this.linkAddress;
  }

  public MerchantsUserThrift setLinkAddress(String linkAddress) {
    this.linkAddress = linkAddress;
    return this;
  }

  public void unsetLinkAddress() {
    this.linkAddress = null;
  }

  /** Returns true if field linkAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkAddress() {
    return this.linkAddress != null;
  }

  public void setLinkAddressIsSet(boolean value) {
    if (!value) {
      this.linkAddress = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public MerchantsUserThrift setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getRemarks() {
    return this.remarks;
  }

  public MerchantsUserThrift setRemarks(String remarks) {
    this.remarks = remarks;
    return this;
  }

  public void unsetRemarks() {
    this.remarks = null;
  }

  /** Returns true if field remarks is set (has been assigned a value) and false otherwise */
  public boolean isSetRemarks() {
    return this.remarks != null;
  }

  public void setRemarksIsSet(boolean value) {
    if (!value) {
      this.remarks = null;
    }
  }

  public String getSource() {
    return this.source;
  }

  public MerchantsUserThrift setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public String getMerchantId() {
    return this.merchantId;
  }

  public MerchantsUserThrift setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  public String getIdNo() {
    return this.idNo;
  }

  public MerchantsUserThrift setIdNo(String idNo) {
    this.idNo = idNo;
    return this;
  }

  public void unsetIdNo() {
    this.idNo = null;
  }

  /** Returns true if field idNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIdNo() {
    return this.idNo != null;
  }

  public void setIdNoIsSet(boolean value) {
    if (!value) {
      this.idNo = null;
    }
  }

  public String getRealnameAuthSign() {
    return this.realnameAuthSign;
  }

  public MerchantsUserThrift setRealnameAuthSign(String realnameAuthSign) {
    this.realnameAuthSign = realnameAuthSign;
    return this;
  }

  public void unsetRealnameAuthSign() {
    this.realnameAuthSign = null;
  }

  /** Returns true if field realnameAuthSign is set (has been assigned a value) and false otherwise */
  public boolean isSetRealnameAuthSign() {
    return this.realnameAuthSign != null;
  }

  public void setRealnameAuthSignIsSet(boolean value) {
    if (!value) {
      this.realnameAuthSign = null;
    }
  }

  public String getBankcardAuthSign() {
    return this.bankcardAuthSign;
  }

  public MerchantsUserThrift setBankcardAuthSign(String bankcardAuthSign) {
    this.bankcardAuthSign = bankcardAuthSign;
    return this;
  }

  public void unsetBankcardAuthSign() {
    this.bankcardAuthSign = null;
  }

  /** Returns true if field bankcardAuthSign is set (has been assigned a value) and false otherwise */
  public boolean isSetBankcardAuthSign() {
    return this.bankcardAuthSign != null;
  }

  public void setBankcardAuthSignIsSet(boolean value) {
    if (!value) {
      this.bankcardAuthSign = null;
    }
  }

  public String getFaceAuth() {
    return this.faceAuth;
  }

  public MerchantsUserThrift setFaceAuth(String faceAuth) {
    this.faceAuth = faceAuth;
    return this;
  }

  public void unsetFaceAuth() {
    this.faceAuth = null;
  }

  /** Returns true if field faceAuth is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceAuth() {
    return this.faceAuth != null;
  }

  public void setFaceAuthIsSet(boolean value) {
    if (!value) {
      this.faceAuth = null;
    }
  }

  public String getLifeAuth() {
    return this.lifeAuth;
  }

  public MerchantsUserThrift setLifeAuth(String lifeAuth) {
    this.lifeAuth = lifeAuth;
    return this;
  }

  public void unsetLifeAuth() {
    this.lifeAuth = null;
  }

  /** Returns true if field lifeAuth is set (has been assigned a value) and false otherwise */
  public boolean isSetLifeAuth() {
    return this.lifeAuth != null;
  }

  public void setLifeAuthIsSet(boolean value) {
    if (!value) {
      this.lifeAuth = null;
    }
  }

  public String getUserLevel() {
    return this.userLevel;
  }

  public MerchantsUserThrift setUserLevel(String userLevel) {
    this.userLevel = userLevel;
    return this;
  }

  public void unsetUserLevel() {
    this.userLevel = null;
  }

  /** Returns true if field userLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLevel() {
    return this.userLevel != null;
  }

  public void setUserLevelIsSet(boolean value) {
    if (!value) {
      this.userLevel = null;
    }
  }

  public String getRealName() {
    return this.realName;
  }

  public MerchantsUserThrift setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public MerchantsUserThrift setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case LOGIN_NAME:
      if (value == null) {
        unsetLoginName();
      } else {
        setLoginName((String)value);
      }
      break;

    case LOGIN_NICKNAME:
      if (value == null) {
        unsetLoginNickname();
      } else {
        setLoginNickname((String)value);
      }
      break;

    case USER_TYPE:
      if (value == null) {
        unsetUserType();
      } else {
        setUserType((String)value);
      }
      break;

    case LOGIN_PASSWORD:
      if (value == null) {
        unsetLoginPassword();
      } else {
        setLoginPassword((String)value);
      }
      break;

    case PAY_PASSWORD:
      if (value == null) {
        unsetPayPassword();
      } else {
        setPayPassword((String)value);
      }
      break;

    case SECRET_QUESTION:
      if (value == null) {
        unsetSecretQuestion();
      } else {
        setSecretQuestion((String)value);
      }
      break;

    case ANSWER_SECRET_QUESTION:
      if (value == null) {
        unsetAnswerSecretQuestion();
      } else {
        setAnswerSecretQuestion((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case QQ:
      if (value == null) {
        unsetQq();
      } else {
        setQq((String)value);
      }
      break;

    case LINK_ADDRESS:
      if (value == null) {
        unsetLinkAddress();
      } else {
        setLinkAddress((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case REMARKS:
      if (value == null) {
        unsetRemarks();
      } else {
        setRemarks((String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case ID_NO:
      if (value == null) {
        unsetIdNo();
      } else {
        setIdNo((String)value);
      }
      break;

    case REALNAME_AUTH_SIGN:
      if (value == null) {
        unsetRealnameAuthSign();
      } else {
        setRealnameAuthSign((String)value);
      }
      break;

    case BANKCARD_AUTH_SIGN:
      if (value == null) {
        unsetBankcardAuthSign();
      } else {
        setBankcardAuthSign((String)value);
      }
      break;

    case FACE_AUTH:
      if (value == null) {
        unsetFaceAuth();
      } else {
        setFaceAuth((String)value);
      }
      break;

    case LIFE_AUTH:
      if (value == null) {
        unsetLifeAuth();
      } else {
        setLifeAuth((String)value);
      }
      break;

    case USER_LEVEL:
      if (value == null) {
        unsetUserLevel();
      } else {
        setUserLevel((String)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case LOGIN_NAME:
      return getLoginName();

    case LOGIN_NICKNAME:
      return getLoginNickname();

    case USER_TYPE:
      return getUserType();

    case LOGIN_PASSWORD:
      return getLoginPassword();

    case PAY_PASSWORD:
      return getPayPassword();

    case SECRET_QUESTION:
      return getSecretQuestion();

    case ANSWER_SECRET_QUESTION:
      return getAnswerSecretQuestion();

    case PHONE:
      return getPhone();

    case MOBILE:
      return getMobile();

    case QQ:
      return getQq();

    case LINK_ADDRESS:
      return getLinkAddress();

    case STATUS:
      return getStatus();

    case REMARKS:
      return getRemarks();

    case SOURCE:
      return getSource();

    case MERCHANT_ID:
      return getMerchantId();

    case ID_NO:
      return getIdNo();

    case REALNAME_AUTH_SIGN:
      return getRealnameAuthSign();

    case BANKCARD_AUTH_SIGN:
      return getBankcardAuthSign();

    case FACE_AUTH:
      return getFaceAuth();

    case LIFE_AUTH:
      return getLifeAuth();

    case USER_LEVEL:
      return getUserLevel();

    case REAL_NAME:
      return getRealName();

    case CREATE_TIME:
      return getCreateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LOGIN_NAME:
      return isSetLoginName();
    case LOGIN_NICKNAME:
      return isSetLoginNickname();
    case USER_TYPE:
      return isSetUserType();
    case LOGIN_PASSWORD:
      return isSetLoginPassword();
    case PAY_PASSWORD:
      return isSetPayPassword();
    case SECRET_QUESTION:
      return isSetSecretQuestion();
    case ANSWER_SECRET_QUESTION:
      return isSetAnswerSecretQuestion();
    case PHONE:
      return isSetPhone();
    case MOBILE:
      return isSetMobile();
    case QQ:
      return isSetQq();
    case LINK_ADDRESS:
      return isSetLinkAddress();
    case STATUS:
      return isSetStatus();
    case REMARKS:
      return isSetRemarks();
    case SOURCE:
      return isSetSource();
    case MERCHANT_ID:
      return isSetMerchantId();
    case ID_NO:
      return isSetIdNo();
    case REALNAME_AUTH_SIGN:
      return isSetRealnameAuthSign();
    case BANKCARD_AUTH_SIGN:
      return isSetBankcardAuthSign();
    case FACE_AUTH:
      return isSetFaceAuth();
    case LIFE_AUTH:
      return isSetLifeAuth();
    case USER_LEVEL:
      return isSetUserLevel();
    case REAL_NAME:
      return isSetRealName();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MerchantsUserThrift)
      return this.equals((MerchantsUserThrift)that);
    return false;
  }

  public boolean equals(MerchantsUserThrift that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_loginName = true && this.isSetLoginName();
    boolean that_present_loginName = true && that.isSetLoginName();
    if (this_present_loginName || that_present_loginName) {
      if (!(this_present_loginName && that_present_loginName))
        return false;
      if (!this.loginName.equals(that.loginName))
        return false;
    }

    boolean this_present_loginNickname = true && this.isSetLoginNickname();
    boolean that_present_loginNickname = true && that.isSetLoginNickname();
    if (this_present_loginNickname || that_present_loginNickname) {
      if (!(this_present_loginNickname && that_present_loginNickname))
        return false;
      if (!this.loginNickname.equals(that.loginNickname))
        return false;
    }

    boolean this_present_userType = true && this.isSetUserType();
    boolean that_present_userType = true && that.isSetUserType();
    if (this_present_userType || that_present_userType) {
      if (!(this_present_userType && that_present_userType))
        return false;
      if (!this.userType.equals(that.userType))
        return false;
    }

    boolean this_present_loginPassword = true && this.isSetLoginPassword();
    boolean that_present_loginPassword = true && that.isSetLoginPassword();
    if (this_present_loginPassword || that_present_loginPassword) {
      if (!(this_present_loginPassword && that_present_loginPassword))
        return false;
      if (!this.loginPassword.equals(that.loginPassword))
        return false;
    }

    boolean this_present_payPassword = true && this.isSetPayPassword();
    boolean that_present_payPassword = true && that.isSetPayPassword();
    if (this_present_payPassword || that_present_payPassword) {
      if (!(this_present_payPassword && that_present_payPassword))
        return false;
      if (!this.payPassword.equals(that.payPassword))
        return false;
    }

    boolean this_present_secretQuestion = true && this.isSetSecretQuestion();
    boolean that_present_secretQuestion = true && that.isSetSecretQuestion();
    if (this_present_secretQuestion || that_present_secretQuestion) {
      if (!(this_present_secretQuestion && that_present_secretQuestion))
        return false;
      if (!this.secretQuestion.equals(that.secretQuestion))
        return false;
    }

    boolean this_present_answerSecretQuestion = true && this.isSetAnswerSecretQuestion();
    boolean that_present_answerSecretQuestion = true && that.isSetAnswerSecretQuestion();
    if (this_present_answerSecretQuestion || that_present_answerSecretQuestion) {
      if (!(this_present_answerSecretQuestion && that_present_answerSecretQuestion))
        return false;
      if (!this.answerSecretQuestion.equals(that.answerSecretQuestion))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_qq = true && this.isSetQq();
    boolean that_present_qq = true && that.isSetQq();
    if (this_present_qq || that_present_qq) {
      if (!(this_present_qq && that_present_qq))
        return false;
      if (!this.qq.equals(that.qq))
        return false;
    }

    boolean this_present_linkAddress = true && this.isSetLinkAddress();
    boolean that_present_linkAddress = true && that.isSetLinkAddress();
    if (this_present_linkAddress || that_present_linkAddress) {
      if (!(this_present_linkAddress && that_present_linkAddress))
        return false;
      if (!this.linkAddress.equals(that.linkAddress))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_remarks = true && this.isSetRemarks();
    boolean that_present_remarks = true && that.isSetRemarks();
    if (this_present_remarks || that_present_remarks) {
      if (!(this_present_remarks && that_present_remarks))
        return false;
      if (!this.remarks.equals(that.remarks))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_idNo = true && this.isSetIdNo();
    boolean that_present_idNo = true && that.isSetIdNo();
    if (this_present_idNo || that_present_idNo) {
      if (!(this_present_idNo && that_present_idNo))
        return false;
      if (!this.idNo.equals(that.idNo))
        return false;
    }

    boolean this_present_realnameAuthSign = true && this.isSetRealnameAuthSign();
    boolean that_present_realnameAuthSign = true && that.isSetRealnameAuthSign();
    if (this_present_realnameAuthSign || that_present_realnameAuthSign) {
      if (!(this_present_realnameAuthSign && that_present_realnameAuthSign))
        return false;
      if (!this.realnameAuthSign.equals(that.realnameAuthSign))
        return false;
    }

    boolean this_present_bankcardAuthSign = true && this.isSetBankcardAuthSign();
    boolean that_present_bankcardAuthSign = true && that.isSetBankcardAuthSign();
    if (this_present_bankcardAuthSign || that_present_bankcardAuthSign) {
      if (!(this_present_bankcardAuthSign && that_present_bankcardAuthSign))
        return false;
      if (!this.bankcardAuthSign.equals(that.bankcardAuthSign))
        return false;
    }

    boolean this_present_faceAuth = true && this.isSetFaceAuth();
    boolean that_present_faceAuth = true && that.isSetFaceAuth();
    if (this_present_faceAuth || that_present_faceAuth) {
      if (!(this_present_faceAuth && that_present_faceAuth))
        return false;
      if (!this.faceAuth.equals(that.faceAuth))
        return false;
    }

    boolean this_present_lifeAuth = true && this.isSetLifeAuth();
    boolean that_present_lifeAuth = true && that.isSetLifeAuth();
    if (this_present_lifeAuth || that_present_lifeAuth) {
      if (!(this_present_lifeAuth && that_present_lifeAuth))
        return false;
      if (!this.lifeAuth.equals(that.lifeAuth))
        return false;
    }

    boolean this_present_userLevel = true && this.isSetUserLevel();
    boolean that_present_userLevel = true && that.isSetUserLevel();
    if (this_present_userLevel || that_present_userLevel) {
      if (!(this_present_userLevel && that_present_userLevel))
        return false;
      if (!this.userLevel.equals(that.userLevel))
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_loginName = true && (isSetLoginName());
    list.add(present_loginName);
    if (present_loginName)
      list.add(loginName);

    boolean present_loginNickname = true && (isSetLoginNickname());
    list.add(present_loginNickname);
    if (present_loginNickname)
      list.add(loginNickname);

    boolean present_userType = true && (isSetUserType());
    list.add(present_userType);
    if (present_userType)
      list.add(userType);

    boolean present_loginPassword = true && (isSetLoginPassword());
    list.add(present_loginPassword);
    if (present_loginPassword)
      list.add(loginPassword);

    boolean present_payPassword = true && (isSetPayPassword());
    list.add(present_payPassword);
    if (present_payPassword)
      list.add(payPassword);

    boolean present_secretQuestion = true && (isSetSecretQuestion());
    list.add(present_secretQuestion);
    if (present_secretQuestion)
      list.add(secretQuestion);

    boolean present_answerSecretQuestion = true && (isSetAnswerSecretQuestion());
    list.add(present_answerSecretQuestion);
    if (present_answerSecretQuestion)
      list.add(answerSecretQuestion);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    boolean present_qq = true && (isSetQq());
    list.add(present_qq);
    if (present_qq)
      list.add(qq);

    boolean present_linkAddress = true && (isSetLinkAddress());
    list.add(present_linkAddress);
    if (present_linkAddress)
      list.add(linkAddress);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_remarks = true && (isSetRemarks());
    list.add(present_remarks);
    if (present_remarks)
      list.add(remarks);

    boolean present_source = true && (isSetSource());
    list.add(present_source);
    if (present_source)
      list.add(source);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_idNo = true && (isSetIdNo());
    list.add(present_idNo);
    if (present_idNo)
      list.add(idNo);

    boolean present_realnameAuthSign = true && (isSetRealnameAuthSign());
    list.add(present_realnameAuthSign);
    if (present_realnameAuthSign)
      list.add(realnameAuthSign);

    boolean present_bankcardAuthSign = true && (isSetBankcardAuthSign());
    list.add(present_bankcardAuthSign);
    if (present_bankcardAuthSign)
      list.add(bankcardAuthSign);

    boolean present_faceAuth = true && (isSetFaceAuth());
    list.add(present_faceAuth);
    if (present_faceAuth)
      list.add(faceAuth);

    boolean present_lifeAuth = true && (isSetLifeAuth());
    list.add(present_lifeAuth);
    if (present_lifeAuth)
      list.add(lifeAuth);

    boolean present_userLevel = true && (isSetUserLevel());
    list.add(present_userLevel);
    if (present_userLevel)
      list.add(userLevel);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(MerchantsUserThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginName()).compareTo(other.isSetLoginName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginName, other.loginName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginNickname()).compareTo(other.isSetLoginNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginNickname, other.loginNickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginPassword()).compareTo(other.isSetLoginPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginPassword, other.loginPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayPassword()).compareTo(other.isSetPayPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payPassword, other.payPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecretQuestion()).compareTo(other.isSetSecretQuestion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecretQuestion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secretQuestion, other.secretQuestion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswerSecretQuestion()).compareTo(other.isSetAnswerSecretQuestion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerSecretQuestion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerSecretQuestion, other.answerSecretQuestion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQq()).compareTo(other.isSetQq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qq, other.qq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinkAddress()).compareTo(other.isSetLinkAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkAddress, other.linkAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemarks()).compareTo(other.isSetRemarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remarks, other.remarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdNo()).compareTo(other.isSetIdNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idNo, other.idNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealnameAuthSign()).compareTo(other.isSetRealnameAuthSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealnameAuthSign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realnameAuthSign, other.realnameAuthSign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankcardAuthSign()).compareTo(other.isSetBankcardAuthSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankcardAuthSign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankcardAuthSign, other.bankcardAuthSign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaceAuth()).compareTo(other.isSetFaceAuth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceAuth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceAuth, other.faceAuth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLifeAuth()).compareTo(other.isSetLifeAuth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLifeAuth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lifeAuth, other.lifeAuth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLevel()).compareTo(other.isSetUserLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLevel, other.userLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MerchantsUserThrift(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginName:");
    if (this.loginName == null) {
      sb.append("null");
    } else {
      sb.append(this.loginName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginNickname:");
    if (this.loginNickname == null) {
      sb.append("null");
    } else {
      sb.append(this.loginNickname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userType:");
    if (this.userType == null) {
      sb.append("null");
    } else {
      sb.append(this.userType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginPassword:");
    if (this.loginPassword == null) {
      sb.append("null");
    } else {
      sb.append(this.loginPassword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payPassword:");
    if (this.payPassword == null) {
      sb.append("null");
    } else {
      sb.append(this.payPassword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secretQuestion:");
    if (this.secretQuestion == null) {
      sb.append("null");
    } else {
      sb.append(this.secretQuestion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("answerSecretQuestion:");
    if (this.answerSecretQuestion == null) {
      sb.append("null");
    } else {
      sb.append(this.answerSecretQuestion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qq:");
    if (this.qq == null) {
      sb.append("null");
    } else {
      sb.append(this.qq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("linkAddress:");
    if (this.linkAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.linkAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remarks:");
    if (this.remarks == null) {
      sb.append("null");
    } else {
      sb.append(this.remarks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idNo:");
    if (this.idNo == null) {
      sb.append("null");
    } else {
      sb.append(this.idNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realnameAuthSign:");
    if (this.realnameAuthSign == null) {
      sb.append("null");
    } else {
      sb.append(this.realnameAuthSign);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankcardAuthSign:");
    if (this.bankcardAuthSign == null) {
      sb.append("null");
    } else {
      sb.append(this.bankcardAuthSign);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("faceAuth:");
    if (this.faceAuth == null) {
      sb.append("null");
    } else {
      sb.append(this.faceAuth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lifeAuth:");
    if (this.lifeAuth == null) {
      sb.append("null");
    } else {
      sb.append(this.lifeAuth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userLevel:");
    if (this.userLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.userLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MerchantsUserThriftStandardSchemeFactory implements SchemeFactory {
    public MerchantsUserThriftStandardScheme getScheme() {
      return new MerchantsUserThriftStandardScheme();
    }
  }

  private static class MerchantsUserThriftStandardScheme extends StandardScheme<MerchantsUserThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MerchantsUserThrift struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOGIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginName = iprot.readString();
              struct.setLoginNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOGIN_NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginNickname = iprot.readString();
              struct.setLoginNicknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userType = iprot.readString();
              struct.setUserTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOGIN_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginPassword = iprot.readString();
              struct.setLoginPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAY_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payPassword = iprot.readString();
              struct.setPayPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SECRET_QUESTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secretQuestion = iprot.readString();
              struct.setSecretQuestionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ANSWER_SECRET_QUESTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.answerSecretQuestion = iprot.readString();
              struct.setAnswerSecretQuestionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // QQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qq = iprot.readString();
              struct.setQqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LINK_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkAddress = iprot.readString();
              struct.setLinkAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remarks = iprot.readString();
              struct.setRemarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ID_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idNo = iprot.readString();
              struct.setIdNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REALNAME_AUTH_SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realnameAuthSign = iprot.readString();
              struct.setRealnameAuthSignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // BANKCARD_AUTH_SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankcardAuthSign = iprot.readString();
              struct.setBankcardAuthSignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // FACE_AUTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.faceAuth = iprot.readString();
              struct.setFaceAuthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LIFE_AUTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lifeAuth = iprot.readString();
              struct.setLifeAuthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // USER_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userLevel = iprot.readString();
              struct.setUserLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MerchantsUserThrift struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.loginName != null) {
        oprot.writeFieldBegin(LOGIN_NAME_FIELD_DESC);
        oprot.writeString(struct.loginName);
        oprot.writeFieldEnd();
      }
      if (struct.loginNickname != null) {
        oprot.writeFieldBegin(LOGIN_NICKNAME_FIELD_DESC);
        oprot.writeString(struct.loginNickname);
        oprot.writeFieldEnd();
      }
      if (struct.userType != null) {
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeString(struct.userType);
        oprot.writeFieldEnd();
      }
      if (struct.loginPassword != null) {
        oprot.writeFieldBegin(LOGIN_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.loginPassword);
        oprot.writeFieldEnd();
      }
      if (struct.payPassword != null) {
        oprot.writeFieldBegin(PAY_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.payPassword);
        oprot.writeFieldEnd();
      }
      if (struct.secretQuestion != null) {
        oprot.writeFieldBegin(SECRET_QUESTION_FIELD_DESC);
        oprot.writeString(struct.secretQuestion);
        oprot.writeFieldEnd();
      }
      if (struct.answerSecretQuestion != null) {
        oprot.writeFieldBegin(ANSWER_SECRET_QUESTION_FIELD_DESC);
        oprot.writeString(struct.answerSecretQuestion);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.qq != null) {
        oprot.writeFieldBegin(QQ_FIELD_DESC);
        oprot.writeString(struct.qq);
        oprot.writeFieldEnd();
      }
      if (struct.linkAddress != null) {
        oprot.writeFieldBegin(LINK_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.linkAddress);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.remarks != null) {
        oprot.writeFieldBegin(REMARKS_FIELD_DESC);
        oprot.writeString(struct.remarks);
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.idNo != null) {
        oprot.writeFieldBegin(ID_NO_FIELD_DESC);
        oprot.writeString(struct.idNo);
        oprot.writeFieldEnd();
      }
      if (struct.realnameAuthSign != null) {
        oprot.writeFieldBegin(REALNAME_AUTH_SIGN_FIELD_DESC);
        oprot.writeString(struct.realnameAuthSign);
        oprot.writeFieldEnd();
      }
      if (struct.bankcardAuthSign != null) {
        oprot.writeFieldBegin(BANKCARD_AUTH_SIGN_FIELD_DESC);
        oprot.writeString(struct.bankcardAuthSign);
        oprot.writeFieldEnd();
      }
      if (struct.faceAuth != null) {
        oprot.writeFieldBegin(FACE_AUTH_FIELD_DESC);
        oprot.writeString(struct.faceAuth);
        oprot.writeFieldEnd();
      }
      if (struct.lifeAuth != null) {
        oprot.writeFieldBegin(LIFE_AUTH_FIELD_DESC);
        oprot.writeString(struct.lifeAuth);
        oprot.writeFieldEnd();
      }
      if (struct.userLevel != null) {
        oprot.writeFieldBegin(USER_LEVEL_FIELD_DESC);
        oprot.writeString(struct.userLevel);
        oprot.writeFieldEnd();
      }
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MerchantsUserThriftTupleSchemeFactory implements SchemeFactory {
    public MerchantsUserThriftTupleScheme getScheme() {
      return new MerchantsUserThriftTupleScheme();
    }
  }

  private static class MerchantsUserThriftTupleScheme extends TupleScheme<MerchantsUserThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MerchantsUserThrift struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetLoginName()) {
        optionals.set(1);
      }
      if (struct.isSetLoginNickname()) {
        optionals.set(2);
      }
      if (struct.isSetUserType()) {
        optionals.set(3);
      }
      if (struct.isSetLoginPassword()) {
        optionals.set(4);
      }
      if (struct.isSetPayPassword()) {
        optionals.set(5);
      }
      if (struct.isSetSecretQuestion()) {
        optionals.set(6);
      }
      if (struct.isSetAnswerSecretQuestion()) {
        optionals.set(7);
      }
      if (struct.isSetPhone()) {
        optionals.set(8);
      }
      if (struct.isSetMobile()) {
        optionals.set(9);
      }
      if (struct.isSetQq()) {
        optionals.set(10);
      }
      if (struct.isSetLinkAddress()) {
        optionals.set(11);
      }
      if (struct.isSetStatus()) {
        optionals.set(12);
      }
      if (struct.isSetRemarks()) {
        optionals.set(13);
      }
      if (struct.isSetSource()) {
        optionals.set(14);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(15);
      }
      if (struct.isSetIdNo()) {
        optionals.set(16);
      }
      if (struct.isSetRealnameAuthSign()) {
        optionals.set(17);
      }
      if (struct.isSetBankcardAuthSign()) {
        optionals.set(18);
      }
      if (struct.isSetFaceAuth()) {
        optionals.set(19);
      }
      if (struct.isSetLifeAuth()) {
        optionals.set(20);
      }
      if (struct.isSetUserLevel()) {
        optionals.set(21);
      }
      if (struct.isSetRealName()) {
        optionals.set(22);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetLoginName()) {
        oprot.writeString(struct.loginName);
      }
      if (struct.isSetLoginNickname()) {
        oprot.writeString(struct.loginNickname);
      }
      if (struct.isSetUserType()) {
        oprot.writeString(struct.userType);
      }
      if (struct.isSetLoginPassword()) {
        oprot.writeString(struct.loginPassword);
      }
      if (struct.isSetPayPassword()) {
        oprot.writeString(struct.payPassword);
      }
      if (struct.isSetSecretQuestion()) {
        oprot.writeString(struct.secretQuestion);
      }
      if (struct.isSetAnswerSecretQuestion()) {
        oprot.writeString(struct.answerSecretQuestion);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetQq()) {
        oprot.writeString(struct.qq);
      }
      if (struct.isSetLinkAddress()) {
        oprot.writeString(struct.linkAddress);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetRemarks()) {
        oprot.writeString(struct.remarks);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetIdNo()) {
        oprot.writeString(struct.idNo);
      }
      if (struct.isSetRealnameAuthSign()) {
        oprot.writeString(struct.realnameAuthSign);
      }
      if (struct.isSetBankcardAuthSign()) {
        oprot.writeString(struct.bankcardAuthSign);
      }
      if (struct.isSetFaceAuth()) {
        oprot.writeString(struct.faceAuth);
      }
      if (struct.isSetLifeAuth()) {
        oprot.writeString(struct.lifeAuth);
      }
      if (struct.isSetUserLevel()) {
        oprot.writeString(struct.userLevel);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MerchantsUserThrift struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loginName = iprot.readString();
        struct.setLoginNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loginNickname = iprot.readString();
        struct.setLoginNicknameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userType = iprot.readString();
        struct.setUserTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.loginPassword = iprot.readString();
        struct.setLoginPasswordIsSet(true);
      }
      if (incoming.get(5)) {
        struct.payPassword = iprot.readString();
        struct.setPayPasswordIsSet(true);
      }
      if (incoming.get(6)) {
        struct.secretQuestion = iprot.readString();
        struct.setSecretQuestionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.answerSecretQuestion = iprot.readString();
        struct.setAnswerSecretQuestionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(9)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(10)) {
        struct.qq = iprot.readString();
        struct.setQqIsSet(true);
      }
      if (incoming.get(11)) {
        struct.linkAddress = iprot.readString();
        struct.setLinkAddressIsSet(true);
      }
      if (incoming.get(12)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.remarks = iprot.readString();
        struct.setRemarksIsSet(true);
      }
      if (incoming.get(14)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(15)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.idNo = iprot.readString();
        struct.setIdNoIsSet(true);
      }
      if (incoming.get(17)) {
        struct.realnameAuthSign = iprot.readString();
        struct.setRealnameAuthSignIsSet(true);
      }
      if (incoming.get(18)) {
        struct.bankcardAuthSign = iprot.readString();
        struct.setBankcardAuthSignIsSet(true);
      }
      if (incoming.get(19)) {
        struct.faceAuth = iprot.readString();
        struct.setFaceAuthIsSet(true);
      }
      if (incoming.get(20)) {
        struct.lifeAuth = iprot.readString();
        struct.setLifeAuthIsSet(true);
      }
      if (incoming.get(21)) {
        struct.userLevel = iprot.readString();
        struct.setUserLevelIsSet(true);
      }
      if (incoming.get(22)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(23)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
    }
  }

}

