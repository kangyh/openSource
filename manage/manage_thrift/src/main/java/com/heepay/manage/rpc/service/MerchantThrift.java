/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-13")
public class MerchantThrift implements org.apache.thrift.TBase<MerchantThrift, MerchantThrift._Fields>, java.io.Serializable, Cloneable, Comparable<MerchantThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MerchantThrift");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMPANY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("companyName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LEGAL_REPRESENTATIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("legalRepresentative", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMPANY_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("companyPhone", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LEGAL_MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("legalMobile", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField WEBSITE_FIELD_DESC = new org.apache.thrift.protocol.TField("website", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BUSINESS_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("businessAddress", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CONTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("contryCode", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CONTRY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("contryName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PROVINCE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("provinceCode", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PROVINCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("provinceName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cityCode", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField COUNTY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countyCode", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField COUNTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("countyName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CONTACT_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("contactAddress", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CONTACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("contactor", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CHARGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeType", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField REQUEST_WAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestWays", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField REQUEST_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("requestVersion", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField ALLOWED_IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("allowedIps", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField SIGNED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("signedType", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField OP_AUDIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("opAuditTime", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField OP_AUDITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("opAuditor", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField RC_AUDIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("rcAuditStatus", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField RC_AUDIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("rcAuditTime", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField RC_AUDITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("rcAuditor", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField LEGAL_AUDIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("legalAuditStatus", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField LEGAL_AUDIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("legalAuditTime", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField LEGAL_AUDITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("legalAuditor", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField SALES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("salesId", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField INCHARGER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inchargerId", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField WELCOME_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("welcomeMessage", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField CERTIFICATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("certificateType", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField BUSINESS_LICENSE_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("businessLicenseEndTime", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField ORGANIZATION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("organizationCode", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField TAX_REGISTRATION_CERTIFICATE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("taxRegistrationCertificateNo", org.apache.thrift.protocol.TType.STRING, (short)44);
  private static final org.apache.thrift.protocol.TField BUSINESS_SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessScope", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField LEGAL_IDCARD_FIELD_DESC = new org.apache.thrift.protocol.TField("legalIdcard", org.apache.thrift.protocol.TType.STRING, (short)46);
  private static final org.apache.thrift.protocol.TField LEGAL_CERTIFICATE_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("legalCertificateEndTime", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField CONTACTOR_IDCARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contactorIdcardNo", org.apache.thrift.protocol.TType.STRING, (short)48);
  private static final org.apache.thrift.protocol.TField CONTACTOR_CERTIFICATE_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("contactorCertificateEndTime", org.apache.thrift.protocol.TType.STRING, (short)49);
  private static final org.apache.thrift.protocol.TField CONTACTOR_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("contactorPhone", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField IPC_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("ipcNo", org.apache.thrift.protocol.TType.STRING, (short)51);
  private static final org.apache.thrift.protocol.TField PERMITS_ACCOUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("permitsAccounts", org.apache.thrift.protocol.TType.STRING, (short)52);
  private static final org.apache.thrift.protocol.TField LEGAL_CERTIFICATE_FRONT_FIELD_DESC = new org.apache.thrift.protocol.TField("legalCertificateFront", org.apache.thrift.protocol.TType.STRING, (short)53);
  private static final org.apache.thrift.protocol.TField LEGAL_CERTIFICATE_BACK_FIELD_DESC = new org.apache.thrift.protocol.TField("legalCertificateBack", org.apache.thrift.protocol.TType.STRING, (short)54);
  private static final org.apache.thrift.protocol.TField TAX_REGISTRATION_CERTIFICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("taxRegistrationCertificate", org.apache.thrift.protocol.TType.STRING, (short)55);
  private static final org.apache.thrift.protocol.TField ORGANIZATION_CODE_CERTIFICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("organizationCodeCertificate", org.apache.thrift.protocol.TType.STRING, (short)56);
  private static final org.apache.thrift.protocol.TField BUSINESS_LICENSE_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessLicenseFile", org.apache.thrift.protocol.TType.STRING, (short)57);
  private static final org.apache.thrift.protocol.TField BUSINESS_LICENSE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessLicenseNo", org.apache.thrift.protocol.TType.STRING, (short)58);
  private static final org.apache.thrift.protocol.TField OBJECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("objection", org.apache.thrift.protocol.TType.STRING, (short)59);
  private static final org.apache.thrift.protocol.TField RETAINED_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("retainedAmount", org.apache.thrift.protocol.TType.STRING, (short)60);
  private static final org.apache.thrift.protocol.TField UNION_PAY_PROVINCE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("unionPayProvinceCode", org.apache.thrift.protocol.TType.STRING, (short)61);
  private static final org.apache.thrift.protocol.TField UNION_PAY_PROVINCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("unionPayProvinceName", org.apache.thrift.protocol.TType.STRING, (short)62);
  private static final org.apache.thrift.protocol.TField UNION_PAY_CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("unionPayCityCode", org.apache.thrift.protocol.TType.STRING, (short)63);
  private static final org.apache.thrift.protocol.TField UNION_PAY_CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("unionPayCityName", org.apache.thrift.protocol.TType.STRING, (short)64);
  private static final org.apache.thrift.protocol.TField MCC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mccType", org.apache.thrift.protocol.TType.STRING, (short)65);
  private static final org.apache.thrift.protocol.TField MCC_SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("mccServer", org.apache.thrift.protocol.TType.STRING, (short)66);
  private static final org.apache.thrift.protocol.TField MCC_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("mccDetail", org.apache.thrift.protocol.TType.STRING, (short)67);
  private static final org.apache.thrift.protocol.TField INDUSTRY_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("industryCategory", org.apache.thrift.protocol.TType.STRING, (short)68);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginDate", org.apache.thrift.protocol.TType.STRING, (short)69);
  private static final org.apache.thrift.protocol.TField CONTACTOR_CERTIFICATE_FRONT_FIELD_DESC = new org.apache.thrift.protocol.TField("contactorCertificateFront", org.apache.thrift.protocol.TType.STRING, (short)70);
  private static final org.apache.thrift.protocol.TField CONTACTOR_CERTIFICATE_BACK_FIELD_DESC = new org.apache.thrift.protocol.TField("contactorCertificateBack", org.apache.thrift.protocol.TType.STRING, (short)71);
  private static final org.apache.thrift.protocol.TField SHORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shortName", org.apache.thrift.protocol.TType.STRING, (short)72);
  private static final org.apache.thrift.protocol.TField AUTHORIZATION_LETTER_FIELD_DESC = new org.apache.thrift.protocol.TField("authorizationLetter", org.apache.thrift.protocol.TType.STRING, (short)73);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MerchantThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MerchantThriftTupleSchemeFactory());
  }

  public String userId; // required
  public String name; // required
  public String email; // required
  public String companyName; // required
  public String legalRepresentative; // required
  public String companyPhone; // required
  public String legalMobile; // required
  public String website; // required
  public String businessAddress; // required
  public String contryCode; // required
  public String contryName; // required
  public String provinceCode; // required
  public String provinceName; // required
  public String cityCode; // required
  public String cityName; // required
  public String countyCode; // required
  public String countyName; // required
  public String contactAddress; // required
  public String contactor; // required
  public String type; // required
  public String level; // required
  public String chargeType; // required
  public String requestWays; // required
  public String requestVersion; // required
  public String allowedIps; // required
  public String signedType; // required
  public String status; // required
  public String opAuditTime; // required
  public String opAuditor; // required
  public String rcAuditStatus; // required
  public String rcAuditTime; // required
  public String rcAuditor; // required
  public String legalAuditStatus; // required
  public String legalAuditTime; // required
  public String legalAuditor; // required
  public String salesId; // required
  public String inchargerId; // required
  public String remark; // required
  public String createTime; // required
  public String welcomeMessage; // required
  public String certificateType; // required
  public String businessLicenseEndTime; // required
  public String organizationCode; // required
  public String taxRegistrationCertificateNo; // required
  public String businessScope; // required
  public String legalIdcard; // required
  public String legalCertificateEndTime; // required
  public String contactorIdcardNo; // required
  public String contactorCertificateEndTime; // required
  public String contactorPhone; // required
  public String ipcNo; // required
  public String permitsAccounts; // required
  public String legalCertificateFront; // required
  public String legalCertificateBack; // required
  public String taxRegistrationCertificate; // required
  public String organizationCodeCertificate; // required
  public String businessLicenseFile; // required
  public String businessLicenseNo; // required
  public String objection; // required
  public String retainedAmount; // required
  public String unionPayProvinceCode; // required
  public String unionPayProvinceName; // required
  public String unionPayCityCode; // required
  public String unionPayCityName; // required
  public String mccType; // required
  public String mccServer; // required
  public String mccDetail; // required
  public String industryCategory; // required
  public String lastLoginDate; // required
  public String contactorCertificateFront; // required
  public String contactorCertificateBack; // required
  public String shortName; // required
  public String authorizationLetter; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    NAME((short)2, "name"),
    EMAIL((short)3, "email"),
    COMPANY_NAME((short)4, "companyName"),
    LEGAL_REPRESENTATIVE((short)5, "legalRepresentative"),
    COMPANY_PHONE((short)6, "companyPhone"),
    LEGAL_MOBILE((short)7, "legalMobile"),
    WEBSITE((short)8, "website"),
    BUSINESS_ADDRESS((short)9, "businessAddress"),
    CONTRY_CODE((short)10, "contryCode"),
    CONTRY_NAME((short)11, "contryName"),
    PROVINCE_CODE((short)12, "provinceCode"),
    PROVINCE_NAME((short)13, "provinceName"),
    CITY_CODE((short)14, "cityCode"),
    CITY_NAME((short)15, "cityName"),
    COUNTY_CODE((short)16, "countyCode"),
    COUNTY_NAME((short)17, "countyName"),
    CONTACT_ADDRESS((short)18, "contactAddress"),
    CONTACTOR((short)19, "contactor"),
    TYPE((short)20, "type"),
    LEVEL((short)21, "level"),
    CHARGE_TYPE((short)22, "chargeType"),
    REQUEST_WAYS((short)23, "requestWays"),
    REQUEST_VERSION((short)24, "requestVersion"),
    ALLOWED_IPS((short)25, "allowedIps"),
    SIGNED_TYPE((short)26, "signedType"),
    STATUS((short)27, "status"),
    OP_AUDIT_TIME((short)28, "opAuditTime"),
    OP_AUDITOR((short)29, "opAuditor"),
    RC_AUDIT_STATUS((short)30, "rcAuditStatus"),
    RC_AUDIT_TIME((short)31, "rcAuditTime"),
    RC_AUDITOR((short)32, "rcAuditor"),
    LEGAL_AUDIT_STATUS((short)33, "legalAuditStatus"),
    LEGAL_AUDIT_TIME((short)34, "legalAuditTime"),
    LEGAL_AUDITOR((short)35, "legalAuditor"),
    SALES_ID((short)36, "salesId"),
    INCHARGER_ID((short)37, "inchargerId"),
    REMARK((short)38, "remark"),
    CREATE_TIME((short)39, "createTime"),
    WELCOME_MESSAGE((short)40, "welcomeMessage"),
    CERTIFICATE_TYPE((short)41, "certificateType"),
    BUSINESS_LICENSE_END_TIME((short)42, "businessLicenseEndTime"),
    ORGANIZATION_CODE((short)43, "organizationCode"),
    TAX_REGISTRATION_CERTIFICATE_NO((short)44, "taxRegistrationCertificateNo"),
    BUSINESS_SCOPE((short)45, "businessScope"),
    LEGAL_IDCARD((short)46, "legalIdcard"),
    LEGAL_CERTIFICATE_END_TIME((short)47, "legalCertificateEndTime"),
    CONTACTOR_IDCARD_NO((short)48, "contactorIdcardNo"),
    CONTACTOR_CERTIFICATE_END_TIME((short)49, "contactorCertificateEndTime"),
    CONTACTOR_PHONE((short)50, "contactorPhone"),
    IPC_NO((short)51, "ipcNo"),
    PERMITS_ACCOUNTS((short)52, "permitsAccounts"),
    LEGAL_CERTIFICATE_FRONT((short)53, "legalCertificateFront"),
    LEGAL_CERTIFICATE_BACK((short)54, "legalCertificateBack"),
    TAX_REGISTRATION_CERTIFICATE((short)55, "taxRegistrationCertificate"),
    ORGANIZATION_CODE_CERTIFICATE((short)56, "organizationCodeCertificate"),
    BUSINESS_LICENSE_FILE((short)57, "businessLicenseFile"),
    BUSINESS_LICENSE_NO((short)58, "businessLicenseNo"),
    OBJECTION((short)59, "objection"),
    RETAINED_AMOUNT((short)60, "retainedAmount"),
    UNION_PAY_PROVINCE_CODE((short)61, "unionPayProvinceCode"),
    UNION_PAY_PROVINCE_NAME((short)62, "unionPayProvinceName"),
    UNION_PAY_CITY_CODE((short)63, "unionPayCityCode"),
    UNION_PAY_CITY_NAME((short)64, "unionPayCityName"),
    MCC_TYPE((short)65, "mccType"),
    MCC_SERVER((short)66, "mccServer"),
    MCC_DETAIL((short)67, "mccDetail"),
    INDUSTRY_CATEGORY((short)68, "industryCategory"),
    LAST_LOGIN_DATE((short)69, "lastLoginDate"),
    CONTACTOR_CERTIFICATE_FRONT((short)70, "contactorCertificateFront"),
    CONTACTOR_CERTIFICATE_BACK((short)71, "contactorCertificateBack"),
    SHORT_NAME((short)72, "shortName"),
    AUTHORIZATION_LETTER((short)73, "authorizationLetter");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // NAME
          return NAME;
        case 3: // EMAIL
          return EMAIL;
        case 4: // COMPANY_NAME
          return COMPANY_NAME;
        case 5: // LEGAL_REPRESENTATIVE
          return LEGAL_REPRESENTATIVE;
        case 6: // COMPANY_PHONE
          return COMPANY_PHONE;
        case 7: // LEGAL_MOBILE
          return LEGAL_MOBILE;
        case 8: // WEBSITE
          return WEBSITE;
        case 9: // BUSINESS_ADDRESS
          return BUSINESS_ADDRESS;
        case 10: // CONTRY_CODE
          return CONTRY_CODE;
        case 11: // CONTRY_NAME
          return CONTRY_NAME;
        case 12: // PROVINCE_CODE
          return PROVINCE_CODE;
        case 13: // PROVINCE_NAME
          return PROVINCE_NAME;
        case 14: // CITY_CODE
          return CITY_CODE;
        case 15: // CITY_NAME
          return CITY_NAME;
        case 16: // COUNTY_CODE
          return COUNTY_CODE;
        case 17: // COUNTY_NAME
          return COUNTY_NAME;
        case 18: // CONTACT_ADDRESS
          return CONTACT_ADDRESS;
        case 19: // CONTACTOR
          return CONTACTOR;
        case 20: // TYPE
          return TYPE;
        case 21: // LEVEL
          return LEVEL;
        case 22: // CHARGE_TYPE
          return CHARGE_TYPE;
        case 23: // REQUEST_WAYS
          return REQUEST_WAYS;
        case 24: // REQUEST_VERSION
          return REQUEST_VERSION;
        case 25: // ALLOWED_IPS
          return ALLOWED_IPS;
        case 26: // SIGNED_TYPE
          return SIGNED_TYPE;
        case 27: // STATUS
          return STATUS;
        case 28: // OP_AUDIT_TIME
          return OP_AUDIT_TIME;
        case 29: // OP_AUDITOR
          return OP_AUDITOR;
        case 30: // RC_AUDIT_STATUS
          return RC_AUDIT_STATUS;
        case 31: // RC_AUDIT_TIME
          return RC_AUDIT_TIME;
        case 32: // RC_AUDITOR
          return RC_AUDITOR;
        case 33: // LEGAL_AUDIT_STATUS
          return LEGAL_AUDIT_STATUS;
        case 34: // LEGAL_AUDIT_TIME
          return LEGAL_AUDIT_TIME;
        case 35: // LEGAL_AUDITOR
          return LEGAL_AUDITOR;
        case 36: // SALES_ID
          return SALES_ID;
        case 37: // INCHARGER_ID
          return INCHARGER_ID;
        case 38: // REMARK
          return REMARK;
        case 39: // CREATE_TIME
          return CREATE_TIME;
        case 40: // WELCOME_MESSAGE
          return WELCOME_MESSAGE;
        case 41: // CERTIFICATE_TYPE
          return CERTIFICATE_TYPE;
        case 42: // BUSINESS_LICENSE_END_TIME
          return BUSINESS_LICENSE_END_TIME;
        case 43: // ORGANIZATION_CODE
          return ORGANIZATION_CODE;
        case 44: // TAX_REGISTRATION_CERTIFICATE_NO
          return TAX_REGISTRATION_CERTIFICATE_NO;
        case 45: // BUSINESS_SCOPE
          return BUSINESS_SCOPE;
        case 46: // LEGAL_IDCARD
          return LEGAL_IDCARD;
        case 47: // LEGAL_CERTIFICATE_END_TIME
          return LEGAL_CERTIFICATE_END_TIME;
        case 48: // CONTACTOR_IDCARD_NO
          return CONTACTOR_IDCARD_NO;
        case 49: // CONTACTOR_CERTIFICATE_END_TIME
          return CONTACTOR_CERTIFICATE_END_TIME;
        case 50: // CONTACTOR_PHONE
          return CONTACTOR_PHONE;
        case 51: // IPC_NO
          return IPC_NO;
        case 52: // PERMITS_ACCOUNTS
          return PERMITS_ACCOUNTS;
        case 53: // LEGAL_CERTIFICATE_FRONT
          return LEGAL_CERTIFICATE_FRONT;
        case 54: // LEGAL_CERTIFICATE_BACK
          return LEGAL_CERTIFICATE_BACK;
        case 55: // TAX_REGISTRATION_CERTIFICATE
          return TAX_REGISTRATION_CERTIFICATE;
        case 56: // ORGANIZATION_CODE_CERTIFICATE
          return ORGANIZATION_CODE_CERTIFICATE;
        case 57: // BUSINESS_LICENSE_FILE
          return BUSINESS_LICENSE_FILE;
        case 58: // BUSINESS_LICENSE_NO
          return BUSINESS_LICENSE_NO;
        case 59: // OBJECTION
          return OBJECTION;
        case 60: // RETAINED_AMOUNT
          return RETAINED_AMOUNT;
        case 61: // UNION_PAY_PROVINCE_CODE
          return UNION_PAY_PROVINCE_CODE;
        case 62: // UNION_PAY_PROVINCE_NAME
          return UNION_PAY_PROVINCE_NAME;
        case 63: // UNION_PAY_CITY_CODE
          return UNION_PAY_CITY_CODE;
        case 64: // UNION_PAY_CITY_NAME
          return UNION_PAY_CITY_NAME;
        case 65: // MCC_TYPE
          return MCC_TYPE;
        case 66: // MCC_SERVER
          return MCC_SERVER;
        case 67: // MCC_DETAIL
          return MCC_DETAIL;
        case 68: // INDUSTRY_CATEGORY
          return INDUSTRY_CATEGORY;
        case 69: // LAST_LOGIN_DATE
          return LAST_LOGIN_DATE;
        case 70: // CONTACTOR_CERTIFICATE_FRONT
          return CONTACTOR_CERTIFICATE_FRONT;
        case 71: // CONTACTOR_CERTIFICATE_BACK
          return CONTACTOR_CERTIFICATE_BACK;
        case 72: // SHORT_NAME
          return SHORT_NAME;
        case 73: // AUTHORIZATION_LETTER
          return AUTHORIZATION_LETTER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_NAME, new org.apache.thrift.meta_data.FieldMetaData("companyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEGAL_REPRESENTATIVE, new org.apache.thrift.meta_data.FieldMetaData("legalRepresentative", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_PHONE, new org.apache.thrift.meta_data.FieldMetaData("companyPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEGAL_MOBILE, new org.apache.thrift.meta_data.FieldMetaData("legalMobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEBSITE, new org.apache.thrift.meta_data.FieldMetaData("website", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("businessAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("contryCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRY_NAME, new org.apache.thrift.meta_data.FieldMetaData("contryName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE_CODE, new org.apache.thrift.meta_data.FieldMetaData("provinceCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("provinceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("cityCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTY_CODE, new org.apache.thrift.meta_data.FieldMetaData("countyCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("countyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACT_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("contactAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACTOR, new org.apache.thrift.meta_data.FieldMetaData("contactor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHARGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("chargeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_WAYS, new org.apache.thrift.meta_data.FieldMetaData("requestWays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_VERSION, new org.apache.thrift.meta_data.FieldMetaData("requestVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALLOWED_IPS, new org.apache.thrift.meta_data.FieldMetaData("allowedIps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGNED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("signedType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OP_AUDIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("opAuditTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OP_AUDITOR, new org.apache.thrift.meta_data.FieldMetaData("opAuditor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RC_AUDIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("rcAuditStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RC_AUDIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("rcAuditTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RC_AUDITOR, new org.apache.thrift.meta_data.FieldMetaData("rcAuditor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEGAL_AUDIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("legalAuditStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEGAL_AUDIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("legalAuditTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEGAL_AUDITOR, new org.apache.thrift.meta_data.FieldMetaData("legalAuditor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALES_ID, new org.apache.thrift.meta_data.FieldMetaData("salesId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INCHARGER_ID, new org.apache.thrift.meta_data.FieldMetaData("inchargerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WELCOME_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("welcomeMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERTIFICATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("certificateType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_LICENSE_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("businessLicenseEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORGANIZATION_CODE, new org.apache.thrift.meta_data.FieldMetaData("organizationCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAX_REGISTRATION_CERTIFICATE_NO, new org.apache.thrift.meta_data.FieldMetaData("taxRegistrationCertificateNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SCOPE, new org.apache.thrift.meta_data.FieldMetaData("businessScope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEGAL_IDCARD, new org.apache.thrift.meta_data.FieldMetaData("legalIdcard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEGAL_CERTIFICATE_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("legalCertificateEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACTOR_IDCARD_NO, new org.apache.thrift.meta_data.FieldMetaData("contactorIdcardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACTOR_CERTIFICATE_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("contactorCertificateEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACTOR_PHONE, new org.apache.thrift.meta_data.FieldMetaData("contactorPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IPC_NO, new org.apache.thrift.meta_data.FieldMetaData("ipcNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERMITS_ACCOUNTS, new org.apache.thrift.meta_data.FieldMetaData("permitsAccounts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEGAL_CERTIFICATE_FRONT, new org.apache.thrift.meta_data.FieldMetaData("legalCertificateFront", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEGAL_CERTIFICATE_BACK, new org.apache.thrift.meta_data.FieldMetaData("legalCertificateBack", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAX_REGISTRATION_CERTIFICATE, new org.apache.thrift.meta_data.FieldMetaData("taxRegistrationCertificate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORGANIZATION_CODE_CERTIFICATE, new org.apache.thrift.meta_data.FieldMetaData("organizationCodeCertificate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_LICENSE_FILE, new org.apache.thrift.meta_data.FieldMetaData("businessLicenseFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_LICENSE_NO, new org.apache.thrift.meta_data.FieldMetaData("businessLicenseNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJECTION, new org.apache.thrift.meta_data.FieldMetaData("objection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETAINED_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("retainedAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNION_PAY_PROVINCE_CODE, new org.apache.thrift.meta_data.FieldMetaData("unionPayProvinceCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNION_PAY_PROVINCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("unionPayProvinceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNION_PAY_CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("unionPayCityCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNION_PAY_CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("unionPayCityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MCC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mccType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MCC_SERVER, new org.apache.thrift.meta_data.FieldMetaData("mccServer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MCC_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("mccDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDUSTRY_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("industryCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN_DATE, new org.apache.thrift.meta_data.FieldMetaData("lastLoginDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACTOR_CERTIFICATE_FRONT, new org.apache.thrift.meta_data.FieldMetaData("contactorCertificateFront", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACTOR_CERTIFICATE_BACK, new org.apache.thrift.meta_data.FieldMetaData("contactorCertificateBack", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("shortName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHORIZATION_LETTER, new org.apache.thrift.meta_data.FieldMetaData("authorizationLetter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MerchantThrift.class, metaDataMap);
  }

  public MerchantThrift() {
  }

  public MerchantThrift(
    String userId,
    String name,
    String email,
    String companyName,
    String legalRepresentative,
    String companyPhone,
    String legalMobile,
    String website,
    String businessAddress,
    String contryCode,
    String contryName,
    String provinceCode,
    String provinceName,
    String cityCode,
    String cityName,
    String countyCode,
    String countyName,
    String contactAddress,
    String contactor,
    String type,
    String level,
    String chargeType,
    String requestWays,
    String requestVersion,
    String allowedIps,
    String signedType,
    String status,
    String opAuditTime,
    String opAuditor,
    String rcAuditStatus,
    String rcAuditTime,
    String rcAuditor,
    String legalAuditStatus,
    String legalAuditTime,
    String legalAuditor,
    String salesId,
    String inchargerId,
    String remark,
    String createTime,
    String welcomeMessage,
    String certificateType,
    String businessLicenseEndTime,
    String organizationCode,
    String taxRegistrationCertificateNo,
    String businessScope,
    String legalIdcard,
    String legalCertificateEndTime,
    String contactorIdcardNo,
    String contactorCertificateEndTime,
    String contactorPhone,
    String ipcNo,
    String permitsAccounts,
    String legalCertificateFront,
    String legalCertificateBack,
    String taxRegistrationCertificate,
    String organizationCodeCertificate,
    String businessLicenseFile,
    String businessLicenseNo,
    String objection,
    String retainedAmount,
    String unionPayProvinceCode,
    String unionPayProvinceName,
    String unionPayCityCode,
    String unionPayCityName,
    String mccType,
    String mccServer,
    String mccDetail,
    String industryCategory,
    String lastLoginDate,
    String contactorCertificateFront,
    String contactorCertificateBack,
    String shortName,
    String authorizationLetter)
  {
    this();
    this.userId = userId;
    this.name = name;
    this.email = email;
    this.companyName = companyName;
    this.legalRepresentative = legalRepresentative;
    this.companyPhone = companyPhone;
    this.legalMobile = legalMobile;
    this.website = website;
    this.businessAddress = businessAddress;
    this.contryCode = contryCode;
    this.contryName = contryName;
    this.provinceCode = provinceCode;
    this.provinceName = provinceName;
    this.cityCode = cityCode;
    this.cityName = cityName;
    this.countyCode = countyCode;
    this.countyName = countyName;
    this.contactAddress = contactAddress;
    this.contactor = contactor;
    this.type = type;
    this.level = level;
    this.chargeType = chargeType;
    this.requestWays = requestWays;
    this.requestVersion = requestVersion;
    this.allowedIps = allowedIps;
    this.signedType = signedType;
    this.status = status;
    this.opAuditTime = opAuditTime;
    this.opAuditor = opAuditor;
    this.rcAuditStatus = rcAuditStatus;
    this.rcAuditTime = rcAuditTime;
    this.rcAuditor = rcAuditor;
    this.legalAuditStatus = legalAuditStatus;
    this.legalAuditTime = legalAuditTime;
    this.legalAuditor = legalAuditor;
    this.salesId = salesId;
    this.inchargerId = inchargerId;
    this.remark = remark;
    this.createTime = createTime;
    this.welcomeMessage = welcomeMessage;
    this.certificateType = certificateType;
    this.businessLicenseEndTime = businessLicenseEndTime;
    this.organizationCode = organizationCode;
    this.taxRegistrationCertificateNo = taxRegistrationCertificateNo;
    this.businessScope = businessScope;
    this.legalIdcard = legalIdcard;
    this.legalCertificateEndTime = legalCertificateEndTime;
    this.contactorIdcardNo = contactorIdcardNo;
    this.contactorCertificateEndTime = contactorCertificateEndTime;
    this.contactorPhone = contactorPhone;
    this.ipcNo = ipcNo;
    this.permitsAccounts = permitsAccounts;
    this.legalCertificateFront = legalCertificateFront;
    this.legalCertificateBack = legalCertificateBack;
    this.taxRegistrationCertificate = taxRegistrationCertificate;
    this.organizationCodeCertificate = organizationCodeCertificate;
    this.businessLicenseFile = businessLicenseFile;
    this.businessLicenseNo = businessLicenseNo;
    this.objection = objection;
    this.retainedAmount = retainedAmount;
    this.unionPayProvinceCode = unionPayProvinceCode;
    this.unionPayProvinceName = unionPayProvinceName;
    this.unionPayCityCode = unionPayCityCode;
    this.unionPayCityName = unionPayCityName;
    this.mccType = mccType;
    this.mccServer = mccServer;
    this.mccDetail = mccDetail;
    this.industryCategory = industryCategory;
    this.lastLoginDate = lastLoginDate;
    this.contactorCertificateFront = contactorCertificateFront;
    this.contactorCertificateBack = contactorCertificateBack;
    this.shortName = shortName;
    this.authorizationLetter = authorizationLetter;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MerchantThrift(MerchantThrift other) {
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetCompanyName()) {
      this.companyName = other.companyName;
    }
    if (other.isSetLegalRepresentative()) {
      this.legalRepresentative = other.legalRepresentative;
    }
    if (other.isSetCompanyPhone()) {
      this.companyPhone = other.companyPhone;
    }
    if (other.isSetLegalMobile()) {
      this.legalMobile = other.legalMobile;
    }
    if (other.isSetWebsite()) {
      this.website = other.website;
    }
    if (other.isSetBusinessAddress()) {
      this.businessAddress = other.businessAddress;
    }
    if (other.isSetContryCode()) {
      this.contryCode = other.contryCode;
    }
    if (other.isSetContryName()) {
      this.contryName = other.contryName;
    }
    if (other.isSetProvinceCode()) {
      this.provinceCode = other.provinceCode;
    }
    if (other.isSetProvinceName()) {
      this.provinceName = other.provinceName;
    }
    if (other.isSetCityCode()) {
      this.cityCode = other.cityCode;
    }
    if (other.isSetCityName()) {
      this.cityName = other.cityName;
    }
    if (other.isSetCountyCode()) {
      this.countyCode = other.countyCode;
    }
    if (other.isSetCountyName()) {
      this.countyName = other.countyName;
    }
    if (other.isSetContactAddress()) {
      this.contactAddress = other.contactAddress;
    }
    if (other.isSetContactor()) {
      this.contactor = other.contactor;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetLevel()) {
      this.level = other.level;
    }
    if (other.isSetChargeType()) {
      this.chargeType = other.chargeType;
    }
    if (other.isSetRequestWays()) {
      this.requestWays = other.requestWays;
    }
    if (other.isSetRequestVersion()) {
      this.requestVersion = other.requestVersion;
    }
    if (other.isSetAllowedIps()) {
      this.allowedIps = other.allowedIps;
    }
    if (other.isSetSignedType()) {
      this.signedType = other.signedType;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetOpAuditTime()) {
      this.opAuditTime = other.opAuditTime;
    }
    if (other.isSetOpAuditor()) {
      this.opAuditor = other.opAuditor;
    }
    if (other.isSetRcAuditStatus()) {
      this.rcAuditStatus = other.rcAuditStatus;
    }
    if (other.isSetRcAuditTime()) {
      this.rcAuditTime = other.rcAuditTime;
    }
    if (other.isSetRcAuditor()) {
      this.rcAuditor = other.rcAuditor;
    }
    if (other.isSetLegalAuditStatus()) {
      this.legalAuditStatus = other.legalAuditStatus;
    }
    if (other.isSetLegalAuditTime()) {
      this.legalAuditTime = other.legalAuditTime;
    }
    if (other.isSetLegalAuditor()) {
      this.legalAuditor = other.legalAuditor;
    }
    if (other.isSetSalesId()) {
      this.salesId = other.salesId;
    }
    if (other.isSetInchargerId()) {
      this.inchargerId = other.inchargerId;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetWelcomeMessage()) {
      this.welcomeMessage = other.welcomeMessage;
    }
    if (other.isSetCertificateType()) {
      this.certificateType = other.certificateType;
    }
    if (other.isSetBusinessLicenseEndTime()) {
      this.businessLicenseEndTime = other.businessLicenseEndTime;
    }
    if (other.isSetOrganizationCode()) {
      this.organizationCode = other.organizationCode;
    }
    if (other.isSetTaxRegistrationCertificateNo()) {
      this.taxRegistrationCertificateNo = other.taxRegistrationCertificateNo;
    }
    if (other.isSetBusinessScope()) {
      this.businessScope = other.businessScope;
    }
    if (other.isSetLegalIdcard()) {
      this.legalIdcard = other.legalIdcard;
    }
    if (other.isSetLegalCertificateEndTime()) {
      this.legalCertificateEndTime = other.legalCertificateEndTime;
    }
    if (other.isSetContactorIdcardNo()) {
      this.contactorIdcardNo = other.contactorIdcardNo;
    }
    if (other.isSetContactorCertificateEndTime()) {
      this.contactorCertificateEndTime = other.contactorCertificateEndTime;
    }
    if (other.isSetContactorPhone()) {
      this.contactorPhone = other.contactorPhone;
    }
    if (other.isSetIpcNo()) {
      this.ipcNo = other.ipcNo;
    }
    if (other.isSetPermitsAccounts()) {
      this.permitsAccounts = other.permitsAccounts;
    }
    if (other.isSetLegalCertificateFront()) {
      this.legalCertificateFront = other.legalCertificateFront;
    }
    if (other.isSetLegalCertificateBack()) {
      this.legalCertificateBack = other.legalCertificateBack;
    }
    if (other.isSetTaxRegistrationCertificate()) {
      this.taxRegistrationCertificate = other.taxRegistrationCertificate;
    }
    if (other.isSetOrganizationCodeCertificate()) {
      this.organizationCodeCertificate = other.organizationCodeCertificate;
    }
    if (other.isSetBusinessLicenseFile()) {
      this.businessLicenseFile = other.businessLicenseFile;
    }
    if (other.isSetBusinessLicenseNo()) {
      this.businessLicenseNo = other.businessLicenseNo;
    }
    if (other.isSetObjection()) {
      this.objection = other.objection;
    }
    if (other.isSetRetainedAmount()) {
      this.retainedAmount = other.retainedAmount;
    }
    if (other.isSetUnionPayProvinceCode()) {
      this.unionPayProvinceCode = other.unionPayProvinceCode;
    }
    if (other.isSetUnionPayProvinceName()) {
      this.unionPayProvinceName = other.unionPayProvinceName;
    }
    if (other.isSetUnionPayCityCode()) {
      this.unionPayCityCode = other.unionPayCityCode;
    }
    if (other.isSetUnionPayCityName()) {
      this.unionPayCityName = other.unionPayCityName;
    }
    if (other.isSetMccType()) {
      this.mccType = other.mccType;
    }
    if (other.isSetMccServer()) {
      this.mccServer = other.mccServer;
    }
    if (other.isSetMccDetail()) {
      this.mccDetail = other.mccDetail;
    }
    if (other.isSetIndustryCategory()) {
      this.industryCategory = other.industryCategory;
    }
    if (other.isSetLastLoginDate()) {
      this.lastLoginDate = other.lastLoginDate;
    }
    if (other.isSetContactorCertificateFront()) {
      this.contactorCertificateFront = other.contactorCertificateFront;
    }
    if (other.isSetContactorCertificateBack()) {
      this.contactorCertificateBack = other.contactorCertificateBack;
    }
    if (other.isSetShortName()) {
      this.shortName = other.shortName;
    }
    if (other.isSetAuthorizationLetter()) {
      this.authorizationLetter = other.authorizationLetter;
    }
  }

  public MerchantThrift deepCopy() {
    return new MerchantThrift(this);
  }

  @Override
  public void clear() {
    this.userId = null;
    this.name = null;
    this.email = null;
    this.companyName = null;
    this.legalRepresentative = null;
    this.companyPhone = null;
    this.legalMobile = null;
    this.website = null;
    this.businessAddress = null;
    this.contryCode = null;
    this.contryName = null;
    this.provinceCode = null;
    this.provinceName = null;
    this.cityCode = null;
    this.cityName = null;
    this.countyCode = null;
    this.countyName = null;
    this.contactAddress = null;
    this.contactor = null;
    this.type = null;
    this.level = null;
    this.chargeType = null;
    this.requestWays = null;
    this.requestVersion = null;
    this.allowedIps = null;
    this.signedType = null;
    this.status = null;
    this.opAuditTime = null;
    this.opAuditor = null;
    this.rcAuditStatus = null;
    this.rcAuditTime = null;
    this.rcAuditor = null;
    this.legalAuditStatus = null;
    this.legalAuditTime = null;
    this.legalAuditor = null;
    this.salesId = null;
    this.inchargerId = null;
    this.remark = null;
    this.createTime = null;
    this.welcomeMessage = null;
    this.certificateType = null;
    this.businessLicenseEndTime = null;
    this.organizationCode = null;
    this.taxRegistrationCertificateNo = null;
    this.businessScope = null;
    this.legalIdcard = null;
    this.legalCertificateEndTime = null;
    this.contactorIdcardNo = null;
    this.contactorCertificateEndTime = null;
    this.contactorPhone = null;
    this.ipcNo = null;
    this.permitsAccounts = null;
    this.legalCertificateFront = null;
    this.legalCertificateBack = null;
    this.taxRegistrationCertificate = null;
    this.organizationCodeCertificate = null;
    this.businessLicenseFile = null;
    this.businessLicenseNo = null;
    this.objection = null;
    this.retainedAmount = null;
    this.unionPayProvinceCode = null;
    this.unionPayProvinceName = null;
    this.unionPayCityCode = null;
    this.unionPayCityName = null;
    this.mccType = null;
    this.mccServer = null;
    this.mccDetail = null;
    this.industryCategory = null;
    this.lastLoginDate = null;
    this.contactorCertificateFront = null;
    this.contactorCertificateBack = null;
    this.shortName = null;
    this.authorizationLetter = null;
  }

  public String getUserId() {
    return this.userId;
  }

  public MerchantThrift setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public MerchantThrift setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public MerchantThrift setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getCompanyName() {
    return this.companyName;
  }

  public MerchantThrift setCompanyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  public void unsetCompanyName() {
    this.companyName = null;
  }

  /** Returns true if field companyName is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyName() {
    return this.companyName != null;
  }

  public void setCompanyNameIsSet(boolean value) {
    if (!value) {
      this.companyName = null;
    }
  }

  public String getLegalRepresentative() {
    return this.legalRepresentative;
  }

  public MerchantThrift setLegalRepresentative(String legalRepresentative) {
    this.legalRepresentative = legalRepresentative;
    return this;
  }

  public void unsetLegalRepresentative() {
    this.legalRepresentative = null;
  }

  /** Returns true if field legalRepresentative is set (has been assigned a value) and false otherwise */
  public boolean isSetLegalRepresentative() {
    return this.legalRepresentative != null;
  }

  public void setLegalRepresentativeIsSet(boolean value) {
    if (!value) {
      this.legalRepresentative = null;
    }
  }

  public String getCompanyPhone() {
    return this.companyPhone;
  }

  public MerchantThrift setCompanyPhone(String companyPhone) {
    this.companyPhone = companyPhone;
    return this;
  }

  public void unsetCompanyPhone() {
    this.companyPhone = null;
  }

  /** Returns true if field companyPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyPhone() {
    return this.companyPhone != null;
  }

  public void setCompanyPhoneIsSet(boolean value) {
    if (!value) {
      this.companyPhone = null;
    }
  }

  public String getLegalMobile() {
    return this.legalMobile;
  }

  public MerchantThrift setLegalMobile(String legalMobile) {
    this.legalMobile = legalMobile;
    return this;
  }

  public void unsetLegalMobile() {
    this.legalMobile = null;
  }

  /** Returns true if field legalMobile is set (has been assigned a value) and false otherwise */
  public boolean isSetLegalMobile() {
    return this.legalMobile != null;
  }

  public void setLegalMobileIsSet(boolean value) {
    if (!value) {
      this.legalMobile = null;
    }
  }

  public String getWebsite() {
    return this.website;
  }

  public MerchantThrift setWebsite(String website) {
    this.website = website;
    return this;
  }

  public void unsetWebsite() {
    this.website = null;
  }

  /** Returns true if field website is set (has been assigned a value) and false otherwise */
  public boolean isSetWebsite() {
    return this.website != null;
  }

  public void setWebsiteIsSet(boolean value) {
    if (!value) {
      this.website = null;
    }
  }

  public String getBusinessAddress() {
    return this.businessAddress;
  }

  public MerchantThrift setBusinessAddress(String businessAddress) {
    this.businessAddress = businessAddress;
    return this;
  }

  public void unsetBusinessAddress() {
    this.businessAddress = null;
  }

  /** Returns true if field businessAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessAddress() {
    return this.businessAddress != null;
  }

  public void setBusinessAddressIsSet(boolean value) {
    if (!value) {
      this.businessAddress = null;
    }
  }

  public String getContryCode() {
    return this.contryCode;
  }

  public MerchantThrift setContryCode(String contryCode) {
    this.contryCode = contryCode;
    return this;
  }

  public void unsetContryCode() {
    this.contryCode = null;
  }

  /** Returns true if field contryCode is set (has been assigned a value) and false otherwise */
  public boolean isSetContryCode() {
    return this.contryCode != null;
  }

  public void setContryCodeIsSet(boolean value) {
    if (!value) {
      this.contryCode = null;
    }
  }

  public String getContryName() {
    return this.contryName;
  }

  public MerchantThrift setContryName(String contryName) {
    this.contryName = contryName;
    return this;
  }

  public void unsetContryName() {
    this.contryName = null;
  }

  /** Returns true if field contryName is set (has been assigned a value) and false otherwise */
  public boolean isSetContryName() {
    return this.contryName != null;
  }

  public void setContryNameIsSet(boolean value) {
    if (!value) {
      this.contryName = null;
    }
  }

  public String getProvinceCode() {
    return this.provinceCode;
  }

  public MerchantThrift setProvinceCode(String provinceCode) {
    this.provinceCode = provinceCode;
    return this;
  }

  public void unsetProvinceCode() {
    this.provinceCode = null;
  }

  /** Returns true if field provinceCode is set (has been assigned a value) and false otherwise */
  public boolean isSetProvinceCode() {
    return this.provinceCode != null;
  }

  public void setProvinceCodeIsSet(boolean value) {
    if (!value) {
      this.provinceCode = null;
    }
  }

  public String getProvinceName() {
    return this.provinceName;
  }

  public MerchantThrift setProvinceName(String provinceName) {
    this.provinceName = provinceName;
    return this;
  }

  public void unsetProvinceName() {
    this.provinceName = null;
  }

  /** Returns true if field provinceName is set (has been assigned a value) and false otherwise */
  public boolean isSetProvinceName() {
    return this.provinceName != null;
  }

  public void setProvinceNameIsSet(boolean value) {
    if (!value) {
      this.provinceName = null;
    }
  }

  public String getCityCode() {
    return this.cityCode;
  }

  public MerchantThrift setCityCode(String cityCode) {
    this.cityCode = cityCode;
    return this;
  }

  public void unsetCityCode() {
    this.cityCode = null;
  }

  /** Returns true if field cityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCityCode() {
    return this.cityCode != null;
  }

  public void setCityCodeIsSet(boolean value) {
    if (!value) {
      this.cityCode = null;
    }
  }

  public String getCityName() {
    return this.cityName;
  }

  public MerchantThrift setCityName(String cityName) {
    this.cityName = cityName;
    return this;
  }

  public void unsetCityName() {
    this.cityName = null;
  }

  /** Returns true if field cityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCityName() {
    return this.cityName != null;
  }

  public void setCityNameIsSet(boolean value) {
    if (!value) {
      this.cityName = null;
    }
  }

  public String getCountyCode() {
    return this.countyCode;
  }

  public MerchantThrift setCountyCode(String countyCode) {
    this.countyCode = countyCode;
    return this;
  }

  public void unsetCountyCode() {
    this.countyCode = null;
  }

  /** Returns true if field countyCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCountyCode() {
    return this.countyCode != null;
  }

  public void setCountyCodeIsSet(boolean value) {
    if (!value) {
      this.countyCode = null;
    }
  }

  public String getCountyName() {
    return this.countyName;
  }

  public MerchantThrift setCountyName(String countyName) {
    this.countyName = countyName;
    return this;
  }

  public void unsetCountyName() {
    this.countyName = null;
  }

  /** Returns true if field countyName is set (has been assigned a value) and false otherwise */
  public boolean isSetCountyName() {
    return this.countyName != null;
  }

  public void setCountyNameIsSet(boolean value) {
    if (!value) {
      this.countyName = null;
    }
  }

  public String getContactAddress() {
    return this.contactAddress;
  }

  public MerchantThrift setContactAddress(String contactAddress) {
    this.contactAddress = contactAddress;
    return this;
  }

  public void unsetContactAddress() {
    this.contactAddress = null;
  }

  /** Returns true if field contactAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetContactAddress() {
    return this.contactAddress != null;
  }

  public void setContactAddressIsSet(boolean value) {
    if (!value) {
      this.contactAddress = null;
    }
  }

  public String getContactor() {
    return this.contactor;
  }

  public MerchantThrift setContactor(String contactor) {
    this.contactor = contactor;
    return this;
  }

  public void unsetContactor() {
    this.contactor = null;
  }

  /** Returns true if field contactor is set (has been assigned a value) and false otherwise */
  public boolean isSetContactor() {
    return this.contactor != null;
  }

  public void setContactorIsSet(boolean value) {
    if (!value) {
      this.contactor = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public MerchantThrift setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getLevel() {
    return this.level;
  }

  public MerchantThrift setLevel(String level) {
    this.level = level;
    return this;
  }

  public void unsetLevel() {
    this.level = null;
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return this.level != null;
  }

  public void setLevelIsSet(boolean value) {
    if (!value) {
      this.level = null;
    }
  }

  public String getChargeType() {
    return this.chargeType;
  }

  public MerchantThrift setChargeType(String chargeType) {
    this.chargeType = chargeType;
    return this;
  }

  public void unsetChargeType() {
    this.chargeType = null;
  }

  /** Returns true if field chargeType is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeType() {
    return this.chargeType != null;
  }

  public void setChargeTypeIsSet(boolean value) {
    if (!value) {
      this.chargeType = null;
    }
  }

  public String getRequestWays() {
    return this.requestWays;
  }

  public MerchantThrift setRequestWays(String requestWays) {
    this.requestWays = requestWays;
    return this;
  }

  public void unsetRequestWays() {
    this.requestWays = null;
  }

  /** Returns true if field requestWays is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestWays() {
    return this.requestWays != null;
  }

  public void setRequestWaysIsSet(boolean value) {
    if (!value) {
      this.requestWays = null;
    }
  }

  public String getRequestVersion() {
    return this.requestVersion;
  }

  public MerchantThrift setRequestVersion(String requestVersion) {
    this.requestVersion = requestVersion;
    return this;
  }

  public void unsetRequestVersion() {
    this.requestVersion = null;
  }

  /** Returns true if field requestVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestVersion() {
    return this.requestVersion != null;
  }

  public void setRequestVersionIsSet(boolean value) {
    if (!value) {
      this.requestVersion = null;
    }
  }

  public String getAllowedIps() {
    return this.allowedIps;
  }

  public MerchantThrift setAllowedIps(String allowedIps) {
    this.allowedIps = allowedIps;
    return this;
  }

  public void unsetAllowedIps() {
    this.allowedIps = null;
  }

  /** Returns true if field allowedIps is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowedIps() {
    return this.allowedIps != null;
  }

  public void setAllowedIpsIsSet(boolean value) {
    if (!value) {
      this.allowedIps = null;
    }
  }

  public String getSignedType() {
    return this.signedType;
  }

  public MerchantThrift setSignedType(String signedType) {
    this.signedType = signedType;
    return this;
  }

  public void unsetSignedType() {
    this.signedType = null;
  }

  /** Returns true if field signedType is set (has been assigned a value) and false otherwise */
  public boolean isSetSignedType() {
    return this.signedType != null;
  }

  public void setSignedTypeIsSet(boolean value) {
    if (!value) {
      this.signedType = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public MerchantThrift setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getOpAuditTime() {
    return this.opAuditTime;
  }

  public MerchantThrift setOpAuditTime(String opAuditTime) {
    this.opAuditTime = opAuditTime;
    return this;
  }

  public void unsetOpAuditTime() {
    this.opAuditTime = null;
  }

  /** Returns true if field opAuditTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpAuditTime() {
    return this.opAuditTime != null;
  }

  public void setOpAuditTimeIsSet(boolean value) {
    if (!value) {
      this.opAuditTime = null;
    }
  }

  public String getOpAuditor() {
    return this.opAuditor;
  }

  public MerchantThrift setOpAuditor(String opAuditor) {
    this.opAuditor = opAuditor;
    return this;
  }

  public void unsetOpAuditor() {
    this.opAuditor = null;
  }

  /** Returns true if field opAuditor is set (has been assigned a value) and false otherwise */
  public boolean isSetOpAuditor() {
    return this.opAuditor != null;
  }

  public void setOpAuditorIsSet(boolean value) {
    if (!value) {
      this.opAuditor = null;
    }
  }

  public String getRcAuditStatus() {
    return this.rcAuditStatus;
  }

  public MerchantThrift setRcAuditStatus(String rcAuditStatus) {
    this.rcAuditStatus = rcAuditStatus;
    return this;
  }

  public void unsetRcAuditStatus() {
    this.rcAuditStatus = null;
  }

  /** Returns true if field rcAuditStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRcAuditStatus() {
    return this.rcAuditStatus != null;
  }

  public void setRcAuditStatusIsSet(boolean value) {
    if (!value) {
      this.rcAuditStatus = null;
    }
  }

  public String getRcAuditTime() {
    return this.rcAuditTime;
  }

  public MerchantThrift setRcAuditTime(String rcAuditTime) {
    this.rcAuditTime = rcAuditTime;
    return this;
  }

  public void unsetRcAuditTime() {
    this.rcAuditTime = null;
  }

  /** Returns true if field rcAuditTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRcAuditTime() {
    return this.rcAuditTime != null;
  }

  public void setRcAuditTimeIsSet(boolean value) {
    if (!value) {
      this.rcAuditTime = null;
    }
  }

  public String getRcAuditor() {
    return this.rcAuditor;
  }

  public MerchantThrift setRcAuditor(String rcAuditor) {
    this.rcAuditor = rcAuditor;
    return this;
  }

  public void unsetRcAuditor() {
    this.rcAuditor = null;
  }

  /** Returns true if field rcAuditor is set (has been assigned a value) and false otherwise */
  public boolean isSetRcAuditor() {
    return this.rcAuditor != null;
  }

  public void setRcAuditorIsSet(boolean value) {
    if (!value) {
      this.rcAuditor = null;
    }
  }

  public String getLegalAuditStatus() {
    return this.legalAuditStatus;
  }

  public MerchantThrift setLegalAuditStatus(String legalAuditStatus) {
    this.legalAuditStatus = legalAuditStatus;
    return this;
  }

  public void unsetLegalAuditStatus() {
    this.legalAuditStatus = null;
  }

  /** Returns true if field legalAuditStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetLegalAuditStatus() {
    return this.legalAuditStatus != null;
  }

  public void setLegalAuditStatusIsSet(boolean value) {
    if (!value) {
      this.legalAuditStatus = null;
    }
  }

  public String getLegalAuditTime() {
    return this.legalAuditTime;
  }

  public MerchantThrift setLegalAuditTime(String legalAuditTime) {
    this.legalAuditTime = legalAuditTime;
    return this;
  }

  public void unsetLegalAuditTime() {
    this.legalAuditTime = null;
  }

  /** Returns true if field legalAuditTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLegalAuditTime() {
    return this.legalAuditTime != null;
  }

  public void setLegalAuditTimeIsSet(boolean value) {
    if (!value) {
      this.legalAuditTime = null;
    }
  }

  public String getLegalAuditor() {
    return this.legalAuditor;
  }

  public MerchantThrift setLegalAuditor(String legalAuditor) {
    this.legalAuditor = legalAuditor;
    return this;
  }

  public void unsetLegalAuditor() {
    this.legalAuditor = null;
  }

  /** Returns true if field legalAuditor is set (has been assigned a value) and false otherwise */
  public boolean isSetLegalAuditor() {
    return this.legalAuditor != null;
  }

  public void setLegalAuditorIsSet(boolean value) {
    if (!value) {
      this.legalAuditor = null;
    }
  }

  public String getSalesId() {
    return this.salesId;
  }

  public MerchantThrift setSalesId(String salesId) {
    this.salesId = salesId;
    return this;
  }

  public void unsetSalesId() {
    this.salesId = null;
  }

  /** Returns true if field salesId is set (has been assigned a value) and false otherwise */
  public boolean isSetSalesId() {
    return this.salesId != null;
  }

  public void setSalesIdIsSet(boolean value) {
    if (!value) {
      this.salesId = null;
    }
  }

  public String getInchargerId() {
    return this.inchargerId;
  }

  public MerchantThrift setInchargerId(String inchargerId) {
    this.inchargerId = inchargerId;
    return this;
  }

  public void unsetInchargerId() {
    this.inchargerId = null;
  }

  /** Returns true if field inchargerId is set (has been assigned a value) and false otherwise */
  public boolean isSetInchargerId() {
    return this.inchargerId != null;
  }

  public void setInchargerIdIsSet(boolean value) {
    if (!value) {
      this.inchargerId = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public MerchantThrift setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public MerchantThrift setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getWelcomeMessage() {
    return this.welcomeMessage;
  }

  public MerchantThrift setWelcomeMessage(String welcomeMessage) {
    this.welcomeMessage = welcomeMessage;
    return this;
  }

  public void unsetWelcomeMessage() {
    this.welcomeMessage = null;
  }

  /** Returns true if field welcomeMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetWelcomeMessage() {
    return this.welcomeMessage != null;
  }

  public void setWelcomeMessageIsSet(boolean value) {
    if (!value) {
      this.welcomeMessage = null;
    }
  }

  public String getCertificateType() {
    return this.certificateType;
  }

  public MerchantThrift setCertificateType(String certificateType) {
    this.certificateType = certificateType;
    return this;
  }

  public void unsetCertificateType() {
    this.certificateType = null;
  }

  /** Returns true if field certificateType is set (has been assigned a value) and false otherwise */
  public boolean isSetCertificateType() {
    return this.certificateType != null;
  }

  public void setCertificateTypeIsSet(boolean value) {
    if (!value) {
      this.certificateType = null;
    }
  }

  public String getBusinessLicenseEndTime() {
    return this.businessLicenseEndTime;
  }

  public MerchantThrift setBusinessLicenseEndTime(String businessLicenseEndTime) {
    this.businessLicenseEndTime = businessLicenseEndTime;
    return this;
  }

  public void unsetBusinessLicenseEndTime() {
    this.businessLicenseEndTime = null;
  }

  /** Returns true if field businessLicenseEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessLicenseEndTime() {
    return this.businessLicenseEndTime != null;
  }

  public void setBusinessLicenseEndTimeIsSet(boolean value) {
    if (!value) {
      this.businessLicenseEndTime = null;
    }
  }

  public String getOrganizationCode() {
    return this.organizationCode;
  }

  public MerchantThrift setOrganizationCode(String organizationCode) {
    this.organizationCode = organizationCode;
    return this;
  }

  public void unsetOrganizationCode() {
    this.organizationCode = null;
  }

  /** Returns true if field organizationCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganizationCode() {
    return this.organizationCode != null;
  }

  public void setOrganizationCodeIsSet(boolean value) {
    if (!value) {
      this.organizationCode = null;
    }
  }

  public String getTaxRegistrationCertificateNo() {
    return this.taxRegistrationCertificateNo;
  }

  public MerchantThrift setTaxRegistrationCertificateNo(String taxRegistrationCertificateNo) {
    this.taxRegistrationCertificateNo = taxRegistrationCertificateNo;
    return this;
  }

  public void unsetTaxRegistrationCertificateNo() {
    this.taxRegistrationCertificateNo = null;
  }

  /** Returns true if field taxRegistrationCertificateNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTaxRegistrationCertificateNo() {
    return this.taxRegistrationCertificateNo != null;
  }

  public void setTaxRegistrationCertificateNoIsSet(boolean value) {
    if (!value) {
      this.taxRegistrationCertificateNo = null;
    }
  }

  public String getBusinessScope() {
    return this.businessScope;
  }

  public MerchantThrift setBusinessScope(String businessScope) {
    this.businessScope = businessScope;
    return this;
  }

  public void unsetBusinessScope() {
    this.businessScope = null;
  }

  /** Returns true if field businessScope is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessScope() {
    return this.businessScope != null;
  }

  public void setBusinessScopeIsSet(boolean value) {
    if (!value) {
      this.businessScope = null;
    }
  }

  public String getLegalIdcard() {
    return this.legalIdcard;
  }

  public MerchantThrift setLegalIdcard(String legalIdcard) {
    this.legalIdcard = legalIdcard;
    return this;
  }

  public void unsetLegalIdcard() {
    this.legalIdcard = null;
  }

  /** Returns true if field legalIdcard is set (has been assigned a value) and false otherwise */
  public boolean isSetLegalIdcard() {
    return this.legalIdcard != null;
  }

  public void setLegalIdcardIsSet(boolean value) {
    if (!value) {
      this.legalIdcard = null;
    }
  }

  public String getLegalCertificateEndTime() {
    return this.legalCertificateEndTime;
  }

  public MerchantThrift setLegalCertificateEndTime(String legalCertificateEndTime) {
    this.legalCertificateEndTime = legalCertificateEndTime;
    return this;
  }

  public void unsetLegalCertificateEndTime() {
    this.legalCertificateEndTime = null;
  }

  /** Returns true if field legalCertificateEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLegalCertificateEndTime() {
    return this.legalCertificateEndTime != null;
  }

  public void setLegalCertificateEndTimeIsSet(boolean value) {
    if (!value) {
      this.legalCertificateEndTime = null;
    }
  }

  public String getContactorIdcardNo() {
    return this.contactorIdcardNo;
  }

  public MerchantThrift setContactorIdcardNo(String contactorIdcardNo) {
    this.contactorIdcardNo = contactorIdcardNo;
    return this;
  }

  public void unsetContactorIdcardNo() {
    this.contactorIdcardNo = null;
  }

  /** Returns true if field contactorIdcardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContactorIdcardNo() {
    return this.contactorIdcardNo != null;
  }

  public void setContactorIdcardNoIsSet(boolean value) {
    if (!value) {
      this.contactorIdcardNo = null;
    }
  }

  public String getContactorCertificateEndTime() {
    return this.contactorCertificateEndTime;
  }

  public MerchantThrift setContactorCertificateEndTime(String contactorCertificateEndTime) {
    this.contactorCertificateEndTime = contactorCertificateEndTime;
    return this;
  }

  public void unsetContactorCertificateEndTime() {
    this.contactorCertificateEndTime = null;
  }

  /** Returns true if field contactorCertificateEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetContactorCertificateEndTime() {
    return this.contactorCertificateEndTime != null;
  }

  public void setContactorCertificateEndTimeIsSet(boolean value) {
    if (!value) {
      this.contactorCertificateEndTime = null;
    }
  }

  public String getContactorPhone() {
    return this.contactorPhone;
  }

  public MerchantThrift setContactorPhone(String contactorPhone) {
    this.contactorPhone = contactorPhone;
    return this;
  }

  public void unsetContactorPhone() {
    this.contactorPhone = null;
  }

  /** Returns true if field contactorPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetContactorPhone() {
    return this.contactorPhone != null;
  }

  public void setContactorPhoneIsSet(boolean value) {
    if (!value) {
      this.contactorPhone = null;
    }
  }

  public String getIpcNo() {
    return this.ipcNo;
  }

  public MerchantThrift setIpcNo(String ipcNo) {
    this.ipcNo = ipcNo;
    return this;
  }

  public void unsetIpcNo() {
    this.ipcNo = null;
  }

  /** Returns true if field ipcNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIpcNo() {
    return this.ipcNo != null;
  }

  public void setIpcNoIsSet(boolean value) {
    if (!value) {
      this.ipcNo = null;
    }
  }

  public String getPermitsAccounts() {
    return this.permitsAccounts;
  }

  public MerchantThrift setPermitsAccounts(String permitsAccounts) {
    this.permitsAccounts = permitsAccounts;
    return this;
  }

  public void unsetPermitsAccounts() {
    this.permitsAccounts = null;
  }

  /** Returns true if field permitsAccounts is set (has been assigned a value) and false otherwise */
  public boolean isSetPermitsAccounts() {
    return this.permitsAccounts != null;
  }

  public void setPermitsAccountsIsSet(boolean value) {
    if (!value) {
      this.permitsAccounts = null;
    }
  }

  public String getLegalCertificateFront() {
    return this.legalCertificateFront;
  }

  public MerchantThrift setLegalCertificateFront(String legalCertificateFront) {
    this.legalCertificateFront = legalCertificateFront;
    return this;
  }

  public void unsetLegalCertificateFront() {
    this.legalCertificateFront = null;
  }

  /** Returns true if field legalCertificateFront is set (has been assigned a value) and false otherwise */
  public boolean isSetLegalCertificateFront() {
    return this.legalCertificateFront != null;
  }

  public void setLegalCertificateFrontIsSet(boolean value) {
    if (!value) {
      this.legalCertificateFront = null;
    }
  }

  public String getLegalCertificateBack() {
    return this.legalCertificateBack;
  }

  public MerchantThrift setLegalCertificateBack(String legalCertificateBack) {
    this.legalCertificateBack = legalCertificateBack;
    return this;
  }

  public void unsetLegalCertificateBack() {
    this.legalCertificateBack = null;
  }

  /** Returns true if field legalCertificateBack is set (has been assigned a value) and false otherwise */
  public boolean isSetLegalCertificateBack() {
    return this.legalCertificateBack != null;
  }

  public void setLegalCertificateBackIsSet(boolean value) {
    if (!value) {
      this.legalCertificateBack = null;
    }
  }

  public String getTaxRegistrationCertificate() {
    return this.taxRegistrationCertificate;
  }

  public MerchantThrift setTaxRegistrationCertificate(String taxRegistrationCertificate) {
    this.taxRegistrationCertificate = taxRegistrationCertificate;
    return this;
  }

  public void unsetTaxRegistrationCertificate() {
    this.taxRegistrationCertificate = null;
  }

  /** Returns true if field taxRegistrationCertificate is set (has been assigned a value) and false otherwise */
  public boolean isSetTaxRegistrationCertificate() {
    return this.taxRegistrationCertificate != null;
  }

  public void setTaxRegistrationCertificateIsSet(boolean value) {
    if (!value) {
      this.taxRegistrationCertificate = null;
    }
  }

  public String getOrganizationCodeCertificate() {
    return this.organizationCodeCertificate;
  }

  public MerchantThrift setOrganizationCodeCertificate(String organizationCodeCertificate) {
    this.organizationCodeCertificate = organizationCodeCertificate;
    return this;
  }

  public void unsetOrganizationCodeCertificate() {
    this.organizationCodeCertificate = null;
  }

  /** Returns true if field organizationCodeCertificate is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganizationCodeCertificate() {
    return this.organizationCodeCertificate != null;
  }

  public void setOrganizationCodeCertificateIsSet(boolean value) {
    if (!value) {
      this.organizationCodeCertificate = null;
    }
  }

  public String getBusinessLicenseFile() {
    return this.businessLicenseFile;
  }

  public MerchantThrift setBusinessLicenseFile(String businessLicenseFile) {
    this.businessLicenseFile = businessLicenseFile;
    return this;
  }

  public void unsetBusinessLicenseFile() {
    this.businessLicenseFile = null;
  }

  /** Returns true if field businessLicenseFile is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessLicenseFile() {
    return this.businessLicenseFile != null;
  }

  public void setBusinessLicenseFileIsSet(boolean value) {
    if (!value) {
      this.businessLicenseFile = null;
    }
  }

  public String getBusinessLicenseNo() {
    return this.businessLicenseNo;
  }

  public MerchantThrift setBusinessLicenseNo(String businessLicenseNo) {
    this.businessLicenseNo = businessLicenseNo;
    return this;
  }

  public void unsetBusinessLicenseNo() {
    this.businessLicenseNo = null;
  }

  /** Returns true if field businessLicenseNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessLicenseNo() {
    return this.businessLicenseNo != null;
  }

  public void setBusinessLicenseNoIsSet(boolean value) {
    if (!value) {
      this.businessLicenseNo = null;
    }
  }

  public String getObjection() {
    return this.objection;
  }

  public MerchantThrift setObjection(String objection) {
    this.objection = objection;
    return this;
  }

  public void unsetObjection() {
    this.objection = null;
  }

  /** Returns true if field objection is set (has been assigned a value) and false otherwise */
  public boolean isSetObjection() {
    return this.objection != null;
  }

  public void setObjectionIsSet(boolean value) {
    if (!value) {
      this.objection = null;
    }
  }

  public String getRetainedAmount() {
    return this.retainedAmount;
  }

  public MerchantThrift setRetainedAmount(String retainedAmount) {
    this.retainedAmount = retainedAmount;
    return this;
  }

  public void unsetRetainedAmount() {
    this.retainedAmount = null;
  }

  /** Returns true if field retainedAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRetainedAmount() {
    return this.retainedAmount != null;
  }

  public void setRetainedAmountIsSet(boolean value) {
    if (!value) {
      this.retainedAmount = null;
    }
  }

  public String getUnionPayProvinceCode() {
    return this.unionPayProvinceCode;
  }

  public MerchantThrift setUnionPayProvinceCode(String unionPayProvinceCode) {
    this.unionPayProvinceCode = unionPayProvinceCode;
    return this;
  }

  public void unsetUnionPayProvinceCode() {
    this.unionPayProvinceCode = null;
  }

  /** Returns true if field unionPayProvinceCode is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionPayProvinceCode() {
    return this.unionPayProvinceCode != null;
  }

  public void setUnionPayProvinceCodeIsSet(boolean value) {
    if (!value) {
      this.unionPayProvinceCode = null;
    }
  }

  public String getUnionPayProvinceName() {
    return this.unionPayProvinceName;
  }

  public MerchantThrift setUnionPayProvinceName(String unionPayProvinceName) {
    this.unionPayProvinceName = unionPayProvinceName;
    return this;
  }

  public void unsetUnionPayProvinceName() {
    this.unionPayProvinceName = null;
  }

  /** Returns true if field unionPayProvinceName is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionPayProvinceName() {
    return this.unionPayProvinceName != null;
  }

  public void setUnionPayProvinceNameIsSet(boolean value) {
    if (!value) {
      this.unionPayProvinceName = null;
    }
  }

  public String getUnionPayCityCode() {
    return this.unionPayCityCode;
  }

  public MerchantThrift setUnionPayCityCode(String unionPayCityCode) {
    this.unionPayCityCode = unionPayCityCode;
    return this;
  }

  public void unsetUnionPayCityCode() {
    this.unionPayCityCode = null;
  }

  /** Returns true if field unionPayCityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionPayCityCode() {
    return this.unionPayCityCode != null;
  }

  public void setUnionPayCityCodeIsSet(boolean value) {
    if (!value) {
      this.unionPayCityCode = null;
    }
  }

  public String getUnionPayCityName() {
    return this.unionPayCityName;
  }

  public MerchantThrift setUnionPayCityName(String unionPayCityName) {
    this.unionPayCityName = unionPayCityName;
    return this;
  }

  public void unsetUnionPayCityName() {
    this.unionPayCityName = null;
  }

  /** Returns true if field unionPayCityName is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionPayCityName() {
    return this.unionPayCityName != null;
  }

  public void setUnionPayCityNameIsSet(boolean value) {
    if (!value) {
      this.unionPayCityName = null;
    }
  }

  public String getMccType() {
    return this.mccType;
  }

  public MerchantThrift setMccType(String mccType) {
    this.mccType = mccType;
    return this;
  }

  public void unsetMccType() {
    this.mccType = null;
  }

  /** Returns true if field mccType is set (has been assigned a value) and false otherwise */
  public boolean isSetMccType() {
    return this.mccType != null;
  }

  public void setMccTypeIsSet(boolean value) {
    if (!value) {
      this.mccType = null;
    }
  }

  public String getMccServer() {
    return this.mccServer;
  }

  public MerchantThrift setMccServer(String mccServer) {
    this.mccServer = mccServer;
    return this;
  }

  public void unsetMccServer() {
    this.mccServer = null;
  }

  /** Returns true if field mccServer is set (has been assigned a value) and false otherwise */
  public boolean isSetMccServer() {
    return this.mccServer != null;
  }

  public void setMccServerIsSet(boolean value) {
    if (!value) {
      this.mccServer = null;
    }
  }

  public String getMccDetail() {
    return this.mccDetail;
  }

  public MerchantThrift setMccDetail(String mccDetail) {
    this.mccDetail = mccDetail;
    return this;
  }

  public void unsetMccDetail() {
    this.mccDetail = null;
  }

  /** Returns true if field mccDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetMccDetail() {
    return this.mccDetail != null;
  }

  public void setMccDetailIsSet(boolean value) {
    if (!value) {
      this.mccDetail = null;
    }
  }

  public String getIndustryCategory() {
    return this.industryCategory;
  }

  public MerchantThrift setIndustryCategory(String industryCategory) {
    this.industryCategory = industryCategory;
    return this;
  }

  public void unsetIndustryCategory() {
    this.industryCategory = null;
  }

  /** Returns true if field industryCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetIndustryCategory() {
    return this.industryCategory != null;
  }

  public void setIndustryCategoryIsSet(boolean value) {
    if (!value) {
      this.industryCategory = null;
    }
  }

  public String getLastLoginDate() {
    return this.lastLoginDate;
  }

  public MerchantThrift setLastLoginDate(String lastLoginDate) {
    this.lastLoginDate = lastLoginDate;
    return this;
  }

  public void unsetLastLoginDate() {
    this.lastLoginDate = null;
  }

  /** Returns true if field lastLoginDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginDate() {
    return this.lastLoginDate != null;
  }

  public void setLastLoginDateIsSet(boolean value) {
    if (!value) {
      this.lastLoginDate = null;
    }
  }

  public String getContactorCertificateFront() {
    return this.contactorCertificateFront;
  }

  public MerchantThrift setContactorCertificateFront(String contactorCertificateFront) {
    this.contactorCertificateFront = contactorCertificateFront;
    return this;
  }

  public void unsetContactorCertificateFront() {
    this.contactorCertificateFront = null;
  }

  /** Returns true if field contactorCertificateFront is set (has been assigned a value) and false otherwise */
  public boolean isSetContactorCertificateFront() {
    return this.contactorCertificateFront != null;
  }

  public void setContactorCertificateFrontIsSet(boolean value) {
    if (!value) {
      this.contactorCertificateFront = null;
    }
  }

  public String getContactorCertificateBack() {
    return this.contactorCertificateBack;
  }

  public MerchantThrift setContactorCertificateBack(String contactorCertificateBack) {
    this.contactorCertificateBack = contactorCertificateBack;
    return this;
  }

  public void unsetContactorCertificateBack() {
    this.contactorCertificateBack = null;
  }

  /** Returns true if field contactorCertificateBack is set (has been assigned a value) and false otherwise */
  public boolean isSetContactorCertificateBack() {
    return this.contactorCertificateBack != null;
  }

  public void setContactorCertificateBackIsSet(boolean value) {
    if (!value) {
      this.contactorCertificateBack = null;
    }
  }

  public String getShortName() {
    return this.shortName;
  }

  public MerchantThrift setShortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  public void unsetShortName() {
    this.shortName = null;
  }

  /** Returns true if field shortName is set (has been assigned a value) and false otherwise */
  public boolean isSetShortName() {
    return this.shortName != null;
  }

  public void setShortNameIsSet(boolean value) {
    if (!value) {
      this.shortName = null;
    }
  }

  public String getAuthorizationLetter() {
    return this.authorizationLetter;
  }

  public MerchantThrift setAuthorizationLetter(String authorizationLetter) {
    this.authorizationLetter = authorizationLetter;
    return this;
  }

  public void unsetAuthorizationLetter() {
    this.authorizationLetter = null;
  }

  /** Returns true if field authorizationLetter is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorizationLetter() {
    return this.authorizationLetter != null;
  }

  public void setAuthorizationLetterIsSet(boolean value) {
    if (!value) {
      this.authorizationLetter = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case COMPANY_NAME:
      if (value == null) {
        unsetCompanyName();
      } else {
        setCompanyName((String)value);
      }
      break;

    case LEGAL_REPRESENTATIVE:
      if (value == null) {
        unsetLegalRepresentative();
      } else {
        setLegalRepresentative((String)value);
      }
      break;

    case COMPANY_PHONE:
      if (value == null) {
        unsetCompanyPhone();
      } else {
        setCompanyPhone((String)value);
      }
      break;

    case LEGAL_MOBILE:
      if (value == null) {
        unsetLegalMobile();
      } else {
        setLegalMobile((String)value);
      }
      break;

    case WEBSITE:
      if (value == null) {
        unsetWebsite();
      } else {
        setWebsite((String)value);
      }
      break;

    case BUSINESS_ADDRESS:
      if (value == null) {
        unsetBusinessAddress();
      } else {
        setBusinessAddress((String)value);
      }
      break;

    case CONTRY_CODE:
      if (value == null) {
        unsetContryCode();
      } else {
        setContryCode((String)value);
      }
      break;

    case CONTRY_NAME:
      if (value == null) {
        unsetContryName();
      } else {
        setContryName((String)value);
      }
      break;

    case PROVINCE_CODE:
      if (value == null) {
        unsetProvinceCode();
      } else {
        setProvinceCode((String)value);
      }
      break;

    case PROVINCE_NAME:
      if (value == null) {
        unsetProvinceName();
      } else {
        setProvinceName((String)value);
      }
      break;

    case CITY_CODE:
      if (value == null) {
        unsetCityCode();
      } else {
        setCityCode((String)value);
      }
      break;

    case CITY_NAME:
      if (value == null) {
        unsetCityName();
      } else {
        setCityName((String)value);
      }
      break;

    case COUNTY_CODE:
      if (value == null) {
        unsetCountyCode();
      } else {
        setCountyCode((String)value);
      }
      break;

    case COUNTY_NAME:
      if (value == null) {
        unsetCountyName();
      } else {
        setCountyName((String)value);
      }
      break;

    case CONTACT_ADDRESS:
      if (value == null) {
        unsetContactAddress();
      } else {
        setContactAddress((String)value);
      }
      break;

    case CONTACTOR:
      if (value == null) {
        unsetContactor();
      } else {
        setContactor((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((String)value);
      }
      break;

    case CHARGE_TYPE:
      if (value == null) {
        unsetChargeType();
      } else {
        setChargeType((String)value);
      }
      break;

    case REQUEST_WAYS:
      if (value == null) {
        unsetRequestWays();
      } else {
        setRequestWays((String)value);
      }
      break;

    case REQUEST_VERSION:
      if (value == null) {
        unsetRequestVersion();
      } else {
        setRequestVersion((String)value);
      }
      break;

    case ALLOWED_IPS:
      if (value == null) {
        unsetAllowedIps();
      } else {
        setAllowedIps((String)value);
      }
      break;

    case SIGNED_TYPE:
      if (value == null) {
        unsetSignedType();
      } else {
        setSignedType((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case OP_AUDIT_TIME:
      if (value == null) {
        unsetOpAuditTime();
      } else {
        setOpAuditTime((String)value);
      }
      break;

    case OP_AUDITOR:
      if (value == null) {
        unsetOpAuditor();
      } else {
        setOpAuditor((String)value);
      }
      break;

    case RC_AUDIT_STATUS:
      if (value == null) {
        unsetRcAuditStatus();
      } else {
        setRcAuditStatus((String)value);
      }
      break;

    case RC_AUDIT_TIME:
      if (value == null) {
        unsetRcAuditTime();
      } else {
        setRcAuditTime((String)value);
      }
      break;

    case RC_AUDITOR:
      if (value == null) {
        unsetRcAuditor();
      } else {
        setRcAuditor((String)value);
      }
      break;

    case LEGAL_AUDIT_STATUS:
      if (value == null) {
        unsetLegalAuditStatus();
      } else {
        setLegalAuditStatus((String)value);
      }
      break;

    case LEGAL_AUDIT_TIME:
      if (value == null) {
        unsetLegalAuditTime();
      } else {
        setLegalAuditTime((String)value);
      }
      break;

    case LEGAL_AUDITOR:
      if (value == null) {
        unsetLegalAuditor();
      } else {
        setLegalAuditor((String)value);
      }
      break;

    case SALES_ID:
      if (value == null) {
        unsetSalesId();
      } else {
        setSalesId((String)value);
      }
      break;

    case INCHARGER_ID:
      if (value == null) {
        unsetInchargerId();
      } else {
        setInchargerId((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case WELCOME_MESSAGE:
      if (value == null) {
        unsetWelcomeMessage();
      } else {
        setWelcomeMessage((String)value);
      }
      break;

    case CERTIFICATE_TYPE:
      if (value == null) {
        unsetCertificateType();
      } else {
        setCertificateType((String)value);
      }
      break;

    case BUSINESS_LICENSE_END_TIME:
      if (value == null) {
        unsetBusinessLicenseEndTime();
      } else {
        setBusinessLicenseEndTime((String)value);
      }
      break;

    case ORGANIZATION_CODE:
      if (value == null) {
        unsetOrganizationCode();
      } else {
        setOrganizationCode((String)value);
      }
      break;

    case TAX_REGISTRATION_CERTIFICATE_NO:
      if (value == null) {
        unsetTaxRegistrationCertificateNo();
      } else {
        setTaxRegistrationCertificateNo((String)value);
      }
      break;

    case BUSINESS_SCOPE:
      if (value == null) {
        unsetBusinessScope();
      } else {
        setBusinessScope((String)value);
      }
      break;

    case LEGAL_IDCARD:
      if (value == null) {
        unsetLegalIdcard();
      } else {
        setLegalIdcard((String)value);
      }
      break;

    case LEGAL_CERTIFICATE_END_TIME:
      if (value == null) {
        unsetLegalCertificateEndTime();
      } else {
        setLegalCertificateEndTime((String)value);
      }
      break;

    case CONTACTOR_IDCARD_NO:
      if (value == null) {
        unsetContactorIdcardNo();
      } else {
        setContactorIdcardNo((String)value);
      }
      break;

    case CONTACTOR_CERTIFICATE_END_TIME:
      if (value == null) {
        unsetContactorCertificateEndTime();
      } else {
        setContactorCertificateEndTime((String)value);
      }
      break;

    case CONTACTOR_PHONE:
      if (value == null) {
        unsetContactorPhone();
      } else {
        setContactorPhone((String)value);
      }
      break;

    case IPC_NO:
      if (value == null) {
        unsetIpcNo();
      } else {
        setIpcNo((String)value);
      }
      break;

    case PERMITS_ACCOUNTS:
      if (value == null) {
        unsetPermitsAccounts();
      } else {
        setPermitsAccounts((String)value);
      }
      break;

    case LEGAL_CERTIFICATE_FRONT:
      if (value == null) {
        unsetLegalCertificateFront();
      } else {
        setLegalCertificateFront((String)value);
      }
      break;

    case LEGAL_CERTIFICATE_BACK:
      if (value == null) {
        unsetLegalCertificateBack();
      } else {
        setLegalCertificateBack((String)value);
      }
      break;

    case TAX_REGISTRATION_CERTIFICATE:
      if (value == null) {
        unsetTaxRegistrationCertificate();
      } else {
        setTaxRegistrationCertificate((String)value);
      }
      break;

    case ORGANIZATION_CODE_CERTIFICATE:
      if (value == null) {
        unsetOrganizationCodeCertificate();
      } else {
        setOrganizationCodeCertificate((String)value);
      }
      break;

    case BUSINESS_LICENSE_FILE:
      if (value == null) {
        unsetBusinessLicenseFile();
      } else {
        setBusinessLicenseFile((String)value);
      }
      break;

    case BUSINESS_LICENSE_NO:
      if (value == null) {
        unsetBusinessLicenseNo();
      } else {
        setBusinessLicenseNo((String)value);
      }
      break;

    case OBJECTION:
      if (value == null) {
        unsetObjection();
      } else {
        setObjection((String)value);
      }
      break;

    case RETAINED_AMOUNT:
      if (value == null) {
        unsetRetainedAmount();
      } else {
        setRetainedAmount((String)value);
      }
      break;

    case UNION_PAY_PROVINCE_CODE:
      if (value == null) {
        unsetUnionPayProvinceCode();
      } else {
        setUnionPayProvinceCode((String)value);
      }
      break;

    case UNION_PAY_PROVINCE_NAME:
      if (value == null) {
        unsetUnionPayProvinceName();
      } else {
        setUnionPayProvinceName((String)value);
      }
      break;

    case UNION_PAY_CITY_CODE:
      if (value == null) {
        unsetUnionPayCityCode();
      } else {
        setUnionPayCityCode((String)value);
      }
      break;

    case UNION_PAY_CITY_NAME:
      if (value == null) {
        unsetUnionPayCityName();
      } else {
        setUnionPayCityName((String)value);
      }
      break;

    case MCC_TYPE:
      if (value == null) {
        unsetMccType();
      } else {
        setMccType((String)value);
      }
      break;

    case MCC_SERVER:
      if (value == null) {
        unsetMccServer();
      } else {
        setMccServer((String)value);
      }
      break;

    case MCC_DETAIL:
      if (value == null) {
        unsetMccDetail();
      } else {
        setMccDetail((String)value);
      }
      break;

    case INDUSTRY_CATEGORY:
      if (value == null) {
        unsetIndustryCategory();
      } else {
        setIndustryCategory((String)value);
      }
      break;

    case LAST_LOGIN_DATE:
      if (value == null) {
        unsetLastLoginDate();
      } else {
        setLastLoginDate((String)value);
      }
      break;

    case CONTACTOR_CERTIFICATE_FRONT:
      if (value == null) {
        unsetContactorCertificateFront();
      } else {
        setContactorCertificateFront((String)value);
      }
      break;

    case CONTACTOR_CERTIFICATE_BACK:
      if (value == null) {
        unsetContactorCertificateBack();
      } else {
        setContactorCertificateBack((String)value);
      }
      break;

    case SHORT_NAME:
      if (value == null) {
        unsetShortName();
      } else {
        setShortName((String)value);
      }
      break;

    case AUTHORIZATION_LETTER:
      if (value == null) {
        unsetAuthorizationLetter();
      } else {
        setAuthorizationLetter((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case NAME:
      return getName();

    case EMAIL:
      return getEmail();

    case COMPANY_NAME:
      return getCompanyName();

    case LEGAL_REPRESENTATIVE:
      return getLegalRepresentative();

    case COMPANY_PHONE:
      return getCompanyPhone();

    case LEGAL_MOBILE:
      return getLegalMobile();

    case WEBSITE:
      return getWebsite();

    case BUSINESS_ADDRESS:
      return getBusinessAddress();

    case CONTRY_CODE:
      return getContryCode();

    case CONTRY_NAME:
      return getContryName();

    case PROVINCE_CODE:
      return getProvinceCode();

    case PROVINCE_NAME:
      return getProvinceName();

    case CITY_CODE:
      return getCityCode();

    case CITY_NAME:
      return getCityName();

    case COUNTY_CODE:
      return getCountyCode();

    case COUNTY_NAME:
      return getCountyName();

    case CONTACT_ADDRESS:
      return getContactAddress();

    case CONTACTOR:
      return getContactor();

    case TYPE:
      return getType();

    case LEVEL:
      return getLevel();

    case CHARGE_TYPE:
      return getChargeType();

    case REQUEST_WAYS:
      return getRequestWays();

    case REQUEST_VERSION:
      return getRequestVersion();

    case ALLOWED_IPS:
      return getAllowedIps();

    case SIGNED_TYPE:
      return getSignedType();

    case STATUS:
      return getStatus();

    case OP_AUDIT_TIME:
      return getOpAuditTime();

    case OP_AUDITOR:
      return getOpAuditor();

    case RC_AUDIT_STATUS:
      return getRcAuditStatus();

    case RC_AUDIT_TIME:
      return getRcAuditTime();

    case RC_AUDITOR:
      return getRcAuditor();

    case LEGAL_AUDIT_STATUS:
      return getLegalAuditStatus();

    case LEGAL_AUDIT_TIME:
      return getLegalAuditTime();

    case LEGAL_AUDITOR:
      return getLegalAuditor();

    case SALES_ID:
      return getSalesId();

    case INCHARGER_ID:
      return getInchargerId();

    case REMARK:
      return getRemark();

    case CREATE_TIME:
      return getCreateTime();

    case WELCOME_MESSAGE:
      return getWelcomeMessage();

    case CERTIFICATE_TYPE:
      return getCertificateType();

    case BUSINESS_LICENSE_END_TIME:
      return getBusinessLicenseEndTime();

    case ORGANIZATION_CODE:
      return getOrganizationCode();

    case TAX_REGISTRATION_CERTIFICATE_NO:
      return getTaxRegistrationCertificateNo();

    case BUSINESS_SCOPE:
      return getBusinessScope();

    case LEGAL_IDCARD:
      return getLegalIdcard();

    case LEGAL_CERTIFICATE_END_TIME:
      return getLegalCertificateEndTime();

    case CONTACTOR_IDCARD_NO:
      return getContactorIdcardNo();

    case CONTACTOR_CERTIFICATE_END_TIME:
      return getContactorCertificateEndTime();

    case CONTACTOR_PHONE:
      return getContactorPhone();

    case IPC_NO:
      return getIpcNo();

    case PERMITS_ACCOUNTS:
      return getPermitsAccounts();

    case LEGAL_CERTIFICATE_FRONT:
      return getLegalCertificateFront();

    case LEGAL_CERTIFICATE_BACK:
      return getLegalCertificateBack();

    case TAX_REGISTRATION_CERTIFICATE:
      return getTaxRegistrationCertificate();

    case ORGANIZATION_CODE_CERTIFICATE:
      return getOrganizationCodeCertificate();

    case BUSINESS_LICENSE_FILE:
      return getBusinessLicenseFile();

    case BUSINESS_LICENSE_NO:
      return getBusinessLicenseNo();

    case OBJECTION:
      return getObjection();

    case RETAINED_AMOUNT:
      return getRetainedAmount();

    case UNION_PAY_PROVINCE_CODE:
      return getUnionPayProvinceCode();

    case UNION_PAY_PROVINCE_NAME:
      return getUnionPayProvinceName();

    case UNION_PAY_CITY_CODE:
      return getUnionPayCityCode();

    case UNION_PAY_CITY_NAME:
      return getUnionPayCityName();

    case MCC_TYPE:
      return getMccType();

    case MCC_SERVER:
      return getMccServer();

    case MCC_DETAIL:
      return getMccDetail();

    case INDUSTRY_CATEGORY:
      return getIndustryCategory();

    case LAST_LOGIN_DATE:
      return getLastLoginDate();

    case CONTACTOR_CERTIFICATE_FRONT:
      return getContactorCertificateFront();

    case CONTACTOR_CERTIFICATE_BACK:
      return getContactorCertificateBack();

    case SHORT_NAME:
      return getShortName();

    case AUTHORIZATION_LETTER:
      return getAuthorizationLetter();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case NAME:
      return isSetName();
    case EMAIL:
      return isSetEmail();
    case COMPANY_NAME:
      return isSetCompanyName();
    case LEGAL_REPRESENTATIVE:
      return isSetLegalRepresentative();
    case COMPANY_PHONE:
      return isSetCompanyPhone();
    case LEGAL_MOBILE:
      return isSetLegalMobile();
    case WEBSITE:
      return isSetWebsite();
    case BUSINESS_ADDRESS:
      return isSetBusinessAddress();
    case CONTRY_CODE:
      return isSetContryCode();
    case CONTRY_NAME:
      return isSetContryName();
    case PROVINCE_CODE:
      return isSetProvinceCode();
    case PROVINCE_NAME:
      return isSetProvinceName();
    case CITY_CODE:
      return isSetCityCode();
    case CITY_NAME:
      return isSetCityName();
    case COUNTY_CODE:
      return isSetCountyCode();
    case COUNTY_NAME:
      return isSetCountyName();
    case CONTACT_ADDRESS:
      return isSetContactAddress();
    case CONTACTOR:
      return isSetContactor();
    case TYPE:
      return isSetType();
    case LEVEL:
      return isSetLevel();
    case CHARGE_TYPE:
      return isSetChargeType();
    case REQUEST_WAYS:
      return isSetRequestWays();
    case REQUEST_VERSION:
      return isSetRequestVersion();
    case ALLOWED_IPS:
      return isSetAllowedIps();
    case SIGNED_TYPE:
      return isSetSignedType();
    case STATUS:
      return isSetStatus();
    case OP_AUDIT_TIME:
      return isSetOpAuditTime();
    case OP_AUDITOR:
      return isSetOpAuditor();
    case RC_AUDIT_STATUS:
      return isSetRcAuditStatus();
    case RC_AUDIT_TIME:
      return isSetRcAuditTime();
    case RC_AUDITOR:
      return isSetRcAuditor();
    case LEGAL_AUDIT_STATUS:
      return isSetLegalAuditStatus();
    case LEGAL_AUDIT_TIME:
      return isSetLegalAuditTime();
    case LEGAL_AUDITOR:
      return isSetLegalAuditor();
    case SALES_ID:
      return isSetSalesId();
    case INCHARGER_ID:
      return isSetInchargerId();
    case REMARK:
      return isSetRemark();
    case CREATE_TIME:
      return isSetCreateTime();
    case WELCOME_MESSAGE:
      return isSetWelcomeMessage();
    case CERTIFICATE_TYPE:
      return isSetCertificateType();
    case BUSINESS_LICENSE_END_TIME:
      return isSetBusinessLicenseEndTime();
    case ORGANIZATION_CODE:
      return isSetOrganizationCode();
    case TAX_REGISTRATION_CERTIFICATE_NO:
      return isSetTaxRegistrationCertificateNo();
    case BUSINESS_SCOPE:
      return isSetBusinessScope();
    case LEGAL_IDCARD:
      return isSetLegalIdcard();
    case LEGAL_CERTIFICATE_END_TIME:
      return isSetLegalCertificateEndTime();
    case CONTACTOR_IDCARD_NO:
      return isSetContactorIdcardNo();
    case CONTACTOR_CERTIFICATE_END_TIME:
      return isSetContactorCertificateEndTime();
    case CONTACTOR_PHONE:
      return isSetContactorPhone();
    case IPC_NO:
      return isSetIpcNo();
    case PERMITS_ACCOUNTS:
      return isSetPermitsAccounts();
    case LEGAL_CERTIFICATE_FRONT:
      return isSetLegalCertificateFront();
    case LEGAL_CERTIFICATE_BACK:
      return isSetLegalCertificateBack();
    case TAX_REGISTRATION_CERTIFICATE:
      return isSetTaxRegistrationCertificate();
    case ORGANIZATION_CODE_CERTIFICATE:
      return isSetOrganizationCodeCertificate();
    case BUSINESS_LICENSE_FILE:
      return isSetBusinessLicenseFile();
    case BUSINESS_LICENSE_NO:
      return isSetBusinessLicenseNo();
    case OBJECTION:
      return isSetObjection();
    case RETAINED_AMOUNT:
      return isSetRetainedAmount();
    case UNION_PAY_PROVINCE_CODE:
      return isSetUnionPayProvinceCode();
    case UNION_PAY_PROVINCE_NAME:
      return isSetUnionPayProvinceName();
    case UNION_PAY_CITY_CODE:
      return isSetUnionPayCityCode();
    case UNION_PAY_CITY_NAME:
      return isSetUnionPayCityName();
    case MCC_TYPE:
      return isSetMccType();
    case MCC_SERVER:
      return isSetMccServer();
    case MCC_DETAIL:
      return isSetMccDetail();
    case INDUSTRY_CATEGORY:
      return isSetIndustryCategory();
    case LAST_LOGIN_DATE:
      return isSetLastLoginDate();
    case CONTACTOR_CERTIFICATE_FRONT:
      return isSetContactorCertificateFront();
    case CONTACTOR_CERTIFICATE_BACK:
      return isSetContactorCertificateBack();
    case SHORT_NAME:
      return isSetShortName();
    case AUTHORIZATION_LETTER:
      return isSetAuthorizationLetter();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MerchantThrift)
      return this.equals((MerchantThrift)that);
    return false;
  }

  public boolean equals(MerchantThrift that) {
    if (that == null)
      return false;

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_companyName = true && this.isSetCompanyName();
    boolean that_present_companyName = true && that.isSetCompanyName();
    if (this_present_companyName || that_present_companyName) {
      if (!(this_present_companyName && that_present_companyName))
        return false;
      if (!this.companyName.equals(that.companyName))
        return false;
    }

    boolean this_present_legalRepresentative = true && this.isSetLegalRepresentative();
    boolean that_present_legalRepresentative = true && that.isSetLegalRepresentative();
    if (this_present_legalRepresentative || that_present_legalRepresentative) {
      if (!(this_present_legalRepresentative && that_present_legalRepresentative))
        return false;
      if (!this.legalRepresentative.equals(that.legalRepresentative))
        return false;
    }

    boolean this_present_companyPhone = true && this.isSetCompanyPhone();
    boolean that_present_companyPhone = true && that.isSetCompanyPhone();
    if (this_present_companyPhone || that_present_companyPhone) {
      if (!(this_present_companyPhone && that_present_companyPhone))
        return false;
      if (!this.companyPhone.equals(that.companyPhone))
        return false;
    }

    boolean this_present_legalMobile = true && this.isSetLegalMobile();
    boolean that_present_legalMobile = true && that.isSetLegalMobile();
    if (this_present_legalMobile || that_present_legalMobile) {
      if (!(this_present_legalMobile && that_present_legalMobile))
        return false;
      if (!this.legalMobile.equals(that.legalMobile))
        return false;
    }

    boolean this_present_website = true && this.isSetWebsite();
    boolean that_present_website = true && that.isSetWebsite();
    if (this_present_website || that_present_website) {
      if (!(this_present_website && that_present_website))
        return false;
      if (!this.website.equals(that.website))
        return false;
    }

    boolean this_present_businessAddress = true && this.isSetBusinessAddress();
    boolean that_present_businessAddress = true && that.isSetBusinessAddress();
    if (this_present_businessAddress || that_present_businessAddress) {
      if (!(this_present_businessAddress && that_present_businessAddress))
        return false;
      if (!this.businessAddress.equals(that.businessAddress))
        return false;
    }

    boolean this_present_contryCode = true && this.isSetContryCode();
    boolean that_present_contryCode = true && that.isSetContryCode();
    if (this_present_contryCode || that_present_contryCode) {
      if (!(this_present_contryCode && that_present_contryCode))
        return false;
      if (!this.contryCode.equals(that.contryCode))
        return false;
    }

    boolean this_present_contryName = true && this.isSetContryName();
    boolean that_present_contryName = true && that.isSetContryName();
    if (this_present_contryName || that_present_contryName) {
      if (!(this_present_contryName && that_present_contryName))
        return false;
      if (!this.contryName.equals(that.contryName))
        return false;
    }

    boolean this_present_provinceCode = true && this.isSetProvinceCode();
    boolean that_present_provinceCode = true && that.isSetProvinceCode();
    if (this_present_provinceCode || that_present_provinceCode) {
      if (!(this_present_provinceCode && that_present_provinceCode))
        return false;
      if (!this.provinceCode.equals(that.provinceCode))
        return false;
    }

    boolean this_present_provinceName = true && this.isSetProvinceName();
    boolean that_present_provinceName = true && that.isSetProvinceName();
    if (this_present_provinceName || that_present_provinceName) {
      if (!(this_present_provinceName && that_present_provinceName))
        return false;
      if (!this.provinceName.equals(that.provinceName))
        return false;
    }

    boolean this_present_cityCode = true && this.isSetCityCode();
    boolean that_present_cityCode = true && that.isSetCityCode();
    if (this_present_cityCode || that_present_cityCode) {
      if (!(this_present_cityCode && that_present_cityCode))
        return false;
      if (!this.cityCode.equals(that.cityCode))
        return false;
    }

    boolean this_present_cityName = true && this.isSetCityName();
    boolean that_present_cityName = true && that.isSetCityName();
    if (this_present_cityName || that_present_cityName) {
      if (!(this_present_cityName && that_present_cityName))
        return false;
      if (!this.cityName.equals(that.cityName))
        return false;
    }

    boolean this_present_countyCode = true && this.isSetCountyCode();
    boolean that_present_countyCode = true && that.isSetCountyCode();
    if (this_present_countyCode || that_present_countyCode) {
      if (!(this_present_countyCode && that_present_countyCode))
        return false;
      if (!this.countyCode.equals(that.countyCode))
        return false;
    }

    boolean this_present_countyName = true && this.isSetCountyName();
    boolean that_present_countyName = true && that.isSetCountyName();
    if (this_present_countyName || that_present_countyName) {
      if (!(this_present_countyName && that_present_countyName))
        return false;
      if (!this.countyName.equals(that.countyName))
        return false;
    }

    boolean this_present_contactAddress = true && this.isSetContactAddress();
    boolean that_present_contactAddress = true && that.isSetContactAddress();
    if (this_present_contactAddress || that_present_contactAddress) {
      if (!(this_present_contactAddress && that_present_contactAddress))
        return false;
      if (!this.contactAddress.equals(that.contactAddress))
        return false;
    }

    boolean this_present_contactor = true && this.isSetContactor();
    boolean that_present_contactor = true && that.isSetContactor();
    if (this_present_contactor || that_present_contactor) {
      if (!(this_present_contactor && that_present_contactor))
        return false;
      if (!this.contactor.equals(that.contactor))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_level = true && this.isSetLevel();
    boolean that_present_level = true && that.isSetLevel();
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (!this.level.equals(that.level))
        return false;
    }

    boolean this_present_chargeType = true && this.isSetChargeType();
    boolean that_present_chargeType = true && that.isSetChargeType();
    if (this_present_chargeType || that_present_chargeType) {
      if (!(this_present_chargeType && that_present_chargeType))
        return false;
      if (!this.chargeType.equals(that.chargeType))
        return false;
    }

    boolean this_present_requestWays = true && this.isSetRequestWays();
    boolean that_present_requestWays = true && that.isSetRequestWays();
    if (this_present_requestWays || that_present_requestWays) {
      if (!(this_present_requestWays && that_present_requestWays))
        return false;
      if (!this.requestWays.equals(that.requestWays))
        return false;
    }

    boolean this_present_requestVersion = true && this.isSetRequestVersion();
    boolean that_present_requestVersion = true && that.isSetRequestVersion();
    if (this_present_requestVersion || that_present_requestVersion) {
      if (!(this_present_requestVersion && that_present_requestVersion))
        return false;
      if (!this.requestVersion.equals(that.requestVersion))
        return false;
    }

    boolean this_present_allowedIps = true && this.isSetAllowedIps();
    boolean that_present_allowedIps = true && that.isSetAllowedIps();
    if (this_present_allowedIps || that_present_allowedIps) {
      if (!(this_present_allowedIps && that_present_allowedIps))
        return false;
      if (!this.allowedIps.equals(that.allowedIps))
        return false;
    }

    boolean this_present_signedType = true && this.isSetSignedType();
    boolean that_present_signedType = true && that.isSetSignedType();
    if (this_present_signedType || that_present_signedType) {
      if (!(this_present_signedType && that_present_signedType))
        return false;
      if (!this.signedType.equals(that.signedType))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_opAuditTime = true && this.isSetOpAuditTime();
    boolean that_present_opAuditTime = true && that.isSetOpAuditTime();
    if (this_present_opAuditTime || that_present_opAuditTime) {
      if (!(this_present_opAuditTime && that_present_opAuditTime))
        return false;
      if (!this.opAuditTime.equals(that.opAuditTime))
        return false;
    }

    boolean this_present_opAuditor = true && this.isSetOpAuditor();
    boolean that_present_opAuditor = true && that.isSetOpAuditor();
    if (this_present_opAuditor || that_present_opAuditor) {
      if (!(this_present_opAuditor && that_present_opAuditor))
        return false;
      if (!this.opAuditor.equals(that.opAuditor))
        return false;
    }

    boolean this_present_rcAuditStatus = true && this.isSetRcAuditStatus();
    boolean that_present_rcAuditStatus = true && that.isSetRcAuditStatus();
    if (this_present_rcAuditStatus || that_present_rcAuditStatus) {
      if (!(this_present_rcAuditStatus && that_present_rcAuditStatus))
        return false;
      if (!this.rcAuditStatus.equals(that.rcAuditStatus))
        return false;
    }

    boolean this_present_rcAuditTime = true && this.isSetRcAuditTime();
    boolean that_present_rcAuditTime = true && that.isSetRcAuditTime();
    if (this_present_rcAuditTime || that_present_rcAuditTime) {
      if (!(this_present_rcAuditTime && that_present_rcAuditTime))
        return false;
      if (!this.rcAuditTime.equals(that.rcAuditTime))
        return false;
    }

    boolean this_present_rcAuditor = true && this.isSetRcAuditor();
    boolean that_present_rcAuditor = true && that.isSetRcAuditor();
    if (this_present_rcAuditor || that_present_rcAuditor) {
      if (!(this_present_rcAuditor && that_present_rcAuditor))
        return false;
      if (!this.rcAuditor.equals(that.rcAuditor))
        return false;
    }

    boolean this_present_legalAuditStatus = true && this.isSetLegalAuditStatus();
    boolean that_present_legalAuditStatus = true && that.isSetLegalAuditStatus();
    if (this_present_legalAuditStatus || that_present_legalAuditStatus) {
      if (!(this_present_legalAuditStatus && that_present_legalAuditStatus))
        return false;
      if (!this.legalAuditStatus.equals(that.legalAuditStatus))
        return false;
    }

    boolean this_present_legalAuditTime = true && this.isSetLegalAuditTime();
    boolean that_present_legalAuditTime = true && that.isSetLegalAuditTime();
    if (this_present_legalAuditTime || that_present_legalAuditTime) {
      if (!(this_present_legalAuditTime && that_present_legalAuditTime))
        return false;
      if (!this.legalAuditTime.equals(that.legalAuditTime))
        return false;
    }

    boolean this_present_legalAuditor = true && this.isSetLegalAuditor();
    boolean that_present_legalAuditor = true && that.isSetLegalAuditor();
    if (this_present_legalAuditor || that_present_legalAuditor) {
      if (!(this_present_legalAuditor && that_present_legalAuditor))
        return false;
      if (!this.legalAuditor.equals(that.legalAuditor))
        return false;
    }

    boolean this_present_salesId = true && this.isSetSalesId();
    boolean that_present_salesId = true && that.isSetSalesId();
    if (this_present_salesId || that_present_salesId) {
      if (!(this_present_salesId && that_present_salesId))
        return false;
      if (!this.salesId.equals(that.salesId))
        return false;
    }

    boolean this_present_inchargerId = true && this.isSetInchargerId();
    boolean that_present_inchargerId = true && that.isSetInchargerId();
    if (this_present_inchargerId || that_present_inchargerId) {
      if (!(this_present_inchargerId && that_present_inchargerId))
        return false;
      if (!this.inchargerId.equals(that.inchargerId))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_welcomeMessage = true && this.isSetWelcomeMessage();
    boolean that_present_welcomeMessage = true && that.isSetWelcomeMessage();
    if (this_present_welcomeMessage || that_present_welcomeMessage) {
      if (!(this_present_welcomeMessage && that_present_welcomeMessage))
        return false;
      if (!this.welcomeMessage.equals(that.welcomeMessage))
        return false;
    }

    boolean this_present_certificateType = true && this.isSetCertificateType();
    boolean that_present_certificateType = true && that.isSetCertificateType();
    if (this_present_certificateType || that_present_certificateType) {
      if (!(this_present_certificateType && that_present_certificateType))
        return false;
      if (!this.certificateType.equals(that.certificateType))
        return false;
    }

    boolean this_present_businessLicenseEndTime = true && this.isSetBusinessLicenseEndTime();
    boolean that_present_businessLicenseEndTime = true && that.isSetBusinessLicenseEndTime();
    if (this_present_businessLicenseEndTime || that_present_businessLicenseEndTime) {
      if (!(this_present_businessLicenseEndTime && that_present_businessLicenseEndTime))
        return false;
      if (!this.businessLicenseEndTime.equals(that.businessLicenseEndTime))
        return false;
    }

    boolean this_present_organizationCode = true && this.isSetOrganizationCode();
    boolean that_present_organizationCode = true && that.isSetOrganizationCode();
    if (this_present_organizationCode || that_present_organizationCode) {
      if (!(this_present_organizationCode && that_present_organizationCode))
        return false;
      if (!this.organizationCode.equals(that.organizationCode))
        return false;
    }

    boolean this_present_taxRegistrationCertificateNo = true && this.isSetTaxRegistrationCertificateNo();
    boolean that_present_taxRegistrationCertificateNo = true && that.isSetTaxRegistrationCertificateNo();
    if (this_present_taxRegistrationCertificateNo || that_present_taxRegistrationCertificateNo) {
      if (!(this_present_taxRegistrationCertificateNo && that_present_taxRegistrationCertificateNo))
        return false;
      if (!this.taxRegistrationCertificateNo.equals(that.taxRegistrationCertificateNo))
        return false;
    }

    boolean this_present_businessScope = true && this.isSetBusinessScope();
    boolean that_present_businessScope = true && that.isSetBusinessScope();
    if (this_present_businessScope || that_present_businessScope) {
      if (!(this_present_businessScope && that_present_businessScope))
        return false;
      if (!this.businessScope.equals(that.businessScope))
        return false;
    }

    boolean this_present_legalIdcard = true && this.isSetLegalIdcard();
    boolean that_present_legalIdcard = true && that.isSetLegalIdcard();
    if (this_present_legalIdcard || that_present_legalIdcard) {
      if (!(this_present_legalIdcard && that_present_legalIdcard))
        return false;
      if (!this.legalIdcard.equals(that.legalIdcard))
        return false;
    }

    boolean this_present_legalCertificateEndTime = true && this.isSetLegalCertificateEndTime();
    boolean that_present_legalCertificateEndTime = true && that.isSetLegalCertificateEndTime();
    if (this_present_legalCertificateEndTime || that_present_legalCertificateEndTime) {
      if (!(this_present_legalCertificateEndTime && that_present_legalCertificateEndTime))
        return false;
      if (!this.legalCertificateEndTime.equals(that.legalCertificateEndTime))
        return false;
    }

    boolean this_present_contactorIdcardNo = true && this.isSetContactorIdcardNo();
    boolean that_present_contactorIdcardNo = true && that.isSetContactorIdcardNo();
    if (this_present_contactorIdcardNo || that_present_contactorIdcardNo) {
      if (!(this_present_contactorIdcardNo && that_present_contactorIdcardNo))
        return false;
      if (!this.contactorIdcardNo.equals(that.contactorIdcardNo))
        return false;
    }

    boolean this_present_contactorCertificateEndTime = true && this.isSetContactorCertificateEndTime();
    boolean that_present_contactorCertificateEndTime = true && that.isSetContactorCertificateEndTime();
    if (this_present_contactorCertificateEndTime || that_present_contactorCertificateEndTime) {
      if (!(this_present_contactorCertificateEndTime && that_present_contactorCertificateEndTime))
        return false;
      if (!this.contactorCertificateEndTime.equals(that.contactorCertificateEndTime))
        return false;
    }

    boolean this_present_contactorPhone = true && this.isSetContactorPhone();
    boolean that_present_contactorPhone = true && that.isSetContactorPhone();
    if (this_present_contactorPhone || that_present_contactorPhone) {
      if (!(this_present_contactorPhone && that_present_contactorPhone))
        return false;
      if (!this.contactorPhone.equals(that.contactorPhone))
        return false;
    }

    boolean this_present_ipcNo = true && this.isSetIpcNo();
    boolean that_present_ipcNo = true && that.isSetIpcNo();
    if (this_present_ipcNo || that_present_ipcNo) {
      if (!(this_present_ipcNo && that_present_ipcNo))
        return false;
      if (!this.ipcNo.equals(that.ipcNo))
        return false;
    }

    boolean this_present_permitsAccounts = true && this.isSetPermitsAccounts();
    boolean that_present_permitsAccounts = true && that.isSetPermitsAccounts();
    if (this_present_permitsAccounts || that_present_permitsAccounts) {
      if (!(this_present_permitsAccounts && that_present_permitsAccounts))
        return false;
      if (!this.permitsAccounts.equals(that.permitsAccounts))
        return false;
    }

    boolean this_present_legalCertificateFront = true && this.isSetLegalCertificateFront();
    boolean that_present_legalCertificateFront = true && that.isSetLegalCertificateFront();
    if (this_present_legalCertificateFront || that_present_legalCertificateFront) {
      if (!(this_present_legalCertificateFront && that_present_legalCertificateFront))
        return false;
      if (!this.legalCertificateFront.equals(that.legalCertificateFront))
        return false;
    }

    boolean this_present_legalCertificateBack = true && this.isSetLegalCertificateBack();
    boolean that_present_legalCertificateBack = true && that.isSetLegalCertificateBack();
    if (this_present_legalCertificateBack || that_present_legalCertificateBack) {
      if (!(this_present_legalCertificateBack && that_present_legalCertificateBack))
        return false;
      if (!this.legalCertificateBack.equals(that.legalCertificateBack))
        return false;
    }

    boolean this_present_taxRegistrationCertificate = true && this.isSetTaxRegistrationCertificate();
    boolean that_present_taxRegistrationCertificate = true && that.isSetTaxRegistrationCertificate();
    if (this_present_taxRegistrationCertificate || that_present_taxRegistrationCertificate) {
      if (!(this_present_taxRegistrationCertificate && that_present_taxRegistrationCertificate))
        return false;
      if (!this.taxRegistrationCertificate.equals(that.taxRegistrationCertificate))
        return false;
    }

    boolean this_present_organizationCodeCertificate = true && this.isSetOrganizationCodeCertificate();
    boolean that_present_organizationCodeCertificate = true && that.isSetOrganizationCodeCertificate();
    if (this_present_organizationCodeCertificate || that_present_organizationCodeCertificate) {
      if (!(this_present_organizationCodeCertificate && that_present_organizationCodeCertificate))
        return false;
      if (!this.organizationCodeCertificate.equals(that.organizationCodeCertificate))
        return false;
    }

    boolean this_present_businessLicenseFile = true && this.isSetBusinessLicenseFile();
    boolean that_present_businessLicenseFile = true && that.isSetBusinessLicenseFile();
    if (this_present_businessLicenseFile || that_present_businessLicenseFile) {
      if (!(this_present_businessLicenseFile && that_present_businessLicenseFile))
        return false;
      if (!this.businessLicenseFile.equals(that.businessLicenseFile))
        return false;
    }

    boolean this_present_businessLicenseNo = true && this.isSetBusinessLicenseNo();
    boolean that_present_businessLicenseNo = true && that.isSetBusinessLicenseNo();
    if (this_present_businessLicenseNo || that_present_businessLicenseNo) {
      if (!(this_present_businessLicenseNo && that_present_businessLicenseNo))
        return false;
      if (!this.businessLicenseNo.equals(that.businessLicenseNo))
        return false;
    }

    boolean this_present_objection = true && this.isSetObjection();
    boolean that_present_objection = true && that.isSetObjection();
    if (this_present_objection || that_present_objection) {
      if (!(this_present_objection && that_present_objection))
        return false;
      if (!this.objection.equals(that.objection))
        return false;
    }

    boolean this_present_retainedAmount = true && this.isSetRetainedAmount();
    boolean that_present_retainedAmount = true && that.isSetRetainedAmount();
    if (this_present_retainedAmount || that_present_retainedAmount) {
      if (!(this_present_retainedAmount && that_present_retainedAmount))
        return false;
      if (!this.retainedAmount.equals(that.retainedAmount))
        return false;
    }

    boolean this_present_unionPayProvinceCode = true && this.isSetUnionPayProvinceCode();
    boolean that_present_unionPayProvinceCode = true && that.isSetUnionPayProvinceCode();
    if (this_present_unionPayProvinceCode || that_present_unionPayProvinceCode) {
      if (!(this_present_unionPayProvinceCode && that_present_unionPayProvinceCode))
        return false;
      if (!this.unionPayProvinceCode.equals(that.unionPayProvinceCode))
        return false;
    }

    boolean this_present_unionPayProvinceName = true && this.isSetUnionPayProvinceName();
    boolean that_present_unionPayProvinceName = true && that.isSetUnionPayProvinceName();
    if (this_present_unionPayProvinceName || that_present_unionPayProvinceName) {
      if (!(this_present_unionPayProvinceName && that_present_unionPayProvinceName))
        return false;
      if (!this.unionPayProvinceName.equals(that.unionPayProvinceName))
        return false;
    }

    boolean this_present_unionPayCityCode = true && this.isSetUnionPayCityCode();
    boolean that_present_unionPayCityCode = true && that.isSetUnionPayCityCode();
    if (this_present_unionPayCityCode || that_present_unionPayCityCode) {
      if (!(this_present_unionPayCityCode && that_present_unionPayCityCode))
        return false;
      if (!this.unionPayCityCode.equals(that.unionPayCityCode))
        return false;
    }

    boolean this_present_unionPayCityName = true && this.isSetUnionPayCityName();
    boolean that_present_unionPayCityName = true && that.isSetUnionPayCityName();
    if (this_present_unionPayCityName || that_present_unionPayCityName) {
      if (!(this_present_unionPayCityName && that_present_unionPayCityName))
        return false;
      if (!this.unionPayCityName.equals(that.unionPayCityName))
        return false;
    }

    boolean this_present_mccType = true && this.isSetMccType();
    boolean that_present_mccType = true && that.isSetMccType();
    if (this_present_mccType || that_present_mccType) {
      if (!(this_present_mccType && that_present_mccType))
        return false;
      if (!this.mccType.equals(that.mccType))
        return false;
    }

    boolean this_present_mccServer = true && this.isSetMccServer();
    boolean that_present_mccServer = true && that.isSetMccServer();
    if (this_present_mccServer || that_present_mccServer) {
      if (!(this_present_mccServer && that_present_mccServer))
        return false;
      if (!this.mccServer.equals(that.mccServer))
        return false;
    }

    boolean this_present_mccDetail = true && this.isSetMccDetail();
    boolean that_present_mccDetail = true && that.isSetMccDetail();
    if (this_present_mccDetail || that_present_mccDetail) {
      if (!(this_present_mccDetail && that_present_mccDetail))
        return false;
      if (!this.mccDetail.equals(that.mccDetail))
        return false;
    }

    boolean this_present_industryCategory = true && this.isSetIndustryCategory();
    boolean that_present_industryCategory = true && that.isSetIndustryCategory();
    if (this_present_industryCategory || that_present_industryCategory) {
      if (!(this_present_industryCategory && that_present_industryCategory))
        return false;
      if (!this.industryCategory.equals(that.industryCategory))
        return false;
    }

    boolean this_present_lastLoginDate = true && this.isSetLastLoginDate();
    boolean that_present_lastLoginDate = true && that.isSetLastLoginDate();
    if (this_present_lastLoginDate || that_present_lastLoginDate) {
      if (!(this_present_lastLoginDate && that_present_lastLoginDate))
        return false;
      if (!this.lastLoginDate.equals(that.lastLoginDate))
        return false;
    }

    boolean this_present_contactorCertificateFront = true && this.isSetContactorCertificateFront();
    boolean that_present_contactorCertificateFront = true && that.isSetContactorCertificateFront();
    if (this_present_contactorCertificateFront || that_present_contactorCertificateFront) {
      if (!(this_present_contactorCertificateFront && that_present_contactorCertificateFront))
        return false;
      if (!this.contactorCertificateFront.equals(that.contactorCertificateFront))
        return false;
    }

    boolean this_present_contactorCertificateBack = true && this.isSetContactorCertificateBack();
    boolean that_present_contactorCertificateBack = true && that.isSetContactorCertificateBack();
    if (this_present_contactorCertificateBack || that_present_contactorCertificateBack) {
      if (!(this_present_contactorCertificateBack && that_present_contactorCertificateBack))
        return false;
      if (!this.contactorCertificateBack.equals(that.contactorCertificateBack))
        return false;
    }

    boolean this_present_shortName = true && this.isSetShortName();
    boolean that_present_shortName = true && that.isSetShortName();
    if (this_present_shortName || that_present_shortName) {
      if (!(this_present_shortName && that_present_shortName))
        return false;
      if (!this.shortName.equals(that.shortName))
        return false;
    }

    boolean this_present_authorizationLetter = true && this.isSetAuthorizationLetter();
    boolean that_present_authorizationLetter = true && that.isSetAuthorizationLetter();
    if (this_present_authorizationLetter || that_present_authorizationLetter) {
      if (!(this_present_authorizationLetter && that_present_authorizationLetter))
        return false;
      if (!this.authorizationLetter.equals(that.authorizationLetter))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userId = true && (isSetUserId());
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_email = true && (isSetEmail());
    list.add(present_email);
    if (present_email)
      list.add(email);

    boolean present_companyName = true && (isSetCompanyName());
    list.add(present_companyName);
    if (present_companyName)
      list.add(companyName);

    boolean present_legalRepresentative = true && (isSetLegalRepresentative());
    list.add(present_legalRepresentative);
    if (present_legalRepresentative)
      list.add(legalRepresentative);

    boolean present_companyPhone = true && (isSetCompanyPhone());
    list.add(present_companyPhone);
    if (present_companyPhone)
      list.add(companyPhone);

    boolean present_legalMobile = true && (isSetLegalMobile());
    list.add(present_legalMobile);
    if (present_legalMobile)
      list.add(legalMobile);

    boolean present_website = true && (isSetWebsite());
    list.add(present_website);
    if (present_website)
      list.add(website);

    boolean present_businessAddress = true && (isSetBusinessAddress());
    list.add(present_businessAddress);
    if (present_businessAddress)
      list.add(businessAddress);

    boolean present_contryCode = true && (isSetContryCode());
    list.add(present_contryCode);
    if (present_contryCode)
      list.add(contryCode);

    boolean present_contryName = true && (isSetContryName());
    list.add(present_contryName);
    if (present_contryName)
      list.add(contryName);

    boolean present_provinceCode = true && (isSetProvinceCode());
    list.add(present_provinceCode);
    if (present_provinceCode)
      list.add(provinceCode);

    boolean present_provinceName = true && (isSetProvinceName());
    list.add(present_provinceName);
    if (present_provinceName)
      list.add(provinceName);

    boolean present_cityCode = true && (isSetCityCode());
    list.add(present_cityCode);
    if (present_cityCode)
      list.add(cityCode);

    boolean present_cityName = true && (isSetCityName());
    list.add(present_cityName);
    if (present_cityName)
      list.add(cityName);

    boolean present_countyCode = true && (isSetCountyCode());
    list.add(present_countyCode);
    if (present_countyCode)
      list.add(countyCode);

    boolean present_countyName = true && (isSetCountyName());
    list.add(present_countyName);
    if (present_countyName)
      list.add(countyName);

    boolean present_contactAddress = true && (isSetContactAddress());
    list.add(present_contactAddress);
    if (present_contactAddress)
      list.add(contactAddress);

    boolean present_contactor = true && (isSetContactor());
    list.add(present_contactor);
    if (present_contactor)
      list.add(contactor);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_level = true && (isSetLevel());
    list.add(present_level);
    if (present_level)
      list.add(level);

    boolean present_chargeType = true && (isSetChargeType());
    list.add(present_chargeType);
    if (present_chargeType)
      list.add(chargeType);

    boolean present_requestWays = true && (isSetRequestWays());
    list.add(present_requestWays);
    if (present_requestWays)
      list.add(requestWays);

    boolean present_requestVersion = true && (isSetRequestVersion());
    list.add(present_requestVersion);
    if (present_requestVersion)
      list.add(requestVersion);

    boolean present_allowedIps = true && (isSetAllowedIps());
    list.add(present_allowedIps);
    if (present_allowedIps)
      list.add(allowedIps);

    boolean present_signedType = true && (isSetSignedType());
    list.add(present_signedType);
    if (present_signedType)
      list.add(signedType);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_opAuditTime = true && (isSetOpAuditTime());
    list.add(present_opAuditTime);
    if (present_opAuditTime)
      list.add(opAuditTime);

    boolean present_opAuditor = true && (isSetOpAuditor());
    list.add(present_opAuditor);
    if (present_opAuditor)
      list.add(opAuditor);

    boolean present_rcAuditStatus = true && (isSetRcAuditStatus());
    list.add(present_rcAuditStatus);
    if (present_rcAuditStatus)
      list.add(rcAuditStatus);

    boolean present_rcAuditTime = true && (isSetRcAuditTime());
    list.add(present_rcAuditTime);
    if (present_rcAuditTime)
      list.add(rcAuditTime);

    boolean present_rcAuditor = true && (isSetRcAuditor());
    list.add(present_rcAuditor);
    if (present_rcAuditor)
      list.add(rcAuditor);

    boolean present_legalAuditStatus = true && (isSetLegalAuditStatus());
    list.add(present_legalAuditStatus);
    if (present_legalAuditStatus)
      list.add(legalAuditStatus);

    boolean present_legalAuditTime = true && (isSetLegalAuditTime());
    list.add(present_legalAuditTime);
    if (present_legalAuditTime)
      list.add(legalAuditTime);

    boolean present_legalAuditor = true && (isSetLegalAuditor());
    list.add(present_legalAuditor);
    if (present_legalAuditor)
      list.add(legalAuditor);

    boolean present_salesId = true && (isSetSalesId());
    list.add(present_salesId);
    if (present_salesId)
      list.add(salesId);

    boolean present_inchargerId = true && (isSetInchargerId());
    list.add(present_inchargerId);
    if (present_inchargerId)
      list.add(inchargerId);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_welcomeMessage = true && (isSetWelcomeMessage());
    list.add(present_welcomeMessage);
    if (present_welcomeMessage)
      list.add(welcomeMessage);

    boolean present_certificateType = true && (isSetCertificateType());
    list.add(present_certificateType);
    if (present_certificateType)
      list.add(certificateType);

    boolean present_businessLicenseEndTime = true && (isSetBusinessLicenseEndTime());
    list.add(present_businessLicenseEndTime);
    if (present_businessLicenseEndTime)
      list.add(businessLicenseEndTime);

    boolean present_organizationCode = true && (isSetOrganizationCode());
    list.add(present_organizationCode);
    if (present_organizationCode)
      list.add(organizationCode);

    boolean present_taxRegistrationCertificateNo = true && (isSetTaxRegistrationCertificateNo());
    list.add(present_taxRegistrationCertificateNo);
    if (present_taxRegistrationCertificateNo)
      list.add(taxRegistrationCertificateNo);

    boolean present_businessScope = true && (isSetBusinessScope());
    list.add(present_businessScope);
    if (present_businessScope)
      list.add(businessScope);

    boolean present_legalIdcard = true && (isSetLegalIdcard());
    list.add(present_legalIdcard);
    if (present_legalIdcard)
      list.add(legalIdcard);

    boolean present_legalCertificateEndTime = true && (isSetLegalCertificateEndTime());
    list.add(present_legalCertificateEndTime);
    if (present_legalCertificateEndTime)
      list.add(legalCertificateEndTime);

    boolean present_contactorIdcardNo = true && (isSetContactorIdcardNo());
    list.add(present_contactorIdcardNo);
    if (present_contactorIdcardNo)
      list.add(contactorIdcardNo);

    boolean present_contactorCertificateEndTime = true && (isSetContactorCertificateEndTime());
    list.add(present_contactorCertificateEndTime);
    if (present_contactorCertificateEndTime)
      list.add(contactorCertificateEndTime);

    boolean present_contactorPhone = true && (isSetContactorPhone());
    list.add(present_contactorPhone);
    if (present_contactorPhone)
      list.add(contactorPhone);

    boolean present_ipcNo = true && (isSetIpcNo());
    list.add(present_ipcNo);
    if (present_ipcNo)
      list.add(ipcNo);

    boolean present_permitsAccounts = true && (isSetPermitsAccounts());
    list.add(present_permitsAccounts);
    if (present_permitsAccounts)
      list.add(permitsAccounts);

    boolean present_legalCertificateFront = true && (isSetLegalCertificateFront());
    list.add(present_legalCertificateFront);
    if (present_legalCertificateFront)
      list.add(legalCertificateFront);

    boolean present_legalCertificateBack = true && (isSetLegalCertificateBack());
    list.add(present_legalCertificateBack);
    if (present_legalCertificateBack)
      list.add(legalCertificateBack);

    boolean present_taxRegistrationCertificate = true && (isSetTaxRegistrationCertificate());
    list.add(present_taxRegistrationCertificate);
    if (present_taxRegistrationCertificate)
      list.add(taxRegistrationCertificate);

    boolean present_organizationCodeCertificate = true && (isSetOrganizationCodeCertificate());
    list.add(present_organizationCodeCertificate);
    if (present_organizationCodeCertificate)
      list.add(organizationCodeCertificate);

    boolean present_businessLicenseFile = true && (isSetBusinessLicenseFile());
    list.add(present_businessLicenseFile);
    if (present_businessLicenseFile)
      list.add(businessLicenseFile);

    boolean present_businessLicenseNo = true && (isSetBusinessLicenseNo());
    list.add(present_businessLicenseNo);
    if (present_businessLicenseNo)
      list.add(businessLicenseNo);

    boolean present_objection = true && (isSetObjection());
    list.add(present_objection);
    if (present_objection)
      list.add(objection);

    boolean present_retainedAmount = true && (isSetRetainedAmount());
    list.add(present_retainedAmount);
    if (present_retainedAmount)
      list.add(retainedAmount);

    boolean present_unionPayProvinceCode = true && (isSetUnionPayProvinceCode());
    list.add(present_unionPayProvinceCode);
    if (present_unionPayProvinceCode)
      list.add(unionPayProvinceCode);

    boolean present_unionPayProvinceName = true && (isSetUnionPayProvinceName());
    list.add(present_unionPayProvinceName);
    if (present_unionPayProvinceName)
      list.add(unionPayProvinceName);

    boolean present_unionPayCityCode = true && (isSetUnionPayCityCode());
    list.add(present_unionPayCityCode);
    if (present_unionPayCityCode)
      list.add(unionPayCityCode);

    boolean present_unionPayCityName = true && (isSetUnionPayCityName());
    list.add(present_unionPayCityName);
    if (present_unionPayCityName)
      list.add(unionPayCityName);

    boolean present_mccType = true && (isSetMccType());
    list.add(present_mccType);
    if (present_mccType)
      list.add(mccType);

    boolean present_mccServer = true && (isSetMccServer());
    list.add(present_mccServer);
    if (present_mccServer)
      list.add(mccServer);

    boolean present_mccDetail = true && (isSetMccDetail());
    list.add(present_mccDetail);
    if (present_mccDetail)
      list.add(mccDetail);

    boolean present_industryCategory = true && (isSetIndustryCategory());
    list.add(present_industryCategory);
    if (present_industryCategory)
      list.add(industryCategory);

    boolean present_lastLoginDate = true && (isSetLastLoginDate());
    list.add(present_lastLoginDate);
    if (present_lastLoginDate)
      list.add(lastLoginDate);

    boolean present_contactorCertificateFront = true && (isSetContactorCertificateFront());
    list.add(present_contactorCertificateFront);
    if (present_contactorCertificateFront)
      list.add(contactorCertificateFront);

    boolean present_contactorCertificateBack = true && (isSetContactorCertificateBack());
    list.add(present_contactorCertificateBack);
    if (present_contactorCertificateBack)
      list.add(contactorCertificateBack);

    boolean present_shortName = true && (isSetShortName());
    list.add(present_shortName);
    if (present_shortName)
      list.add(shortName);

    boolean present_authorizationLetter = true && (isSetAuthorizationLetter());
    list.add(present_authorizationLetter);
    if (present_authorizationLetter)
      list.add(authorizationLetter);

    return list.hashCode();
  }

  @Override
  public int compareTo(MerchantThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyName()).compareTo(other.isSetCompanyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyName, other.companyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegalRepresentative()).compareTo(other.isSetLegalRepresentative());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegalRepresentative()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legalRepresentative, other.legalRepresentative);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyPhone()).compareTo(other.isSetCompanyPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyPhone, other.companyPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegalMobile()).compareTo(other.isSetLegalMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegalMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legalMobile, other.legalMobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWebsite()).compareTo(other.isSetWebsite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebsite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.website, other.website);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessAddress()).compareTo(other.isSetBusinessAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessAddress, other.businessAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContryCode()).compareTo(other.isSetContryCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContryCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contryCode, other.contryCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContryName()).compareTo(other.isSetContryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contryName, other.contryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceCode()).compareTo(other.isSetProvinceCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provinceCode, other.provinceCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceName()).compareTo(other.isSetProvinceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provinceName, other.provinceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityCode()).compareTo(other.isSetCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityCode, other.cityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityName()).compareTo(other.isSetCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, other.cityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountyCode()).compareTo(other.isSetCountyCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountyCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countyCode, other.countyCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountyName()).compareTo(other.isSetCountyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countyName, other.countyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactAddress()).compareTo(other.isSetContactAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactAddress, other.contactAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactor()).compareTo(other.isSetContactor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactor, other.contactor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeType()).compareTo(other.isSetChargeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeType, other.chargeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestWays()).compareTo(other.isSetRequestWays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestWays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestWays, other.requestWays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestVersion()).compareTo(other.isSetRequestVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestVersion, other.requestVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowedIps()).compareTo(other.isSetAllowedIps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowedIps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowedIps, other.allowedIps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignedType()).compareTo(other.isSetSignedType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignedType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signedType, other.signedType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpAuditTime()).compareTo(other.isSetOpAuditTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpAuditTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opAuditTime, other.opAuditTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpAuditor()).compareTo(other.isSetOpAuditor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpAuditor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opAuditor, other.opAuditor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRcAuditStatus()).compareTo(other.isSetRcAuditStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRcAuditStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rcAuditStatus, other.rcAuditStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRcAuditTime()).compareTo(other.isSetRcAuditTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRcAuditTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rcAuditTime, other.rcAuditTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRcAuditor()).compareTo(other.isSetRcAuditor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRcAuditor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rcAuditor, other.rcAuditor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegalAuditStatus()).compareTo(other.isSetLegalAuditStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegalAuditStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legalAuditStatus, other.legalAuditStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegalAuditTime()).compareTo(other.isSetLegalAuditTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegalAuditTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legalAuditTime, other.legalAuditTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegalAuditor()).compareTo(other.isSetLegalAuditor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegalAuditor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legalAuditor, other.legalAuditor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalesId()).compareTo(other.isSetSalesId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalesId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salesId, other.salesId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInchargerId()).compareTo(other.isSetInchargerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInchargerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inchargerId, other.inchargerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWelcomeMessage()).compareTo(other.isSetWelcomeMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWelcomeMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.welcomeMessage, other.welcomeMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertificateType()).compareTo(other.isSetCertificateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertificateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certificateType, other.certificateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessLicenseEndTime()).compareTo(other.isSetBusinessLicenseEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessLicenseEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessLicenseEndTime, other.businessLicenseEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganizationCode()).compareTo(other.isSetOrganizationCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganizationCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organizationCode, other.organizationCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaxRegistrationCertificateNo()).compareTo(other.isSetTaxRegistrationCertificateNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaxRegistrationCertificateNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taxRegistrationCertificateNo, other.taxRegistrationCertificateNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessScope()).compareTo(other.isSetBusinessScope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessScope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessScope, other.businessScope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegalIdcard()).compareTo(other.isSetLegalIdcard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegalIdcard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legalIdcard, other.legalIdcard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegalCertificateEndTime()).compareTo(other.isSetLegalCertificateEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegalCertificateEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legalCertificateEndTime, other.legalCertificateEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactorIdcardNo()).compareTo(other.isSetContactorIdcardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactorIdcardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactorIdcardNo, other.contactorIdcardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactorCertificateEndTime()).compareTo(other.isSetContactorCertificateEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactorCertificateEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactorCertificateEndTime, other.contactorCertificateEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactorPhone()).compareTo(other.isSetContactorPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactorPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactorPhone, other.contactorPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpcNo()).compareTo(other.isSetIpcNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpcNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipcNo, other.ipcNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPermitsAccounts()).compareTo(other.isSetPermitsAccounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermitsAccounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permitsAccounts, other.permitsAccounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegalCertificateFront()).compareTo(other.isSetLegalCertificateFront());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegalCertificateFront()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legalCertificateFront, other.legalCertificateFront);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegalCertificateBack()).compareTo(other.isSetLegalCertificateBack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegalCertificateBack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legalCertificateBack, other.legalCertificateBack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaxRegistrationCertificate()).compareTo(other.isSetTaxRegistrationCertificate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaxRegistrationCertificate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taxRegistrationCertificate, other.taxRegistrationCertificate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganizationCodeCertificate()).compareTo(other.isSetOrganizationCodeCertificate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganizationCodeCertificate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organizationCodeCertificate, other.organizationCodeCertificate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessLicenseFile()).compareTo(other.isSetBusinessLicenseFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessLicenseFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessLicenseFile, other.businessLicenseFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessLicenseNo()).compareTo(other.isSetBusinessLicenseNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessLicenseNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessLicenseNo, other.businessLicenseNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObjection()).compareTo(other.isSetObjection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objection, other.objection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetainedAmount()).compareTo(other.isSetRetainedAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetainedAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retainedAmount, other.retainedAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnionPayProvinceCode()).compareTo(other.isSetUnionPayProvinceCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionPayProvinceCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionPayProvinceCode, other.unionPayProvinceCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnionPayProvinceName()).compareTo(other.isSetUnionPayProvinceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionPayProvinceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionPayProvinceName, other.unionPayProvinceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnionPayCityCode()).compareTo(other.isSetUnionPayCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionPayCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionPayCityCode, other.unionPayCityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnionPayCityName()).compareTo(other.isSetUnionPayCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionPayCityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionPayCityName, other.unionPayCityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMccType()).compareTo(other.isSetMccType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMccType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mccType, other.mccType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMccServer()).compareTo(other.isSetMccServer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMccServer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mccServer, other.mccServer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMccDetail()).compareTo(other.isSetMccDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMccDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mccDetail, other.mccDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndustryCategory()).compareTo(other.isSetIndustryCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndustryCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.industryCategory, other.industryCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLoginDate()).compareTo(other.isSetLastLoginDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginDate, other.lastLoginDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactorCertificateFront()).compareTo(other.isSetContactorCertificateFront());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactorCertificateFront()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactorCertificateFront, other.contactorCertificateFront);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactorCertificateBack()).compareTo(other.isSetContactorCertificateBack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactorCertificateBack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactorCertificateBack, other.contactorCertificateBack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortName()).compareTo(other.isSetShortName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortName, other.shortName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorizationLetter()).compareTo(other.isSetAuthorizationLetter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorizationLetter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorizationLetter, other.authorizationLetter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MerchantThrift(");
    boolean first = true;

    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("companyName:");
    if (this.companyName == null) {
      sb.append("null");
    } else {
      sb.append(this.companyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("legalRepresentative:");
    if (this.legalRepresentative == null) {
      sb.append("null");
    } else {
      sb.append(this.legalRepresentative);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("companyPhone:");
    if (this.companyPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.companyPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("legalMobile:");
    if (this.legalMobile == null) {
      sb.append("null");
    } else {
      sb.append(this.legalMobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("website:");
    if (this.website == null) {
      sb.append("null");
    } else {
      sb.append(this.website);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessAddress:");
    if (this.businessAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.businessAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contryCode:");
    if (this.contryCode == null) {
      sb.append("null");
    } else {
      sb.append(this.contryCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contryName:");
    if (this.contryName == null) {
      sb.append("null");
    } else {
      sb.append(this.contryName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceCode:");
    if (this.provinceCode == null) {
      sb.append("null");
    } else {
      sb.append(this.provinceCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceName:");
    if (this.provinceName == null) {
      sb.append("null");
    } else {
      sb.append(this.provinceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityCode:");
    if (this.cityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.cityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityName:");
    if (this.cityName == null) {
      sb.append("null");
    } else {
      sb.append(this.cityName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("countyCode:");
    if (this.countyCode == null) {
      sb.append("null");
    } else {
      sb.append(this.countyCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("countyName:");
    if (this.countyName == null) {
      sb.append("null");
    } else {
      sb.append(this.countyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactAddress:");
    if (this.contactAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.contactAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactor:");
    if (this.contactor == null) {
      sb.append("null");
    } else {
      sb.append(this.contactor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    if (this.level == null) {
      sb.append("null");
    } else {
      sb.append(this.level);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeType:");
    if (this.chargeType == null) {
      sb.append("null");
    } else {
      sb.append(this.chargeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestWays:");
    if (this.requestWays == null) {
      sb.append("null");
    } else {
      sb.append(this.requestWays);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestVersion:");
    if (this.requestVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.requestVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowedIps:");
    if (this.allowedIps == null) {
      sb.append("null");
    } else {
      sb.append(this.allowedIps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signedType:");
    if (this.signedType == null) {
      sb.append("null");
    } else {
      sb.append(this.signedType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opAuditTime:");
    if (this.opAuditTime == null) {
      sb.append("null");
    } else {
      sb.append(this.opAuditTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opAuditor:");
    if (this.opAuditor == null) {
      sb.append("null");
    } else {
      sb.append(this.opAuditor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rcAuditStatus:");
    if (this.rcAuditStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.rcAuditStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rcAuditTime:");
    if (this.rcAuditTime == null) {
      sb.append("null");
    } else {
      sb.append(this.rcAuditTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rcAuditor:");
    if (this.rcAuditor == null) {
      sb.append("null");
    } else {
      sb.append(this.rcAuditor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("legalAuditStatus:");
    if (this.legalAuditStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.legalAuditStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("legalAuditTime:");
    if (this.legalAuditTime == null) {
      sb.append("null");
    } else {
      sb.append(this.legalAuditTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("legalAuditor:");
    if (this.legalAuditor == null) {
      sb.append("null");
    } else {
      sb.append(this.legalAuditor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("salesId:");
    if (this.salesId == null) {
      sb.append("null");
    } else {
      sb.append(this.salesId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inchargerId:");
    if (this.inchargerId == null) {
      sb.append("null");
    } else {
      sb.append(this.inchargerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("welcomeMessage:");
    if (this.welcomeMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.welcomeMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certificateType:");
    if (this.certificateType == null) {
      sb.append("null");
    } else {
      sb.append(this.certificateType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessLicenseEndTime:");
    if (this.businessLicenseEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.businessLicenseEndTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("organizationCode:");
    if (this.organizationCode == null) {
      sb.append("null");
    } else {
      sb.append(this.organizationCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taxRegistrationCertificateNo:");
    if (this.taxRegistrationCertificateNo == null) {
      sb.append("null");
    } else {
      sb.append(this.taxRegistrationCertificateNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessScope:");
    if (this.businessScope == null) {
      sb.append("null");
    } else {
      sb.append(this.businessScope);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("legalIdcard:");
    if (this.legalIdcard == null) {
      sb.append("null");
    } else {
      sb.append(this.legalIdcard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("legalCertificateEndTime:");
    if (this.legalCertificateEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.legalCertificateEndTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactorIdcardNo:");
    if (this.contactorIdcardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.contactorIdcardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactorCertificateEndTime:");
    if (this.contactorCertificateEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.contactorCertificateEndTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactorPhone:");
    if (this.contactorPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.contactorPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipcNo:");
    if (this.ipcNo == null) {
      sb.append("null");
    } else {
      sb.append(this.ipcNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("permitsAccounts:");
    if (this.permitsAccounts == null) {
      sb.append("null");
    } else {
      sb.append(this.permitsAccounts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("legalCertificateFront:");
    if (this.legalCertificateFront == null) {
      sb.append("null");
    } else {
      sb.append(this.legalCertificateFront);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("legalCertificateBack:");
    if (this.legalCertificateBack == null) {
      sb.append("null");
    } else {
      sb.append(this.legalCertificateBack);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taxRegistrationCertificate:");
    if (this.taxRegistrationCertificate == null) {
      sb.append("null");
    } else {
      sb.append(this.taxRegistrationCertificate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("organizationCodeCertificate:");
    if (this.organizationCodeCertificate == null) {
      sb.append("null");
    } else {
      sb.append(this.organizationCodeCertificate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessLicenseFile:");
    if (this.businessLicenseFile == null) {
      sb.append("null");
    } else {
      sb.append(this.businessLicenseFile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessLicenseNo:");
    if (this.businessLicenseNo == null) {
      sb.append("null");
    } else {
      sb.append(this.businessLicenseNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("objection:");
    if (this.objection == null) {
      sb.append("null");
    } else {
      sb.append(this.objection);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("retainedAmount:");
    if (this.retainedAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.retainedAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unionPayProvinceCode:");
    if (this.unionPayProvinceCode == null) {
      sb.append("null");
    } else {
      sb.append(this.unionPayProvinceCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unionPayProvinceName:");
    if (this.unionPayProvinceName == null) {
      sb.append("null");
    } else {
      sb.append(this.unionPayProvinceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unionPayCityCode:");
    if (this.unionPayCityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.unionPayCityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unionPayCityName:");
    if (this.unionPayCityName == null) {
      sb.append("null");
    } else {
      sb.append(this.unionPayCityName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mccType:");
    if (this.mccType == null) {
      sb.append("null");
    } else {
      sb.append(this.mccType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mccServer:");
    if (this.mccServer == null) {
      sb.append("null");
    } else {
      sb.append(this.mccServer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mccDetail:");
    if (this.mccDetail == null) {
      sb.append("null");
    } else {
      sb.append(this.mccDetail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("industryCategory:");
    if (this.industryCategory == null) {
      sb.append("null");
    } else {
      sb.append(this.industryCategory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastLoginDate:");
    if (this.lastLoginDate == null) {
      sb.append("null");
    } else {
      sb.append(this.lastLoginDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactorCertificateFront:");
    if (this.contactorCertificateFront == null) {
      sb.append("null");
    } else {
      sb.append(this.contactorCertificateFront);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactorCertificateBack:");
    if (this.contactorCertificateBack == null) {
      sb.append("null");
    } else {
      sb.append(this.contactorCertificateBack);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortName:");
    if (this.shortName == null) {
      sb.append("null");
    } else {
      sb.append(this.shortName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorizationLetter:");
    if (this.authorizationLetter == null) {
      sb.append("null");
    } else {
      sb.append(this.authorizationLetter);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MerchantThriftStandardSchemeFactory implements SchemeFactory {
    public MerchantThriftStandardScheme getScheme() {
      return new MerchantThriftStandardScheme();
    }
  }

  private static class MerchantThriftStandardScheme extends StandardScheme<MerchantThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MerchantThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPANY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyName = iprot.readString();
              struct.setCompanyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEGAL_REPRESENTATIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legalRepresentative = iprot.readString();
              struct.setLegalRepresentativeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMPANY_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyPhone = iprot.readString();
              struct.setCompanyPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LEGAL_MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legalMobile = iprot.readString();
              struct.setLegalMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WEBSITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.website = iprot.readString();
              struct.setWebsiteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BUSINESS_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessAddress = iprot.readString();
              struct.setBusinessAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CONTRY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contryCode = iprot.readString();
              struct.setContryCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CONTRY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contryName = iprot.readString();
              struct.setContryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PROVINCE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.provinceCode = iprot.readString();
              struct.setProvinceCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PROVINCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.provinceName = iprot.readString();
              struct.setProvinceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityCode = iprot.readString();
              struct.setCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityName = iprot.readString();
              struct.setCityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // COUNTY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countyCode = iprot.readString();
              struct.setCountyCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // COUNTY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countyName = iprot.readString();
              struct.setCountyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CONTACT_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactAddress = iprot.readString();
              struct.setContactAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CONTACTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactor = iprot.readString();
              struct.setContactorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.level = iprot.readString();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CHARGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chargeType = iprot.readString();
              struct.setChargeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // REQUEST_WAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestWays = iprot.readString();
              struct.setRequestWaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // REQUEST_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestVersion = iprot.readString();
              struct.setRequestVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ALLOWED_IPS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.allowedIps = iprot.readString();
              struct.setAllowedIpsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // SIGNED_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signedType = iprot.readString();
              struct.setSignedTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // OP_AUDIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opAuditTime = iprot.readString();
              struct.setOpAuditTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // OP_AUDITOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opAuditor = iprot.readString();
              struct.setOpAuditorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // RC_AUDIT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rcAuditStatus = iprot.readString();
              struct.setRcAuditStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // RC_AUDIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rcAuditTime = iprot.readString();
              struct.setRcAuditTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // RC_AUDITOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rcAuditor = iprot.readString();
              struct.setRcAuditorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // LEGAL_AUDIT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legalAuditStatus = iprot.readString();
              struct.setLegalAuditStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // LEGAL_AUDIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legalAuditTime = iprot.readString();
              struct.setLegalAuditTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // LEGAL_AUDITOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legalAuditor = iprot.readString();
              struct.setLegalAuditorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // SALES_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.salesId = iprot.readString();
              struct.setSalesIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // INCHARGER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inchargerId = iprot.readString();
              struct.setInchargerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // WELCOME_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.welcomeMessage = iprot.readString();
              struct.setWelcomeMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // CERTIFICATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certificateType = iprot.readString();
              struct.setCertificateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // BUSINESS_LICENSE_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessLicenseEndTime = iprot.readString();
              struct.setBusinessLicenseEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // ORGANIZATION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.organizationCode = iprot.readString();
              struct.setOrganizationCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // TAX_REGISTRATION_CERTIFICATE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taxRegistrationCertificateNo = iprot.readString();
              struct.setTaxRegistrationCertificateNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // BUSINESS_SCOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessScope = iprot.readString();
              struct.setBusinessScopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // LEGAL_IDCARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legalIdcard = iprot.readString();
              struct.setLegalIdcardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // LEGAL_CERTIFICATE_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legalCertificateEndTime = iprot.readString();
              struct.setLegalCertificateEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // CONTACTOR_IDCARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactorIdcardNo = iprot.readString();
              struct.setContactorIdcardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // CONTACTOR_CERTIFICATE_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactorCertificateEndTime = iprot.readString();
              struct.setContactorCertificateEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // CONTACTOR_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactorPhone = iprot.readString();
              struct.setContactorPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // IPC_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipcNo = iprot.readString();
              struct.setIpcNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // PERMITS_ACCOUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.permitsAccounts = iprot.readString();
              struct.setPermitsAccountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // LEGAL_CERTIFICATE_FRONT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legalCertificateFront = iprot.readString();
              struct.setLegalCertificateFrontIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // LEGAL_CERTIFICATE_BACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legalCertificateBack = iprot.readString();
              struct.setLegalCertificateBackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // TAX_REGISTRATION_CERTIFICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taxRegistrationCertificate = iprot.readString();
              struct.setTaxRegistrationCertificateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // ORGANIZATION_CODE_CERTIFICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.organizationCodeCertificate = iprot.readString();
              struct.setOrganizationCodeCertificateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // BUSINESS_LICENSE_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessLicenseFile = iprot.readString();
              struct.setBusinessLicenseFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // BUSINESS_LICENSE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessLicenseNo = iprot.readString();
              struct.setBusinessLicenseNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // OBJECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.objection = iprot.readString();
              struct.setObjectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // RETAINED_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.retainedAmount = iprot.readString();
              struct.setRetainedAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // UNION_PAY_PROVINCE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unionPayProvinceCode = iprot.readString();
              struct.setUnionPayProvinceCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // UNION_PAY_PROVINCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unionPayProvinceName = iprot.readString();
              struct.setUnionPayProvinceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // UNION_PAY_CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unionPayCityCode = iprot.readString();
              struct.setUnionPayCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // UNION_PAY_CITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unionPayCityName = iprot.readString();
              struct.setUnionPayCityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 65: // MCC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mccType = iprot.readString();
              struct.setMccTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 66: // MCC_SERVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mccServer = iprot.readString();
              struct.setMccServerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 67: // MCC_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mccDetail = iprot.readString();
              struct.setMccDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 68: // INDUSTRY_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.industryCategory = iprot.readString();
              struct.setIndustryCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 69: // LAST_LOGIN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLoginDate = iprot.readString();
              struct.setLastLoginDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // CONTACTOR_CERTIFICATE_FRONT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactorCertificateFront = iprot.readString();
              struct.setContactorCertificateFrontIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // CONTACTOR_CERTIFICATE_BACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactorCertificateBack = iprot.readString();
              struct.setContactorCertificateBackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 72: // SHORT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shortName = iprot.readString();
              struct.setShortNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 73: // AUTHORIZATION_LETTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorizationLetter = iprot.readString();
              struct.setAuthorizationLetterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MerchantThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.companyName != null) {
        oprot.writeFieldBegin(COMPANY_NAME_FIELD_DESC);
        oprot.writeString(struct.companyName);
        oprot.writeFieldEnd();
      }
      if (struct.legalRepresentative != null) {
        oprot.writeFieldBegin(LEGAL_REPRESENTATIVE_FIELD_DESC);
        oprot.writeString(struct.legalRepresentative);
        oprot.writeFieldEnd();
      }
      if (struct.companyPhone != null) {
        oprot.writeFieldBegin(COMPANY_PHONE_FIELD_DESC);
        oprot.writeString(struct.companyPhone);
        oprot.writeFieldEnd();
      }
      if (struct.legalMobile != null) {
        oprot.writeFieldBegin(LEGAL_MOBILE_FIELD_DESC);
        oprot.writeString(struct.legalMobile);
        oprot.writeFieldEnd();
      }
      if (struct.website != null) {
        oprot.writeFieldBegin(WEBSITE_FIELD_DESC);
        oprot.writeString(struct.website);
        oprot.writeFieldEnd();
      }
      if (struct.businessAddress != null) {
        oprot.writeFieldBegin(BUSINESS_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.businessAddress);
        oprot.writeFieldEnd();
      }
      if (struct.contryCode != null) {
        oprot.writeFieldBegin(CONTRY_CODE_FIELD_DESC);
        oprot.writeString(struct.contryCode);
        oprot.writeFieldEnd();
      }
      if (struct.contryName != null) {
        oprot.writeFieldBegin(CONTRY_NAME_FIELD_DESC);
        oprot.writeString(struct.contryName);
        oprot.writeFieldEnd();
      }
      if (struct.provinceCode != null) {
        oprot.writeFieldBegin(PROVINCE_CODE_FIELD_DESC);
        oprot.writeString(struct.provinceCode);
        oprot.writeFieldEnd();
      }
      if (struct.provinceName != null) {
        oprot.writeFieldBegin(PROVINCE_NAME_FIELD_DESC);
        oprot.writeString(struct.provinceName);
        oprot.writeFieldEnd();
      }
      if (struct.cityCode != null) {
        oprot.writeFieldBegin(CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.cityCode);
        oprot.writeFieldEnd();
      }
      if (struct.cityName != null) {
        oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
        oprot.writeString(struct.cityName);
        oprot.writeFieldEnd();
      }
      if (struct.countyCode != null) {
        oprot.writeFieldBegin(COUNTY_CODE_FIELD_DESC);
        oprot.writeString(struct.countyCode);
        oprot.writeFieldEnd();
      }
      if (struct.countyName != null) {
        oprot.writeFieldBegin(COUNTY_NAME_FIELD_DESC);
        oprot.writeString(struct.countyName);
        oprot.writeFieldEnd();
      }
      if (struct.contactAddress != null) {
        oprot.writeFieldBegin(CONTACT_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.contactAddress);
        oprot.writeFieldEnd();
      }
      if (struct.contactor != null) {
        oprot.writeFieldBegin(CONTACTOR_FIELD_DESC);
        oprot.writeString(struct.contactor);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.level != null) {
        oprot.writeFieldBegin(LEVEL_FIELD_DESC);
        oprot.writeString(struct.level);
        oprot.writeFieldEnd();
      }
      if (struct.chargeType != null) {
        oprot.writeFieldBegin(CHARGE_TYPE_FIELD_DESC);
        oprot.writeString(struct.chargeType);
        oprot.writeFieldEnd();
      }
      if (struct.requestWays != null) {
        oprot.writeFieldBegin(REQUEST_WAYS_FIELD_DESC);
        oprot.writeString(struct.requestWays);
        oprot.writeFieldEnd();
      }
      if (struct.requestVersion != null) {
        oprot.writeFieldBegin(REQUEST_VERSION_FIELD_DESC);
        oprot.writeString(struct.requestVersion);
        oprot.writeFieldEnd();
      }
      if (struct.allowedIps != null) {
        oprot.writeFieldBegin(ALLOWED_IPS_FIELD_DESC);
        oprot.writeString(struct.allowedIps);
        oprot.writeFieldEnd();
      }
      if (struct.signedType != null) {
        oprot.writeFieldBegin(SIGNED_TYPE_FIELD_DESC);
        oprot.writeString(struct.signedType);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.opAuditTime != null) {
        oprot.writeFieldBegin(OP_AUDIT_TIME_FIELD_DESC);
        oprot.writeString(struct.opAuditTime);
        oprot.writeFieldEnd();
      }
      if (struct.opAuditor != null) {
        oprot.writeFieldBegin(OP_AUDITOR_FIELD_DESC);
        oprot.writeString(struct.opAuditor);
        oprot.writeFieldEnd();
      }
      if (struct.rcAuditStatus != null) {
        oprot.writeFieldBegin(RC_AUDIT_STATUS_FIELD_DESC);
        oprot.writeString(struct.rcAuditStatus);
        oprot.writeFieldEnd();
      }
      if (struct.rcAuditTime != null) {
        oprot.writeFieldBegin(RC_AUDIT_TIME_FIELD_DESC);
        oprot.writeString(struct.rcAuditTime);
        oprot.writeFieldEnd();
      }
      if (struct.rcAuditor != null) {
        oprot.writeFieldBegin(RC_AUDITOR_FIELD_DESC);
        oprot.writeString(struct.rcAuditor);
        oprot.writeFieldEnd();
      }
      if (struct.legalAuditStatus != null) {
        oprot.writeFieldBegin(LEGAL_AUDIT_STATUS_FIELD_DESC);
        oprot.writeString(struct.legalAuditStatus);
        oprot.writeFieldEnd();
      }
      if (struct.legalAuditTime != null) {
        oprot.writeFieldBegin(LEGAL_AUDIT_TIME_FIELD_DESC);
        oprot.writeString(struct.legalAuditTime);
        oprot.writeFieldEnd();
      }
      if (struct.legalAuditor != null) {
        oprot.writeFieldBegin(LEGAL_AUDITOR_FIELD_DESC);
        oprot.writeString(struct.legalAuditor);
        oprot.writeFieldEnd();
      }
      if (struct.salesId != null) {
        oprot.writeFieldBegin(SALES_ID_FIELD_DESC);
        oprot.writeString(struct.salesId);
        oprot.writeFieldEnd();
      }
      if (struct.inchargerId != null) {
        oprot.writeFieldBegin(INCHARGER_ID_FIELD_DESC);
        oprot.writeString(struct.inchargerId);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.welcomeMessage != null) {
        oprot.writeFieldBegin(WELCOME_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.welcomeMessage);
        oprot.writeFieldEnd();
      }
      if (struct.certificateType != null) {
        oprot.writeFieldBegin(CERTIFICATE_TYPE_FIELD_DESC);
        oprot.writeString(struct.certificateType);
        oprot.writeFieldEnd();
      }
      if (struct.businessLicenseEndTime != null) {
        oprot.writeFieldBegin(BUSINESS_LICENSE_END_TIME_FIELD_DESC);
        oprot.writeString(struct.businessLicenseEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.organizationCode != null) {
        oprot.writeFieldBegin(ORGANIZATION_CODE_FIELD_DESC);
        oprot.writeString(struct.organizationCode);
        oprot.writeFieldEnd();
      }
      if (struct.taxRegistrationCertificateNo != null) {
        oprot.writeFieldBegin(TAX_REGISTRATION_CERTIFICATE_NO_FIELD_DESC);
        oprot.writeString(struct.taxRegistrationCertificateNo);
        oprot.writeFieldEnd();
      }
      if (struct.businessScope != null) {
        oprot.writeFieldBegin(BUSINESS_SCOPE_FIELD_DESC);
        oprot.writeString(struct.businessScope);
        oprot.writeFieldEnd();
      }
      if (struct.legalIdcard != null) {
        oprot.writeFieldBegin(LEGAL_IDCARD_FIELD_DESC);
        oprot.writeString(struct.legalIdcard);
        oprot.writeFieldEnd();
      }
      if (struct.legalCertificateEndTime != null) {
        oprot.writeFieldBegin(LEGAL_CERTIFICATE_END_TIME_FIELD_DESC);
        oprot.writeString(struct.legalCertificateEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.contactorIdcardNo != null) {
        oprot.writeFieldBegin(CONTACTOR_IDCARD_NO_FIELD_DESC);
        oprot.writeString(struct.contactorIdcardNo);
        oprot.writeFieldEnd();
      }
      if (struct.contactorCertificateEndTime != null) {
        oprot.writeFieldBegin(CONTACTOR_CERTIFICATE_END_TIME_FIELD_DESC);
        oprot.writeString(struct.contactorCertificateEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.contactorPhone != null) {
        oprot.writeFieldBegin(CONTACTOR_PHONE_FIELD_DESC);
        oprot.writeString(struct.contactorPhone);
        oprot.writeFieldEnd();
      }
      if (struct.ipcNo != null) {
        oprot.writeFieldBegin(IPC_NO_FIELD_DESC);
        oprot.writeString(struct.ipcNo);
        oprot.writeFieldEnd();
      }
      if (struct.permitsAccounts != null) {
        oprot.writeFieldBegin(PERMITS_ACCOUNTS_FIELD_DESC);
        oprot.writeString(struct.permitsAccounts);
        oprot.writeFieldEnd();
      }
      if (struct.legalCertificateFront != null) {
        oprot.writeFieldBegin(LEGAL_CERTIFICATE_FRONT_FIELD_DESC);
        oprot.writeString(struct.legalCertificateFront);
        oprot.writeFieldEnd();
      }
      if (struct.legalCertificateBack != null) {
        oprot.writeFieldBegin(LEGAL_CERTIFICATE_BACK_FIELD_DESC);
        oprot.writeString(struct.legalCertificateBack);
        oprot.writeFieldEnd();
      }
      if (struct.taxRegistrationCertificate != null) {
        oprot.writeFieldBegin(TAX_REGISTRATION_CERTIFICATE_FIELD_DESC);
        oprot.writeString(struct.taxRegistrationCertificate);
        oprot.writeFieldEnd();
      }
      if (struct.organizationCodeCertificate != null) {
        oprot.writeFieldBegin(ORGANIZATION_CODE_CERTIFICATE_FIELD_DESC);
        oprot.writeString(struct.organizationCodeCertificate);
        oprot.writeFieldEnd();
      }
      if (struct.businessLicenseFile != null) {
        oprot.writeFieldBegin(BUSINESS_LICENSE_FILE_FIELD_DESC);
        oprot.writeString(struct.businessLicenseFile);
        oprot.writeFieldEnd();
      }
      if (struct.businessLicenseNo != null) {
        oprot.writeFieldBegin(BUSINESS_LICENSE_NO_FIELD_DESC);
        oprot.writeString(struct.businessLicenseNo);
        oprot.writeFieldEnd();
      }
      if (struct.objection != null) {
        oprot.writeFieldBegin(OBJECTION_FIELD_DESC);
        oprot.writeString(struct.objection);
        oprot.writeFieldEnd();
      }
      if (struct.retainedAmount != null) {
        oprot.writeFieldBegin(RETAINED_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.retainedAmount);
        oprot.writeFieldEnd();
      }
      if (struct.unionPayProvinceCode != null) {
        oprot.writeFieldBegin(UNION_PAY_PROVINCE_CODE_FIELD_DESC);
        oprot.writeString(struct.unionPayProvinceCode);
        oprot.writeFieldEnd();
      }
      if (struct.unionPayProvinceName != null) {
        oprot.writeFieldBegin(UNION_PAY_PROVINCE_NAME_FIELD_DESC);
        oprot.writeString(struct.unionPayProvinceName);
        oprot.writeFieldEnd();
      }
      if (struct.unionPayCityCode != null) {
        oprot.writeFieldBegin(UNION_PAY_CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.unionPayCityCode);
        oprot.writeFieldEnd();
      }
      if (struct.unionPayCityName != null) {
        oprot.writeFieldBegin(UNION_PAY_CITY_NAME_FIELD_DESC);
        oprot.writeString(struct.unionPayCityName);
        oprot.writeFieldEnd();
      }
      if (struct.mccType != null) {
        oprot.writeFieldBegin(MCC_TYPE_FIELD_DESC);
        oprot.writeString(struct.mccType);
        oprot.writeFieldEnd();
      }
      if (struct.mccServer != null) {
        oprot.writeFieldBegin(MCC_SERVER_FIELD_DESC);
        oprot.writeString(struct.mccServer);
        oprot.writeFieldEnd();
      }
      if (struct.mccDetail != null) {
        oprot.writeFieldBegin(MCC_DETAIL_FIELD_DESC);
        oprot.writeString(struct.mccDetail);
        oprot.writeFieldEnd();
      }
      if (struct.industryCategory != null) {
        oprot.writeFieldBegin(INDUSTRY_CATEGORY_FIELD_DESC);
        oprot.writeString(struct.industryCategory);
        oprot.writeFieldEnd();
      }
      if (struct.lastLoginDate != null) {
        oprot.writeFieldBegin(LAST_LOGIN_DATE_FIELD_DESC);
        oprot.writeString(struct.lastLoginDate);
        oprot.writeFieldEnd();
      }
      if (struct.contactorCertificateFront != null) {
        oprot.writeFieldBegin(CONTACTOR_CERTIFICATE_FRONT_FIELD_DESC);
        oprot.writeString(struct.contactorCertificateFront);
        oprot.writeFieldEnd();
      }
      if (struct.contactorCertificateBack != null) {
        oprot.writeFieldBegin(CONTACTOR_CERTIFICATE_BACK_FIELD_DESC);
        oprot.writeString(struct.contactorCertificateBack);
        oprot.writeFieldEnd();
      }
      if (struct.shortName != null) {
        oprot.writeFieldBegin(SHORT_NAME_FIELD_DESC);
        oprot.writeString(struct.shortName);
        oprot.writeFieldEnd();
      }
      if (struct.authorizationLetter != null) {
        oprot.writeFieldBegin(AUTHORIZATION_LETTER_FIELD_DESC);
        oprot.writeString(struct.authorizationLetter);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MerchantThriftTupleSchemeFactory implements SchemeFactory {
    public MerchantThriftTupleScheme getScheme() {
      return new MerchantThriftTupleScheme();
    }
  }

  private static class MerchantThriftTupleScheme extends TupleScheme<MerchantThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MerchantThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetEmail()) {
        optionals.set(2);
      }
      if (struct.isSetCompanyName()) {
        optionals.set(3);
      }
      if (struct.isSetLegalRepresentative()) {
        optionals.set(4);
      }
      if (struct.isSetCompanyPhone()) {
        optionals.set(5);
      }
      if (struct.isSetLegalMobile()) {
        optionals.set(6);
      }
      if (struct.isSetWebsite()) {
        optionals.set(7);
      }
      if (struct.isSetBusinessAddress()) {
        optionals.set(8);
      }
      if (struct.isSetContryCode()) {
        optionals.set(9);
      }
      if (struct.isSetContryName()) {
        optionals.set(10);
      }
      if (struct.isSetProvinceCode()) {
        optionals.set(11);
      }
      if (struct.isSetProvinceName()) {
        optionals.set(12);
      }
      if (struct.isSetCityCode()) {
        optionals.set(13);
      }
      if (struct.isSetCityName()) {
        optionals.set(14);
      }
      if (struct.isSetCountyCode()) {
        optionals.set(15);
      }
      if (struct.isSetCountyName()) {
        optionals.set(16);
      }
      if (struct.isSetContactAddress()) {
        optionals.set(17);
      }
      if (struct.isSetContactor()) {
        optionals.set(18);
      }
      if (struct.isSetType()) {
        optionals.set(19);
      }
      if (struct.isSetLevel()) {
        optionals.set(20);
      }
      if (struct.isSetChargeType()) {
        optionals.set(21);
      }
      if (struct.isSetRequestWays()) {
        optionals.set(22);
      }
      if (struct.isSetRequestVersion()) {
        optionals.set(23);
      }
      if (struct.isSetAllowedIps()) {
        optionals.set(24);
      }
      if (struct.isSetSignedType()) {
        optionals.set(25);
      }
      if (struct.isSetStatus()) {
        optionals.set(26);
      }
      if (struct.isSetOpAuditTime()) {
        optionals.set(27);
      }
      if (struct.isSetOpAuditor()) {
        optionals.set(28);
      }
      if (struct.isSetRcAuditStatus()) {
        optionals.set(29);
      }
      if (struct.isSetRcAuditTime()) {
        optionals.set(30);
      }
      if (struct.isSetRcAuditor()) {
        optionals.set(31);
      }
      if (struct.isSetLegalAuditStatus()) {
        optionals.set(32);
      }
      if (struct.isSetLegalAuditTime()) {
        optionals.set(33);
      }
      if (struct.isSetLegalAuditor()) {
        optionals.set(34);
      }
      if (struct.isSetSalesId()) {
        optionals.set(35);
      }
      if (struct.isSetInchargerId()) {
        optionals.set(36);
      }
      if (struct.isSetRemark()) {
        optionals.set(37);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(38);
      }
      if (struct.isSetWelcomeMessage()) {
        optionals.set(39);
      }
      if (struct.isSetCertificateType()) {
        optionals.set(40);
      }
      if (struct.isSetBusinessLicenseEndTime()) {
        optionals.set(41);
      }
      if (struct.isSetOrganizationCode()) {
        optionals.set(42);
      }
      if (struct.isSetTaxRegistrationCertificateNo()) {
        optionals.set(43);
      }
      if (struct.isSetBusinessScope()) {
        optionals.set(44);
      }
      if (struct.isSetLegalIdcard()) {
        optionals.set(45);
      }
      if (struct.isSetLegalCertificateEndTime()) {
        optionals.set(46);
      }
      if (struct.isSetContactorIdcardNo()) {
        optionals.set(47);
      }
      if (struct.isSetContactorCertificateEndTime()) {
        optionals.set(48);
      }
      if (struct.isSetContactorPhone()) {
        optionals.set(49);
      }
      if (struct.isSetIpcNo()) {
        optionals.set(50);
      }
      if (struct.isSetPermitsAccounts()) {
        optionals.set(51);
      }
      if (struct.isSetLegalCertificateFront()) {
        optionals.set(52);
      }
      if (struct.isSetLegalCertificateBack()) {
        optionals.set(53);
      }
      if (struct.isSetTaxRegistrationCertificate()) {
        optionals.set(54);
      }
      if (struct.isSetOrganizationCodeCertificate()) {
        optionals.set(55);
      }
      if (struct.isSetBusinessLicenseFile()) {
        optionals.set(56);
      }
      if (struct.isSetBusinessLicenseNo()) {
        optionals.set(57);
      }
      if (struct.isSetObjection()) {
        optionals.set(58);
      }
      if (struct.isSetRetainedAmount()) {
        optionals.set(59);
      }
      if (struct.isSetUnionPayProvinceCode()) {
        optionals.set(60);
      }
      if (struct.isSetUnionPayProvinceName()) {
        optionals.set(61);
      }
      if (struct.isSetUnionPayCityCode()) {
        optionals.set(62);
      }
      if (struct.isSetUnionPayCityName()) {
        optionals.set(63);
      }
      if (struct.isSetMccType()) {
        optionals.set(64);
      }
      if (struct.isSetMccServer()) {
        optionals.set(65);
      }
      if (struct.isSetMccDetail()) {
        optionals.set(66);
      }
      if (struct.isSetIndustryCategory()) {
        optionals.set(67);
      }
      if (struct.isSetLastLoginDate()) {
        optionals.set(68);
      }
      if (struct.isSetContactorCertificateFront()) {
        optionals.set(69);
      }
      if (struct.isSetContactorCertificateBack()) {
        optionals.set(70);
      }
      if (struct.isSetShortName()) {
        optionals.set(71);
      }
      if (struct.isSetAuthorizationLetter()) {
        optionals.set(72);
      }
      oprot.writeBitSet(optionals, 73);
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetCompanyName()) {
        oprot.writeString(struct.companyName);
      }
      if (struct.isSetLegalRepresentative()) {
        oprot.writeString(struct.legalRepresentative);
      }
      if (struct.isSetCompanyPhone()) {
        oprot.writeString(struct.companyPhone);
      }
      if (struct.isSetLegalMobile()) {
        oprot.writeString(struct.legalMobile);
      }
      if (struct.isSetWebsite()) {
        oprot.writeString(struct.website);
      }
      if (struct.isSetBusinessAddress()) {
        oprot.writeString(struct.businessAddress);
      }
      if (struct.isSetContryCode()) {
        oprot.writeString(struct.contryCode);
      }
      if (struct.isSetContryName()) {
        oprot.writeString(struct.contryName);
      }
      if (struct.isSetProvinceCode()) {
        oprot.writeString(struct.provinceCode);
      }
      if (struct.isSetProvinceName()) {
        oprot.writeString(struct.provinceName);
      }
      if (struct.isSetCityCode()) {
        oprot.writeString(struct.cityCode);
      }
      if (struct.isSetCityName()) {
        oprot.writeString(struct.cityName);
      }
      if (struct.isSetCountyCode()) {
        oprot.writeString(struct.countyCode);
      }
      if (struct.isSetCountyName()) {
        oprot.writeString(struct.countyName);
      }
      if (struct.isSetContactAddress()) {
        oprot.writeString(struct.contactAddress);
      }
      if (struct.isSetContactor()) {
        oprot.writeString(struct.contactor);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetLevel()) {
        oprot.writeString(struct.level);
      }
      if (struct.isSetChargeType()) {
        oprot.writeString(struct.chargeType);
      }
      if (struct.isSetRequestWays()) {
        oprot.writeString(struct.requestWays);
      }
      if (struct.isSetRequestVersion()) {
        oprot.writeString(struct.requestVersion);
      }
      if (struct.isSetAllowedIps()) {
        oprot.writeString(struct.allowedIps);
      }
      if (struct.isSetSignedType()) {
        oprot.writeString(struct.signedType);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetOpAuditTime()) {
        oprot.writeString(struct.opAuditTime);
      }
      if (struct.isSetOpAuditor()) {
        oprot.writeString(struct.opAuditor);
      }
      if (struct.isSetRcAuditStatus()) {
        oprot.writeString(struct.rcAuditStatus);
      }
      if (struct.isSetRcAuditTime()) {
        oprot.writeString(struct.rcAuditTime);
      }
      if (struct.isSetRcAuditor()) {
        oprot.writeString(struct.rcAuditor);
      }
      if (struct.isSetLegalAuditStatus()) {
        oprot.writeString(struct.legalAuditStatus);
      }
      if (struct.isSetLegalAuditTime()) {
        oprot.writeString(struct.legalAuditTime);
      }
      if (struct.isSetLegalAuditor()) {
        oprot.writeString(struct.legalAuditor);
      }
      if (struct.isSetSalesId()) {
        oprot.writeString(struct.salesId);
      }
      if (struct.isSetInchargerId()) {
        oprot.writeString(struct.inchargerId);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetWelcomeMessage()) {
        oprot.writeString(struct.welcomeMessage);
      }
      if (struct.isSetCertificateType()) {
        oprot.writeString(struct.certificateType);
      }
      if (struct.isSetBusinessLicenseEndTime()) {
        oprot.writeString(struct.businessLicenseEndTime);
      }
      if (struct.isSetOrganizationCode()) {
        oprot.writeString(struct.organizationCode);
      }
      if (struct.isSetTaxRegistrationCertificateNo()) {
        oprot.writeString(struct.taxRegistrationCertificateNo);
      }
      if (struct.isSetBusinessScope()) {
        oprot.writeString(struct.businessScope);
      }
      if (struct.isSetLegalIdcard()) {
        oprot.writeString(struct.legalIdcard);
      }
      if (struct.isSetLegalCertificateEndTime()) {
        oprot.writeString(struct.legalCertificateEndTime);
      }
      if (struct.isSetContactorIdcardNo()) {
        oprot.writeString(struct.contactorIdcardNo);
      }
      if (struct.isSetContactorCertificateEndTime()) {
        oprot.writeString(struct.contactorCertificateEndTime);
      }
      if (struct.isSetContactorPhone()) {
        oprot.writeString(struct.contactorPhone);
      }
      if (struct.isSetIpcNo()) {
        oprot.writeString(struct.ipcNo);
      }
      if (struct.isSetPermitsAccounts()) {
        oprot.writeString(struct.permitsAccounts);
      }
      if (struct.isSetLegalCertificateFront()) {
        oprot.writeString(struct.legalCertificateFront);
      }
      if (struct.isSetLegalCertificateBack()) {
        oprot.writeString(struct.legalCertificateBack);
      }
      if (struct.isSetTaxRegistrationCertificate()) {
        oprot.writeString(struct.taxRegistrationCertificate);
      }
      if (struct.isSetOrganizationCodeCertificate()) {
        oprot.writeString(struct.organizationCodeCertificate);
      }
      if (struct.isSetBusinessLicenseFile()) {
        oprot.writeString(struct.businessLicenseFile);
      }
      if (struct.isSetBusinessLicenseNo()) {
        oprot.writeString(struct.businessLicenseNo);
      }
      if (struct.isSetObjection()) {
        oprot.writeString(struct.objection);
      }
      if (struct.isSetRetainedAmount()) {
        oprot.writeString(struct.retainedAmount);
      }
      if (struct.isSetUnionPayProvinceCode()) {
        oprot.writeString(struct.unionPayProvinceCode);
      }
      if (struct.isSetUnionPayProvinceName()) {
        oprot.writeString(struct.unionPayProvinceName);
      }
      if (struct.isSetUnionPayCityCode()) {
        oprot.writeString(struct.unionPayCityCode);
      }
      if (struct.isSetUnionPayCityName()) {
        oprot.writeString(struct.unionPayCityName);
      }
      if (struct.isSetMccType()) {
        oprot.writeString(struct.mccType);
      }
      if (struct.isSetMccServer()) {
        oprot.writeString(struct.mccServer);
      }
      if (struct.isSetMccDetail()) {
        oprot.writeString(struct.mccDetail);
      }
      if (struct.isSetIndustryCategory()) {
        oprot.writeString(struct.industryCategory);
      }
      if (struct.isSetLastLoginDate()) {
        oprot.writeString(struct.lastLoginDate);
      }
      if (struct.isSetContactorCertificateFront()) {
        oprot.writeString(struct.contactorCertificateFront);
      }
      if (struct.isSetContactorCertificateBack()) {
        oprot.writeString(struct.contactorCertificateBack);
      }
      if (struct.isSetShortName()) {
        oprot.writeString(struct.shortName);
      }
      if (struct.isSetAuthorizationLetter()) {
        oprot.writeString(struct.authorizationLetter);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MerchantThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(73);
      if (incoming.get(0)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(3)) {
        struct.companyName = iprot.readString();
        struct.setCompanyNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.legalRepresentative = iprot.readString();
        struct.setLegalRepresentativeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.companyPhone = iprot.readString();
        struct.setCompanyPhoneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.legalMobile = iprot.readString();
        struct.setLegalMobileIsSet(true);
      }
      if (incoming.get(7)) {
        struct.website = iprot.readString();
        struct.setWebsiteIsSet(true);
      }
      if (incoming.get(8)) {
        struct.businessAddress = iprot.readString();
        struct.setBusinessAddressIsSet(true);
      }
      if (incoming.get(9)) {
        struct.contryCode = iprot.readString();
        struct.setContryCodeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.contryName = iprot.readString();
        struct.setContryNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.provinceCode = iprot.readString();
        struct.setProvinceCodeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.provinceName = iprot.readString();
        struct.setProvinceNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cityCode = iprot.readString();
        struct.setCityCodeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.cityName = iprot.readString();
        struct.setCityNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.countyCode = iprot.readString();
        struct.setCountyCodeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.countyName = iprot.readString();
        struct.setCountyNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.contactAddress = iprot.readString();
        struct.setContactAddressIsSet(true);
      }
      if (incoming.get(18)) {
        struct.contactor = iprot.readString();
        struct.setContactorIsSet(true);
      }
      if (incoming.get(19)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.level = iprot.readString();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(21)) {
        struct.chargeType = iprot.readString();
        struct.setChargeTypeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.requestWays = iprot.readString();
        struct.setRequestWaysIsSet(true);
      }
      if (incoming.get(23)) {
        struct.requestVersion = iprot.readString();
        struct.setRequestVersionIsSet(true);
      }
      if (incoming.get(24)) {
        struct.allowedIps = iprot.readString();
        struct.setAllowedIpsIsSet(true);
      }
      if (incoming.get(25)) {
        struct.signedType = iprot.readString();
        struct.setSignedTypeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(27)) {
        struct.opAuditTime = iprot.readString();
        struct.setOpAuditTimeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.opAuditor = iprot.readString();
        struct.setOpAuditorIsSet(true);
      }
      if (incoming.get(29)) {
        struct.rcAuditStatus = iprot.readString();
        struct.setRcAuditStatusIsSet(true);
      }
      if (incoming.get(30)) {
        struct.rcAuditTime = iprot.readString();
        struct.setRcAuditTimeIsSet(true);
      }
      if (incoming.get(31)) {
        struct.rcAuditor = iprot.readString();
        struct.setRcAuditorIsSet(true);
      }
      if (incoming.get(32)) {
        struct.legalAuditStatus = iprot.readString();
        struct.setLegalAuditStatusIsSet(true);
      }
      if (incoming.get(33)) {
        struct.legalAuditTime = iprot.readString();
        struct.setLegalAuditTimeIsSet(true);
      }
      if (incoming.get(34)) {
        struct.legalAuditor = iprot.readString();
        struct.setLegalAuditorIsSet(true);
      }
      if (incoming.get(35)) {
        struct.salesId = iprot.readString();
        struct.setSalesIdIsSet(true);
      }
      if (incoming.get(36)) {
        struct.inchargerId = iprot.readString();
        struct.setInchargerIdIsSet(true);
      }
      if (incoming.get(37)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(38)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(39)) {
        struct.welcomeMessage = iprot.readString();
        struct.setWelcomeMessageIsSet(true);
      }
      if (incoming.get(40)) {
        struct.certificateType = iprot.readString();
        struct.setCertificateTypeIsSet(true);
      }
      if (incoming.get(41)) {
        struct.businessLicenseEndTime = iprot.readString();
        struct.setBusinessLicenseEndTimeIsSet(true);
      }
      if (incoming.get(42)) {
        struct.organizationCode = iprot.readString();
        struct.setOrganizationCodeIsSet(true);
      }
      if (incoming.get(43)) {
        struct.taxRegistrationCertificateNo = iprot.readString();
        struct.setTaxRegistrationCertificateNoIsSet(true);
      }
      if (incoming.get(44)) {
        struct.businessScope = iprot.readString();
        struct.setBusinessScopeIsSet(true);
      }
      if (incoming.get(45)) {
        struct.legalIdcard = iprot.readString();
        struct.setLegalIdcardIsSet(true);
      }
      if (incoming.get(46)) {
        struct.legalCertificateEndTime = iprot.readString();
        struct.setLegalCertificateEndTimeIsSet(true);
      }
      if (incoming.get(47)) {
        struct.contactorIdcardNo = iprot.readString();
        struct.setContactorIdcardNoIsSet(true);
      }
      if (incoming.get(48)) {
        struct.contactorCertificateEndTime = iprot.readString();
        struct.setContactorCertificateEndTimeIsSet(true);
      }
      if (incoming.get(49)) {
        struct.contactorPhone = iprot.readString();
        struct.setContactorPhoneIsSet(true);
      }
      if (incoming.get(50)) {
        struct.ipcNo = iprot.readString();
        struct.setIpcNoIsSet(true);
      }
      if (incoming.get(51)) {
        struct.permitsAccounts = iprot.readString();
        struct.setPermitsAccountsIsSet(true);
      }
      if (incoming.get(52)) {
        struct.legalCertificateFront = iprot.readString();
        struct.setLegalCertificateFrontIsSet(true);
      }
      if (incoming.get(53)) {
        struct.legalCertificateBack = iprot.readString();
        struct.setLegalCertificateBackIsSet(true);
      }
      if (incoming.get(54)) {
        struct.taxRegistrationCertificate = iprot.readString();
        struct.setTaxRegistrationCertificateIsSet(true);
      }
      if (incoming.get(55)) {
        struct.organizationCodeCertificate = iprot.readString();
        struct.setOrganizationCodeCertificateIsSet(true);
      }
      if (incoming.get(56)) {
        struct.businessLicenseFile = iprot.readString();
        struct.setBusinessLicenseFileIsSet(true);
      }
      if (incoming.get(57)) {
        struct.businessLicenseNo = iprot.readString();
        struct.setBusinessLicenseNoIsSet(true);
      }
      if (incoming.get(58)) {
        struct.objection = iprot.readString();
        struct.setObjectionIsSet(true);
      }
      if (incoming.get(59)) {
        struct.retainedAmount = iprot.readString();
        struct.setRetainedAmountIsSet(true);
      }
      if (incoming.get(60)) {
        struct.unionPayProvinceCode = iprot.readString();
        struct.setUnionPayProvinceCodeIsSet(true);
      }
      if (incoming.get(61)) {
        struct.unionPayProvinceName = iprot.readString();
        struct.setUnionPayProvinceNameIsSet(true);
      }
      if (incoming.get(62)) {
        struct.unionPayCityCode = iprot.readString();
        struct.setUnionPayCityCodeIsSet(true);
      }
      if (incoming.get(63)) {
        struct.unionPayCityName = iprot.readString();
        struct.setUnionPayCityNameIsSet(true);
      }
      if (incoming.get(64)) {
        struct.mccType = iprot.readString();
        struct.setMccTypeIsSet(true);
      }
      if (incoming.get(65)) {
        struct.mccServer = iprot.readString();
        struct.setMccServerIsSet(true);
      }
      if (incoming.get(66)) {
        struct.mccDetail = iprot.readString();
        struct.setMccDetailIsSet(true);
      }
      if (incoming.get(67)) {
        struct.industryCategory = iprot.readString();
        struct.setIndustryCategoryIsSet(true);
      }
      if (incoming.get(68)) {
        struct.lastLoginDate = iprot.readString();
        struct.setLastLoginDateIsSet(true);
      }
      if (incoming.get(69)) {
        struct.contactorCertificateFront = iprot.readString();
        struct.setContactorCertificateFrontIsSet(true);
      }
      if (incoming.get(70)) {
        struct.contactorCertificateBack = iprot.readString();
        struct.setContactorCertificateBackIsSet(true);
      }
      if (incoming.get(71)) {
        struct.shortName = iprot.readString();
        struct.setShortNameIsSet(true);
      }
      if (incoming.get(72)) {
        struct.authorizationLetter = iprot.readString();
        struct.setAuthorizationLetterIsSet(true);
      }
    }
  }

}

