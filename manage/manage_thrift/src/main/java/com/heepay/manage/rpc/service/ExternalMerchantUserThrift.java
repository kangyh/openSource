/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 外部商户用户信息对象
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-22")
public class ExternalMerchantUserThrift implements org.apache.thrift.TBase<ExternalMerchantUserThrift, ExternalMerchantUserThrift._Fields>, java.io.Serializable, Cloneable, Comparable<ExternalMerchantUserThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExternalMerchantUserThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOGIN_NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginNickname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOGIN_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loginPassword", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PAY_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("payPassword", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SECRET_QUESTION_FIELD_DESC = new org.apache.thrift.protocol.TField("secretQuestion", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ANSWER_SECRET_QUESTION_FIELD_DESC = new org.apache.thrift.protocol.TField("answerSecretQuestion", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LOGIN_IPS_ALLOWED_FIELD_DESC = new org.apache.thrift.protocol.TField("loginIpsAllowed", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginIp", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField QQ_FIELD_DESC = new org.apache.thrift.protocol.TField("qq", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField LINK_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("linkAddress", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField MAC_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("macInfo", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField DISK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("diskInfo", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CPU_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuInfo", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PASS_GUARD_CTRL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("passGuardCtrlVersion", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientType", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginDate", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("remarks", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField ALLOW_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("allowSystem", org.apache.thrift.protocol.TType.STRING, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExternalMerchantUserThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExternalMerchantUserThriftTupleSchemeFactory());
  }

  /**
   * 用户id，保存时不用
   */
  public String id; // required
  /**
   * 登录名，邮箱，必填
   */
  public String loginName; // required
  /**
   * 昵称，以后用
   */
  public String loginNickname; // required
  /**
   * 用户类型，必填
   */
  public String userType; // required
  /**
   * 登录密码，必填
   */
  public String loginPassword; // required
  /**
   * 支付密码，必填
   */
  public String payPassword; // required
  /**
   * 安全问题，必填
   */
  public String secretQuestion; // required
  /**
   * 安全问题答案，必填
   */
  public String answerSecretQuestion; // required
  /**
   * 允许登录ips，以后用
   */
  public String loginIpsAllowed; // required
  /**
   * 最后一次登录ip
   */
  public String lastLoginIp; // required
  /**
   * 联系手机
   */
  public String phone; // required
  /**
   * 手机号，如有手机绑定请设置到mobile中
   */
  public String mobile; // required
  /**
   * QQ号
   */
  public String qq; // required
  /**
   * 联系地址
   */
  public String linkAddress; // required
  /**
   * 电脑mac信息
   */
  public String macInfo; // required
  /**
   * 电脑disk信息
   */
  public String diskInfo; // required
  /**
   * 电脑cpu信息
   */
  public String cpuInfo; // required
  /**
   * 安全控件版本
   */
  public String passGuardCtrlVersion; // required
  /**
   * 客户端请求类型
   */
  public String clientType; // required
  /**
   * 登录账号状态，必填
   */
  public String status; // required
  /**
   * 上次登录时间
   */
  public String lastLoginDate; // required
  /**
   * 备注
   */
  public String remarks; // required
  /**
   * 来源，必填
   */
  public String source; // required
  /**
   * 允许登陆的系统，必填
   */
  public String allowSystem; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 用户id，保存时不用
     */
    ID((short)1, "id"),
    /**
     * 登录名，邮箱，必填
     */
    LOGIN_NAME((short)2, "loginName"),
    /**
     * 昵称，以后用
     */
    LOGIN_NICKNAME((short)3, "loginNickname"),
    /**
     * 用户类型，必填
     */
    USER_TYPE((short)4, "userType"),
    /**
     * 登录密码，必填
     */
    LOGIN_PASSWORD((short)5, "loginPassword"),
    /**
     * 支付密码，必填
     */
    PAY_PASSWORD((short)6, "payPassword"),
    /**
     * 安全问题，必填
     */
    SECRET_QUESTION((short)7, "secretQuestion"),
    /**
     * 安全问题答案，必填
     */
    ANSWER_SECRET_QUESTION((short)8, "answerSecretQuestion"),
    /**
     * 允许登录ips，以后用
     */
    LOGIN_IPS_ALLOWED((short)9, "loginIpsAllowed"),
    /**
     * 最后一次登录ip
     */
    LAST_LOGIN_IP((short)10, "lastLoginIp"),
    /**
     * 联系手机
     */
    PHONE((short)11, "phone"),
    /**
     * 手机号，如有手机绑定请设置到mobile中
     */
    MOBILE((short)12, "mobile"),
    /**
     * QQ号
     */
    QQ((short)13, "qq"),
    /**
     * 联系地址
     */
    LINK_ADDRESS((short)14, "linkAddress"),
    /**
     * 电脑mac信息
     */
    MAC_INFO((short)15, "macInfo"),
    /**
     * 电脑disk信息
     */
    DISK_INFO((short)16, "diskInfo"),
    /**
     * 电脑cpu信息
     */
    CPU_INFO((short)17, "cpuInfo"),
    /**
     * 安全控件版本
     */
    PASS_GUARD_CTRL_VERSION((short)18, "passGuardCtrlVersion"),
    /**
     * 客户端请求类型
     */
    CLIENT_TYPE((short)19, "clientType"),
    /**
     * 登录账号状态，必填
     */
    STATUS((short)20, "status"),
    /**
     * 上次登录时间
     */
    LAST_LOGIN_DATE((short)21, "lastLoginDate"),
    /**
     * 备注
     */
    REMARKS((short)22, "remarks"),
    /**
     * 来源，必填
     */
    SOURCE((short)23, "source"),
    /**
     * 允许登陆的系统，必填
     */
    ALLOW_SYSTEM((short)24, "allowSystem");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // LOGIN_NAME
          return LOGIN_NAME;
        case 3: // LOGIN_NICKNAME
          return LOGIN_NICKNAME;
        case 4: // USER_TYPE
          return USER_TYPE;
        case 5: // LOGIN_PASSWORD
          return LOGIN_PASSWORD;
        case 6: // PAY_PASSWORD
          return PAY_PASSWORD;
        case 7: // SECRET_QUESTION
          return SECRET_QUESTION;
        case 8: // ANSWER_SECRET_QUESTION
          return ANSWER_SECRET_QUESTION;
        case 9: // LOGIN_IPS_ALLOWED
          return LOGIN_IPS_ALLOWED;
        case 10: // LAST_LOGIN_IP
          return LAST_LOGIN_IP;
        case 11: // PHONE
          return PHONE;
        case 12: // MOBILE
          return MOBILE;
        case 13: // QQ
          return QQ;
        case 14: // LINK_ADDRESS
          return LINK_ADDRESS;
        case 15: // MAC_INFO
          return MAC_INFO;
        case 16: // DISK_INFO
          return DISK_INFO;
        case 17: // CPU_INFO
          return CPU_INFO;
        case 18: // PASS_GUARD_CTRL_VERSION
          return PASS_GUARD_CTRL_VERSION;
        case 19: // CLIENT_TYPE
          return CLIENT_TYPE;
        case 20: // STATUS
          return STATUS;
        case 21: // LAST_LOGIN_DATE
          return LAST_LOGIN_DATE;
        case 22: // REMARKS
          return REMARKS;
        case 23: // SOURCE
          return SOURCE;
        case 24: // ALLOW_SYSTEM
          return ALLOW_SYSTEM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("loginNickname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("loginPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("payPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECRET_QUESTION, new org.apache.thrift.meta_data.FieldMetaData("secretQuestion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANSWER_SECRET_QUESTION, new org.apache.thrift.meta_data.FieldMetaData("answerSecretQuestion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_IPS_ALLOWED, new org.apache.thrift.meta_data.FieldMetaData("loginIpsAllowed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN_IP, new org.apache.thrift.meta_data.FieldMetaData("lastLoginIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QQ, new org.apache.thrift.meta_data.FieldMetaData("qq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("linkAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAC_INFO, new org.apache.thrift.meta_data.FieldMetaData("macInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISK_INFO, new org.apache.thrift.meta_data.FieldMetaData("diskInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_INFO, new org.apache.thrift.meta_data.FieldMetaData("cpuInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASS_GUARD_CTRL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("passGuardCtrlVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clientType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN_DATE, new org.apache.thrift.meta_data.FieldMetaData("lastLoginDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARKS, new org.apache.thrift.meta_data.FieldMetaData("remarks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALLOW_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("allowSystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExternalMerchantUserThrift.class, metaDataMap);
  }

  public ExternalMerchantUserThrift() {
  }

  public ExternalMerchantUserThrift(
    String id,
    String loginName,
    String loginNickname,
    String userType,
    String loginPassword,
    String payPassword,
    String secretQuestion,
    String answerSecretQuestion,
    String loginIpsAllowed,
    String lastLoginIp,
    String phone,
    String mobile,
    String qq,
    String linkAddress,
    String macInfo,
    String diskInfo,
    String cpuInfo,
    String passGuardCtrlVersion,
    String clientType,
    String status,
    String lastLoginDate,
    String remarks,
    String source,
    String allowSystem)
  {
    this();
    this.id = id;
    this.loginName = loginName;
    this.loginNickname = loginNickname;
    this.userType = userType;
    this.loginPassword = loginPassword;
    this.payPassword = payPassword;
    this.secretQuestion = secretQuestion;
    this.answerSecretQuestion = answerSecretQuestion;
    this.loginIpsAllowed = loginIpsAllowed;
    this.lastLoginIp = lastLoginIp;
    this.phone = phone;
    this.mobile = mobile;
    this.qq = qq;
    this.linkAddress = linkAddress;
    this.macInfo = macInfo;
    this.diskInfo = diskInfo;
    this.cpuInfo = cpuInfo;
    this.passGuardCtrlVersion = passGuardCtrlVersion;
    this.clientType = clientType;
    this.status = status;
    this.lastLoginDate = lastLoginDate;
    this.remarks = remarks;
    this.source = source;
    this.allowSystem = allowSystem;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExternalMerchantUserThrift(ExternalMerchantUserThrift other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetLoginName()) {
      this.loginName = other.loginName;
    }
    if (other.isSetLoginNickname()) {
      this.loginNickname = other.loginNickname;
    }
    if (other.isSetUserType()) {
      this.userType = other.userType;
    }
    if (other.isSetLoginPassword()) {
      this.loginPassword = other.loginPassword;
    }
    if (other.isSetPayPassword()) {
      this.payPassword = other.payPassword;
    }
    if (other.isSetSecretQuestion()) {
      this.secretQuestion = other.secretQuestion;
    }
    if (other.isSetAnswerSecretQuestion()) {
      this.answerSecretQuestion = other.answerSecretQuestion;
    }
    if (other.isSetLoginIpsAllowed()) {
      this.loginIpsAllowed = other.loginIpsAllowed;
    }
    if (other.isSetLastLoginIp()) {
      this.lastLoginIp = other.lastLoginIp;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetQq()) {
      this.qq = other.qq;
    }
    if (other.isSetLinkAddress()) {
      this.linkAddress = other.linkAddress;
    }
    if (other.isSetMacInfo()) {
      this.macInfo = other.macInfo;
    }
    if (other.isSetDiskInfo()) {
      this.diskInfo = other.diskInfo;
    }
    if (other.isSetCpuInfo()) {
      this.cpuInfo = other.cpuInfo;
    }
    if (other.isSetPassGuardCtrlVersion()) {
      this.passGuardCtrlVersion = other.passGuardCtrlVersion;
    }
    if (other.isSetClientType()) {
      this.clientType = other.clientType;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetLastLoginDate()) {
      this.lastLoginDate = other.lastLoginDate;
    }
    if (other.isSetRemarks()) {
      this.remarks = other.remarks;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    if (other.isSetAllowSystem()) {
      this.allowSystem = other.allowSystem;
    }
  }

  public ExternalMerchantUserThrift deepCopy() {
    return new ExternalMerchantUserThrift(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.loginName = null;
    this.loginNickname = null;
    this.userType = null;
    this.loginPassword = null;
    this.payPassword = null;
    this.secretQuestion = null;
    this.answerSecretQuestion = null;
    this.loginIpsAllowed = null;
    this.lastLoginIp = null;
    this.phone = null;
    this.mobile = null;
    this.qq = null;
    this.linkAddress = null;
    this.macInfo = null;
    this.diskInfo = null;
    this.cpuInfo = null;
    this.passGuardCtrlVersion = null;
    this.clientType = null;
    this.status = null;
    this.lastLoginDate = null;
    this.remarks = null;
    this.source = null;
    this.allowSystem = null;
  }

  /**
   * 用户id，保存时不用
   */
  public String getId() {
    return this.id;
  }

  /**
   * 用户id，保存时不用
   */
  public ExternalMerchantUserThrift setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 登录名，邮箱，必填
   */
  public String getLoginName() {
    return this.loginName;
  }

  /**
   * 登录名，邮箱，必填
   */
  public ExternalMerchantUserThrift setLoginName(String loginName) {
    this.loginName = loginName;
    return this;
  }

  public void unsetLoginName() {
    this.loginName = null;
  }

  /** Returns true if field loginName is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginName() {
    return this.loginName != null;
  }

  public void setLoginNameIsSet(boolean value) {
    if (!value) {
      this.loginName = null;
    }
  }

  /**
   * 昵称，以后用
   */
  public String getLoginNickname() {
    return this.loginNickname;
  }

  /**
   * 昵称，以后用
   */
  public ExternalMerchantUserThrift setLoginNickname(String loginNickname) {
    this.loginNickname = loginNickname;
    return this;
  }

  public void unsetLoginNickname() {
    this.loginNickname = null;
  }

  /** Returns true if field loginNickname is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginNickname() {
    return this.loginNickname != null;
  }

  public void setLoginNicknameIsSet(boolean value) {
    if (!value) {
      this.loginNickname = null;
    }
  }

  /**
   * 用户类型，必填
   */
  public String getUserType() {
    return this.userType;
  }

  /**
   * 用户类型，必填
   */
  public ExternalMerchantUserThrift setUserType(String userType) {
    this.userType = userType;
    return this;
  }

  public void unsetUserType() {
    this.userType = null;
  }

  /** Returns true if field userType is set (has been assigned a value) and false otherwise */
  public boolean isSetUserType() {
    return this.userType != null;
  }

  public void setUserTypeIsSet(boolean value) {
    if (!value) {
      this.userType = null;
    }
  }

  /**
   * 登录密码，必填
   */
  public String getLoginPassword() {
    return this.loginPassword;
  }

  /**
   * 登录密码，必填
   */
  public ExternalMerchantUserThrift setLoginPassword(String loginPassword) {
    this.loginPassword = loginPassword;
    return this;
  }

  public void unsetLoginPassword() {
    this.loginPassword = null;
  }

  /** Returns true if field loginPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginPassword() {
    return this.loginPassword != null;
  }

  public void setLoginPasswordIsSet(boolean value) {
    if (!value) {
      this.loginPassword = null;
    }
  }

  /**
   * 支付密码，必填
   */
  public String getPayPassword() {
    return this.payPassword;
  }

  /**
   * 支付密码，必填
   */
  public ExternalMerchantUserThrift setPayPassword(String payPassword) {
    this.payPassword = payPassword;
    return this;
  }

  public void unsetPayPassword() {
    this.payPassword = null;
  }

  /** Returns true if field payPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetPayPassword() {
    return this.payPassword != null;
  }

  public void setPayPasswordIsSet(boolean value) {
    if (!value) {
      this.payPassword = null;
    }
  }

  /**
   * 安全问题，必填
   */
  public String getSecretQuestion() {
    return this.secretQuestion;
  }

  /**
   * 安全问题，必填
   */
  public ExternalMerchantUserThrift setSecretQuestion(String secretQuestion) {
    this.secretQuestion = secretQuestion;
    return this;
  }

  public void unsetSecretQuestion() {
    this.secretQuestion = null;
  }

  /** Returns true if field secretQuestion is set (has been assigned a value) and false otherwise */
  public boolean isSetSecretQuestion() {
    return this.secretQuestion != null;
  }

  public void setSecretQuestionIsSet(boolean value) {
    if (!value) {
      this.secretQuestion = null;
    }
  }

  /**
   * 安全问题答案，必填
   */
  public String getAnswerSecretQuestion() {
    return this.answerSecretQuestion;
  }

  /**
   * 安全问题答案，必填
   */
  public ExternalMerchantUserThrift setAnswerSecretQuestion(String answerSecretQuestion) {
    this.answerSecretQuestion = answerSecretQuestion;
    return this;
  }

  public void unsetAnswerSecretQuestion() {
    this.answerSecretQuestion = null;
  }

  /** Returns true if field answerSecretQuestion is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerSecretQuestion() {
    return this.answerSecretQuestion != null;
  }

  public void setAnswerSecretQuestionIsSet(boolean value) {
    if (!value) {
      this.answerSecretQuestion = null;
    }
  }

  /**
   * 允许登录ips，以后用
   */
  public String getLoginIpsAllowed() {
    return this.loginIpsAllowed;
  }

  /**
   * 允许登录ips，以后用
   */
  public ExternalMerchantUserThrift setLoginIpsAllowed(String loginIpsAllowed) {
    this.loginIpsAllowed = loginIpsAllowed;
    return this;
  }

  public void unsetLoginIpsAllowed() {
    this.loginIpsAllowed = null;
  }

  /** Returns true if field loginIpsAllowed is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginIpsAllowed() {
    return this.loginIpsAllowed != null;
  }

  public void setLoginIpsAllowedIsSet(boolean value) {
    if (!value) {
      this.loginIpsAllowed = null;
    }
  }

  /**
   * 最后一次登录ip
   */
  public String getLastLoginIp() {
    return this.lastLoginIp;
  }

  /**
   * 最后一次登录ip
   */
  public ExternalMerchantUserThrift setLastLoginIp(String lastLoginIp) {
    this.lastLoginIp = lastLoginIp;
    return this;
  }

  public void unsetLastLoginIp() {
    this.lastLoginIp = null;
  }

  /** Returns true if field lastLoginIp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginIp() {
    return this.lastLoginIp != null;
  }

  public void setLastLoginIpIsSet(boolean value) {
    if (!value) {
      this.lastLoginIp = null;
    }
  }

  /**
   * 联系手机
   */
  public String getPhone() {
    return this.phone;
  }

  /**
   * 联系手机
   */
  public ExternalMerchantUserThrift setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  /**
   * 手机号，如有手机绑定请设置到mobile中
   */
  public String getMobile() {
    return this.mobile;
  }

  /**
   * 手机号，如有手机绑定请设置到mobile中
   */
  public ExternalMerchantUserThrift setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  /**
   * QQ号
   */
  public String getQq() {
    return this.qq;
  }

  /**
   * QQ号
   */
  public ExternalMerchantUserThrift setQq(String qq) {
    this.qq = qq;
    return this;
  }

  public void unsetQq() {
    this.qq = null;
  }

  /** Returns true if field qq is set (has been assigned a value) and false otherwise */
  public boolean isSetQq() {
    return this.qq != null;
  }

  public void setQqIsSet(boolean value) {
    if (!value) {
      this.qq = null;
    }
  }

  /**
   * 联系地址
   */
  public String getLinkAddress() {
    return this.linkAddress;
  }

  /**
   * 联系地址
   */
  public ExternalMerchantUserThrift setLinkAddress(String linkAddress) {
    this.linkAddress = linkAddress;
    return this;
  }

  public void unsetLinkAddress() {
    this.linkAddress = null;
  }

  /** Returns true if field linkAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkAddress() {
    return this.linkAddress != null;
  }

  public void setLinkAddressIsSet(boolean value) {
    if (!value) {
      this.linkAddress = null;
    }
  }

  /**
   * 电脑mac信息
   */
  public String getMacInfo() {
    return this.macInfo;
  }

  /**
   * 电脑mac信息
   */
  public ExternalMerchantUserThrift setMacInfo(String macInfo) {
    this.macInfo = macInfo;
    return this;
  }

  public void unsetMacInfo() {
    this.macInfo = null;
  }

  /** Returns true if field macInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetMacInfo() {
    return this.macInfo != null;
  }

  public void setMacInfoIsSet(boolean value) {
    if (!value) {
      this.macInfo = null;
    }
  }

  /**
   * 电脑disk信息
   */
  public String getDiskInfo() {
    return this.diskInfo;
  }

  /**
   * 电脑disk信息
   */
  public ExternalMerchantUserThrift setDiskInfo(String diskInfo) {
    this.diskInfo = diskInfo;
    return this;
  }

  public void unsetDiskInfo() {
    this.diskInfo = null;
  }

  /** Returns true if field diskInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetDiskInfo() {
    return this.diskInfo != null;
  }

  public void setDiskInfoIsSet(boolean value) {
    if (!value) {
      this.diskInfo = null;
    }
  }

  /**
   * 电脑cpu信息
   */
  public String getCpuInfo() {
    return this.cpuInfo;
  }

  /**
   * 电脑cpu信息
   */
  public ExternalMerchantUserThrift setCpuInfo(String cpuInfo) {
    this.cpuInfo = cpuInfo;
    return this;
  }

  public void unsetCpuInfo() {
    this.cpuInfo = null;
  }

  /** Returns true if field cpuInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuInfo() {
    return this.cpuInfo != null;
  }

  public void setCpuInfoIsSet(boolean value) {
    if (!value) {
      this.cpuInfo = null;
    }
  }

  /**
   * 安全控件版本
   */
  public String getPassGuardCtrlVersion() {
    return this.passGuardCtrlVersion;
  }

  /**
   * 安全控件版本
   */
  public ExternalMerchantUserThrift setPassGuardCtrlVersion(String passGuardCtrlVersion) {
    this.passGuardCtrlVersion = passGuardCtrlVersion;
    return this;
  }

  public void unsetPassGuardCtrlVersion() {
    this.passGuardCtrlVersion = null;
  }

  /** Returns true if field passGuardCtrlVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetPassGuardCtrlVersion() {
    return this.passGuardCtrlVersion != null;
  }

  public void setPassGuardCtrlVersionIsSet(boolean value) {
    if (!value) {
      this.passGuardCtrlVersion = null;
    }
  }

  /**
   * 客户端请求类型
   */
  public String getClientType() {
    return this.clientType;
  }

  /**
   * 客户端请求类型
   */
  public ExternalMerchantUserThrift setClientType(String clientType) {
    this.clientType = clientType;
    return this;
  }

  public void unsetClientType() {
    this.clientType = null;
  }

  /** Returns true if field clientType is set (has been assigned a value) and false otherwise */
  public boolean isSetClientType() {
    return this.clientType != null;
  }

  public void setClientTypeIsSet(boolean value) {
    if (!value) {
      this.clientType = null;
    }
  }

  /**
   * 登录账号状态，必填
   */
  public String getStatus() {
    return this.status;
  }

  /**
   * 登录账号状态，必填
   */
  public ExternalMerchantUserThrift setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * 上次登录时间
   */
  public String getLastLoginDate() {
    return this.lastLoginDate;
  }

  /**
   * 上次登录时间
   */
  public ExternalMerchantUserThrift setLastLoginDate(String lastLoginDate) {
    this.lastLoginDate = lastLoginDate;
    return this;
  }

  public void unsetLastLoginDate() {
    this.lastLoginDate = null;
  }

  /** Returns true if field lastLoginDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginDate() {
    return this.lastLoginDate != null;
  }

  public void setLastLoginDateIsSet(boolean value) {
    if (!value) {
      this.lastLoginDate = null;
    }
  }

  /**
   * 备注
   */
  public String getRemarks() {
    return this.remarks;
  }

  /**
   * 备注
   */
  public ExternalMerchantUserThrift setRemarks(String remarks) {
    this.remarks = remarks;
    return this;
  }

  public void unsetRemarks() {
    this.remarks = null;
  }

  /** Returns true if field remarks is set (has been assigned a value) and false otherwise */
  public boolean isSetRemarks() {
    return this.remarks != null;
  }

  public void setRemarksIsSet(boolean value) {
    if (!value) {
      this.remarks = null;
    }
  }

  /**
   * 来源，必填
   */
  public String getSource() {
    return this.source;
  }

  /**
   * 来源，必填
   */
  public ExternalMerchantUserThrift setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  /**
   * 允许登陆的系统，必填
   */
  public String getAllowSystem() {
    return this.allowSystem;
  }

  /**
   * 允许登陆的系统，必填
   */
  public ExternalMerchantUserThrift setAllowSystem(String allowSystem) {
    this.allowSystem = allowSystem;
    return this;
  }

  public void unsetAllowSystem() {
    this.allowSystem = null;
  }

  /** Returns true if field allowSystem is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowSystem() {
    return this.allowSystem != null;
  }

  public void setAllowSystemIsSet(boolean value) {
    if (!value) {
      this.allowSystem = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case LOGIN_NAME:
      if (value == null) {
        unsetLoginName();
      } else {
        setLoginName((String)value);
      }
      break;

    case LOGIN_NICKNAME:
      if (value == null) {
        unsetLoginNickname();
      } else {
        setLoginNickname((String)value);
      }
      break;

    case USER_TYPE:
      if (value == null) {
        unsetUserType();
      } else {
        setUserType((String)value);
      }
      break;

    case LOGIN_PASSWORD:
      if (value == null) {
        unsetLoginPassword();
      } else {
        setLoginPassword((String)value);
      }
      break;

    case PAY_PASSWORD:
      if (value == null) {
        unsetPayPassword();
      } else {
        setPayPassword((String)value);
      }
      break;

    case SECRET_QUESTION:
      if (value == null) {
        unsetSecretQuestion();
      } else {
        setSecretQuestion((String)value);
      }
      break;

    case ANSWER_SECRET_QUESTION:
      if (value == null) {
        unsetAnswerSecretQuestion();
      } else {
        setAnswerSecretQuestion((String)value);
      }
      break;

    case LOGIN_IPS_ALLOWED:
      if (value == null) {
        unsetLoginIpsAllowed();
      } else {
        setLoginIpsAllowed((String)value);
      }
      break;

    case LAST_LOGIN_IP:
      if (value == null) {
        unsetLastLoginIp();
      } else {
        setLastLoginIp((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case QQ:
      if (value == null) {
        unsetQq();
      } else {
        setQq((String)value);
      }
      break;

    case LINK_ADDRESS:
      if (value == null) {
        unsetLinkAddress();
      } else {
        setLinkAddress((String)value);
      }
      break;

    case MAC_INFO:
      if (value == null) {
        unsetMacInfo();
      } else {
        setMacInfo((String)value);
      }
      break;

    case DISK_INFO:
      if (value == null) {
        unsetDiskInfo();
      } else {
        setDiskInfo((String)value);
      }
      break;

    case CPU_INFO:
      if (value == null) {
        unsetCpuInfo();
      } else {
        setCpuInfo((String)value);
      }
      break;

    case PASS_GUARD_CTRL_VERSION:
      if (value == null) {
        unsetPassGuardCtrlVersion();
      } else {
        setPassGuardCtrlVersion((String)value);
      }
      break;

    case CLIENT_TYPE:
      if (value == null) {
        unsetClientType();
      } else {
        setClientType((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case LAST_LOGIN_DATE:
      if (value == null) {
        unsetLastLoginDate();
      } else {
        setLastLoginDate((String)value);
      }
      break;

    case REMARKS:
      if (value == null) {
        unsetRemarks();
      } else {
        setRemarks((String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case ALLOW_SYSTEM:
      if (value == null) {
        unsetAllowSystem();
      } else {
        setAllowSystem((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case LOGIN_NAME:
      return getLoginName();

    case LOGIN_NICKNAME:
      return getLoginNickname();

    case USER_TYPE:
      return getUserType();

    case LOGIN_PASSWORD:
      return getLoginPassword();

    case PAY_PASSWORD:
      return getPayPassword();

    case SECRET_QUESTION:
      return getSecretQuestion();

    case ANSWER_SECRET_QUESTION:
      return getAnswerSecretQuestion();

    case LOGIN_IPS_ALLOWED:
      return getLoginIpsAllowed();

    case LAST_LOGIN_IP:
      return getLastLoginIp();

    case PHONE:
      return getPhone();

    case MOBILE:
      return getMobile();

    case QQ:
      return getQq();

    case LINK_ADDRESS:
      return getLinkAddress();

    case MAC_INFO:
      return getMacInfo();

    case DISK_INFO:
      return getDiskInfo();

    case CPU_INFO:
      return getCpuInfo();

    case PASS_GUARD_CTRL_VERSION:
      return getPassGuardCtrlVersion();

    case CLIENT_TYPE:
      return getClientType();

    case STATUS:
      return getStatus();

    case LAST_LOGIN_DATE:
      return getLastLoginDate();

    case REMARKS:
      return getRemarks();

    case SOURCE:
      return getSource();

    case ALLOW_SYSTEM:
      return getAllowSystem();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LOGIN_NAME:
      return isSetLoginName();
    case LOGIN_NICKNAME:
      return isSetLoginNickname();
    case USER_TYPE:
      return isSetUserType();
    case LOGIN_PASSWORD:
      return isSetLoginPassword();
    case PAY_PASSWORD:
      return isSetPayPassword();
    case SECRET_QUESTION:
      return isSetSecretQuestion();
    case ANSWER_SECRET_QUESTION:
      return isSetAnswerSecretQuestion();
    case LOGIN_IPS_ALLOWED:
      return isSetLoginIpsAllowed();
    case LAST_LOGIN_IP:
      return isSetLastLoginIp();
    case PHONE:
      return isSetPhone();
    case MOBILE:
      return isSetMobile();
    case QQ:
      return isSetQq();
    case LINK_ADDRESS:
      return isSetLinkAddress();
    case MAC_INFO:
      return isSetMacInfo();
    case DISK_INFO:
      return isSetDiskInfo();
    case CPU_INFO:
      return isSetCpuInfo();
    case PASS_GUARD_CTRL_VERSION:
      return isSetPassGuardCtrlVersion();
    case CLIENT_TYPE:
      return isSetClientType();
    case STATUS:
      return isSetStatus();
    case LAST_LOGIN_DATE:
      return isSetLastLoginDate();
    case REMARKS:
      return isSetRemarks();
    case SOURCE:
      return isSetSource();
    case ALLOW_SYSTEM:
      return isSetAllowSystem();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExternalMerchantUserThrift)
      return this.equals((ExternalMerchantUserThrift)that);
    return false;
  }

  public boolean equals(ExternalMerchantUserThrift that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_loginName = true && this.isSetLoginName();
    boolean that_present_loginName = true && that.isSetLoginName();
    if (this_present_loginName || that_present_loginName) {
      if (!(this_present_loginName && that_present_loginName))
        return false;
      if (!this.loginName.equals(that.loginName))
        return false;
    }

    boolean this_present_loginNickname = true && this.isSetLoginNickname();
    boolean that_present_loginNickname = true && that.isSetLoginNickname();
    if (this_present_loginNickname || that_present_loginNickname) {
      if (!(this_present_loginNickname && that_present_loginNickname))
        return false;
      if (!this.loginNickname.equals(that.loginNickname))
        return false;
    }

    boolean this_present_userType = true && this.isSetUserType();
    boolean that_present_userType = true && that.isSetUserType();
    if (this_present_userType || that_present_userType) {
      if (!(this_present_userType && that_present_userType))
        return false;
      if (!this.userType.equals(that.userType))
        return false;
    }

    boolean this_present_loginPassword = true && this.isSetLoginPassword();
    boolean that_present_loginPassword = true && that.isSetLoginPassword();
    if (this_present_loginPassword || that_present_loginPassword) {
      if (!(this_present_loginPassword && that_present_loginPassword))
        return false;
      if (!this.loginPassword.equals(that.loginPassword))
        return false;
    }

    boolean this_present_payPassword = true && this.isSetPayPassword();
    boolean that_present_payPassword = true && that.isSetPayPassword();
    if (this_present_payPassword || that_present_payPassword) {
      if (!(this_present_payPassword && that_present_payPassword))
        return false;
      if (!this.payPassword.equals(that.payPassword))
        return false;
    }

    boolean this_present_secretQuestion = true && this.isSetSecretQuestion();
    boolean that_present_secretQuestion = true && that.isSetSecretQuestion();
    if (this_present_secretQuestion || that_present_secretQuestion) {
      if (!(this_present_secretQuestion && that_present_secretQuestion))
        return false;
      if (!this.secretQuestion.equals(that.secretQuestion))
        return false;
    }

    boolean this_present_answerSecretQuestion = true && this.isSetAnswerSecretQuestion();
    boolean that_present_answerSecretQuestion = true && that.isSetAnswerSecretQuestion();
    if (this_present_answerSecretQuestion || that_present_answerSecretQuestion) {
      if (!(this_present_answerSecretQuestion && that_present_answerSecretQuestion))
        return false;
      if (!this.answerSecretQuestion.equals(that.answerSecretQuestion))
        return false;
    }

    boolean this_present_loginIpsAllowed = true && this.isSetLoginIpsAllowed();
    boolean that_present_loginIpsAllowed = true && that.isSetLoginIpsAllowed();
    if (this_present_loginIpsAllowed || that_present_loginIpsAllowed) {
      if (!(this_present_loginIpsAllowed && that_present_loginIpsAllowed))
        return false;
      if (!this.loginIpsAllowed.equals(that.loginIpsAllowed))
        return false;
    }

    boolean this_present_lastLoginIp = true && this.isSetLastLoginIp();
    boolean that_present_lastLoginIp = true && that.isSetLastLoginIp();
    if (this_present_lastLoginIp || that_present_lastLoginIp) {
      if (!(this_present_lastLoginIp && that_present_lastLoginIp))
        return false;
      if (!this.lastLoginIp.equals(that.lastLoginIp))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_qq = true && this.isSetQq();
    boolean that_present_qq = true && that.isSetQq();
    if (this_present_qq || that_present_qq) {
      if (!(this_present_qq && that_present_qq))
        return false;
      if (!this.qq.equals(that.qq))
        return false;
    }

    boolean this_present_linkAddress = true && this.isSetLinkAddress();
    boolean that_present_linkAddress = true && that.isSetLinkAddress();
    if (this_present_linkAddress || that_present_linkAddress) {
      if (!(this_present_linkAddress && that_present_linkAddress))
        return false;
      if (!this.linkAddress.equals(that.linkAddress))
        return false;
    }

    boolean this_present_macInfo = true && this.isSetMacInfo();
    boolean that_present_macInfo = true && that.isSetMacInfo();
    if (this_present_macInfo || that_present_macInfo) {
      if (!(this_present_macInfo && that_present_macInfo))
        return false;
      if (!this.macInfo.equals(that.macInfo))
        return false;
    }

    boolean this_present_diskInfo = true && this.isSetDiskInfo();
    boolean that_present_diskInfo = true && that.isSetDiskInfo();
    if (this_present_diskInfo || that_present_diskInfo) {
      if (!(this_present_diskInfo && that_present_diskInfo))
        return false;
      if (!this.diskInfo.equals(that.diskInfo))
        return false;
    }

    boolean this_present_cpuInfo = true && this.isSetCpuInfo();
    boolean that_present_cpuInfo = true && that.isSetCpuInfo();
    if (this_present_cpuInfo || that_present_cpuInfo) {
      if (!(this_present_cpuInfo && that_present_cpuInfo))
        return false;
      if (!this.cpuInfo.equals(that.cpuInfo))
        return false;
    }

    boolean this_present_passGuardCtrlVersion = true && this.isSetPassGuardCtrlVersion();
    boolean that_present_passGuardCtrlVersion = true && that.isSetPassGuardCtrlVersion();
    if (this_present_passGuardCtrlVersion || that_present_passGuardCtrlVersion) {
      if (!(this_present_passGuardCtrlVersion && that_present_passGuardCtrlVersion))
        return false;
      if (!this.passGuardCtrlVersion.equals(that.passGuardCtrlVersion))
        return false;
    }

    boolean this_present_clientType = true && this.isSetClientType();
    boolean that_present_clientType = true && that.isSetClientType();
    if (this_present_clientType || that_present_clientType) {
      if (!(this_present_clientType && that_present_clientType))
        return false;
      if (!this.clientType.equals(that.clientType))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_lastLoginDate = true && this.isSetLastLoginDate();
    boolean that_present_lastLoginDate = true && that.isSetLastLoginDate();
    if (this_present_lastLoginDate || that_present_lastLoginDate) {
      if (!(this_present_lastLoginDate && that_present_lastLoginDate))
        return false;
      if (!this.lastLoginDate.equals(that.lastLoginDate))
        return false;
    }

    boolean this_present_remarks = true && this.isSetRemarks();
    boolean that_present_remarks = true && that.isSetRemarks();
    if (this_present_remarks || that_present_remarks) {
      if (!(this_present_remarks && that_present_remarks))
        return false;
      if (!this.remarks.equals(that.remarks))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_allowSystem = true && this.isSetAllowSystem();
    boolean that_present_allowSystem = true && that.isSetAllowSystem();
    if (this_present_allowSystem || that_present_allowSystem) {
      if (!(this_present_allowSystem && that_present_allowSystem))
        return false;
      if (!this.allowSystem.equals(that.allowSystem))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_loginName = true && (isSetLoginName());
    list.add(present_loginName);
    if (present_loginName)
      list.add(loginName);

    boolean present_loginNickname = true && (isSetLoginNickname());
    list.add(present_loginNickname);
    if (present_loginNickname)
      list.add(loginNickname);

    boolean present_userType = true && (isSetUserType());
    list.add(present_userType);
    if (present_userType)
      list.add(userType);

    boolean present_loginPassword = true && (isSetLoginPassword());
    list.add(present_loginPassword);
    if (present_loginPassword)
      list.add(loginPassword);

    boolean present_payPassword = true && (isSetPayPassword());
    list.add(present_payPassword);
    if (present_payPassword)
      list.add(payPassword);

    boolean present_secretQuestion = true && (isSetSecretQuestion());
    list.add(present_secretQuestion);
    if (present_secretQuestion)
      list.add(secretQuestion);

    boolean present_answerSecretQuestion = true && (isSetAnswerSecretQuestion());
    list.add(present_answerSecretQuestion);
    if (present_answerSecretQuestion)
      list.add(answerSecretQuestion);

    boolean present_loginIpsAllowed = true && (isSetLoginIpsAllowed());
    list.add(present_loginIpsAllowed);
    if (present_loginIpsAllowed)
      list.add(loginIpsAllowed);

    boolean present_lastLoginIp = true && (isSetLastLoginIp());
    list.add(present_lastLoginIp);
    if (present_lastLoginIp)
      list.add(lastLoginIp);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    boolean present_qq = true && (isSetQq());
    list.add(present_qq);
    if (present_qq)
      list.add(qq);

    boolean present_linkAddress = true && (isSetLinkAddress());
    list.add(present_linkAddress);
    if (present_linkAddress)
      list.add(linkAddress);

    boolean present_macInfo = true && (isSetMacInfo());
    list.add(present_macInfo);
    if (present_macInfo)
      list.add(macInfo);

    boolean present_diskInfo = true && (isSetDiskInfo());
    list.add(present_diskInfo);
    if (present_diskInfo)
      list.add(diskInfo);

    boolean present_cpuInfo = true && (isSetCpuInfo());
    list.add(present_cpuInfo);
    if (present_cpuInfo)
      list.add(cpuInfo);

    boolean present_passGuardCtrlVersion = true && (isSetPassGuardCtrlVersion());
    list.add(present_passGuardCtrlVersion);
    if (present_passGuardCtrlVersion)
      list.add(passGuardCtrlVersion);

    boolean present_clientType = true && (isSetClientType());
    list.add(present_clientType);
    if (present_clientType)
      list.add(clientType);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_lastLoginDate = true && (isSetLastLoginDate());
    list.add(present_lastLoginDate);
    if (present_lastLoginDate)
      list.add(lastLoginDate);

    boolean present_remarks = true && (isSetRemarks());
    list.add(present_remarks);
    if (present_remarks)
      list.add(remarks);

    boolean present_source = true && (isSetSource());
    list.add(present_source);
    if (present_source)
      list.add(source);

    boolean present_allowSystem = true && (isSetAllowSystem());
    list.add(present_allowSystem);
    if (present_allowSystem)
      list.add(allowSystem);

    return list.hashCode();
  }

  @Override
  public int compareTo(ExternalMerchantUserThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginName()).compareTo(other.isSetLoginName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginName, other.loginName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginNickname()).compareTo(other.isSetLoginNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginNickname, other.loginNickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginPassword()).compareTo(other.isSetLoginPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginPassword, other.loginPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayPassword()).compareTo(other.isSetPayPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payPassword, other.payPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecretQuestion()).compareTo(other.isSetSecretQuestion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecretQuestion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secretQuestion, other.secretQuestion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswerSecretQuestion()).compareTo(other.isSetAnswerSecretQuestion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerSecretQuestion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerSecretQuestion, other.answerSecretQuestion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginIpsAllowed()).compareTo(other.isSetLoginIpsAllowed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginIpsAllowed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginIpsAllowed, other.loginIpsAllowed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLoginIp()).compareTo(other.isSetLastLoginIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginIp, other.lastLoginIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQq()).compareTo(other.isSetQq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qq, other.qq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinkAddress()).compareTo(other.isSetLinkAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkAddress, other.linkAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMacInfo()).compareTo(other.isSetMacInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMacInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macInfo, other.macInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiskInfo()).compareTo(other.isSetDiskInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiskInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diskInfo, other.diskInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuInfo()).compareTo(other.isSetCpuInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuInfo, other.cpuInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassGuardCtrlVersion()).compareTo(other.isSetPassGuardCtrlVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassGuardCtrlVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passGuardCtrlVersion, other.passGuardCtrlVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientType()).compareTo(other.isSetClientType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientType, other.clientType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLoginDate()).compareTo(other.isSetLastLoginDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginDate, other.lastLoginDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemarks()).compareTo(other.isSetRemarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remarks, other.remarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowSystem()).compareTo(other.isSetAllowSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowSystem, other.allowSystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExternalMerchantUserThrift(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginName:");
    if (this.loginName == null) {
      sb.append("null");
    } else {
      sb.append(this.loginName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginNickname:");
    if (this.loginNickname == null) {
      sb.append("null");
    } else {
      sb.append(this.loginNickname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userType:");
    if (this.userType == null) {
      sb.append("null");
    } else {
      sb.append(this.userType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginPassword:");
    if (this.loginPassword == null) {
      sb.append("null");
    } else {
      sb.append(this.loginPassword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payPassword:");
    if (this.payPassword == null) {
      sb.append("null");
    } else {
      sb.append(this.payPassword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secretQuestion:");
    if (this.secretQuestion == null) {
      sb.append("null");
    } else {
      sb.append(this.secretQuestion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("answerSecretQuestion:");
    if (this.answerSecretQuestion == null) {
      sb.append("null");
    } else {
      sb.append(this.answerSecretQuestion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginIpsAllowed:");
    if (this.loginIpsAllowed == null) {
      sb.append("null");
    } else {
      sb.append(this.loginIpsAllowed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastLoginIp:");
    if (this.lastLoginIp == null) {
      sb.append("null");
    } else {
      sb.append(this.lastLoginIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qq:");
    if (this.qq == null) {
      sb.append("null");
    } else {
      sb.append(this.qq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("linkAddress:");
    if (this.linkAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.linkAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("macInfo:");
    if (this.macInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.macInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("diskInfo:");
    if (this.diskInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.diskInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuInfo:");
    if (this.cpuInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.cpuInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passGuardCtrlVersion:");
    if (this.passGuardCtrlVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.passGuardCtrlVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientType:");
    if (this.clientType == null) {
      sb.append("null");
    } else {
      sb.append(this.clientType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastLoginDate:");
    if (this.lastLoginDate == null) {
      sb.append("null");
    } else {
      sb.append(this.lastLoginDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remarks:");
    if (this.remarks == null) {
      sb.append("null");
    } else {
      sb.append(this.remarks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowSystem:");
    if (this.allowSystem == null) {
      sb.append("null");
    } else {
      sb.append(this.allowSystem);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExternalMerchantUserThriftStandardSchemeFactory implements SchemeFactory {
    public ExternalMerchantUserThriftStandardScheme getScheme() {
      return new ExternalMerchantUserThriftStandardScheme();
    }
  }

  private static class ExternalMerchantUserThriftStandardScheme extends StandardScheme<ExternalMerchantUserThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExternalMerchantUserThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOGIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginName = iprot.readString();
              struct.setLoginNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOGIN_NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginNickname = iprot.readString();
              struct.setLoginNicknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userType = iprot.readString();
              struct.setUserTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOGIN_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginPassword = iprot.readString();
              struct.setLoginPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAY_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payPassword = iprot.readString();
              struct.setPayPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SECRET_QUESTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secretQuestion = iprot.readString();
              struct.setSecretQuestionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ANSWER_SECRET_QUESTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.answerSecretQuestion = iprot.readString();
              struct.setAnswerSecretQuestionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOGIN_IPS_ALLOWED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginIpsAllowed = iprot.readString();
              struct.setLoginIpsAllowedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LAST_LOGIN_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLoginIp = iprot.readString();
              struct.setLastLoginIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // QQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qq = iprot.readString();
              struct.setQqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LINK_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkAddress = iprot.readString();
              struct.setLinkAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MAC_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.macInfo = iprot.readString();
              struct.setMacInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DISK_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.diskInfo = iprot.readString();
              struct.setDiskInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CPU_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpuInfo = iprot.readString();
              struct.setCpuInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PASS_GUARD_CTRL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passGuardCtrlVersion = iprot.readString();
              struct.setPassGuardCtrlVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CLIENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientType = iprot.readString();
              struct.setClientTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LAST_LOGIN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLoginDate = iprot.readString();
              struct.setLastLoginDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // REMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remarks = iprot.readString();
              struct.setRemarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ALLOW_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.allowSystem = iprot.readString();
              struct.setAllowSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExternalMerchantUserThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.loginName != null) {
        oprot.writeFieldBegin(LOGIN_NAME_FIELD_DESC);
        oprot.writeString(struct.loginName);
        oprot.writeFieldEnd();
      }
      if (struct.loginNickname != null) {
        oprot.writeFieldBegin(LOGIN_NICKNAME_FIELD_DESC);
        oprot.writeString(struct.loginNickname);
        oprot.writeFieldEnd();
      }
      if (struct.userType != null) {
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeString(struct.userType);
        oprot.writeFieldEnd();
      }
      if (struct.loginPassword != null) {
        oprot.writeFieldBegin(LOGIN_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.loginPassword);
        oprot.writeFieldEnd();
      }
      if (struct.payPassword != null) {
        oprot.writeFieldBegin(PAY_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.payPassword);
        oprot.writeFieldEnd();
      }
      if (struct.secretQuestion != null) {
        oprot.writeFieldBegin(SECRET_QUESTION_FIELD_DESC);
        oprot.writeString(struct.secretQuestion);
        oprot.writeFieldEnd();
      }
      if (struct.answerSecretQuestion != null) {
        oprot.writeFieldBegin(ANSWER_SECRET_QUESTION_FIELD_DESC);
        oprot.writeString(struct.answerSecretQuestion);
        oprot.writeFieldEnd();
      }
      if (struct.loginIpsAllowed != null) {
        oprot.writeFieldBegin(LOGIN_IPS_ALLOWED_FIELD_DESC);
        oprot.writeString(struct.loginIpsAllowed);
        oprot.writeFieldEnd();
      }
      if (struct.lastLoginIp != null) {
        oprot.writeFieldBegin(LAST_LOGIN_IP_FIELD_DESC);
        oprot.writeString(struct.lastLoginIp);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.qq != null) {
        oprot.writeFieldBegin(QQ_FIELD_DESC);
        oprot.writeString(struct.qq);
        oprot.writeFieldEnd();
      }
      if (struct.linkAddress != null) {
        oprot.writeFieldBegin(LINK_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.linkAddress);
        oprot.writeFieldEnd();
      }
      if (struct.macInfo != null) {
        oprot.writeFieldBegin(MAC_INFO_FIELD_DESC);
        oprot.writeString(struct.macInfo);
        oprot.writeFieldEnd();
      }
      if (struct.diskInfo != null) {
        oprot.writeFieldBegin(DISK_INFO_FIELD_DESC);
        oprot.writeString(struct.diskInfo);
        oprot.writeFieldEnd();
      }
      if (struct.cpuInfo != null) {
        oprot.writeFieldBegin(CPU_INFO_FIELD_DESC);
        oprot.writeString(struct.cpuInfo);
        oprot.writeFieldEnd();
      }
      if (struct.passGuardCtrlVersion != null) {
        oprot.writeFieldBegin(PASS_GUARD_CTRL_VERSION_FIELD_DESC);
        oprot.writeString(struct.passGuardCtrlVersion);
        oprot.writeFieldEnd();
      }
      if (struct.clientType != null) {
        oprot.writeFieldBegin(CLIENT_TYPE_FIELD_DESC);
        oprot.writeString(struct.clientType);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.lastLoginDate != null) {
        oprot.writeFieldBegin(LAST_LOGIN_DATE_FIELD_DESC);
        oprot.writeString(struct.lastLoginDate);
        oprot.writeFieldEnd();
      }
      if (struct.remarks != null) {
        oprot.writeFieldBegin(REMARKS_FIELD_DESC);
        oprot.writeString(struct.remarks);
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.allowSystem != null) {
        oprot.writeFieldBegin(ALLOW_SYSTEM_FIELD_DESC);
        oprot.writeString(struct.allowSystem);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExternalMerchantUserThriftTupleSchemeFactory implements SchemeFactory {
    public ExternalMerchantUserThriftTupleScheme getScheme() {
      return new ExternalMerchantUserThriftTupleScheme();
    }
  }

  private static class ExternalMerchantUserThriftTupleScheme extends TupleScheme<ExternalMerchantUserThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExternalMerchantUserThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetLoginName()) {
        optionals.set(1);
      }
      if (struct.isSetLoginNickname()) {
        optionals.set(2);
      }
      if (struct.isSetUserType()) {
        optionals.set(3);
      }
      if (struct.isSetLoginPassword()) {
        optionals.set(4);
      }
      if (struct.isSetPayPassword()) {
        optionals.set(5);
      }
      if (struct.isSetSecretQuestion()) {
        optionals.set(6);
      }
      if (struct.isSetAnswerSecretQuestion()) {
        optionals.set(7);
      }
      if (struct.isSetLoginIpsAllowed()) {
        optionals.set(8);
      }
      if (struct.isSetLastLoginIp()) {
        optionals.set(9);
      }
      if (struct.isSetPhone()) {
        optionals.set(10);
      }
      if (struct.isSetMobile()) {
        optionals.set(11);
      }
      if (struct.isSetQq()) {
        optionals.set(12);
      }
      if (struct.isSetLinkAddress()) {
        optionals.set(13);
      }
      if (struct.isSetMacInfo()) {
        optionals.set(14);
      }
      if (struct.isSetDiskInfo()) {
        optionals.set(15);
      }
      if (struct.isSetCpuInfo()) {
        optionals.set(16);
      }
      if (struct.isSetPassGuardCtrlVersion()) {
        optionals.set(17);
      }
      if (struct.isSetClientType()) {
        optionals.set(18);
      }
      if (struct.isSetStatus()) {
        optionals.set(19);
      }
      if (struct.isSetLastLoginDate()) {
        optionals.set(20);
      }
      if (struct.isSetRemarks()) {
        optionals.set(21);
      }
      if (struct.isSetSource()) {
        optionals.set(22);
      }
      if (struct.isSetAllowSystem()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetLoginName()) {
        oprot.writeString(struct.loginName);
      }
      if (struct.isSetLoginNickname()) {
        oprot.writeString(struct.loginNickname);
      }
      if (struct.isSetUserType()) {
        oprot.writeString(struct.userType);
      }
      if (struct.isSetLoginPassword()) {
        oprot.writeString(struct.loginPassword);
      }
      if (struct.isSetPayPassword()) {
        oprot.writeString(struct.payPassword);
      }
      if (struct.isSetSecretQuestion()) {
        oprot.writeString(struct.secretQuestion);
      }
      if (struct.isSetAnswerSecretQuestion()) {
        oprot.writeString(struct.answerSecretQuestion);
      }
      if (struct.isSetLoginIpsAllowed()) {
        oprot.writeString(struct.loginIpsAllowed);
      }
      if (struct.isSetLastLoginIp()) {
        oprot.writeString(struct.lastLoginIp);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetQq()) {
        oprot.writeString(struct.qq);
      }
      if (struct.isSetLinkAddress()) {
        oprot.writeString(struct.linkAddress);
      }
      if (struct.isSetMacInfo()) {
        oprot.writeString(struct.macInfo);
      }
      if (struct.isSetDiskInfo()) {
        oprot.writeString(struct.diskInfo);
      }
      if (struct.isSetCpuInfo()) {
        oprot.writeString(struct.cpuInfo);
      }
      if (struct.isSetPassGuardCtrlVersion()) {
        oprot.writeString(struct.passGuardCtrlVersion);
      }
      if (struct.isSetClientType()) {
        oprot.writeString(struct.clientType);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetLastLoginDate()) {
        oprot.writeString(struct.lastLoginDate);
      }
      if (struct.isSetRemarks()) {
        oprot.writeString(struct.remarks);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetAllowSystem()) {
        oprot.writeString(struct.allowSystem);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExternalMerchantUserThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loginName = iprot.readString();
        struct.setLoginNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loginNickname = iprot.readString();
        struct.setLoginNicknameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userType = iprot.readString();
        struct.setUserTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.loginPassword = iprot.readString();
        struct.setLoginPasswordIsSet(true);
      }
      if (incoming.get(5)) {
        struct.payPassword = iprot.readString();
        struct.setPayPasswordIsSet(true);
      }
      if (incoming.get(6)) {
        struct.secretQuestion = iprot.readString();
        struct.setSecretQuestionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.answerSecretQuestion = iprot.readString();
        struct.setAnswerSecretQuestionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.loginIpsAllowed = iprot.readString();
        struct.setLoginIpsAllowedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lastLoginIp = iprot.readString();
        struct.setLastLoginIpIsSet(true);
      }
      if (incoming.get(10)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(11)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(12)) {
        struct.qq = iprot.readString();
        struct.setQqIsSet(true);
      }
      if (incoming.get(13)) {
        struct.linkAddress = iprot.readString();
        struct.setLinkAddressIsSet(true);
      }
      if (incoming.get(14)) {
        struct.macInfo = iprot.readString();
        struct.setMacInfoIsSet(true);
      }
      if (incoming.get(15)) {
        struct.diskInfo = iprot.readString();
        struct.setDiskInfoIsSet(true);
      }
      if (incoming.get(16)) {
        struct.cpuInfo = iprot.readString();
        struct.setCpuInfoIsSet(true);
      }
      if (incoming.get(17)) {
        struct.passGuardCtrlVersion = iprot.readString();
        struct.setPassGuardCtrlVersionIsSet(true);
      }
      if (incoming.get(18)) {
        struct.clientType = iprot.readString();
        struct.setClientTypeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(20)) {
        struct.lastLoginDate = iprot.readString();
        struct.setLastLoginDateIsSet(true);
      }
      if (incoming.get(21)) {
        struct.remarks = iprot.readString();
        struct.setRemarksIsSet(true);
      }
      if (incoming.get(22)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(23)) {
        struct.allowSystem = iprot.readString();
        struct.setAllowSystemIsSet(true);
      }
    }
  }

}

