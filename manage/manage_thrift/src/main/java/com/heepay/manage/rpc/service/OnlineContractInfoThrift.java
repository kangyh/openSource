/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-05-17")
public class OnlineContractInfoThrift implements org.apache.thrift.TBase<OnlineContractInfoThrift, OnlineContractInfoThrift._Fields>, java.io.Serializable, Cloneable, Comparable<OnlineContractInfoThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OnlineContractInfoThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NORM_PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("normProductCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NOTIFY_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BACK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("backUrl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IP_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("ipDomain", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FILE1_FIELD_DESC = new org.apache.thrift.protocol.TField("file1", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FILE2_FIELD_DESC = new org.apache.thrift.protocol.TField("file2", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FILE3_FIELD_DESC = new org.apache.thrift.protocol.TField("file3", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FILE4_FIELD_DESC = new org.apache.thrift.protocol.TField("file4", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FILE5_FIELD_DESC = new org.apache.thrift.protocol.TField("file5", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PASS_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("passTime", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField SUCCESS_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("successTime", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CONTRACT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("contractTime", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REJECT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("rejectTime", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rate", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("times", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField ORIGINAL_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("originalFilePath", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField MIDDLE_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("middleFilePath", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField FINAL_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("finalFilePath", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField BATCH_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("batchNo", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.STRING, (short)27);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OnlineContractInfoThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OnlineContractInfoThriftTupleSchemeFactory());
  }

  public String id; // required
  public String userId; // required
  public String normProductCode; // required
  public String url; // required
  public String notifyUrl; // required
  public String backUrl; // required
  public String ipDomain; // required
  public String file1; // required
  public String file2; // required
  public String file3; // required
  public String file4; // required
  public String file5; // required
  public String status; // required
  public String createTime; // required
  public String passTime; // required
  public String successTime; // required
  public String contractTime; // required
  public String rejectTime; // required
  public String productName; // required
  public String rate; // required
  public String name; // required
  public String times; // required
  public String originalFilePath; // required
  public String middleFilePath; // required
  public String finalFilePath; // required
  public String batchNo; // required
  public String size; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USER_ID((short)2, "userId"),
    NORM_PRODUCT_CODE((short)3, "normProductCode"),
    URL((short)4, "url"),
    NOTIFY_URL((short)5, "notifyUrl"),
    BACK_URL((short)6, "backUrl"),
    IP_DOMAIN((short)7, "ipDomain"),
    FILE1((short)8, "file1"),
    FILE2((short)9, "file2"),
    FILE3((short)10, "file3"),
    FILE4((short)11, "file4"),
    FILE5((short)12, "file5"),
    STATUS((short)13, "status"),
    CREATE_TIME((short)14, "createTime"),
    PASS_TIME((short)15, "passTime"),
    SUCCESS_TIME((short)16, "successTime"),
    CONTRACT_TIME((short)17, "contractTime"),
    REJECT_TIME((short)18, "rejectTime"),
    PRODUCT_NAME((short)19, "productName"),
    RATE((short)20, "rate"),
    NAME((short)21, "name"),
    TIMES((short)22, "times"),
    ORIGINAL_FILE_PATH((short)23, "originalFilePath"),
    MIDDLE_FILE_PATH((short)24, "middleFilePath"),
    FINAL_FILE_PATH((short)25, "finalFilePath"),
    BATCH_NO((short)26, "batchNo"),
    SIZE((short)27, "size");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // NORM_PRODUCT_CODE
          return NORM_PRODUCT_CODE;
        case 4: // URL
          return URL;
        case 5: // NOTIFY_URL
          return NOTIFY_URL;
        case 6: // BACK_URL
          return BACK_URL;
        case 7: // IP_DOMAIN
          return IP_DOMAIN;
        case 8: // FILE1
          return FILE1;
        case 9: // FILE2
          return FILE2;
        case 10: // FILE3
          return FILE3;
        case 11: // FILE4
          return FILE4;
        case 12: // FILE5
          return FILE5;
        case 13: // STATUS
          return STATUS;
        case 14: // CREATE_TIME
          return CREATE_TIME;
        case 15: // PASS_TIME
          return PASS_TIME;
        case 16: // SUCCESS_TIME
          return SUCCESS_TIME;
        case 17: // CONTRACT_TIME
          return CONTRACT_TIME;
        case 18: // REJECT_TIME
          return REJECT_TIME;
        case 19: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 20: // RATE
          return RATE;
        case 21: // NAME
          return NAME;
        case 22: // TIMES
          return TIMES;
        case 23: // ORIGINAL_FILE_PATH
          return ORIGINAL_FILE_PATH;
        case 24: // MIDDLE_FILE_PATH
          return MIDDLE_FILE_PATH;
        case 25: // FINAL_FILE_PATH
          return FINAL_FILE_PATH;
        case 26: // BATCH_NO
          return BATCH_NO;
        case 27: // SIZE
          return SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NORM_PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("normProductCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFY_URL, new org.apache.thrift.meta_data.FieldMetaData("notifyUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BACK_URL, new org.apache.thrift.meta_data.FieldMetaData("backUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("ipDomain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE1, new org.apache.thrift.meta_data.FieldMetaData("file1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE2, new org.apache.thrift.meta_data.FieldMetaData("file2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE3, new org.apache.thrift.meta_data.FieldMetaData("file3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE4, new org.apache.thrift.meta_data.FieldMetaData("file4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE5, new org.apache.thrift.meta_data.FieldMetaData("file5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASS_TIME, new org.apache.thrift.meta_data.FieldMetaData("passTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCESS_TIME, new org.apache.thrift.meta_data.FieldMetaData("successTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_TIME, new org.apache.thrift.meta_data.FieldMetaData("contractTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REJECT_TIME, new org.apache.thrift.meta_data.FieldMetaData("rejectTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RATE, new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMES, new org.apache.thrift.meta_data.FieldMetaData("times", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("originalFilePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIDDLE_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("middleFilePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINAL_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("finalFilePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATCH_NO, new org.apache.thrift.meta_data.FieldMetaData("batchNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OnlineContractInfoThrift.class, metaDataMap);
  }

  public OnlineContractInfoThrift() {
  }

  public OnlineContractInfoThrift(
    String id,
    String userId,
    String normProductCode,
    String url,
    String notifyUrl,
    String backUrl,
    String ipDomain,
    String file1,
    String file2,
    String file3,
    String file4,
    String file5,
    String status,
    String createTime,
    String passTime,
    String successTime,
    String contractTime,
    String rejectTime,
    String productName,
    String rate,
    String name,
    String times,
    String originalFilePath,
    String middleFilePath,
    String finalFilePath,
    String batchNo,
    String size)
  {
    this();
    this.id = id;
    this.userId = userId;
    this.normProductCode = normProductCode;
    this.url = url;
    this.notifyUrl = notifyUrl;
    this.backUrl = backUrl;
    this.ipDomain = ipDomain;
    this.file1 = file1;
    this.file2 = file2;
    this.file3 = file3;
    this.file4 = file4;
    this.file5 = file5;
    this.status = status;
    this.createTime = createTime;
    this.passTime = passTime;
    this.successTime = successTime;
    this.contractTime = contractTime;
    this.rejectTime = rejectTime;
    this.productName = productName;
    this.rate = rate;
    this.name = name;
    this.times = times;
    this.originalFilePath = originalFilePath;
    this.middleFilePath = middleFilePath;
    this.finalFilePath = finalFilePath;
    this.batchNo = batchNo;
    this.size = size;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OnlineContractInfoThrift(OnlineContractInfoThrift other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetNormProductCode()) {
      this.normProductCode = other.normProductCode;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetNotifyUrl()) {
      this.notifyUrl = other.notifyUrl;
    }
    if (other.isSetBackUrl()) {
      this.backUrl = other.backUrl;
    }
    if (other.isSetIpDomain()) {
      this.ipDomain = other.ipDomain;
    }
    if (other.isSetFile1()) {
      this.file1 = other.file1;
    }
    if (other.isSetFile2()) {
      this.file2 = other.file2;
    }
    if (other.isSetFile3()) {
      this.file3 = other.file3;
    }
    if (other.isSetFile4()) {
      this.file4 = other.file4;
    }
    if (other.isSetFile5()) {
      this.file5 = other.file5;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetPassTime()) {
      this.passTime = other.passTime;
    }
    if (other.isSetSuccessTime()) {
      this.successTime = other.successTime;
    }
    if (other.isSetContractTime()) {
      this.contractTime = other.contractTime;
    }
    if (other.isSetRejectTime()) {
      this.rejectTime = other.rejectTime;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetRate()) {
      this.rate = other.rate;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetTimes()) {
      this.times = other.times;
    }
    if (other.isSetOriginalFilePath()) {
      this.originalFilePath = other.originalFilePath;
    }
    if (other.isSetMiddleFilePath()) {
      this.middleFilePath = other.middleFilePath;
    }
    if (other.isSetFinalFilePath()) {
      this.finalFilePath = other.finalFilePath;
    }
    if (other.isSetBatchNo()) {
      this.batchNo = other.batchNo;
    }
    if (other.isSetSize()) {
      this.size = other.size;
    }
  }

  public OnlineContractInfoThrift deepCopy() {
    return new OnlineContractInfoThrift(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.userId = null;
    this.normProductCode = null;
    this.url = null;
    this.notifyUrl = null;
    this.backUrl = null;
    this.ipDomain = null;
    this.file1 = null;
    this.file2 = null;
    this.file3 = null;
    this.file4 = null;
    this.file5 = null;
    this.status = null;
    this.createTime = null;
    this.passTime = null;
    this.successTime = null;
    this.contractTime = null;
    this.rejectTime = null;
    this.productName = null;
    this.rate = null;
    this.name = null;
    this.times = null;
    this.originalFilePath = null;
    this.middleFilePath = null;
    this.finalFilePath = null;
    this.batchNo = null;
    this.size = null;
  }

  public String getId() {
    return this.id;
  }

  public OnlineContractInfoThrift setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getUserId() {
    return this.userId;
  }

  public OnlineContractInfoThrift setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public String getNormProductCode() {
    return this.normProductCode;
  }

  public OnlineContractInfoThrift setNormProductCode(String normProductCode) {
    this.normProductCode = normProductCode;
    return this;
  }

  public void unsetNormProductCode() {
    this.normProductCode = null;
  }

  /** Returns true if field normProductCode is set (has been assigned a value) and false otherwise */
  public boolean isSetNormProductCode() {
    return this.normProductCode != null;
  }

  public void setNormProductCodeIsSet(boolean value) {
    if (!value) {
      this.normProductCode = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public OnlineContractInfoThrift setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getNotifyUrl() {
    return this.notifyUrl;
  }

  public OnlineContractInfoThrift setNotifyUrl(String notifyUrl) {
    this.notifyUrl = notifyUrl;
    return this;
  }

  public void unsetNotifyUrl() {
    this.notifyUrl = null;
  }

  /** Returns true if field notifyUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyUrl() {
    return this.notifyUrl != null;
  }

  public void setNotifyUrlIsSet(boolean value) {
    if (!value) {
      this.notifyUrl = null;
    }
  }

  public String getBackUrl() {
    return this.backUrl;
  }

  public OnlineContractInfoThrift setBackUrl(String backUrl) {
    this.backUrl = backUrl;
    return this;
  }

  public void unsetBackUrl() {
    this.backUrl = null;
  }

  /** Returns true if field backUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetBackUrl() {
    return this.backUrl != null;
  }

  public void setBackUrlIsSet(boolean value) {
    if (!value) {
      this.backUrl = null;
    }
  }

  public String getIpDomain() {
    return this.ipDomain;
  }

  public OnlineContractInfoThrift setIpDomain(String ipDomain) {
    this.ipDomain = ipDomain;
    return this;
  }

  public void unsetIpDomain() {
    this.ipDomain = null;
  }

  /** Returns true if field ipDomain is set (has been assigned a value) and false otherwise */
  public boolean isSetIpDomain() {
    return this.ipDomain != null;
  }

  public void setIpDomainIsSet(boolean value) {
    if (!value) {
      this.ipDomain = null;
    }
  }

  public String getFile1() {
    return this.file1;
  }

  public OnlineContractInfoThrift setFile1(String file1) {
    this.file1 = file1;
    return this;
  }

  public void unsetFile1() {
    this.file1 = null;
  }

  /** Returns true if field file1 is set (has been assigned a value) and false otherwise */
  public boolean isSetFile1() {
    return this.file1 != null;
  }

  public void setFile1IsSet(boolean value) {
    if (!value) {
      this.file1 = null;
    }
  }

  public String getFile2() {
    return this.file2;
  }

  public OnlineContractInfoThrift setFile2(String file2) {
    this.file2 = file2;
    return this;
  }

  public void unsetFile2() {
    this.file2 = null;
  }

  /** Returns true if field file2 is set (has been assigned a value) and false otherwise */
  public boolean isSetFile2() {
    return this.file2 != null;
  }

  public void setFile2IsSet(boolean value) {
    if (!value) {
      this.file2 = null;
    }
  }

  public String getFile3() {
    return this.file3;
  }

  public OnlineContractInfoThrift setFile3(String file3) {
    this.file3 = file3;
    return this;
  }

  public void unsetFile3() {
    this.file3 = null;
  }

  /** Returns true if field file3 is set (has been assigned a value) and false otherwise */
  public boolean isSetFile3() {
    return this.file3 != null;
  }

  public void setFile3IsSet(boolean value) {
    if (!value) {
      this.file3 = null;
    }
  }

  public String getFile4() {
    return this.file4;
  }

  public OnlineContractInfoThrift setFile4(String file4) {
    this.file4 = file4;
    return this;
  }

  public void unsetFile4() {
    this.file4 = null;
  }

  /** Returns true if field file4 is set (has been assigned a value) and false otherwise */
  public boolean isSetFile4() {
    return this.file4 != null;
  }

  public void setFile4IsSet(boolean value) {
    if (!value) {
      this.file4 = null;
    }
  }

  public String getFile5() {
    return this.file5;
  }

  public OnlineContractInfoThrift setFile5(String file5) {
    this.file5 = file5;
    return this;
  }

  public void unsetFile5() {
    this.file5 = null;
  }

  /** Returns true if field file5 is set (has been assigned a value) and false otherwise */
  public boolean isSetFile5() {
    return this.file5 != null;
  }

  public void setFile5IsSet(boolean value) {
    if (!value) {
      this.file5 = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public OnlineContractInfoThrift setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public OnlineContractInfoThrift setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getPassTime() {
    return this.passTime;
  }

  public OnlineContractInfoThrift setPassTime(String passTime) {
    this.passTime = passTime;
    return this;
  }

  public void unsetPassTime() {
    this.passTime = null;
  }

  /** Returns true if field passTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPassTime() {
    return this.passTime != null;
  }

  public void setPassTimeIsSet(boolean value) {
    if (!value) {
      this.passTime = null;
    }
  }

  public String getSuccessTime() {
    return this.successTime;
  }

  public OnlineContractInfoThrift setSuccessTime(String successTime) {
    this.successTime = successTime;
    return this;
  }

  public void unsetSuccessTime() {
    this.successTime = null;
  }

  /** Returns true if field successTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessTime() {
    return this.successTime != null;
  }

  public void setSuccessTimeIsSet(boolean value) {
    if (!value) {
      this.successTime = null;
    }
  }

  public String getContractTime() {
    return this.contractTime;
  }

  public OnlineContractInfoThrift setContractTime(String contractTime) {
    this.contractTime = contractTime;
    return this;
  }

  public void unsetContractTime() {
    this.contractTime = null;
  }

  /** Returns true if field contractTime is set (has been assigned a value) and false otherwise */
  public boolean isSetContractTime() {
    return this.contractTime != null;
  }

  public void setContractTimeIsSet(boolean value) {
    if (!value) {
      this.contractTime = null;
    }
  }

  public String getRejectTime() {
    return this.rejectTime;
  }

  public OnlineContractInfoThrift setRejectTime(String rejectTime) {
    this.rejectTime = rejectTime;
    return this;
  }

  public void unsetRejectTime() {
    this.rejectTime = null;
  }

  /** Returns true if field rejectTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRejectTime() {
    return this.rejectTime != null;
  }

  public void setRejectTimeIsSet(boolean value) {
    if (!value) {
      this.rejectTime = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public OnlineContractInfoThrift setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getRate() {
    return this.rate;
  }

  public OnlineContractInfoThrift setRate(String rate) {
    this.rate = rate;
    return this;
  }

  public void unsetRate() {
    this.rate = null;
  }

  /** Returns true if field rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return this.rate != null;
  }

  public void setRateIsSet(boolean value) {
    if (!value) {
      this.rate = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public OnlineContractInfoThrift setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getTimes() {
    return this.times;
  }

  public OnlineContractInfoThrift setTimes(String times) {
    this.times = times;
    return this;
  }

  public void unsetTimes() {
    this.times = null;
  }

  /** Returns true if field times is set (has been assigned a value) and false otherwise */
  public boolean isSetTimes() {
    return this.times != null;
  }

  public void setTimesIsSet(boolean value) {
    if (!value) {
      this.times = null;
    }
  }

  public String getOriginalFilePath() {
    return this.originalFilePath;
  }

  public OnlineContractInfoThrift setOriginalFilePath(String originalFilePath) {
    this.originalFilePath = originalFilePath;
    return this;
  }

  public void unsetOriginalFilePath() {
    this.originalFilePath = null;
  }

  /** Returns true if field originalFilePath is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalFilePath() {
    return this.originalFilePath != null;
  }

  public void setOriginalFilePathIsSet(boolean value) {
    if (!value) {
      this.originalFilePath = null;
    }
  }

  public String getMiddleFilePath() {
    return this.middleFilePath;
  }

  public OnlineContractInfoThrift setMiddleFilePath(String middleFilePath) {
    this.middleFilePath = middleFilePath;
    return this;
  }

  public void unsetMiddleFilePath() {
    this.middleFilePath = null;
  }

  /** Returns true if field middleFilePath is set (has been assigned a value) and false otherwise */
  public boolean isSetMiddleFilePath() {
    return this.middleFilePath != null;
  }

  public void setMiddleFilePathIsSet(boolean value) {
    if (!value) {
      this.middleFilePath = null;
    }
  }

  public String getFinalFilePath() {
    return this.finalFilePath;
  }

  public OnlineContractInfoThrift setFinalFilePath(String finalFilePath) {
    this.finalFilePath = finalFilePath;
    return this;
  }

  public void unsetFinalFilePath() {
    this.finalFilePath = null;
  }

  /** Returns true if field finalFilePath is set (has been assigned a value) and false otherwise */
  public boolean isSetFinalFilePath() {
    return this.finalFilePath != null;
  }

  public void setFinalFilePathIsSet(boolean value) {
    if (!value) {
      this.finalFilePath = null;
    }
  }

  public String getBatchNo() {
    return this.batchNo;
  }

  public OnlineContractInfoThrift setBatchNo(String batchNo) {
    this.batchNo = batchNo;
    return this;
  }

  public void unsetBatchNo() {
    this.batchNo = null;
  }

  /** Returns true if field batchNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchNo() {
    return this.batchNo != null;
  }

  public void setBatchNoIsSet(boolean value) {
    if (!value) {
      this.batchNo = null;
    }
  }

  public String getSize() {
    return this.size;
  }

  public OnlineContractInfoThrift setSize(String size) {
    this.size = size;
    return this;
  }

  public void unsetSize() {
    this.size = null;
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return this.size != null;
  }

  public void setSizeIsSet(boolean value) {
    if (!value) {
      this.size = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case NORM_PRODUCT_CODE:
      if (value == null) {
        unsetNormProductCode();
      } else {
        setNormProductCode((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case NOTIFY_URL:
      if (value == null) {
        unsetNotifyUrl();
      } else {
        setNotifyUrl((String)value);
      }
      break;

    case BACK_URL:
      if (value == null) {
        unsetBackUrl();
      } else {
        setBackUrl((String)value);
      }
      break;

    case IP_DOMAIN:
      if (value == null) {
        unsetIpDomain();
      } else {
        setIpDomain((String)value);
      }
      break;

    case FILE1:
      if (value == null) {
        unsetFile1();
      } else {
        setFile1((String)value);
      }
      break;

    case FILE2:
      if (value == null) {
        unsetFile2();
      } else {
        setFile2((String)value);
      }
      break;

    case FILE3:
      if (value == null) {
        unsetFile3();
      } else {
        setFile3((String)value);
      }
      break;

    case FILE4:
      if (value == null) {
        unsetFile4();
      } else {
        setFile4((String)value);
      }
      break;

    case FILE5:
      if (value == null) {
        unsetFile5();
      } else {
        setFile5((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case PASS_TIME:
      if (value == null) {
        unsetPassTime();
      } else {
        setPassTime((String)value);
      }
      break;

    case SUCCESS_TIME:
      if (value == null) {
        unsetSuccessTime();
      } else {
        setSuccessTime((String)value);
      }
      break;

    case CONTRACT_TIME:
      if (value == null) {
        unsetContractTime();
      } else {
        setContractTime((String)value);
      }
      break;

    case REJECT_TIME:
      if (value == null) {
        unsetRejectTime();
      } else {
        setRejectTime((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case RATE:
      if (value == null) {
        unsetRate();
      } else {
        setRate((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TIMES:
      if (value == null) {
        unsetTimes();
      } else {
        setTimes((String)value);
      }
      break;

    case ORIGINAL_FILE_PATH:
      if (value == null) {
        unsetOriginalFilePath();
      } else {
        setOriginalFilePath((String)value);
      }
      break;

    case MIDDLE_FILE_PATH:
      if (value == null) {
        unsetMiddleFilePath();
      } else {
        setMiddleFilePath((String)value);
      }
      break;

    case FINAL_FILE_PATH:
      if (value == null) {
        unsetFinalFilePath();
      } else {
        setFinalFilePath((String)value);
      }
      break;

    case BATCH_NO:
      if (value == null) {
        unsetBatchNo();
      } else {
        setBatchNo((String)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case USER_ID:
      return getUserId();

    case NORM_PRODUCT_CODE:
      return getNormProductCode();

    case URL:
      return getUrl();

    case NOTIFY_URL:
      return getNotifyUrl();

    case BACK_URL:
      return getBackUrl();

    case IP_DOMAIN:
      return getIpDomain();

    case FILE1:
      return getFile1();

    case FILE2:
      return getFile2();

    case FILE3:
      return getFile3();

    case FILE4:
      return getFile4();

    case FILE5:
      return getFile5();

    case STATUS:
      return getStatus();

    case CREATE_TIME:
      return getCreateTime();

    case PASS_TIME:
      return getPassTime();

    case SUCCESS_TIME:
      return getSuccessTime();

    case CONTRACT_TIME:
      return getContractTime();

    case REJECT_TIME:
      return getRejectTime();

    case PRODUCT_NAME:
      return getProductName();

    case RATE:
      return getRate();

    case NAME:
      return getName();

    case TIMES:
      return getTimes();

    case ORIGINAL_FILE_PATH:
      return getOriginalFilePath();

    case MIDDLE_FILE_PATH:
      return getMiddleFilePath();

    case FINAL_FILE_PATH:
      return getFinalFilePath();

    case BATCH_NO:
      return getBatchNo();

    case SIZE:
      return getSize();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER_ID:
      return isSetUserId();
    case NORM_PRODUCT_CODE:
      return isSetNormProductCode();
    case URL:
      return isSetUrl();
    case NOTIFY_URL:
      return isSetNotifyUrl();
    case BACK_URL:
      return isSetBackUrl();
    case IP_DOMAIN:
      return isSetIpDomain();
    case FILE1:
      return isSetFile1();
    case FILE2:
      return isSetFile2();
    case FILE3:
      return isSetFile3();
    case FILE4:
      return isSetFile4();
    case FILE5:
      return isSetFile5();
    case STATUS:
      return isSetStatus();
    case CREATE_TIME:
      return isSetCreateTime();
    case PASS_TIME:
      return isSetPassTime();
    case SUCCESS_TIME:
      return isSetSuccessTime();
    case CONTRACT_TIME:
      return isSetContractTime();
    case REJECT_TIME:
      return isSetRejectTime();
    case PRODUCT_NAME:
      return isSetProductName();
    case RATE:
      return isSetRate();
    case NAME:
      return isSetName();
    case TIMES:
      return isSetTimes();
    case ORIGINAL_FILE_PATH:
      return isSetOriginalFilePath();
    case MIDDLE_FILE_PATH:
      return isSetMiddleFilePath();
    case FINAL_FILE_PATH:
      return isSetFinalFilePath();
    case BATCH_NO:
      return isSetBatchNo();
    case SIZE:
      return isSetSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OnlineContractInfoThrift)
      return this.equals((OnlineContractInfoThrift)that);
    return false;
  }

  public boolean equals(OnlineContractInfoThrift that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_normProductCode = true && this.isSetNormProductCode();
    boolean that_present_normProductCode = true && that.isSetNormProductCode();
    if (this_present_normProductCode || that_present_normProductCode) {
      if (!(this_present_normProductCode && that_present_normProductCode))
        return false;
      if (!this.normProductCode.equals(that.normProductCode))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_notifyUrl = true && this.isSetNotifyUrl();
    boolean that_present_notifyUrl = true && that.isSetNotifyUrl();
    if (this_present_notifyUrl || that_present_notifyUrl) {
      if (!(this_present_notifyUrl && that_present_notifyUrl))
        return false;
      if (!this.notifyUrl.equals(that.notifyUrl))
        return false;
    }

    boolean this_present_backUrl = true && this.isSetBackUrl();
    boolean that_present_backUrl = true && that.isSetBackUrl();
    if (this_present_backUrl || that_present_backUrl) {
      if (!(this_present_backUrl && that_present_backUrl))
        return false;
      if (!this.backUrl.equals(that.backUrl))
        return false;
    }

    boolean this_present_ipDomain = true && this.isSetIpDomain();
    boolean that_present_ipDomain = true && that.isSetIpDomain();
    if (this_present_ipDomain || that_present_ipDomain) {
      if (!(this_present_ipDomain && that_present_ipDomain))
        return false;
      if (!this.ipDomain.equals(that.ipDomain))
        return false;
    }

    boolean this_present_file1 = true && this.isSetFile1();
    boolean that_present_file1 = true && that.isSetFile1();
    if (this_present_file1 || that_present_file1) {
      if (!(this_present_file1 && that_present_file1))
        return false;
      if (!this.file1.equals(that.file1))
        return false;
    }

    boolean this_present_file2 = true && this.isSetFile2();
    boolean that_present_file2 = true && that.isSetFile2();
    if (this_present_file2 || that_present_file2) {
      if (!(this_present_file2 && that_present_file2))
        return false;
      if (!this.file2.equals(that.file2))
        return false;
    }

    boolean this_present_file3 = true && this.isSetFile3();
    boolean that_present_file3 = true && that.isSetFile3();
    if (this_present_file3 || that_present_file3) {
      if (!(this_present_file3 && that_present_file3))
        return false;
      if (!this.file3.equals(that.file3))
        return false;
    }

    boolean this_present_file4 = true && this.isSetFile4();
    boolean that_present_file4 = true && that.isSetFile4();
    if (this_present_file4 || that_present_file4) {
      if (!(this_present_file4 && that_present_file4))
        return false;
      if (!this.file4.equals(that.file4))
        return false;
    }

    boolean this_present_file5 = true && this.isSetFile5();
    boolean that_present_file5 = true && that.isSetFile5();
    if (this_present_file5 || that_present_file5) {
      if (!(this_present_file5 && that_present_file5))
        return false;
      if (!this.file5.equals(that.file5))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_passTime = true && this.isSetPassTime();
    boolean that_present_passTime = true && that.isSetPassTime();
    if (this_present_passTime || that_present_passTime) {
      if (!(this_present_passTime && that_present_passTime))
        return false;
      if (!this.passTime.equals(that.passTime))
        return false;
    }

    boolean this_present_successTime = true && this.isSetSuccessTime();
    boolean that_present_successTime = true && that.isSetSuccessTime();
    if (this_present_successTime || that_present_successTime) {
      if (!(this_present_successTime && that_present_successTime))
        return false;
      if (!this.successTime.equals(that.successTime))
        return false;
    }

    boolean this_present_contractTime = true && this.isSetContractTime();
    boolean that_present_contractTime = true && that.isSetContractTime();
    if (this_present_contractTime || that_present_contractTime) {
      if (!(this_present_contractTime && that_present_contractTime))
        return false;
      if (!this.contractTime.equals(that.contractTime))
        return false;
    }

    boolean this_present_rejectTime = true && this.isSetRejectTime();
    boolean that_present_rejectTime = true && that.isSetRejectTime();
    if (this_present_rejectTime || that_present_rejectTime) {
      if (!(this_present_rejectTime && that_present_rejectTime))
        return false;
      if (!this.rejectTime.equals(that.rejectTime))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_rate = true && this.isSetRate();
    boolean that_present_rate = true && that.isSetRate();
    if (this_present_rate || that_present_rate) {
      if (!(this_present_rate && that_present_rate))
        return false;
      if (!this.rate.equals(that.rate))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_times = true && this.isSetTimes();
    boolean that_present_times = true && that.isSetTimes();
    if (this_present_times || that_present_times) {
      if (!(this_present_times && that_present_times))
        return false;
      if (!this.times.equals(that.times))
        return false;
    }

    boolean this_present_originalFilePath = true && this.isSetOriginalFilePath();
    boolean that_present_originalFilePath = true && that.isSetOriginalFilePath();
    if (this_present_originalFilePath || that_present_originalFilePath) {
      if (!(this_present_originalFilePath && that_present_originalFilePath))
        return false;
      if (!this.originalFilePath.equals(that.originalFilePath))
        return false;
    }

    boolean this_present_middleFilePath = true && this.isSetMiddleFilePath();
    boolean that_present_middleFilePath = true && that.isSetMiddleFilePath();
    if (this_present_middleFilePath || that_present_middleFilePath) {
      if (!(this_present_middleFilePath && that_present_middleFilePath))
        return false;
      if (!this.middleFilePath.equals(that.middleFilePath))
        return false;
    }

    boolean this_present_finalFilePath = true && this.isSetFinalFilePath();
    boolean that_present_finalFilePath = true && that.isSetFinalFilePath();
    if (this_present_finalFilePath || that_present_finalFilePath) {
      if (!(this_present_finalFilePath && that_present_finalFilePath))
        return false;
      if (!this.finalFilePath.equals(that.finalFilePath))
        return false;
    }

    boolean this_present_batchNo = true && this.isSetBatchNo();
    boolean that_present_batchNo = true && that.isSetBatchNo();
    if (this_present_batchNo || that_present_batchNo) {
      if (!(this_present_batchNo && that_present_batchNo))
        return false;
      if (!this.batchNo.equals(that.batchNo))
        return false;
    }

    boolean this_present_size = true && this.isSetSize();
    boolean that_present_size = true && that.isSetSize();
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (!this.size.equals(that.size))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_userId = true && (isSetUserId());
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_normProductCode = true && (isSetNormProductCode());
    list.add(present_normProductCode);
    if (present_normProductCode)
      list.add(normProductCode);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_notifyUrl = true && (isSetNotifyUrl());
    list.add(present_notifyUrl);
    if (present_notifyUrl)
      list.add(notifyUrl);

    boolean present_backUrl = true && (isSetBackUrl());
    list.add(present_backUrl);
    if (present_backUrl)
      list.add(backUrl);

    boolean present_ipDomain = true && (isSetIpDomain());
    list.add(present_ipDomain);
    if (present_ipDomain)
      list.add(ipDomain);

    boolean present_file1 = true && (isSetFile1());
    list.add(present_file1);
    if (present_file1)
      list.add(file1);

    boolean present_file2 = true && (isSetFile2());
    list.add(present_file2);
    if (present_file2)
      list.add(file2);

    boolean present_file3 = true && (isSetFile3());
    list.add(present_file3);
    if (present_file3)
      list.add(file3);

    boolean present_file4 = true && (isSetFile4());
    list.add(present_file4);
    if (present_file4)
      list.add(file4);

    boolean present_file5 = true && (isSetFile5());
    list.add(present_file5);
    if (present_file5)
      list.add(file5);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_passTime = true && (isSetPassTime());
    list.add(present_passTime);
    if (present_passTime)
      list.add(passTime);

    boolean present_successTime = true && (isSetSuccessTime());
    list.add(present_successTime);
    if (present_successTime)
      list.add(successTime);

    boolean present_contractTime = true && (isSetContractTime());
    list.add(present_contractTime);
    if (present_contractTime)
      list.add(contractTime);

    boolean present_rejectTime = true && (isSetRejectTime());
    list.add(present_rejectTime);
    if (present_rejectTime)
      list.add(rejectTime);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_rate = true && (isSetRate());
    list.add(present_rate);
    if (present_rate)
      list.add(rate);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_times = true && (isSetTimes());
    list.add(present_times);
    if (present_times)
      list.add(times);

    boolean present_originalFilePath = true && (isSetOriginalFilePath());
    list.add(present_originalFilePath);
    if (present_originalFilePath)
      list.add(originalFilePath);

    boolean present_middleFilePath = true && (isSetMiddleFilePath());
    list.add(present_middleFilePath);
    if (present_middleFilePath)
      list.add(middleFilePath);

    boolean present_finalFilePath = true && (isSetFinalFilePath());
    list.add(present_finalFilePath);
    if (present_finalFilePath)
      list.add(finalFilePath);

    boolean present_batchNo = true && (isSetBatchNo());
    list.add(present_batchNo);
    if (present_batchNo)
      list.add(batchNo);

    boolean present_size = true && (isSetSize());
    list.add(present_size);
    if (present_size)
      list.add(size);

    return list.hashCode();
  }

  @Override
  public int compareTo(OnlineContractInfoThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNormProductCode()).compareTo(other.isSetNormProductCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNormProductCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.normProductCode, other.normProductCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyUrl()).compareTo(other.isSetNotifyUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyUrl, other.notifyUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackUrl()).compareTo(other.isSetBackUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backUrl, other.backUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpDomain()).compareTo(other.isSetIpDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipDomain, other.ipDomain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile1()).compareTo(other.isSetFile1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file1, other.file1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile2()).compareTo(other.isSetFile2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file2, other.file2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile3()).compareTo(other.isSetFile3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file3, other.file3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile4()).compareTo(other.isSetFile4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file4, other.file4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile5()).compareTo(other.isSetFile5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file5, other.file5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassTime()).compareTo(other.isSetPassTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passTime, other.passTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessTime()).compareTo(other.isSetSuccessTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successTime, other.successTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractTime()).compareTo(other.isSetContractTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractTime, other.contractTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRejectTime()).compareTo(other.isSetRejectTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRejectTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rejectTime, other.rejectTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRate()).compareTo(other.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, other.rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimes()).compareTo(other.isSetTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.times, other.times);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalFilePath()).compareTo(other.isSetOriginalFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalFilePath, other.originalFilePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMiddleFilePath()).compareTo(other.isSetMiddleFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMiddleFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.middleFilePath, other.middleFilePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinalFilePath()).compareTo(other.isSetFinalFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinalFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finalFilePath, other.finalFilePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchNo()).compareTo(other.isSetBatchNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchNo, other.batchNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OnlineContractInfoThrift(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("normProductCode:");
    if (this.normProductCode == null) {
      sb.append("null");
    } else {
      sb.append(this.normProductCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifyUrl:");
    if (this.notifyUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.notifyUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("backUrl:");
    if (this.backUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.backUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipDomain:");
    if (this.ipDomain == null) {
      sb.append("null");
    } else {
      sb.append(this.ipDomain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("file1:");
    if (this.file1 == null) {
      sb.append("null");
    } else {
      sb.append(this.file1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("file2:");
    if (this.file2 == null) {
      sb.append("null");
    } else {
      sb.append(this.file2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("file3:");
    if (this.file3 == null) {
      sb.append("null");
    } else {
      sb.append(this.file3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("file4:");
    if (this.file4 == null) {
      sb.append("null");
    } else {
      sb.append(this.file4);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("file5:");
    if (this.file5 == null) {
      sb.append("null");
    } else {
      sb.append(this.file5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passTime:");
    if (this.passTime == null) {
      sb.append("null");
    } else {
      sb.append(this.passTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("successTime:");
    if (this.successTime == null) {
      sb.append("null");
    } else {
      sb.append(this.successTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractTime:");
    if (this.contractTime == null) {
      sb.append("null");
    } else {
      sb.append(this.contractTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rejectTime:");
    if (this.rejectTime == null) {
      sb.append("null");
    } else {
      sb.append(this.rejectTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rate:");
    if (this.rate == null) {
      sb.append("null");
    } else {
      sb.append(this.rate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("times:");
    if (this.times == null) {
      sb.append("null");
    } else {
      sb.append(this.times);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("originalFilePath:");
    if (this.originalFilePath == null) {
      sb.append("null");
    } else {
      sb.append(this.originalFilePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("middleFilePath:");
    if (this.middleFilePath == null) {
      sb.append("null");
    } else {
      sb.append(this.middleFilePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("finalFilePath:");
    if (this.finalFilePath == null) {
      sb.append("null");
    } else {
      sb.append(this.finalFilePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("batchNo:");
    if (this.batchNo == null) {
      sb.append("null");
    } else {
      sb.append(this.batchNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    if (this.size == null) {
      sb.append("null");
    } else {
      sb.append(this.size);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OnlineContractInfoThriftStandardSchemeFactory implements SchemeFactory {
    public OnlineContractInfoThriftStandardScheme getScheme() {
      return new OnlineContractInfoThriftStandardScheme();
    }
  }

  private static class OnlineContractInfoThriftStandardScheme extends StandardScheme<OnlineContractInfoThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OnlineContractInfoThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NORM_PRODUCT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.normProductCode = iprot.readString();
              struct.setNormProductCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NOTIFY_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notifyUrl = iprot.readString();
              struct.setNotifyUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BACK_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.backUrl = iprot.readString();
              struct.setBackUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IP_DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipDomain = iprot.readString();
              struct.setIpDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FILE1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file1 = iprot.readString();
              struct.setFile1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FILE2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file2 = iprot.readString();
              struct.setFile2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FILE3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file3 = iprot.readString();
              struct.setFile3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FILE4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file4 = iprot.readString();
              struct.setFile4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FILE5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file5 = iprot.readString();
              struct.setFile5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PASS_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passTime = iprot.readString();
              struct.setPassTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SUCCESS_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.successTime = iprot.readString();
              struct.setSuccessTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CONTRACT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractTime = iprot.readString();
              struct.setContractTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REJECT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rejectTime = iprot.readString();
              struct.setRejectTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rate = iprot.readString();
              struct.setRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.times = iprot.readString();
              struct.setTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // ORIGINAL_FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originalFilePath = iprot.readString();
              struct.setOriginalFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MIDDLE_FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.middleFilePath = iprot.readString();
              struct.setMiddleFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // FINAL_FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.finalFilePath = iprot.readString();
              struct.setFinalFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // BATCH_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.batchNo = iprot.readString();
              struct.setBatchNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.size = iprot.readString();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OnlineContractInfoThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.normProductCode != null) {
        oprot.writeFieldBegin(NORM_PRODUCT_CODE_FIELD_DESC);
        oprot.writeString(struct.normProductCode);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.notifyUrl != null) {
        oprot.writeFieldBegin(NOTIFY_URL_FIELD_DESC);
        oprot.writeString(struct.notifyUrl);
        oprot.writeFieldEnd();
      }
      if (struct.backUrl != null) {
        oprot.writeFieldBegin(BACK_URL_FIELD_DESC);
        oprot.writeString(struct.backUrl);
        oprot.writeFieldEnd();
      }
      if (struct.ipDomain != null) {
        oprot.writeFieldBegin(IP_DOMAIN_FIELD_DESC);
        oprot.writeString(struct.ipDomain);
        oprot.writeFieldEnd();
      }
      if (struct.file1 != null) {
        oprot.writeFieldBegin(FILE1_FIELD_DESC);
        oprot.writeString(struct.file1);
        oprot.writeFieldEnd();
      }
      if (struct.file2 != null) {
        oprot.writeFieldBegin(FILE2_FIELD_DESC);
        oprot.writeString(struct.file2);
        oprot.writeFieldEnd();
      }
      if (struct.file3 != null) {
        oprot.writeFieldBegin(FILE3_FIELD_DESC);
        oprot.writeString(struct.file3);
        oprot.writeFieldEnd();
      }
      if (struct.file4 != null) {
        oprot.writeFieldBegin(FILE4_FIELD_DESC);
        oprot.writeString(struct.file4);
        oprot.writeFieldEnd();
      }
      if (struct.file5 != null) {
        oprot.writeFieldBegin(FILE5_FIELD_DESC);
        oprot.writeString(struct.file5);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.passTime != null) {
        oprot.writeFieldBegin(PASS_TIME_FIELD_DESC);
        oprot.writeString(struct.passTime);
        oprot.writeFieldEnd();
      }
      if (struct.successTime != null) {
        oprot.writeFieldBegin(SUCCESS_TIME_FIELD_DESC);
        oprot.writeString(struct.successTime);
        oprot.writeFieldEnd();
      }
      if (struct.contractTime != null) {
        oprot.writeFieldBegin(CONTRACT_TIME_FIELD_DESC);
        oprot.writeString(struct.contractTime);
        oprot.writeFieldEnd();
      }
      if (struct.rejectTime != null) {
        oprot.writeFieldBegin(REJECT_TIME_FIELD_DESC);
        oprot.writeString(struct.rejectTime);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.rate != null) {
        oprot.writeFieldBegin(RATE_FIELD_DESC);
        oprot.writeString(struct.rate);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.times != null) {
        oprot.writeFieldBegin(TIMES_FIELD_DESC);
        oprot.writeString(struct.times);
        oprot.writeFieldEnd();
      }
      if (struct.originalFilePath != null) {
        oprot.writeFieldBegin(ORIGINAL_FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.originalFilePath);
        oprot.writeFieldEnd();
      }
      if (struct.middleFilePath != null) {
        oprot.writeFieldBegin(MIDDLE_FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.middleFilePath);
        oprot.writeFieldEnd();
      }
      if (struct.finalFilePath != null) {
        oprot.writeFieldBegin(FINAL_FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.finalFilePath);
        oprot.writeFieldEnd();
      }
      if (struct.batchNo != null) {
        oprot.writeFieldBegin(BATCH_NO_FIELD_DESC);
        oprot.writeString(struct.batchNo);
        oprot.writeFieldEnd();
      }
      if (struct.size != null) {
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeString(struct.size);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OnlineContractInfoThriftTupleSchemeFactory implements SchemeFactory {
    public OnlineContractInfoThriftTupleScheme getScheme() {
      return new OnlineContractInfoThriftTupleScheme();
    }
  }

  private static class OnlineContractInfoThriftTupleScheme extends TupleScheme<OnlineContractInfoThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OnlineContractInfoThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetNormProductCode()) {
        optionals.set(2);
      }
      if (struct.isSetUrl()) {
        optionals.set(3);
      }
      if (struct.isSetNotifyUrl()) {
        optionals.set(4);
      }
      if (struct.isSetBackUrl()) {
        optionals.set(5);
      }
      if (struct.isSetIpDomain()) {
        optionals.set(6);
      }
      if (struct.isSetFile1()) {
        optionals.set(7);
      }
      if (struct.isSetFile2()) {
        optionals.set(8);
      }
      if (struct.isSetFile3()) {
        optionals.set(9);
      }
      if (struct.isSetFile4()) {
        optionals.set(10);
      }
      if (struct.isSetFile5()) {
        optionals.set(11);
      }
      if (struct.isSetStatus()) {
        optionals.set(12);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(13);
      }
      if (struct.isSetPassTime()) {
        optionals.set(14);
      }
      if (struct.isSetSuccessTime()) {
        optionals.set(15);
      }
      if (struct.isSetContractTime()) {
        optionals.set(16);
      }
      if (struct.isSetRejectTime()) {
        optionals.set(17);
      }
      if (struct.isSetProductName()) {
        optionals.set(18);
      }
      if (struct.isSetRate()) {
        optionals.set(19);
      }
      if (struct.isSetName()) {
        optionals.set(20);
      }
      if (struct.isSetTimes()) {
        optionals.set(21);
      }
      if (struct.isSetOriginalFilePath()) {
        optionals.set(22);
      }
      if (struct.isSetMiddleFilePath()) {
        optionals.set(23);
      }
      if (struct.isSetFinalFilePath()) {
        optionals.set(24);
      }
      if (struct.isSetBatchNo()) {
        optionals.set(25);
      }
      if (struct.isSetSize()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetNormProductCode()) {
        oprot.writeString(struct.normProductCode);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetNotifyUrl()) {
        oprot.writeString(struct.notifyUrl);
      }
      if (struct.isSetBackUrl()) {
        oprot.writeString(struct.backUrl);
      }
      if (struct.isSetIpDomain()) {
        oprot.writeString(struct.ipDomain);
      }
      if (struct.isSetFile1()) {
        oprot.writeString(struct.file1);
      }
      if (struct.isSetFile2()) {
        oprot.writeString(struct.file2);
      }
      if (struct.isSetFile3()) {
        oprot.writeString(struct.file3);
      }
      if (struct.isSetFile4()) {
        oprot.writeString(struct.file4);
      }
      if (struct.isSetFile5()) {
        oprot.writeString(struct.file5);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetPassTime()) {
        oprot.writeString(struct.passTime);
      }
      if (struct.isSetSuccessTime()) {
        oprot.writeString(struct.successTime);
      }
      if (struct.isSetContractTime()) {
        oprot.writeString(struct.contractTime);
      }
      if (struct.isSetRejectTime()) {
        oprot.writeString(struct.rejectTime);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetRate()) {
        oprot.writeString(struct.rate);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetTimes()) {
        oprot.writeString(struct.times);
      }
      if (struct.isSetOriginalFilePath()) {
        oprot.writeString(struct.originalFilePath);
      }
      if (struct.isSetMiddleFilePath()) {
        oprot.writeString(struct.middleFilePath);
      }
      if (struct.isSetFinalFilePath()) {
        oprot.writeString(struct.finalFilePath);
      }
      if (struct.isSetBatchNo()) {
        oprot.writeString(struct.batchNo);
      }
      if (struct.isSetSize()) {
        oprot.writeString(struct.size);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OnlineContractInfoThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.normProductCode = iprot.readString();
        struct.setNormProductCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.notifyUrl = iprot.readString();
        struct.setNotifyUrlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.backUrl = iprot.readString();
        struct.setBackUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ipDomain = iprot.readString();
        struct.setIpDomainIsSet(true);
      }
      if (incoming.get(7)) {
        struct.file1 = iprot.readString();
        struct.setFile1IsSet(true);
      }
      if (incoming.get(8)) {
        struct.file2 = iprot.readString();
        struct.setFile2IsSet(true);
      }
      if (incoming.get(9)) {
        struct.file3 = iprot.readString();
        struct.setFile3IsSet(true);
      }
      if (incoming.get(10)) {
        struct.file4 = iprot.readString();
        struct.setFile4IsSet(true);
      }
      if (incoming.get(11)) {
        struct.file5 = iprot.readString();
        struct.setFile5IsSet(true);
      }
      if (incoming.get(12)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.passTime = iprot.readString();
        struct.setPassTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.successTime = iprot.readString();
        struct.setSuccessTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.contractTime = iprot.readString();
        struct.setContractTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.rejectTime = iprot.readString();
        struct.setRejectTimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(19)) {
        struct.rate = iprot.readString();
        struct.setRateIsSet(true);
      }
      if (incoming.get(20)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(21)) {
        struct.times = iprot.readString();
        struct.setTimesIsSet(true);
      }
      if (incoming.get(22)) {
        struct.originalFilePath = iprot.readString();
        struct.setOriginalFilePathIsSet(true);
      }
      if (incoming.get(23)) {
        struct.middleFilePath = iprot.readString();
        struct.setMiddleFilePathIsSet(true);
      }
      if (incoming.get(24)) {
        struct.finalFilePath = iprot.readString();
        struct.setFinalFilePathIsSet(true);
      }
      if (incoming.get(25)) {
        struct.batchNo = iprot.readString();
        struct.setBatchNoIsSet(true);
      }
      if (incoming.get(26)) {
        struct.size = iprot.readString();
        struct.setSizeIsSet(true);
      }
    }
  }

}

