/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-07-31")
public class HgmsMerchantEmployeeFunctionsThrift implements org.apache.thrift.TBase<HgmsMerchantEmployeeFunctionsThrift, HgmsMerchantEmployeeFunctionsThrift._Fields>, java.io.Serializable, Cloneable, Comparable<HgmsMerchantEmployeeFunctionsThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HgmsMerchantEmployeeFunctionsThrift");

  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField FUNCTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("functionId", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HgmsMerchantEmployeeFunctionsThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HgmsMerchantEmployeeFunctionsThriftTupleSchemeFactory());
  }

  public long merchantId; // required
  public long employeeId; // required
  public long functionId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MERCHANT_ID((short)1, "merchantId"),
    EMPLOYEE_ID((short)2, "employeeId"),
    FUNCTION_ID((short)3, "functionId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MERCHANT_ID
          return MERCHANT_ID;
        case 2: // EMPLOYEE_ID
          return EMPLOYEE_ID;
        case 3: // FUNCTION_ID
          return FUNCTION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MERCHANTID_ISSET_ID = 0;
  private static final int __EMPLOYEEID_ISSET_ID = 1;
  private static final int __FUNCTIONID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FUNCTION_ID, new org.apache.thrift.meta_data.FieldMetaData("functionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HgmsMerchantEmployeeFunctionsThrift.class, metaDataMap);
  }

  public HgmsMerchantEmployeeFunctionsThrift() {
  }

  public HgmsMerchantEmployeeFunctionsThrift(
    long merchantId,
    long employeeId,
    long functionId)
  {
    this();
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    this.employeeId = employeeId;
    setEmployeeIdIsSet(true);
    this.functionId = functionId;
    setFunctionIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HgmsMerchantEmployeeFunctionsThrift(HgmsMerchantEmployeeFunctionsThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.merchantId = other.merchantId;
    this.employeeId = other.employeeId;
    this.functionId = other.functionId;
  }

  public HgmsMerchantEmployeeFunctionsThrift deepCopy() {
    return new HgmsMerchantEmployeeFunctionsThrift(this);
  }

  @Override
  public void clear() {
    setMerchantIdIsSet(false);
    this.merchantId = 0;
    setEmployeeIdIsSet(false);
    this.employeeId = 0;
    setFunctionIdIsSet(false);
    this.functionId = 0;
  }

  public long getMerchantId() {
    return this.merchantId;
  }

  public HgmsMerchantEmployeeFunctionsThrift setMerchantId(long merchantId) {
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    return this;
  }

  public void unsetMerchantId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  public void setMerchantIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTID_ISSET_ID, value);
  }

  public long getEmployeeId() {
    return this.employeeId;
  }

  public HgmsMerchantEmployeeFunctionsThrift setEmployeeId(long employeeId) {
    this.employeeId = employeeId;
    setEmployeeIdIsSet(true);
    return this;
  }

  public void unsetEmployeeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
  }

  /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployeeId() {
    return EncodingUtils.testBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
  }

  public void setEmployeeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID, value);
  }

  public long getFunctionId() {
    return this.functionId;
  }

  public HgmsMerchantEmployeeFunctionsThrift setFunctionId(long functionId) {
    this.functionId = functionId;
    setFunctionIdIsSet(true);
    return this;
  }

  public void unsetFunctionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUNCTIONID_ISSET_ID);
  }

  /** Returns true if field functionId is set (has been assigned a value) and false otherwise */
  public boolean isSetFunctionId() {
    return EncodingUtils.testBit(__isset_bitfield, __FUNCTIONID_ISSET_ID);
  }

  public void setFunctionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUNCTIONID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((Long)value);
      }
      break;

    case EMPLOYEE_ID:
      if (value == null) {
        unsetEmployeeId();
      } else {
        setEmployeeId((Long)value);
      }
      break;

    case FUNCTION_ID:
      if (value == null) {
        unsetFunctionId();
      } else {
        setFunctionId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MERCHANT_ID:
      return getMerchantId();

    case EMPLOYEE_ID:
      return getEmployeeId();

    case FUNCTION_ID:
      return getFunctionId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MERCHANT_ID:
      return isSetMerchantId();
    case EMPLOYEE_ID:
      return isSetEmployeeId();
    case FUNCTION_ID:
      return isSetFunctionId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HgmsMerchantEmployeeFunctionsThrift)
      return this.equals((HgmsMerchantEmployeeFunctionsThrift)that);
    return false;
  }

  public boolean equals(HgmsMerchantEmployeeFunctionsThrift that) {
    if (that == null)
      return false;

    boolean this_present_merchantId = true;
    boolean that_present_merchantId = true;
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (this.merchantId != that.merchantId)
        return false;
    }

    boolean this_present_employeeId = true;
    boolean that_present_employeeId = true;
    if (this_present_employeeId || that_present_employeeId) {
      if (!(this_present_employeeId && that_present_employeeId))
        return false;
      if (this.employeeId != that.employeeId)
        return false;
    }

    boolean this_present_functionId = true;
    boolean that_present_functionId = true;
    if (this_present_functionId || that_present_functionId) {
      if (!(this_present_functionId && that_present_functionId))
        return false;
      if (this.functionId != that.functionId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_merchantId = true;
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_employeeId = true;
    list.add(present_employeeId);
    if (present_employeeId)
      list.add(employeeId);

    boolean present_functionId = true;
    list.add(present_functionId);
    if (present_functionId)
      list.add(functionId);

    return list.hashCode();
  }

  @Override
  public int compareTo(HgmsMerchantEmployeeFunctionsThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployeeId()).compareTo(other.isSetEmployeeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployeeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFunctionId()).compareTo(other.isSetFunctionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunctionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.functionId, other.functionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HgmsMerchantEmployeeFunctionsThrift(");
    boolean first = true;

    sb.append("merchantId:");
    sb.append(this.merchantId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("employeeId:");
    sb.append(this.employeeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("functionId:");
    sb.append(this.functionId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HgmsMerchantEmployeeFunctionsThriftStandardSchemeFactory implements SchemeFactory {
    public HgmsMerchantEmployeeFunctionsThriftStandardScheme getScheme() {
      return new HgmsMerchantEmployeeFunctionsThriftStandardScheme();
    }
  }

  private static class HgmsMerchantEmployeeFunctionsThriftStandardScheme extends StandardScheme<HgmsMerchantEmployeeFunctionsThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HgmsMerchantEmployeeFunctionsThrift struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.merchantId = iprot.readI64();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EMPLOYEE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.employeeId = iprot.readI64();
              struct.setEmployeeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FUNCTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.functionId = iprot.readI64();
              struct.setFunctionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HgmsMerchantEmployeeFunctionsThrift struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
      oprot.writeI64(struct.merchantId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
      oprot.writeI64(struct.employeeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FUNCTION_ID_FIELD_DESC);
      oprot.writeI64(struct.functionId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HgmsMerchantEmployeeFunctionsThriftTupleSchemeFactory implements SchemeFactory {
    public HgmsMerchantEmployeeFunctionsThriftTupleScheme getScheme() {
      return new HgmsMerchantEmployeeFunctionsThriftTupleScheme();
    }
  }

  private static class HgmsMerchantEmployeeFunctionsThriftTupleScheme extends TupleScheme<HgmsMerchantEmployeeFunctionsThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HgmsMerchantEmployeeFunctionsThrift struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMerchantId()) {
        optionals.set(0);
      }
      if (struct.isSetEmployeeId()) {
        optionals.set(1);
      }
      if (struct.isSetFunctionId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMerchantId()) {
        oprot.writeI64(struct.merchantId);
      }
      if (struct.isSetEmployeeId()) {
        oprot.writeI64(struct.employeeId);
      }
      if (struct.isSetFunctionId()) {
        oprot.writeI64(struct.functionId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HgmsMerchantEmployeeFunctionsThrift struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.merchantId = iprot.readI64();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.employeeId = iprot.readI64();
        struct.setEmployeeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.functionId = iprot.readI64();
        struct.setFunctionIdIsSet(true);
      }
    }
  }

}

