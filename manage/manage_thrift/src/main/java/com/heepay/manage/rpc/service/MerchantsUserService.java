/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-01")
public class MerchantsUserService {

  public interface Iface {

    public MerchantsUserReturnThrift saveMerchantsUser2(String merchantId, String loginName, String loginPassword, String source) throws org.apache.thrift.TException;

    public MerchantsUserReturnThrift saveMerchantsUser(String merchantId, String loginName, String source) throws org.apache.thrift.TException;

    public MerchantsUserReturnThrift saveMerchantsUserLeve1(String merchantId, String loginName, String idNo, String realName, String loginPassword) throws org.apache.thrift.TException;

    public MerchantsUserReturnThrift setPayPassword(String merchantId, String userId, String payPassword) throws org.apache.thrift.TException;

    public MerchantsUserReturnThrift setLoginPassword(String merchantId, String userId, String loginPassword) throws org.apache.thrift.TException;

    public MerchantsUserReturnThrift resetLoginNameAndPhone(String merchantId, String userId, String phone) throws org.apache.thrift.TException;

    public MerchantsUserReturnThrift verifyPayPassword(String merchantId, String userId, String payPassword) throws org.apache.thrift.TException;

    public MerchantsUserReturnThrift setUserInfoLeve(String merchantId, String userId, String idNo, String realName, int leve) throws org.apache.thrift.TException;

    public MerchantsUserThrift getMerchantsUserThrift(String merchantId, String userId) throws org.apache.thrift.TException;

    public MerchantsUserThrift queryByLoginNameAndMerchantId(String loginName, String merchantId) throws org.apache.thrift.TException;

    public MerchantsUserThrift getMerchantsUserThriftByUserId(String userId) throws org.apache.thrift.TException;

    public WalletQueryUsersResult queryMerchantsUser(WalletUsersWhere walletUsersWhere) throws org.apache.thrift.TException;

    public int queryMerchantsUserCounts(WalletUsersWhere walletUsersWhere) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void saveMerchantsUser2(String merchantId, String loginName, String loginPassword, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveMerchantsUser(String merchantId, String loginName, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveMerchantsUserLeve1(String merchantId, String loginName, String idNo, String realName, String loginPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setPayPassword(String merchantId, String userId, String payPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setLoginPassword(String merchantId, String userId, String loginPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resetLoginNameAndPhone(String merchantId, String userId, String phone, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifyPayPassword(String merchantId, String userId, String payPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setUserInfoLeve(String merchantId, String userId, String idNo, String realName, int leve, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantsUserThrift(String merchantId, String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryByLoginNameAndMerchantId(String loginName, String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantsUserThriftByUserId(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryMerchantsUser(WalletUsersWhere walletUsersWhere, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryMerchantsUserCounts(WalletUsersWhere walletUsersWhere, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public MerchantsUserReturnThrift saveMerchantsUser2(String merchantId, String loginName, String loginPassword, String source) throws org.apache.thrift.TException
    {
      send_saveMerchantsUser2(merchantId, loginName, loginPassword, source);
      return recv_saveMerchantsUser2();
    }

    public void send_saveMerchantsUser2(String merchantId, String loginName, String loginPassword, String source) throws org.apache.thrift.TException
    {
      saveMerchantsUser2_args args = new saveMerchantsUser2_args();
      args.setMerchantId(merchantId);
      args.setLoginName(loginName);
      args.setLoginPassword(loginPassword);
      args.setSource(source);
      sendBase("saveMerchantsUser2", args);
    }

    public MerchantsUserReturnThrift recv_saveMerchantsUser2() throws org.apache.thrift.TException
    {
      saveMerchantsUser2_result result = new saveMerchantsUser2_result();
      receiveBase(result, "saveMerchantsUser2");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveMerchantsUser2 failed: unknown result");
    }

    public MerchantsUserReturnThrift saveMerchantsUser(String merchantId, String loginName, String source) throws org.apache.thrift.TException
    {
      send_saveMerchantsUser(merchantId, loginName, source);
      return recv_saveMerchantsUser();
    }

    public void send_saveMerchantsUser(String merchantId, String loginName, String source) throws org.apache.thrift.TException
    {
      saveMerchantsUser_args args = new saveMerchantsUser_args();
      args.setMerchantId(merchantId);
      args.setLoginName(loginName);
      args.setSource(source);
      sendBase("saveMerchantsUser", args);
    }

    public MerchantsUserReturnThrift recv_saveMerchantsUser() throws org.apache.thrift.TException
    {
      saveMerchantsUser_result result = new saveMerchantsUser_result();
      receiveBase(result, "saveMerchantsUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveMerchantsUser failed: unknown result");
    }

    public MerchantsUserReturnThrift saveMerchantsUserLeve1(String merchantId, String loginName, String idNo, String realName, String loginPassword) throws org.apache.thrift.TException
    {
      send_saveMerchantsUserLeve1(merchantId, loginName, idNo, realName, loginPassword);
      return recv_saveMerchantsUserLeve1();
    }

    public void send_saveMerchantsUserLeve1(String merchantId, String loginName, String idNo, String realName, String loginPassword) throws org.apache.thrift.TException
    {
      saveMerchantsUserLeve1_args args = new saveMerchantsUserLeve1_args();
      args.setMerchantId(merchantId);
      args.setLoginName(loginName);
      args.setIdNo(idNo);
      args.setRealName(realName);
      args.setLoginPassword(loginPassword);
      sendBase("saveMerchantsUserLeve1", args);
    }

    public MerchantsUserReturnThrift recv_saveMerchantsUserLeve1() throws org.apache.thrift.TException
    {
      saveMerchantsUserLeve1_result result = new saveMerchantsUserLeve1_result();
      receiveBase(result, "saveMerchantsUserLeve1");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveMerchantsUserLeve1 failed: unknown result");
    }

    public MerchantsUserReturnThrift setPayPassword(String merchantId, String userId, String payPassword) throws org.apache.thrift.TException
    {
      send_setPayPassword(merchantId, userId, payPassword);
      return recv_setPayPassword();
    }

    public void send_setPayPassword(String merchantId, String userId, String payPassword) throws org.apache.thrift.TException
    {
      setPayPassword_args args = new setPayPassword_args();
      args.setMerchantId(merchantId);
      args.setUserId(userId);
      args.setPayPassword(payPassword);
      sendBase("setPayPassword", args);
    }

    public MerchantsUserReturnThrift recv_setPayPassword() throws org.apache.thrift.TException
    {
      setPayPassword_result result = new setPayPassword_result();
      receiveBase(result, "setPayPassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setPayPassword failed: unknown result");
    }

    public MerchantsUserReturnThrift setLoginPassword(String merchantId, String userId, String loginPassword) throws org.apache.thrift.TException
    {
      send_setLoginPassword(merchantId, userId, loginPassword);
      return recv_setLoginPassword();
    }

    public void send_setLoginPassword(String merchantId, String userId, String loginPassword) throws org.apache.thrift.TException
    {
      setLoginPassword_args args = new setLoginPassword_args();
      args.setMerchantId(merchantId);
      args.setUserId(userId);
      args.setLoginPassword(loginPassword);
      sendBase("setLoginPassword", args);
    }

    public MerchantsUserReturnThrift recv_setLoginPassword() throws org.apache.thrift.TException
    {
      setLoginPassword_result result = new setLoginPassword_result();
      receiveBase(result, "setLoginPassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setLoginPassword failed: unknown result");
    }

    public MerchantsUserReturnThrift resetLoginNameAndPhone(String merchantId, String userId, String phone) throws org.apache.thrift.TException
    {
      send_resetLoginNameAndPhone(merchantId, userId, phone);
      return recv_resetLoginNameAndPhone();
    }

    public void send_resetLoginNameAndPhone(String merchantId, String userId, String phone) throws org.apache.thrift.TException
    {
      resetLoginNameAndPhone_args args = new resetLoginNameAndPhone_args();
      args.setMerchantId(merchantId);
      args.setUserId(userId);
      args.setPhone(phone);
      sendBase("resetLoginNameAndPhone", args);
    }

    public MerchantsUserReturnThrift recv_resetLoginNameAndPhone() throws org.apache.thrift.TException
    {
      resetLoginNameAndPhone_result result = new resetLoginNameAndPhone_result();
      receiveBase(result, "resetLoginNameAndPhone");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resetLoginNameAndPhone failed: unknown result");
    }

    public MerchantsUserReturnThrift verifyPayPassword(String merchantId, String userId, String payPassword) throws org.apache.thrift.TException
    {
      send_verifyPayPassword(merchantId, userId, payPassword);
      return recv_verifyPayPassword();
    }

    public void send_verifyPayPassword(String merchantId, String userId, String payPassword) throws org.apache.thrift.TException
    {
      verifyPayPassword_args args = new verifyPayPassword_args();
      args.setMerchantId(merchantId);
      args.setUserId(userId);
      args.setPayPassword(payPassword);
      sendBase("verifyPayPassword", args);
    }

    public MerchantsUserReturnThrift recv_verifyPayPassword() throws org.apache.thrift.TException
    {
      verifyPayPassword_result result = new verifyPayPassword_result();
      receiveBase(result, "verifyPayPassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyPayPassword failed: unknown result");
    }

    public MerchantsUserReturnThrift setUserInfoLeve(String merchantId, String userId, String idNo, String realName, int leve) throws org.apache.thrift.TException
    {
      send_setUserInfoLeve(merchantId, userId, idNo, realName, leve);
      return recv_setUserInfoLeve();
    }

    public void send_setUserInfoLeve(String merchantId, String userId, String idNo, String realName, int leve) throws org.apache.thrift.TException
    {
      setUserInfoLeve_args args = new setUserInfoLeve_args();
      args.setMerchantId(merchantId);
      args.setUserId(userId);
      args.setIdNo(idNo);
      args.setRealName(realName);
      args.setLeve(leve);
      sendBase("setUserInfoLeve", args);
    }

    public MerchantsUserReturnThrift recv_setUserInfoLeve() throws org.apache.thrift.TException
    {
      setUserInfoLeve_result result = new setUserInfoLeve_result();
      receiveBase(result, "setUserInfoLeve");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setUserInfoLeve failed: unknown result");
    }

    public MerchantsUserThrift getMerchantsUserThrift(String merchantId, String userId) throws org.apache.thrift.TException
    {
      send_getMerchantsUserThrift(merchantId, userId);
      return recv_getMerchantsUserThrift();
    }

    public void send_getMerchantsUserThrift(String merchantId, String userId) throws org.apache.thrift.TException
    {
      getMerchantsUserThrift_args args = new getMerchantsUserThrift_args();
      args.setMerchantId(merchantId);
      args.setUserId(userId);
      sendBase("getMerchantsUserThrift", args);
    }

    public MerchantsUserThrift recv_getMerchantsUserThrift() throws org.apache.thrift.TException
    {
      getMerchantsUserThrift_result result = new getMerchantsUserThrift_result();
      receiveBase(result, "getMerchantsUserThrift");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantsUserThrift failed: unknown result");
    }

    public MerchantsUserThrift queryByLoginNameAndMerchantId(String loginName, String merchantId) throws org.apache.thrift.TException
    {
      send_queryByLoginNameAndMerchantId(loginName, merchantId);
      return recv_queryByLoginNameAndMerchantId();
    }

    public void send_queryByLoginNameAndMerchantId(String loginName, String merchantId) throws org.apache.thrift.TException
    {
      queryByLoginNameAndMerchantId_args args = new queryByLoginNameAndMerchantId_args();
      args.setLoginName(loginName);
      args.setMerchantId(merchantId);
      sendBase("queryByLoginNameAndMerchantId", args);
    }

    public MerchantsUserThrift recv_queryByLoginNameAndMerchantId() throws org.apache.thrift.TException
    {
      queryByLoginNameAndMerchantId_result result = new queryByLoginNameAndMerchantId_result();
      receiveBase(result, "queryByLoginNameAndMerchantId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryByLoginNameAndMerchantId failed: unknown result");
    }

    public MerchantsUserThrift getMerchantsUserThriftByUserId(String userId) throws org.apache.thrift.TException
    {
      send_getMerchantsUserThriftByUserId(userId);
      return recv_getMerchantsUserThriftByUserId();
    }

    public void send_getMerchantsUserThriftByUserId(String userId) throws org.apache.thrift.TException
    {
      getMerchantsUserThriftByUserId_args args = new getMerchantsUserThriftByUserId_args();
      args.setUserId(userId);
      sendBase("getMerchantsUserThriftByUserId", args);
    }

    public MerchantsUserThrift recv_getMerchantsUserThriftByUserId() throws org.apache.thrift.TException
    {
      getMerchantsUserThriftByUserId_result result = new getMerchantsUserThriftByUserId_result();
      receiveBase(result, "getMerchantsUserThriftByUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantsUserThriftByUserId failed: unknown result");
    }

    public WalletQueryUsersResult queryMerchantsUser(WalletUsersWhere walletUsersWhere) throws org.apache.thrift.TException
    {
      send_queryMerchantsUser(walletUsersWhere);
      return recv_queryMerchantsUser();
    }

    public void send_queryMerchantsUser(WalletUsersWhere walletUsersWhere) throws org.apache.thrift.TException
    {
      queryMerchantsUser_args args = new queryMerchantsUser_args();
      args.setWalletUsersWhere(walletUsersWhere);
      sendBase("queryMerchantsUser", args);
    }

    public WalletQueryUsersResult recv_queryMerchantsUser() throws org.apache.thrift.TException
    {
      queryMerchantsUser_result result = new queryMerchantsUser_result();
      receiveBase(result, "queryMerchantsUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryMerchantsUser failed: unknown result");
    }

    public int queryMerchantsUserCounts(WalletUsersWhere walletUsersWhere) throws org.apache.thrift.TException
    {
      send_queryMerchantsUserCounts(walletUsersWhere);
      return recv_queryMerchantsUserCounts();
    }

    public void send_queryMerchantsUserCounts(WalletUsersWhere walletUsersWhere) throws org.apache.thrift.TException
    {
      queryMerchantsUserCounts_args args = new queryMerchantsUserCounts_args();
      args.setWalletUsersWhere(walletUsersWhere);
      sendBase("queryMerchantsUserCounts", args);
    }

    public int recv_queryMerchantsUserCounts() throws org.apache.thrift.TException
    {
      queryMerchantsUserCounts_result result = new queryMerchantsUserCounts_result();
      receiveBase(result, "queryMerchantsUserCounts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryMerchantsUserCounts failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveMerchantsUser2(String merchantId, String loginName, String loginPassword, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveMerchantsUser2_call method_call = new saveMerchantsUser2_call(merchantId, loginName, loginPassword, source, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveMerchantsUser2_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      private String loginName;
      private String loginPassword;
      private String source;
      public saveMerchantsUser2_call(String merchantId, String loginName, String loginPassword, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
        this.loginName = loginName;
        this.loginPassword = loginPassword;
        this.source = source;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveMerchantsUser2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveMerchantsUser2_args args = new saveMerchantsUser2_args();
        args.setMerchantId(merchantId);
        args.setLoginName(loginName);
        args.setLoginPassword(loginPassword);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MerchantsUserReturnThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveMerchantsUser2();
      }
    }

    public void saveMerchantsUser(String merchantId, String loginName, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveMerchantsUser_call method_call = new saveMerchantsUser_call(merchantId, loginName, source, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveMerchantsUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      private String loginName;
      private String source;
      public saveMerchantsUser_call(String merchantId, String loginName, String source, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
        this.loginName = loginName;
        this.source = source;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveMerchantsUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveMerchantsUser_args args = new saveMerchantsUser_args();
        args.setMerchantId(merchantId);
        args.setLoginName(loginName);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MerchantsUserReturnThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveMerchantsUser();
      }
    }

    public void saveMerchantsUserLeve1(String merchantId, String loginName, String idNo, String realName, String loginPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveMerchantsUserLeve1_call method_call = new saveMerchantsUserLeve1_call(merchantId, loginName, idNo, realName, loginPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveMerchantsUserLeve1_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      private String loginName;
      private String idNo;
      private String realName;
      private String loginPassword;
      public saveMerchantsUserLeve1_call(String merchantId, String loginName, String idNo, String realName, String loginPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
        this.loginName = loginName;
        this.idNo = idNo;
        this.realName = realName;
        this.loginPassword = loginPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveMerchantsUserLeve1", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveMerchantsUserLeve1_args args = new saveMerchantsUserLeve1_args();
        args.setMerchantId(merchantId);
        args.setLoginName(loginName);
        args.setIdNo(idNo);
        args.setRealName(realName);
        args.setLoginPassword(loginPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MerchantsUserReturnThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveMerchantsUserLeve1();
      }
    }

    public void setPayPassword(String merchantId, String userId, String payPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPayPassword_call method_call = new setPayPassword_call(merchantId, userId, payPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPayPassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      private String userId;
      private String payPassword;
      public setPayPassword_call(String merchantId, String userId, String payPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
        this.userId = userId;
        this.payPassword = payPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPayPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPayPassword_args args = new setPayPassword_args();
        args.setMerchantId(merchantId);
        args.setUserId(userId);
        args.setPayPassword(payPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MerchantsUserReturnThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setPayPassword();
      }
    }

    public void setLoginPassword(String merchantId, String userId, String loginPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setLoginPassword_call method_call = new setLoginPassword_call(merchantId, userId, loginPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setLoginPassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      private String userId;
      private String loginPassword;
      public setLoginPassword_call(String merchantId, String userId, String loginPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
        this.userId = userId;
        this.loginPassword = loginPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setLoginPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setLoginPassword_args args = new setLoginPassword_args();
        args.setMerchantId(merchantId);
        args.setUserId(userId);
        args.setLoginPassword(loginPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MerchantsUserReturnThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setLoginPassword();
      }
    }

    public void resetLoginNameAndPhone(String merchantId, String userId, String phone, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resetLoginNameAndPhone_call method_call = new resetLoginNameAndPhone_call(merchantId, userId, phone, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resetLoginNameAndPhone_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      private String userId;
      private String phone;
      public resetLoginNameAndPhone_call(String merchantId, String userId, String phone, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
        this.userId = userId;
        this.phone = phone;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resetLoginNameAndPhone", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resetLoginNameAndPhone_args args = new resetLoginNameAndPhone_args();
        args.setMerchantId(merchantId);
        args.setUserId(userId);
        args.setPhone(phone);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MerchantsUserReturnThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resetLoginNameAndPhone();
      }
    }

    public void verifyPayPassword(String merchantId, String userId, String payPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyPayPassword_call method_call = new verifyPayPassword_call(merchantId, userId, payPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyPayPassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      private String userId;
      private String payPassword;
      public verifyPayPassword_call(String merchantId, String userId, String payPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
        this.userId = userId;
        this.payPassword = payPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyPayPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyPayPassword_args args = new verifyPayPassword_args();
        args.setMerchantId(merchantId);
        args.setUserId(userId);
        args.setPayPassword(payPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MerchantsUserReturnThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyPayPassword();
      }
    }

    public void setUserInfoLeve(String merchantId, String userId, String idNo, String realName, int leve, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setUserInfoLeve_call method_call = new setUserInfoLeve_call(merchantId, userId, idNo, realName, leve, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setUserInfoLeve_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      private String userId;
      private String idNo;
      private String realName;
      private int leve;
      public setUserInfoLeve_call(String merchantId, String userId, String idNo, String realName, int leve, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
        this.userId = userId;
        this.idNo = idNo;
        this.realName = realName;
        this.leve = leve;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUserInfoLeve", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setUserInfoLeve_args args = new setUserInfoLeve_args();
        args.setMerchantId(merchantId);
        args.setUserId(userId);
        args.setIdNo(idNo);
        args.setRealName(realName);
        args.setLeve(leve);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MerchantsUserReturnThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setUserInfoLeve();
      }
    }

    public void getMerchantsUserThrift(String merchantId, String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantsUserThrift_call method_call = new getMerchantsUserThrift_call(merchantId, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantsUserThrift_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      private String userId;
      public getMerchantsUserThrift_call(String merchantId, String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantsUserThrift", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantsUserThrift_args args = new getMerchantsUserThrift_args();
        args.setMerchantId(merchantId);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MerchantsUserThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantsUserThrift();
      }
    }

    public void queryByLoginNameAndMerchantId(String loginName, String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryByLoginNameAndMerchantId_call method_call = new queryByLoginNameAndMerchantId_call(loginName, merchantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryByLoginNameAndMerchantId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String loginName;
      private String merchantId;
      public queryByLoginNameAndMerchantId_call(String loginName, String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginName = loginName;
        this.merchantId = merchantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryByLoginNameAndMerchantId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryByLoginNameAndMerchantId_args args = new queryByLoginNameAndMerchantId_args();
        args.setLoginName(loginName);
        args.setMerchantId(merchantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MerchantsUserThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryByLoginNameAndMerchantId();
      }
    }

    public void getMerchantsUserThriftByUserId(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantsUserThriftByUserId_call method_call = new getMerchantsUserThriftByUserId_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantsUserThriftByUserId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      public getMerchantsUserThriftByUserId_call(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantsUserThriftByUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantsUserThriftByUserId_args args = new getMerchantsUserThriftByUserId_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MerchantsUserThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantsUserThriftByUserId();
      }
    }

    public void queryMerchantsUser(WalletUsersWhere walletUsersWhere, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryMerchantsUser_call method_call = new queryMerchantsUser_call(walletUsersWhere, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryMerchantsUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private WalletUsersWhere walletUsersWhere;
      public queryMerchantsUser_call(WalletUsersWhere walletUsersWhere, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletUsersWhere = walletUsersWhere;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryMerchantsUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryMerchantsUser_args args = new queryMerchantsUser_args();
        args.setWalletUsersWhere(walletUsersWhere);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WalletQueryUsersResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryMerchantsUser();
      }
    }

    public void queryMerchantsUserCounts(WalletUsersWhere walletUsersWhere, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryMerchantsUserCounts_call method_call = new queryMerchantsUserCounts_call(walletUsersWhere, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryMerchantsUserCounts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private WalletUsersWhere walletUsersWhere;
      public queryMerchantsUserCounts_call(WalletUsersWhere walletUsersWhere, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.walletUsersWhere = walletUsersWhere;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryMerchantsUserCounts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryMerchantsUserCounts_args args = new queryMerchantsUserCounts_args();
        args.setWalletUsersWhere(walletUsersWhere);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryMerchantsUserCounts();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("saveMerchantsUser2", new saveMerchantsUser2());
      processMap.put("saveMerchantsUser", new saveMerchantsUser());
      processMap.put("saveMerchantsUserLeve1", new saveMerchantsUserLeve1());
      processMap.put("setPayPassword", new setPayPassword());
      processMap.put("setLoginPassword", new setLoginPassword());
      processMap.put("resetLoginNameAndPhone", new resetLoginNameAndPhone());
      processMap.put("verifyPayPassword", new verifyPayPassword());
      processMap.put("setUserInfoLeve", new setUserInfoLeve());
      processMap.put("getMerchantsUserThrift", new getMerchantsUserThrift());
      processMap.put("queryByLoginNameAndMerchantId", new queryByLoginNameAndMerchantId());
      processMap.put("getMerchantsUserThriftByUserId", new getMerchantsUserThriftByUserId());
      processMap.put("queryMerchantsUser", new queryMerchantsUser());
      processMap.put("queryMerchantsUserCounts", new queryMerchantsUserCounts());
      return processMap;
    }

    public static class saveMerchantsUser2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveMerchantsUser2_args> {
      public saveMerchantsUser2() {
        super("saveMerchantsUser2");
      }

      public saveMerchantsUser2_args getEmptyArgsInstance() {
        return new saveMerchantsUser2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveMerchantsUser2_result getResult(I iface, saveMerchantsUser2_args args) throws org.apache.thrift.TException {
        saveMerchantsUser2_result result = new saveMerchantsUser2_result();
        result.success = iface.saveMerchantsUser2(args.merchantId, args.loginName, args.loginPassword, args.source);
        return result;
      }
    }

    public static class saveMerchantsUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveMerchantsUser_args> {
      public saveMerchantsUser() {
        super("saveMerchantsUser");
      }

      public saveMerchantsUser_args getEmptyArgsInstance() {
        return new saveMerchantsUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveMerchantsUser_result getResult(I iface, saveMerchantsUser_args args) throws org.apache.thrift.TException {
        saveMerchantsUser_result result = new saveMerchantsUser_result();
        result.success = iface.saveMerchantsUser(args.merchantId, args.loginName, args.source);
        return result;
      }
    }

    public static class saveMerchantsUserLeve1<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveMerchantsUserLeve1_args> {
      public saveMerchantsUserLeve1() {
        super("saveMerchantsUserLeve1");
      }

      public saveMerchantsUserLeve1_args getEmptyArgsInstance() {
        return new saveMerchantsUserLeve1_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveMerchantsUserLeve1_result getResult(I iface, saveMerchantsUserLeve1_args args) throws org.apache.thrift.TException {
        saveMerchantsUserLeve1_result result = new saveMerchantsUserLeve1_result();
        result.success = iface.saveMerchantsUserLeve1(args.merchantId, args.loginName, args.idNo, args.realName, args.loginPassword);
        return result;
      }
    }

    public static class setPayPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPayPassword_args> {
      public setPayPassword() {
        super("setPayPassword");
      }

      public setPayPassword_args getEmptyArgsInstance() {
        return new setPayPassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setPayPassword_result getResult(I iface, setPayPassword_args args) throws org.apache.thrift.TException {
        setPayPassword_result result = new setPayPassword_result();
        result.success = iface.setPayPassword(args.merchantId, args.userId, args.payPassword);
        return result;
      }
    }

    public static class setLoginPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setLoginPassword_args> {
      public setLoginPassword() {
        super("setLoginPassword");
      }

      public setLoginPassword_args getEmptyArgsInstance() {
        return new setLoginPassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setLoginPassword_result getResult(I iface, setLoginPassword_args args) throws org.apache.thrift.TException {
        setLoginPassword_result result = new setLoginPassword_result();
        result.success = iface.setLoginPassword(args.merchantId, args.userId, args.loginPassword);
        return result;
      }
    }

    public static class resetLoginNameAndPhone<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resetLoginNameAndPhone_args> {
      public resetLoginNameAndPhone() {
        super("resetLoginNameAndPhone");
      }

      public resetLoginNameAndPhone_args getEmptyArgsInstance() {
        return new resetLoginNameAndPhone_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resetLoginNameAndPhone_result getResult(I iface, resetLoginNameAndPhone_args args) throws org.apache.thrift.TException {
        resetLoginNameAndPhone_result result = new resetLoginNameAndPhone_result();
        result.success = iface.resetLoginNameAndPhone(args.merchantId, args.userId, args.phone);
        return result;
      }
    }

    public static class verifyPayPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyPayPassword_args> {
      public verifyPayPassword() {
        super("verifyPayPassword");
      }

      public verifyPayPassword_args getEmptyArgsInstance() {
        return new verifyPayPassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyPayPassword_result getResult(I iface, verifyPayPassword_args args) throws org.apache.thrift.TException {
        verifyPayPassword_result result = new verifyPayPassword_result();
        result.success = iface.verifyPayPassword(args.merchantId, args.userId, args.payPassword);
        return result;
      }
    }

    public static class setUserInfoLeve<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setUserInfoLeve_args> {
      public setUserInfoLeve() {
        super("setUserInfoLeve");
      }

      public setUserInfoLeve_args getEmptyArgsInstance() {
        return new setUserInfoLeve_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setUserInfoLeve_result getResult(I iface, setUserInfoLeve_args args) throws org.apache.thrift.TException {
        setUserInfoLeve_result result = new setUserInfoLeve_result();
        result.success = iface.setUserInfoLeve(args.merchantId, args.userId, args.idNo, args.realName, args.leve);
        return result;
      }
    }

    public static class getMerchantsUserThrift<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantsUserThrift_args> {
      public getMerchantsUserThrift() {
        super("getMerchantsUserThrift");
      }

      public getMerchantsUserThrift_args getEmptyArgsInstance() {
        return new getMerchantsUserThrift_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantsUserThrift_result getResult(I iface, getMerchantsUserThrift_args args) throws org.apache.thrift.TException {
        getMerchantsUserThrift_result result = new getMerchantsUserThrift_result();
        result.success = iface.getMerchantsUserThrift(args.merchantId, args.userId);
        return result;
      }
    }

    public static class queryByLoginNameAndMerchantId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryByLoginNameAndMerchantId_args> {
      public queryByLoginNameAndMerchantId() {
        super("queryByLoginNameAndMerchantId");
      }

      public queryByLoginNameAndMerchantId_args getEmptyArgsInstance() {
        return new queryByLoginNameAndMerchantId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryByLoginNameAndMerchantId_result getResult(I iface, queryByLoginNameAndMerchantId_args args) throws org.apache.thrift.TException {
        queryByLoginNameAndMerchantId_result result = new queryByLoginNameAndMerchantId_result();
        result.success = iface.queryByLoginNameAndMerchantId(args.loginName, args.merchantId);
        return result;
      }
    }

    public static class getMerchantsUserThriftByUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantsUserThriftByUserId_args> {
      public getMerchantsUserThriftByUserId() {
        super("getMerchantsUserThriftByUserId");
      }

      public getMerchantsUserThriftByUserId_args getEmptyArgsInstance() {
        return new getMerchantsUserThriftByUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantsUserThriftByUserId_result getResult(I iface, getMerchantsUserThriftByUserId_args args) throws org.apache.thrift.TException {
        getMerchantsUserThriftByUserId_result result = new getMerchantsUserThriftByUserId_result();
        result.success = iface.getMerchantsUserThriftByUserId(args.userId);
        return result;
      }
    }

    public static class queryMerchantsUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryMerchantsUser_args> {
      public queryMerchantsUser() {
        super("queryMerchantsUser");
      }

      public queryMerchantsUser_args getEmptyArgsInstance() {
        return new queryMerchantsUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryMerchantsUser_result getResult(I iface, queryMerchantsUser_args args) throws org.apache.thrift.TException {
        queryMerchantsUser_result result = new queryMerchantsUser_result();
        result.success = iface.queryMerchantsUser(args.walletUsersWhere);
        return result;
      }
    }

    public static class queryMerchantsUserCounts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryMerchantsUserCounts_args> {
      public queryMerchantsUserCounts() {
        super("queryMerchantsUserCounts");
      }

      public queryMerchantsUserCounts_args getEmptyArgsInstance() {
        return new queryMerchantsUserCounts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryMerchantsUserCounts_result getResult(I iface, queryMerchantsUserCounts_args args) throws org.apache.thrift.TException {
        queryMerchantsUserCounts_result result = new queryMerchantsUserCounts_result();
        result.success = iface.queryMerchantsUserCounts(args.walletUsersWhere);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("saveMerchantsUser2", new saveMerchantsUser2());
      processMap.put("saveMerchantsUser", new saveMerchantsUser());
      processMap.put("saveMerchantsUserLeve1", new saveMerchantsUserLeve1());
      processMap.put("setPayPassword", new setPayPassword());
      processMap.put("setLoginPassword", new setLoginPassword());
      processMap.put("resetLoginNameAndPhone", new resetLoginNameAndPhone());
      processMap.put("verifyPayPassword", new verifyPayPassword());
      processMap.put("setUserInfoLeve", new setUserInfoLeve());
      processMap.put("getMerchantsUserThrift", new getMerchantsUserThrift());
      processMap.put("queryByLoginNameAndMerchantId", new queryByLoginNameAndMerchantId());
      processMap.put("getMerchantsUserThriftByUserId", new getMerchantsUserThriftByUserId());
      processMap.put("queryMerchantsUser", new queryMerchantsUser());
      processMap.put("queryMerchantsUserCounts", new queryMerchantsUserCounts());
      return processMap;
    }

    public static class saveMerchantsUser2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveMerchantsUser2_args, MerchantsUserReturnThrift> {
      public saveMerchantsUser2() {
        super("saveMerchantsUser2");
      }

      public saveMerchantsUser2_args getEmptyArgsInstance() {
        return new saveMerchantsUser2_args();
      }

      public AsyncMethodCallback<MerchantsUserReturnThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MerchantsUserReturnThrift>() { 
          public void onComplete(MerchantsUserReturnThrift o) {
            saveMerchantsUser2_result result = new saveMerchantsUser2_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveMerchantsUser2_result result = new saveMerchantsUser2_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveMerchantsUser2_args args, org.apache.thrift.async.AsyncMethodCallback<MerchantsUserReturnThrift> resultHandler) throws TException {
        iface.saveMerchantsUser2(args.merchantId, args.loginName, args.loginPassword, args.source,resultHandler);
      }
    }

    public static class saveMerchantsUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveMerchantsUser_args, MerchantsUserReturnThrift> {
      public saveMerchantsUser() {
        super("saveMerchantsUser");
      }

      public saveMerchantsUser_args getEmptyArgsInstance() {
        return new saveMerchantsUser_args();
      }

      public AsyncMethodCallback<MerchantsUserReturnThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MerchantsUserReturnThrift>() { 
          public void onComplete(MerchantsUserReturnThrift o) {
            saveMerchantsUser_result result = new saveMerchantsUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveMerchantsUser_result result = new saveMerchantsUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveMerchantsUser_args args, org.apache.thrift.async.AsyncMethodCallback<MerchantsUserReturnThrift> resultHandler) throws TException {
        iface.saveMerchantsUser(args.merchantId, args.loginName, args.source,resultHandler);
      }
    }

    public static class saveMerchantsUserLeve1<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveMerchantsUserLeve1_args, MerchantsUserReturnThrift> {
      public saveMerchantsUserLeve1() {
        super("saveMerchantsUserLeve1");
      }

      public saveMerchantsUserLeve1_args getEmptyArgsInstance() {
        return new saveMerchantsUserLeve1_args();
      }

      public AsyncMethodCallback<MerchantsUserReturnThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MerchantsUserReturnThrift>() { 
          public void onComplete(MerchantsUserReturnThrift o) {
            saveMerchantsUserLeve1_result result = new saveMerchantsUserLeve1_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveMerchantsUserLeve1_result result = new saveMerchantsUserLeve1_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveMerchantsUserLeve1_args args, org.apache.thrift.async.AsyncMethodCallback<MerchantsUserReturnThrift> resultHandler) throws TException {
        iface.saveMerchantsUserLeve1(args.merchantId, args.loginName, args.idNo, args.realName, args.loginPassword,resultHandler);
      }
    }

    public static class setPayPassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setPayPassword_args, MerchantsUserReturnThrift> {
      public setPayPassword() {
        super("setPayPassword");
      }

      public setPayPassword_args getEmptyArgsInstance() {
        return new setPayPassword_args();
      }

      public AsyncMethodCallback<MerchantsUserReturnThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MerchantsUserReturnThrift>() { 
          public void onComplete(MerchantsUserReturnThrift o) {
            setPayPassword_result result = new setPayPassword_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setPayPassword_result result = new setPayPassword_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setPayPassword_args args, org.apache.thrift.async.AsyncMethodCallback<MerchantsUserReturnThrift> resultHandler) throws TException {
        iface.setPayPassword(args.merchantId, args.userId, args.payPassword,resultHandler);
      }
    }

    public static class setLoginPassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setLoginPassword_args, MerchantsUserReturnThrift> {
      public setLoginPassword() {
        super("setLoginPassword");
      }

      public setLoginPassword_args getEmptyArgsInstance() {
        return new setLoginPassword_args();
      }

      public AsyncMethodCallback<MerchantsUserReturnThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MerchantsUserReturnThrift>() { 
          public void onComplete(MerchantsUserReturnThrift o) {
            setLoginPassword_result result = new setLoginPassword_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setLoginPassword_result result = new setLoginPassword_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setLoginPassword_args args, org.apache.thrift.async.AsyncMethodCallback<MerchantsUserReturnThrift> resultHandler) throws TException {
        iface.setLoginPassword(args.merchantId, args.userId, args.loginPassword,resultHandler);
      }
    }

    public static class resetLoginNameAndPhone<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resetLoginNameAndPhone_args, MerchantsUserReturnThrift> {
      public resetLoginNameAndPhone() {
        super("resetLoginNameAndPhone");
      }

      public resetLoginNameAndPhone_args getEmptyArgsInstance() {
        return new resetLoginNameAndPhone_args();
      }

      public AsyncMethodCallback<MerchantsUserReturnThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MerchantsUserReturnThrift>() { 
          public void onComplete(MerchantsUserReturnThrift o) {
            resetLoginNameAndPhone_result result = new resetLoginNameAndPhone_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resetLoginNameAndPhone_result result = new resetLoginNameAndPhone_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resetLoginNameAndPhone_args args, org.apache.thrift.async.AsyncMethodCallback<MerchantsUserReturnThrift> resultHandler) throws TException {
        iface.resetLoginNameAndPhone(args.merchantId, args.userId, args.phone,resultHandler);
      }
    }

    public static class verifyPayPassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyPayPassword_args, MerchantsUserReturnThrift> {
      public verifyPayPassword() {
        super("verifyPayPassword");
      }

      public verifyPayPassword_args getEmptyArgsInstance() {
        return new verifyPayPassword_args();
      }

      public AsyncMethodCallback<MerchantsUserReturnThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MerchantsUserReturnThrift>() { 
          public void onComplete(MerchantsUserReturnThrift o) {
            verifyPayPassword_result result = new verifyPayPassword_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifyPayPassword_result result = new verifyPayPassword_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyPayPassword_args args, org.apache.thrift.async.AsyncMethodCallback<MerchantsUserReturnThrift> resultHandler) throws TException {
        iface.verifyPayPassword(args.merchantId, args.userId, args.payPassword,resultHandler);
      }
    }

    public static class setUserInfoLeve<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setUserInfoLeve_args, MerchantsUserReturnThrift> {
      public setUserInfoLeve() {
        super("setUserInfoLeve");
      }

      public setUserInfoLeve_args getEmptyArgsInstance() {
        return new setUserInfoLeve_args();
      }

      public AsyncMethodCallback<MerchantsUserReturnThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MerchantsUserReturnThrift>() { 
          public void onComplete(MerchantsUserReturnThrift o) {
            setUserInfoLeve_result result = new setUserInfoLeve_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setUserInfoLeve_result result = new setUserInfoLeve_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setUserInfoLeve_args args, org.apache.thrift.async.AsyncMethodCallback<MerchantsUserReturnThrift> resultHandler) throws TException {
        iface.setUserInfoLeve(args.merchantId, args.userId, args.idNo, args.realName, args.leve,resultHandler);
      }
    }

    public static class getMerchantsUserThrift<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantsUserThrift_args, MerchantsUserThrift> {
      public getMerchantsUserThrift() {
        super("getMerchantsUserThrift");
      }

      public getMerchantsUserThrift_args getEmptyArgsInstance() {
        return new getMerchantsUserThrift_args();
      }

      public AsyncMethodCallback<MerchantsUserThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MerchantsUserThrift>() { 
          public void onComplete(MerchantsUserThrift o) {
            getMerchantsUserThrift_result result = new getMerchantsUserThrift_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantsUserThrift_result result = new getMerchantsUserThrift_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantsUserThrift_args args, org.apache.thrift.async.AsyncMethodCallback<MerchantsUserThrift> resultHandler) throws TException {
        iface.getMerchantsUserThrift(args.merchantId, args.userId,resultHandler);
      }
    }

    public static class queryByLoginNameAndMerchantId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryByLoginNameAndMerchantId_args, MerchantsUserThrift> {
      public queryByLoginNameAndMerchantId() {
        super("queryByLoginNameAndMerchantId");
      }

      public queryByLoginNameAndMerchantId_args getEmptyArgsInstance() {
        return new queryByLoginNameAndMerchantId_args();
      }

      public AsyncMethodCallback<MerchantsUserThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MerchantsUserThrift>() { 
          public void onComplete(MerchantsUserThrift o) {
            queryByLoginNameAndMerchantId_result result = new queryByLoginNameAndMerchantId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryByLoginNameAndMerchantId_result result = new queryByLoginNameAndMerchantId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryByLoginNameAndMerchantId_args args, org.apache.thrift.async.AsyncMethodCallback<MerchantsUserThrift> resultHandler) throws TException {
        iface.queryByLoginNameAndMerchantId(args.loginName, args.merchantId,resultHandler);
      }
    }

    public static class getMerchantsUserThriftByUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantsUserThriftByUserId_args, MerchantsUserThrift> {
      public getMerchantsUserThriftByUserId() {
        super("getMerchantsUserThriftByUserId");
      }

      public getMerchantsUserThriftByUserId_args getEmptyArgsInstance() {
        return new getMerchantsUserThriftByUserId_args();
      }

      public AsyncMethodCallback<MerchantsUserThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MerchantsUserThrift>() { 
          public void onComplete(MerchantsUserThrift o) {
            getMerchantsUserThriftByUserId_result result = new getMerchantsUserThriftByUserId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantsUserThriftByUserId_result result = new getMerchantsUserThriftByUserId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantsUserThriftByUserId_args args, org.apache.thrift.async.AsyncMethodCallback<MerchantsUserThrift> resultHandler) throws TException {
        iface.getMerchantsUserThriftByUserId(args.userId,resultHandler);
      }
    }

    public static class queryMerchantsUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryMerchantsUser_args, WalletQueryUsersResult> {
      public queryMerchantsUser() {
        super("queryMerchantsUser");
      }

      public queryMerchantsUser_args getEmptyArgsInstance() {
        return new queryMerchantsUser_args();
      }

      public AsyncMethodCallback<WalletQueryUsersResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<WalletQueryUsersResult>() { 
          public void onComplete(WalletQueryUsersResult o) {
            queryMerchantsUser_result result = new queryMerchantsUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryMerchantsUser_result result = new queryMerchantsUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryMerchantsUser_args args, org.apache.thrift.async.AsyncMethodCallback<WalletQueryUsersResult> resultHandler) throws TException {
        iface.queryMerchantsUser(args.walletUsersWhere,resultHandler);
      }
    }

    public static class queryMerchantsUserCounts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryMerchantsUserCounts_args, Integer> {
      public queryMerchantsUserCounts() {
        super("queryMerchantsUserCounts");
      }

      public queryMerchantsUserCounts_args getEmptyArgsInstance() {
        return new queryMerchantsUserCounts_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            queryMerchantsUserCounts_result result = new queryMerchantsUserCounts_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryMerchantsUserCounts_result result = new queryMerchantsUserCounts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryMerchantsUserCounts_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.queryMerchantsUserCounts(args.walletUsersWhere,resultHandler);
      }
    }

  }

  public static class saveMerchantsUser2_args implements org.apache.thrift.TBase<saveMerchantsUser2_args, saveMerchantsUser2_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveMerchantsUser2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMerchantsUser2_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LOGIN_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loginPassword", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveMerchantsUser2_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveMerchantsUser2_argsTupleSchemeFactory());
    }

    public String merchantId; // required
    public String loginName; // required
    public String loginPassword; // required
    public String source; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId"),
      LOGIN_NAME((short)2, "loginName"),
      LOGIN_PASSWORD((short)3, "loginPassword"),
      SOURCE((short)4, "source");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          case 2: // LOGIN_NAME
            return LOGIN_NAME;
          case 3: // LOGIN_PASSWORD
            return LOGIN_PASSWORD;
          case 4: // SOURCE
            return SOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOGIN_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("loginPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMerchantsUser2_args.class, metaDataMap);
    }

    public saveMerchantsUser2_args() {
    }

    public saveMerchantsUser2_args(
      String merchantId,
      String loginName,
      String loginPassword,
      String source)
    {
      this();
      this.merchantId = merchantId;
      this.loginName = loginName;
      this.loginPassword = loginPassword;
      this.source = source;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMerchantsUser2_args(saveMerchantsUser2_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetLoginName()) {
        this.loginName = other.loginName;
      }
      if (other.isSetLoginPassword()) {
        this.loginPassword = other.loginPassword;
      }
      if (other.isSetSource()) {
        this.source = other.source;
      }
    }

    public saveMerchantsUser2_args deepCopy() {
      return new saveMerchantsUser2_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
      this.loginName = null;
      this.loginPassword = null;
      this.source = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public saveMerchantsUser2_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getLoginName() {
      return this.loginName;
    }

    public saveMerchantsUser2_args setLoginName(String loginName) {
      this.loginName = loginName;
      return this;
    }

    public void unsetLoginName() {
      this.loginName = null;
    }

    /** Returns true if field loginName is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginName() {
      return this.loginName != null;
    }

    public void setLoginNameIsSet(boolean value) {
      if (!value) {
        this.loginName = null;
      }
    }

    public String getLoginPassword() {
      return this.loginPassword;
    }

    public saveMerchantsUser2_args setLoginPassword(String loginPassword) {
      this.loginPassword = loginPassword;
      return this;
    }

    public void unsetLoginPassword() {
      this.loginPassword = null;
    }

    /** Returns true if field loginPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginPassword() {
      return this.loginPassword != null;
    }

    public void setLoginPasswordIsSet(boolean value) {
      if (!value) {
        this.loginPassword = null;
      }
    }

    public String getSource() {
      return this.source;
    }

    public saveMerchantsUser2_args setSource(String source) {
      this.source = source;
      return this;
    }

    public void unsetSource() {
      this.source = null;
    }

    /** Returns true if field source is set (has been assigned a value) and false otherwise */
    public boolean isSetSource() {
      return this.source != null;
    }

    public void setSourceIsSet(boolean value) {
      if (!value) {
        this.source = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case LOGIN_NAME:
        if (value == null) {
          unsetLoginName();
        } else {
          setLoginName((String)value);
        }
        break;

      case LOGIN_PASSWORD:
        if (value == null) {
          unsetLoginPassword();
        } else {
          setLoginPassword((String)value);
        }
        break;

      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      case LOGIN_NAME:
        return getLoginName();

      case LOGIN_PASSWORD:
        return getLoginPassword();

      case SOURCE:
        return getSource();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      case LOGIN_NAME:
        return isSetLoginName();
      case LOGIN_PASSWORD:
        return isSetLoginPassword();
      case SOURCE:
        return isSetSource();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMerchantsUser2_args)
        return this.equals((saveMerchantsUser2_args)that);
      return false;
    }

    public boolean equals(saveMerchantsUser2_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_loginName = true && this.isSetLoginName();
      boolean that_present_loginName = true && that.isSetLoginName();
      if (this_present_loginName || that_present_loginName) {
        if (!(this_present_loginName && that_present_loginName))
          return false;
        if (!this.loginName.equals(that.loginName))
          return false;
      }

      boolean this_present_loginPassword = true && this.isSetLoginPassword();
      boolean that_present_loginPassword = true && that.isSetLoginPassword();
      if (this_present_loginPassword || that_present_loginPassword) {
        if (!(this_present_loginPassword && that_present_loginPassword))
          return false;
        if (!this.loginPassword.equals(that.loginPassword))
          return false;
      }

      boolean this_present_source = true && this.isSetSource();
      boolean that_present_source = true && that.isSetSource();
      if (this_present_source || that_present_source) {
        if (!(this_present_source && that_present_source))
          return false;
        if (!this.source.equals(that.source))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_loginName = true && (isSetLoginName());
      list.add(present_loginName);
      if (present_loginName)
        list.add(loginName);

      boolean present_loginPassword = true && (isSetLoginPassword());
      list.add(present_loginPassword);
      if (present_loginPassword)
        list.add(loginPassword);

      boolean present_source = true && (isSetSource());
      list.add(present_source);
      if (present_source)
        list.add(source);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveMerchantsUser2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoginName()).compareTo(other.isSetLoginName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginName, other.loginName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoginPassword()).compareTo(other.isSetLoginPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginPassword, other.loginPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveMerchantsUser2_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginName:");
      if (this.loginName == null) {
        sb.append("null");
      } else {
        sb.append(this.loginName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginPassword:");
      if (this.loginPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.loginPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMerchantsUser2_argsStandardSchemeFactory implements SchemeFactory {
      public saveMerchantsUser2_argsStandardScheme getScheme() {
        return new saveMerchantsUser2_argsStandardScheme();
      }
    }

    private static class saveMerchantsUser2_argsStandardScheme extends StandardScheme<saveMerchantsUser2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMerchantsUser2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginName = iprot.readString();
                struct.setLoginNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOGIN_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginPassword = iprot.readString();
                struct.setLoginPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.source = iprot.readString();
                struct.setSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMerchantsUser2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.loginName != null) {
          oprot.writeFieldBegin(LOGIN_NAME_FIELD_DESC);
          oprot.writeString(struct.loginName);
          oprot.writeFieldEnd();
        }
        if (struct.loginPassword != null) {
          oprot.writeFieldBegin(LOGIN_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.loginPassword);
          oprot.writeFieldEnd();
        }
        if (struct.source != null) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMerchantsUser2_argsTupleSchemeFactory implements SchemeFactory {
      public saveMerchantsUser2_argsTupleScheme getScheme() {
        return new saveMerchantsUser2_argsTupleScheme();
      }
    }

    private static class saveMerchantsUser2_argsTupleScheme extends TupleScheme<saveMerchantsUser2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveMerchantsUser2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        if (struct.isSetLoginName()) {
          optionals.set(1);
        }
        if (struct.isSetLoginPassword()) {
          optionals.set(2);
        }
        if (struct.isSetSource()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetLoginName()) {
          oprot.writeString(struct.loginName);
        }
        if (struct.isSetLoginPassword()) {
          oprot.writeString(struct.loginPassword);
        }
        if (struct.isSetSource()) {
          oprot.writeString(struct.source);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveMerchantsUser2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loginName = iprot.readString();
          struct.setLoginNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.loginPassword = iprot.readString();
          struct.setLoginPasswordIsSet(true);
        }
        if (incoming.get(3)) {
          struct.source = iprot.readString();
          struct.setSourceIsSet(true);
        }
      }
    }

  }

  public static class saveMerchantsUser2_result implements org.apache.thrift.TBase<saveMerchantsUser2_result, saveMerchantsUser2_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveMerchantsUser2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMerchantsUser2_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveMerchantsUser2_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveMerchantsUser2_resultTupleSchemeFactory());
    }

    public MerchantsUserReturnThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MerchantsUserReturnThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMerchantsUser2_result.class, metaDataMap);
    }

    public saveMerchantsUser2_result() {
    }

    public saveMerchantsUser2_result(
      MerchantsUserReturnThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMerchantsUser2_result(saveMerchantsUser2_result other) {
      if (other.isSetSuccess()) {
        this.success = new MerchantsUserReturnThrift(other.success);
      }
    }

    public saveMerchantsUser2_result deepCopy() {
      return new saveMerchantsUser2_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MerchantsUserReturnThrift getSuccess() {
      return this.success;
    }

    public saveMerchantsUser2_result setSuccess(MerchantsUserReturnThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MerchantsUserReturnThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMerchantsUser2_result)
        return this.equals((saveMerchantsUser2_result)that);
      return false;
    }

    public boolean equals(saveMerchantsUser2_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveMerchantsUser2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveMerchantsUser2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMerchantsUser2_resultStandardSchemeFactory implements SchemeFactory {
      public saveMerchantsUser2_resultStandardScheme getScheme() {
        return new saveMerchantsUser2_resultStandardScheme();
      }
    }

    private static class saveMerchantsUser2_resultStandardScheme extends StandardScheme<saveMerchantsUser2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMerchantsUser2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MerchantsUserReturnThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMerchantsUser2_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMerchantsUser2_resultTupleSchemeFactory implements SchemeFactory {
      public saveMerchantsUser2_resultTupleScheme getScheme() {
        return new saveMerchantsUser2_resultTupleScheme();
      }
    }

    private static class saveMerchantsUser2_resultTupleScheme extends TupleScheme<saveMerchantsUser2_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveMerchantsUser2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveMerchantsUser2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MerchantsUserReturnThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveMerchantsUser_args implements org.apache.thrift.TBase<saveMerchantsUser_args, saveMerchantsUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveMerchantsUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMerchantsUser_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveMerchantsUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveMerchantsUser_argsTupleSchemeFactory());
    }

    public String merchantId; // required
    public String loginName; // required
    public String source; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId"),
      LOGIN_NAME((short)2, "loginName"),
      SOURCE((short)3, "source");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          case 2: // LOGIN_NAME
            return LOGIN_NAME;
          case 3: // SOURCE
            return SOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMerchantsUser_args.class, metaDataMap);
    }

    public saveMerchantsUser_args() {
    }

    public saveMerchantsUser_args(
      String merchantId,
      String loginName,
      String source)
    {
      this();
      this.merchantId = merchantId;
      this.loginName = loginName;
      this.source = source;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMerchantsUser_args(saveMerchantsUser_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetLoginName()) {
        this.loginName = other.loginName;
      }
      if (other.isSetSource()) {
        this.source = other.source;
      }
    }

    public saveMerchantsUser_args deepCopy() {
      return new saveMerchantsUser_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
      this.loginName = null;
      this.source = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public saveMerchantsUser_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getLoginName() {
      return this.loginName;
    }

    public saveMerchantsUser_args setLoginName(String loginName) {
      this.loginName = loginName;
      return this;
    }

    public void unsetLoginName() {
      this.loginName = null;
    }

    /** Returns true if field loginName is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginName() {
      return this.loginName != null;
    }

    public void setLoginNameIsSet(boolean value) {
      if (!value) {
        this.loginName = null;
      }
    }

    public String getSource() {
      return this.source;
    }

    public saveMerchantsUser_args setSource(String source) {
      this.source = source;
      return this;
    }

    public void unsetSource() {
      this.source = null;
    }

    /** Returns true if field source is set (has been assigned a value) and false otherwise */
    public boolean isSetSource() {
      return this.source != null;
    }

    public void setSourceIsSet(boolean value) {
      if (!value) {
        this.source = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case LOGIN_NAME:
        if (value == null) {
          unsetLoginName();
        } else {
          setLoginName((String)value);
        }
        break;

      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      case LOGIN_NAME:
        return getLoginName();

      case SOURCE:
        return getSource();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      case LOGIN_NAME:
        return isSetLoginName();
      case SOURCE:
        return isSetSource();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMerchantsUser_args)
        return this.equals((saveMerchantsUser_args)that);
      return false;
    }

    public boolean equals(saveMerchantsUser_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_loginName = true && this.isSetLoginName();
      boolean that_present_loginName = true && that.isSetLoginName();
      if (this_present_loginName || that_present_loginName) {
        if (!(this_present_loginName && that_present_loginName))
          return false;
        if (!this.loginName.equals(that.loginName))
          return false;
      }

      boolean this_present_source = true && this.isSetSource();
      boolean that_present_source = true && that.isSetSource();
      if (this_present_source || that_present_source) {
        if (!(this_present_source && that_present_source))
          return false;
        if (!this.source.equals(that.source))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_loginName = true && (isSetLoginName());
      list.add(present_loginName);
      if (present_loginName)
        list.add(loginName);

      boolean present_source = true && (isSetSource());
      list.add(present_source);
      if (present_source)
        list.add(source);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveMerchantsUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoginName()).compareTo(other.isSetLoginName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginName, other.loginName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveMerchantsUser_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginName:");
      if (this.loginName == null) {
        sb.append("null");
      } else {
        sb.append(this.loginName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMerchantsUser_argsStandardSchemeFactory implements SchemeFactory {
      public saveMerchantsUser_argsStandardScheme getScheme() {
        return new saveMerchantsUser_argsStandardScheme();
      }
    }

    private static class saveMerchantsUser_argsStandardScheme extends StandardScheme<saveMerchantsUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMerchantsUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginName = iprot.readString();
                struct.setLoginNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.source = iprot.readString();
                struct.setSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMerchantsUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.loginName != null) {
          oprot.writeFieldBegin(LOGIN_NAME_FIELD_DESC);
          oprot.writeString(struct.loginName);
          oprot.writeFieldEnd();
        }
        if (struct.source != null) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMerchantsUser_argsTupleSchemeFactory implements SchemeFactory {
      public saveMerchantsUser_argsTupleScheme getScheme() {
        return new saveMerchantsUser_argsTupleScheme();
      }
    }

    private static class saveMerchantsUser_argsTupleScheme extends TupleScheme<saveMerchantsUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveMerchantsUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        if (struct.isSetLoginName()) {
          optionals.set(1);
        }
        if (struct.isSetSource()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetLoginName()) {
          oprot.writeString(struct.loginName);
        }
        if (struct.isSetSource()) {
          oprot.writeString(struct.source);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveMerchantsUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loginName = iprot.readString();
          struct.setLoginNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.source = iprot.readString();
          struct.setSourceIsSet(true);
        }
      }
    }

  }

  public static class saveMerchantsUser_result implements org.apache.thrift.TBase<saveMerchantsUser_result, saveMerchantsUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveMerchantsUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMerchantsUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveMerchantsUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveMerchantsUser_resultTupleSchemeFactory());
    }

    public MerchantsUserReturnThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MerchantsUserReturnThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMerchantsUser_result.class, metaDataMap);
    }

    public saveMerchantsUser_result() {
    }

    public saveMerchantsUser_result(
      MerchantsUserReturnThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMerchantsUser_result(saveMerchantsUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new MerchantsUserReturnThrift(other.success);
      }
    }

    public saveMerchantsUser_result deepCopy() {
      return new saveMerchantsUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MerchantsUserReturnThrift getSuccess() {
      return this.success;
    }

    public saveMerchantsUser_result setSuccess(MerchantsUserReturnThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MerchantsUserReturnThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMerchantsUser_result)
        return this.equals((saveMerchantsUser_result)that);
      return false;
    }

    public boolean equals(saveMerchantsUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveMerchantsUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveMerchantsUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMerchantsUser_resultStandardSchemeFactory implements SchemeFactory {
      public saveMerchantsUser_resultStandardScheme getScheme() {
        return new saveMerchantsUser_resultStandardScheme();
      }
    }

    private static class saveMerchantsUser_resultStandardScheme extends StandardScheme<saveMerchantsUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMerchantsUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MerchantsUserReturnThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMerchantsUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMerchantsUser_resultTupleSchemeFactory implements SchemeFactory {
      public saveMerchantsUser_resultTupleScheme getScheme() {
        return new saveMerchantsUser_resultTupleScheme();
      }
    }

    private static class saveMerchantsUser_resultTupleScheme extends TupleScheme<saveMerchantsUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveMerchantsUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveMerchantsUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MerchantsUserReturnThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveMerchantsUserLeve1_args implements org.apache.thrift.TBase<saveMerchantsUserLeve1_args, saveMerchantsUserLeve1_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveMerchantsUserLeve1_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMerchantsUserLeve1_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ID_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("idNo", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField LOGIN_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loginPassword", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveMerchantsUserLeve1_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveMerchantsUserLeve1_argsTupleSchemeFactory());
    }

    public String merchantId; // required
    public String loginName; // required
    public String idNo; // required
    public String realName; // required
    public String loginPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId"),
      LOGIN_NAME((short)2, "loginName"),
      ID_NO((short)3, "idNo"),
      REAL_NAME((short)4, "realName"),
      LOGIN_PASSWORD((short)5, "loginPassword");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          case 2: // LOGIN_NAME
            return LOGIN_NAME;
          case 3: // ID_NO
            return ID_NO;
          case 4: // REAL_NAME
            return REAL_NAME;
          case 5: // LOGIN_PASSWORD
            return LOGIN_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID_NO, new org.apache.thrift.meta_data.FieldMetaData("idNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOGIN_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("loginPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMerchantsUserLeve1_args.class, metaDataMap);
    }

    public saveMerchantsUserLeve1_args() {
    }

    public saveMerchantsUserLeve1_args(
      String merchantId,
      String loginName,
      String idNo,
      String realName,
      String loginPassword)
    {
      this();
      this.merchantId = merchantId;
      this.loginName = loginName;
      this.idNo = idNo;
      this.realName = realName;
      this.loginPassword = loginPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMerchantsUserLeve1_args(saveMerchantsUserLeve1_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetLoginName()) {
        this.loginName = other.loginName;
      }
      if (other.isSetIdNo()) {
        this.idNo = other.idNo;
      }
      if (other.isSetRealName()) {
        this.realName = other.realName;
      }
      if (other.isSetLoginPassword()) {
        this.loginPassword = other.loginPassword;
      }
    }

    public saveMerchantsUserLeve1_args deepCopy() {
      return new saveMerchantsUserLeve1_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
      this.loginName = null;
      this.idNo = null;
      this.realName = null;
      this.loginPassword = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public saveMerchantsUserLeve1_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getLoginName() {
      return this.loginName;
    }

    public saveMerchantsUserLeve1_args setLoginName(String loginName) {
      this.loginName = loginName;
      return this;
    }

    public void unsetLoginName() {
      this.loginName = null;
    }

    /** Returns true if field loginName is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginName() {
      return this.loginName != null;
    }

    public void setLoginNameIsSet(boolean value) {
      if (!value) {
        this.loginName = null;
      }
    }

    public String getIdNo() {
      return this.idNo;
    }

    public saveMerchantsUserLeve1_args setIdNo(String idNo) {
      this.idNo = idNo;
      return this;
    }

    public void unsetIdNo() {
      this.idNo = null;
    }

    /** Returns true if field idNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIdNo() {
      return this.idNo != null;
    }

    public void setIdNoIsSet(boolean value) {
      if (!value) {
        this.idNo = null;
      }
    }

    public String getRealName() {
      return this.realName;
    }

    public saveMerchantsUserLeve1_args setRealName(String realName) {
      this.realName = realName;
      return this;
    }

    public void unsetRealName() {
      this.realName = null;
    }

    /** Returns true if field realName is set (has been assigned a value) and false otherwise */
    public boolean isSetRealName() {
      return this.realName != null;
    }

    public void setRealNameIsSet(boolean value) {
      if (!value) {
        this.realName = null;
      }
    }

    public String getLoginPassword() {
      return this.loginPassword;
    }

    public saveMerchantsUserLeve1_args setLoginPassword(String loginPassword) {
      this.loginPassword = loginPassword;
      return this;
    }

    public void unsetLoginPassword() {
      this.loginPassword = null;
    }

    /** Returns true if field loginPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginPassword() {
      return this.loginPassword != null;
    }

    public void setLoginPasswordIsSet(boolean value) {
      if (!value) {
        this.loginPassword = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case LOGIN_NAME:
        if (value == null) {
          unsetLoginName();
        } else {
          setLoginName((String)value);
        }
        break;

      case ID_NO:
        if (value == null) {
          unsetIdNo();
        } else {
          setIdNo((String)value);
        }
        break;

      case REAL_NAME:
        if (value == null) {
          unsetRealName();
        } else {
          setRealName((String)value);
        }
        break;

      case LOGIN_PASSWORD:
        if (value == null) {
          unsetLoginPassword();
        } else {
          setLoginPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      case LOGIN_NAME:
        return getLoginName();

      case ID_NO:
        return getIdNo();

      case REAL_NAME:
        return getRealName();

      case LOGIN_PASSWORD:
        return getLoginPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      case LOGIN_NAME:
        return isSetLoginName();
      case ID_NO:
        return isSetIdNo();
      case REAL_NAME:
        return isSetRealName();
      case LOGIN_PASSWORD:
        return isSetLoginPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMerchantsUserLeve1_args)
        return this.equals((saveMerchantsUserLeve1_args)that);
      return false;
    }

    public boolean equals(saveMerchantsUserLeve1_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_loginName = true && this.isSetLoginName();
      boolean that_present_loginName = true && that.isSetLoginName();
      if (this_present_loginName || that_present_loginName) {
        if (!(this_present_loginName && that_present_loginName))
          return false;
        if (!this.loginName.equals(that.loginName))
          return false;
      }

      boolean this_present_idNo = true && this.isSetIdNo();
      boolean that_present_idNo = true && that.isSetIdNo();
      if (this_present_idNo || that_present_idNo) {
        if (!(this_present_idNo && that_present_idNo))
          return false;
        if (!this.idNo.equals(that.idNo))
          return false;
      }

      boolean this_present_realName = true && this.isSetRealName();
      boolean that_present_realName = true && that.isSetRealName();
      if (this_present_realName || that_present_realName) {
        if (!(this_present_realName && that_present_realName))
          return false;
        if (!this.realName.equals(that.realName))
          return false;
      }

      boolean this_present_loginPassword = true && this.isSetLoginPassword();
      boolean that_present_loginPassword = true && that.isSetLoginPassword();
      if (this_present_loginPassword || that_present_loginPassword) {
        if (!(this_present_loginPassword && that_present_loginPassword))
          return false;
        if (!this.loginPassword.equals(that.loginPassword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_loginName = true && (isSetLoginName());
      list.add(present_loginName);
      if (present_loginName)
        list.add(loginName);

      boolean present_idNo = true && (isSetIdNo());
      list.add(present_idNo);
      if (present_idNo)
        list.add(idNo);

      boolean present_realName = true && (isSetRealName());
      list.add(present_realName);
      if (present_realName)
        list.add(realName);

      boolean present_loginPassword = true && (isSetLoginPassword());
      list.add(present_loginPassword);
      if (present_loginPassword)
        list.add(loginPassword);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveMerchantsUserLeve1_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoginName()).compareTo(other.isSetLoginName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginName, other.loginName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdNo()).compareTo(other.isSetIdNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idNo, other.idNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRealName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoginPassword()).compareTo(other.isSetLoginPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginPassword, other.loginPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveMerchantsUserLeve1_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginName:");
      if (this.loginName == null) {
        sb.append("null");
      } else {
        sb.append(this.loginName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("idNo:");
      if (this.idNo == null) {
        sb.append("null");
      } else {
        sb.append(this.idNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("realName:");
      if (this.realName == null) {
        sb.append("null");
      } else {
        sb.append(this.realName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginPassword:");
      if (this.loginPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.loginPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMerchantsUserLeve1_argsStandardSchemeFactory implements SchemeFactory {
      public saveMerchantsUserLeve1_argsStandardScheme getScheme() {
        return new saveMerchantsUserLeve1_argsStandardScheme();
      }
    }

    private static class saveMerchantsUserLeve1_argsStandardScheme extends StandardScheme<saveMerchantsUserLeve1_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMerchantsUserLeve1_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginName = iprot.readString();
                struct.setLoginNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ID_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.idNo = iprot.readString();
                struct.setIdNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REAL_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.realName = iprot.readString();
                struct.setRealNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LOGIN_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginPassword = iprot.readString();
                struct.setLoginPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMerchantsUserLeve1_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.loginName != null) {
          oprot.writeFieldBegin(LOGIN_NAME_FIELD_DESC);
          oprot.writeString(struct.loginName);
          oprot.writeFieldEnd();
        }
        if (struct.idNo != null) {
          oprot.writeFieldBegin(ID_NO_FIELD_DESC);
          oprot.writeString(struct.idNo);
          oprot.writeFieldEnd();
        }
        if (struct.realName != null) {
          oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
          oprot.writeString(struct.realName);
          oprot.writeFieldEnd();
        }
        if (struct.loginPassword != null) {
          oprot.writeFieldBegin(LOGIN_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.loginPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMerchantsUserLeve1_argsTupleSchemeFactory implements SchemeFactory {
      public saveMerchantsUserLeve1_argsTupleScheme getScheme() {
        return new saveMerchantsUserLeve1_argsTupleScheme();
      }
    }

    private static class saveMerchantsUserLeve1_argsTupleScheme extends TupleScheme<saveMerchantsUserLeve1_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveMerchantsUserLeve1_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        if (struct.isSetLoginName()) {
          optionals.set(1);
        }
        if (struct.isSetIdNo()) {
          optionals.set(2);
        }
        if (struct.isSetRealName()) {
          optionals.set(3);
        }
        if (struct.isSetLoginPassword()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetLoginName()) {
          oprot.writeString(struct.loginName);
        }
        if (struct.isSetIdNo()) {
          oprot.writeString(struct.idNo);
        }
        if (struct.isSetRealName()) {
          oprot.writeString(struct.realName);
        }
        if (struct.isSetLoginPassword()) {
          oprot.writeString(struct.loginPassword);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveMerchantsUserLeve1_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loginName = iprot.readString();
          struct.setLoginNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.idNo = iprot.readString();
          struct.setIdNoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.realName = iprot.readString();
          struct.setRealNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.loginPassword = iprot.readString();
          struct.setLoginPasswordIsSet(true);
        }
      }
    }

  }

  public static class saveMerchantsUserLeve1_result implements org.apache.thrift.TBase<saveMerchantsUserLeve1_result, saveMerchantsUserLeve1_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveMerchantsUserLeve1_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMerchantsUserLeve1_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveMerchantsUserLeve1_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveMerchantsUserLeve1_resultTupleSchemeFactory());
    }

    public MerchantsUserReturnThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MerchantsUserReturnThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMerchantsUserLeve1_result.class, metaDataMap);
    }

    public saveMerchantsUserLeve1_result() {
    }

    public saveMerchantsUserLeve1_result(
      MerchantsUserReturnThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMerchantsUserLeve1_result(saveMerchantsUserLeve1_result other) {
      if (other.isSetSuccess()) {
        this.success = new MerchantsUserReturnThrift(other.success);
      }
    }

    public saveMerchantsUserLeve1_result deepCopy() {
      return new saveMerchantsUserLeve1_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MerchantsUserReturnThrift getSuccess() {
      return this.success;
    }

    public saveMerchantsUserLeve1_result setSuccess(MerchantsUserReturnThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MerchantsUserReturnThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMerchantsUserLeve1_result)
        return this.equals((saveMerchantsUserLeve1_result)that);
      return false;
    }

    public boolean equals(saveMerchantsUserLeve1_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveMerchantsUserLeve1_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveMerchantsUserLeve1_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMerchantsUserLeve1_resultStandardSchemeFactory implements SchemeFactory {
      public saveMerchantsUserLeve1_resultStandardScheme getScheme() {
        return new saveMerchantsUserLeve1_resultStandardScheme();
      }
    }

    private static class saveMerchantsUserLeve1_resultStandardScheme extends StandardScheme<saveMerchantsUserLeve1_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMerchantsUserLeve1_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MerchantsUserReturnThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMerchantsUserLeve1_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMerchantsUserLeve1_resultTupleSchemeFactory implements SchemeFactory {
      public saveMerchantsUserLeve1_resultTupleScheme getScheme() {
        return new saveMerchantsUserLeve1_resultTupleScheme();
      }
    }

    private static class saveMerchantsUserLeve1_resultTupleScheme extends TupleScheme<saveMerchantsUserLeve1_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveMerchantsUserLeve1_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveMerchantsUserLeve1_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MerchantsUserReturnThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setPayPassword_args implements org.apache.thrift.TBase<setPayPassword_args, setPayPassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<setPayPassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPayPassword_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAY_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("payPassword", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPayPassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPayPassword_argsTupleSchemeFactory());
    }

    public String merchantId; // required
    public String userId; // required
    public String payPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId"),
      USER_ID((short)2, "userId"),
      PAY_PASSWORD((short)3, "payPassword");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // PAY_PASSWORD
            return PAY_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAY_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("payPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPayPassword_args.class, metaDataMap);
    }

    public setPayPassword_args() {
    }

    public setPayPassword_args(
      String merchantId,
      String userId,
      String payPassword)
    {
      this();
      this.merchantId = merchantId;
      this.userId = userId;
      this.payPassword = payPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPayPassword_args(setPayPassword_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetPayPassword()) {
        this.payPassword = other.payPassword;
      }
    }

    public setPayPassword_args deepCopy() {
      return new setPayPassword_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
      this.userId = null;
      this.payPassword = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public setPayPassword_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public setPayPassword_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getPayPassword() {
      return this.payPassword;
    }

    public setPayPassword_args setPayPassword(String payPassword) {
      this.payPassword = payPassword;
      return this;
    }

    public void unsetPayPassword() {
      this.payPassword = null;
    }

    /** Returns true if field payPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetPayPassword() {
      return this.payPassword != null;
    }

    public void setPayPasswordIsSet(boolean value) {
      if (!value) {
        this.payPassword = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case PAY_PASSWORD:
        if (value == null) {
          unsetPayPassword();
        } else {
          setPayPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      case USER_ID:
        return getUserId();

      case PAY_PASSWORD:
        return getPayPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      case USER_ID:
        return isSetUserId();
      case PAY_PASSWORD:
        return isSetPayPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPayPassword_args)
        return this.equals((setPayPassword_args)that);
      return false;
    }

    public boolean equals(setPayPassword_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_payPassword = true && this.isSetPayPassword();
      boolean that_present_payPassword = true && that.isSetPayPassword();
      if (this_present_payPassword || that_present_payPassword) {
        if (!(this_present_payPassword && that_present_payPassword))
          return false;
        if (!this.payPassword.equals(that.payPassword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_userId = true && (isSetUserId());
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_payPassword = true && (isSetPayPassword());
      list.add(present_payPassword);
      if (present_payPassword)
        list.add(payPassword);

      return list.hashCode();
    }

    @Override
    public int compareTo(setPayPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPayPassword()).compareTo(other.isSetPayPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payPassword, other.payPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPayPassword_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("payPassword:");
      if (this.payPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.payPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPayPassword_argsStandardSchemeFactory implements SchemeFactory {
      public setPayPassword_argsStandardScheme getScheme() {
        return new setPayPassword_argsStandardScheme();
      }
    }

    private static class setPayPassword_argsStandardScheme extends StandardScheme<setPayPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPayPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAY_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.payPassword = iprot.readString();
                struct.setPayPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPayPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.payPassword != null) {
          oprot.writeFieldBegin(PAY_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.payPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPayPassword_argsTupleSchemeFactory implements SchemeFactory {
      public setPayPassword_argsTupleScheme getScheme() {
        return new setPayPassword_argsTupleScheme();
      }
    }

    private static class setPayPassword_argsTupleScheme extends TupleScheme<setPayPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPayPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetPayPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetPayPassword()) {
          oprot.writeString(struct.payPassword);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPayPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.payPassword = iprot.readString();
          struct.setPayPasswordIsSet(true);
        }
      }
    }

  }

  public static class setPayPassword_result implements org.apache.thrift.TBase<setPayPassword_result, setPayPassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<setPayPassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPayPassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPayPassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPayPassword_resultTupleSchemeFactory());
    }

    public MerchantsUserReturnThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MerchantsUserReturnThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPayPassword_result.class, metaDataMap);
    }

    public setPayPassword_result() {
    }

    public setPayPassword_result(
      MerchantsUserReturnThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPayPassword_result(setPayPassword_result other) {
      if (other.isSetSuccess()) {
        this.success = new MerchantsUserReturnThrift(other.success);
      }
    }

    public setPayPassword_result deepCopy() {
      return new setPayPassword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MerchantsUserReturnThrift getSuccess() {
      return this.success;
    }

    public setPayPassword_result setSuccess(MerchantsUserReturnThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MerchantsUserReturnThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPayPassword_result)
        return this.equals((setPayPassword_result)that);
      return false;
    }

    public boolean equals(setPayPassword_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setPayPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPayPassword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPayPassword_resultStandardSchemeFactory implements SchemeFactory {
      public setPayPassword_resultStandardScheme getScheme() {
        return new setPayPassword_resultStandardScheme();
      }
    }

    private static class setPayPassword_resultStandardScheme extends StandardScheme<setPayPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPayPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MerchantsUserReturnThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPayPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPayPassword_resultTupleSchemeFactory implements SchemeFactory {
      public setPayPassword_resultTupleScheme getScheme() {
        return new setPayPassword_resultTupleScheme();
      }
    }

    private static class setPayPassword_resultTupleScheme extends TupleScheme<setPayPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPayPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPayPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MerchantsUserReturnThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setLoginPassword_args implements org.apache.thrift.TBase<setLoginPassword_args, setLoginPassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<setLoginPassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setLoginPassword_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LOGIN_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loginPassword", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setLoginPassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setLoginPassword_argsTupleSchemeFactory());
    }

    public String merchantId; // required
    public String userId; // required
    public String loginPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId"),
      USER_ID((short)2, "userId"),
      LOGIN_PASSWORD((short)3, "loginPassword");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // LOGIN_PASSWORD
            return LOGIN_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOGIN_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("loginPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setLoginPassword_args.class, metaDataMap);
    }

    public setLoginPassword_args() {
    }

    public setLoginPassword_args(
      String merchantId,
      String userId,
      String loginPassword)
    {
      this();
      this.merchantId = merchantId;
      this.userId = userId;
      this.loginPassword = loginPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setLoginPassword_args(setLoginPassword_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetLoginPassword()) {
        this.loginPassword = other.loginPassword;
      }
    }

    public setLoginPassword_args deepCopy() {
      return new setLoginPassword_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
      this.userId = null;
      this.loginPassword = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public setLoginPassword_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public setLoginPassword_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getLoginPassword() {
      return this.loginPassword;
    }

    public setLoginPassword_args setLoginPassword(String loginPassword) {
      this.loginPassword = loginPassword;
      return this;
    }

    public void unsetLoginPassword() {
      this.loginPassword = null;
    }

    /** Returns true if field loginPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginPassword() {
      return this.loginPassword != null;
    }

    public void setLoginPasswordIsSet(boolean value) {
      if (!value) {
        this.loginPassword = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case LOGIN_PASSWORD:
        if (value == null) {
          unsetLoginPassword();
        } else {
          setLoginPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      case USER_ID:
        return getUserId();

      case LOGIN_PASSWORD:
        return getLoginPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      case USER_ID:
        return isSetUserId();
      case LOGIN_PASSWORD:
        return isSetLoginPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setLoginPassword_args)
        return this.equals((setLoginPassword_args)that);
      return false;
    }

    public boolean equals(setLoginPassword_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_loginPassword = true && this.isSetLoginPassword();
      boolean that_present_loginPassword = true && that.isSetLoginPassword();
      if (this_present_loginPassword || that_present_loginPassword) {
        if (!(this_present_loginPassword && that_present_loginPassword))
          return false;
        if (!this.loginPassword.equals(that.loginPassword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_userId = true && (isSetUserId());
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_loginPassword = true && (isSetLoginPassword());
      list.add(present_loginPassword);
      if (present_loginPassword)
        list.add(loginPassword);

      return list.hashCode();
    }

    @Override
    public int compareTo(setLoginPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoginPassword()).compareTo(other.isSetLoginPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginPassword, other.loginPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setLoginPassword_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginPassword:");
      if (this.loginPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.loginPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setLoginPassword_argsStandardSchemeFactory implements SchemeFactory {
      public setLoginPassword_argsStandardScheme getScheme() {
        return new setLoginPassword_argsStandardScheme();
      }
    }

    private static class setLoginPassword_argsStandardScheme extends StandardScheme<setLoginPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setLoginPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOGIN_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginPassword = iprot.readString();
                struct.setLoginPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setLoginPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.loginPassword != null) {
          oprot.writeFieldBegin(LOGIN_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.loginPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setLoginPassword_argsTupleSchemeFactory implements SchemeFactory {
      public setLoginPassword_argsTupleScheme getScheme() {
        return new setLoginPassword_argsTupleScheme();
      }
    }

    private static class setLoginPassword_argsTupleScheme extends TupleScheme<setLoginPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setLoginPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetLoginPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetLoginPassword()) {
          oprot.writeString(struct.loginPassword);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setLoginPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.loginPassword = iprot.readString();
          struct.setLoginPasswordIsSet(true);
        }
      }
    }

  }

  public static class setLoginPassword_result implements org.apache.thrift.TBase<setLoginPassword_result, setLoginPassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<setLoginPassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setLoginPassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setLoginPassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setLoginPassword_resultTupleSchemeFactory());
    }

    public MerchantsUserReturnThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MerchantsUserReturnThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setLoginPassword_result.class, metaDataMap);
    }

    public setLoginPassword_result() {
    }

    public setLoginPassword_result(
      MerchantsUserReturnThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setLoginPassword_result(setLoginPassword_result other) {
      if (other.isSetSuccess()) {
        this.success = new MerchantsUserReturnThrift(other.success);
      }
    }

    public setLoginPassword_result deepCopy() {
      return new setLoginPassword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MerchantsUserReturnThrift getSuccess() {
      return this.success;
    }

    public setLoginPassword_result setSuccess(MerchantsUserReturnThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MerchantsUserReturnThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setLoginPassword_result)
        return this.equals((setLoginPassword_result)that);
      return false;
    }

    public boolean equals(setLoginPassword_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setLoginPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setLoginPassword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setLoginPassword_resultStandardSchemeFactory implements SchemeFactory {
      public setLoginPassword_resultStandardScheme getScheme() {
        return new setLoginPassword_resultStandardScheme();
      }
    }

    private static class setLoginPassword_resultStandardScheme extends StandardScheme<setLoginPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setLoginPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MerchantsUserReturnThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setLoginPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setLoginPassword_resultTupleSchemeFactory implements SchemeFactory {
      public setLoginPassword_resultTupleScheme getScheme() {
        return new setLoginPassword_resultTupleScheme();
      }
    }

    private static class setLoginPassword_resultTupleScheme extends TupleScheme<setLoginPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setLoginPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setLoginPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MerchantsUserReturnThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class resetLoginNameAndPhone_args implements org.apache.thrift.TBase<resetLoginNameAndPhone_args, resetLoginNameAndPhone_args._Fields>, java.io.Serializable, Cloneable, Comparable<resetLoginNameAndPhone_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resetLoginNameAndPhone_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resetLoginNameAndPhone_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resetLoginNameAndPhone_argsTupleSchemeFactory());
    }

    public String merchantId; // required
    public String userId; // required
    public String phone; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId"),
      USER_ID((short)2, "userId"),
      PHONE((short)3, "phone");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // PHONE
            return PHONE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resetLoginNameAndPhone_args.class, metaDataMap);
    }

    public resetLoginNameAndPhone_args() {
    }

    public resetLoginNameAndPhone_args(
      String merchantId,
      String userId,
      String phone)
    {
      this();
      this.merchantId = merchantId;
      this.userId = userId;
      this.phone = phone;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resetLoginNameAndPhone_args(resetLoginNameAndPhone_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetPhone()) {
        this.phone = other.phone;
      }
    }

    public resetLoginNameAndPhone_args deepCopy() {
      return new resetLoginNameAndPhone_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
      this.userId = null;
      this.phone = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public resetLoginNameAndPhone_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public resetLoginNameAndPhone_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getPhone() {
      return this.phone;
    }

    public resetLoginNameAndPhone_args setPhone(String phone) {
      this.phone = phone;
      return this;
    }

    public void unsetPhone() {
      this.phone = null;
    }

    /** Returns true if field phone is set (has been assigned a value) and false otherwise */
    public boolean isSetPhone() {
      return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
      if (!value) {
        this.phone = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case PHONE:
        if (value == null) {
          unsetPhone();
        } else {
          setPhone((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      case USER_ID:
        return getUserId();

      case PHONE:
        return getPhone();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      case USER_ID:
        return isSetUserId();
      case PHONE:
        return isSetPhone();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resetLoginNameAndPhone_args)
        return this.equals((resetLoginNameAndPhone_args)that);
      return false;
    }

    public boolean equals(resetLoginNameAndPhone_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_phone = true && this.isSetPhone();
      boolean that_present_phone = true && that.isSetPhone();
      if (this_present_phone || that_present_phone) {
        if (!(this_present_phone && that_present_phone))
          return false;
        if (!this.phone.equals(that.phone))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_userId = true && (isSetUserId());
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_phone = true && (isSetPhone());
      list.add(present_phone);
      if (present_phone)
        list.add(phone);

      return list.hashCode();
    }

    @Override
    public int compareTo(resetLoginNameAndPhone_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhone()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resetLoginNameAndPhone_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resetLoginNameAndPhone_argsStandardSchemeFactory implements SchemeFactory {
      public resetLoginNameAndPhone_argsStandardScheme getScheme() {
        return new resetLoginNameAndPhone_argsStandardScheme();
      }
    }

    private static class resetLoginNameAndPhone_argsStandardScheme extends StandardScheme<resetLoginNameAndPhone_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resetLoginNameAndPhone_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PHONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phone = iprot.readString();
                struct.setPhoneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resetLoginNameAndPhone_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.phone != null) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resetLoginNameAndPhone_argsTupleSchemeFactory implements SchemeFactory {
      public resetLoginNameAndPhone_argsTupleScheme getScheme() {
        return new resetLoginNameAndPhone_argsTupleScheme();
      }
    }

    private static class resetLoginNameAndPhone_argsTupleScheme extends TupleScheme<resetLoginNameAndPhone_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resetLoginNameAndPhone_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetPhone()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetPhone()) {
          oprot.writeString(struct.phone);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resetLoginNameAndPhone_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.phone = iprot.readString();
          struct.setPhoneIsSet(true);
        }
      }
    }

  }

  public static class resetLoginNameAndPhone_result implements org.apache.thrift.TBase<resetLoginNameAndPhone_result, resetLoginNameAndPhone_result._Fields>, java.io.Serializable, Cloneable, Comparable<resetLoginNameAndPhone_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resetLoginNameAndPhone_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resetLoginNameAndPhone_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resetLoginNameAndPhone_resultTupleSchemeFactory());
    }

    public MerchantsUserReturnThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MerchantsUserReturnThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resetLoginNameAndPhone_result.class, metaDataMap);
    }

    public resetLoginNameAndPhone_result() {
    }

    public resetLoginNameAndPhone_result(
      MerchantsUserReturnThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resetLoginNameAndPhone_result(resetLoginNameAndPhone_result other) {
      if (other.isSetSuccess()) {
        this.success = new MerchantsUserReturnThrift(other.success);
      }
    }

    public resetLoginNameAndPhone_result deepCopy() {
      return new resetLoginNameAndPhone_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MerchantsUserReturnThrift getSuccess() {
      return this.success;
    }

    public resetLoginNameAndPhone_result setSuccess(MerchantsUserReturnThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MerchantsUserReturnThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resetLoginNameAndPhone_result)
        return this.equals((resetLoginNameAndPhone_result)that);
      return false;
    }

    public boolean equals(resetLoginNameAndPhone_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(resetLoginNameAndPhone_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resetLoginNameAndPhone_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resetLoginNameAndPhone_resultStandardSchemeFactory implements SchemeFactory {
      public resetLoginNameAndPhone_resultStandardScheme getScheme() {
        return new resetLoginNameAndPhone_resultStandardScheme();
      }
    }

    private static class resetLoginNameAndPhone_resultStandardScheme extends StandardScheme<resetLoginNameAndPhone_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resetLoginNameAndPhone_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MerchantsUserReturnThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resetLoginNameAndPhone_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resetLoginNameAndPhone_resultTupleSchemeFactory implements SchemeFactory {
      public resetLoginNameAndPhone_resultTupleScheme getScheme() {
        return new resetLoginNameAndPhone_resultTupleScheme();
      }
    }

    private static class resetLoginNameAndPhone_resultTupleScheme extends TupleScheme<resetLoginNameAndPhone_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resetLoginNameAndPhone_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resetLoginNameAndPhone_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MerchantsUserReturnThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class verifyPayPassword_args implements org.apache.thrift.TBase<verifyPayPassword_args, verifyPayPassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyPayPassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyPayPassword_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAY_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("payPassword", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyPayPassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyPayPassword_argsTupleSchemeFactory());
    }

    public String merchantId; // required
    public String userId; // required
    public String payPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId"),
      USER_ID((short)2, "userId"),
      PAY_PASSWORD((short)3, "payPassword");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // PAY_PASSWORD
            return PAY_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAY_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("payPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyPayPassword_args.class, metaDataMap);
    }

    public verifyPayPassword_args() {
    }

    public verifyPayPassword_args(
      String merchantId,
      String userId,
      String payPassword)
    {
      this();
      this.merchantId = merchantId;
      this.userId = userId;
      this.payPassword = payPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPayPassword_args(verifyPayPassword_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetPayPassword()) {
        this.payPassword = other.payPassword;
      }
    }

    public verifyPayPassword_args deepCopy() {
      return new verifyPayPassword_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
      this.userId = null;
      this.payPassword = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public verifyPayPassword_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public verifyPayPassword_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getPayPassword() {
      return this.payPassword;
    }

    public verifyPayPassword_args setPayPassword(String payPassword) {
      this.payPassword = payPassword;
      return this;
    }

    public void unsetPayPassword() {
      this.payPassword = null;
    }

    /** Returns true if field payPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetPayPassword() {
      return this.payPassword != null;
    }

    public void setPayPasswordIsSet(boolean value) {
      if (!value) {
        this.payPassword = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case PAY_PASSWORD:
        if (value == null) {
          unsetPayPassword();
        } else {
          setPayPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      case USER_ID:
        return getUserId();

      case PAY_PASSWORD:
        return getPayPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      case USER_ID:
        return isSetUserId();
      case PAY_PASSWORD:
        return isSetPayPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPayPassword_args)
        return this.equals((verifyPayPassword_args)that);
      return false;
    }

    public boolean equals(verifyPayPassword_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_payPassword = true && this.isSetPayPassword();
      boolean that_present_payPassword = true && that.isSetPayPassword();
      if (this_present_payPassword || that_present_payPassword) {
        if (!(this_present_payPassword && that_present_payPassword))
          return false;
        if (!this.payPassword.equals(that.payPassword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_userId = true && (isSetUserId());
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_payPassword = true && (isSetPayPassword());
      list.add(present_payPassword);
      if (present_payPassword)
        list.add(payPassword);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyPayPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPayPassword()).compareTo(other.isSetPayPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payPassword, other.payPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyPayPassword_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("payPassword:");
      if (this.payPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.payPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyPayPassword_argsStandardSchemeFactory implements SchemeFactory {
      public verifyPayPassword_argsStandardScheme getScheme() {
        return new verifyPayPassword_argsStandardScheme();
      }
    }

    private static class verifyPayPassword_argsStandardScheme extends StandardScheme<verifyPayPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyPayPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAY_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.payPassword = iprot.readString();
                struct.setPayPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyPayPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.payPassword != null) {
          oprot.writeFieldBegin(PAY_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.payPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyPayPassword_argsTupleSchemeFactory implements SchemeFactory {
      public verifyPayPassword_argsTupleScheme getScheme() {
        return new verifyPayPassword_argsTupleScheme();
      }
    }

    private static class verifyPayPassword_argsTupleScheme extends TupleScheme<verifyPayPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyPayPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetPayPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetPayPassword()) {
          oprot.writeString(struct.payPassword);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyPayPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.payPassword = iprot.readString();
          struct.setPayPasswordIsSet(true);
        }
      }
    }

  }

  public static class verifyPayPassword_result implements org.apache.thrift.TBase<verifyPayPassword_result, verifyPayPassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyPayPassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyPayPassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyPayPassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyPayPassword_resultTupleSchemeFactory());
    }

    public MerchantsUserReturnThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MerchantsUserReturnThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyPayPassword_result.class, metaDataMap);
    }

    public verifyPayPassword_result() {
    }

    public verifyPayPassword_result(
      MerchantsUserReturnThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPayPassword_result(verifyPayPassword_result other) {
      if (other.isSetSuccess()) {
        this.success = new MerchantsUserReturnThrift(other.success);
      }
    }

    public verifyPayPassword_result deepCopy() {
      return new verifyPayPassword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MerchantsUserReturnThrift getSuccess() {
      return this.success;
    }

    public verifyPayPassword_result setSuccess(MerchantsUserReturnThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MerchantsUserReturnThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPayPassword_result)
        return this.equals((verifyPayPassword_result)that);
      return false;
    }

    public boolean equals(verifyPayPassword_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyPayPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyPayPassword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyPayPassword_resultStandardSchemeFactory implements SchemeFactory {
      public verifyPayPassword_resultStandardScheme getScheme() {
        return new verifyPayPassword_resultStandardScheme();
      }
    }

    private static class verifyPayPassword_resultStandardScheme extends StandardScheme<verifyPayPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyPayPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MerchantsUserReturnThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyPayPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyPayPassword_resultTupleSchemeFactory implements SchemeFactory {
      public verifyPayPassword_resultTupleScheme getScheme() {
        return new verifyPayPassword_resultTupleScheme();
      }
    }

    private static class verifyPayPassword_resultTupleScheme extends TupleScheme<verifyPayPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyPayPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyPayPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MerchantsUserReturnThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setUserInfoLeve_args implements org.apache.thrift.TBase<setUserInfoLeve_args, setUserInfoLeve_args._Fields>, java.io.Serializable, Cloneable, Comparable<setUserInfoLeve_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUserInfoLeve_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ID_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("idNo", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField LEVE_FIELD_DESC = new org.apache.thrift.protocol.TField("leve", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setUserInfoLeve_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setUserInfoLeve_argsTupleSchemeFactory());
    }

    public String merchantId; // required
    public String userId; // required
    public String idNo; // required
    public String realName; // required
    public int leve; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId"),
      USER_ID((short)2, "userId"),
      ID_NO((short)3, "idNo"),
      REAL_NAME((short)4, "realName"),
      LEVE((short)5, "leve");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // ID_NO
            return ID_NO;
          case 4: // REAL_NAME
            return REAL_NAME;
          case 5: // LEVE
            return LEVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LEVE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID_NO, new org.apache.thrift.meta_data.FieldMetaData("idNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LEVE, new org.apache.thrift.meta_data.FieldMetaData("leve", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserInfoLeve_args.class, metaDataMap);
    }

    public setUserInfoLeve_args() {
    }

    public setUserInfoLeve_args(
      String merchantId,
      String userId,
      String idNo,
      String realName,
      int leve)
    {
      this();
      this.merchantId = merchantId;
      this.userId = userId;
      this.idNo = idNo;
      this.realName = realName;
      this.leve = leve;
      setLeveIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUserInfoLeve_args(setUserInfoLeve_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetIdNo()) {
        this.idNo = other.idNo;
      }
      if (other.isSetRealName()) {
        this.realName = other.realName;
      }
      this.leve = other.leve;
    }

    public setUserInfoLeve_args deepCopy() {
      return new setUserInfoLeve_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
      this.userId = null;
      this.idNo = null;
      this.realName = null;
      setLeveIsSet(false);
      this.leve = 0;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public setUserInfoLeve_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public setUserInfoLeve_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getIdNo() {
      return this.idNo;
    }

    public setUserInfoLeve_args setIdNo(String idNo) {
      this.idNo = idNo;
      return this;
    }

    public void unsetIdNo() {
      this.idNo = null;
    }

    /** Returns true if field idNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIdNo() {
      return this.idNo != null;
    }

    public void setIdNoIsSet(boolean value) {
      if (!value) {
        this.idNo = null;
      }
    }

    public String getRealName() {
      return this.realName;
    }

    public setUserInfoLeve_args setRealName(String realName) {
      this.realName = realName;
      return this;
    }

    public void unsetRealName() {
      this.realName = null;
    }

    /** Returns true if field realName is set (has been assigned a value) and false otherwise */
    public boolean isSetRealName() {
      return this.realName != null;
    }

    public void setRealNameIsSet(boolean value) {
      if (!value) {
        this.realName = null;
      }
    }

    public int getLeve() {
      return this.leve;
    }

    public setUserInfoLeve_args setLeve(int leve) {
      this.leve = leve;
      setLeveIsSet(true);
      return this;
    }

    public void unsetLeve() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVE_ISSET_ID);
    }

    /** Returns true if field leve is set (has been assigned a value) and false otherwise */
    public boolean isSetLeve() {
      return EncodingUtils.testBit(__isset_bitfield, __LEVE_ISSET_ID);
    }

    public void setLeveIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case ID_NO:
        if (value == null) {
          unsetIdNo();
        } else {
          setIdNo((String)value);
        }
        break;

      case REAL_NAME:
        if (value == null) {
          unsetRealName();
        } else {
          setRealName((String)value);
        }
        break;

      case LEVE:
        if (value == null) {
          unsetLeve();
        } else {
          setLeve((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      case USER_ID:
        return getUserId();

      case ID_NO:
        return getIdNo();

      case REAL_NAME:
        return getRealName();

      case LEVE:
        return getLeve();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      case USER_ID:
        return isSetUserId();
      case ID_NO:
        return isSetIdNo();
      case REAL_NAME:
        return isSetRealName();
      case LEVE:
        return isSetLeve();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUserInfoLeve_args)
        return this.equals((setUserInfoLeve_args)that);
      return false;
    }

    public boolean equals(setUserInfoLeve_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_idNo = true && this.isSetIdNo();
      boolean that_present_idNo = true && that.isSetIdNo();
      if (this_present_idNo || that_present_idNo) {
        if (!(this_present_idNo && that_present_idNo))
          return false;
        if (!this.idNo.equals(that.idNo))
          return false;
      }

      boolean this_present_realName = true && this.isSetRealName();
      boolean that_present_realName = true && that.isSetRealName();
      if (this_present_realName || that_present_realName) {
        if (!(this_present_realName && that_present_realName))
          return false;
        if (!this.realName.equals(that.realName))
          return false;
      }

      boolean this_present_leve = true;
      boolean that_present_leve = true;
      if (this_present_leve || that_present_leve) {
        if (!(this_present_leve && that_present_leve))
          return false;
        if (this.leve != that.leve)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_userId = true && (isSetUserId());
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_idNo = true && (isSetIdNo());
      list.add(present_idNo);
      if (present_idNo)
        list.add(idNo);

      boolean present_realName = true && (isSetRealName());
      list.add(present_realName);
      if (present_realName)
        list.add(realName);

      boolean present_leve = true;
      list.add(present_leve);
      if (present_leve)
        list.add(leve);

      return list.hashCode();
    }

    @Override
    public int compareTo(setUserInfoLeve_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdNo()).compareTo(other.isSetIdNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idNo, other.idNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRealName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLeve()).compareTo(other.isSetLeve());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLeve()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leve, other.leve);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUserInfoLeve_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("idNo:");
      if (this.idNo == null) {
        sb.append("null");
      } else {
        sb.append(this.idNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("realName:");
      if (this.realName == null) {
        sb.append("null");
      } else {
        sb.append(this.realName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("leve:");
      sb.append(this.leve);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUserInfoLeve_argsStandardSchemeFactory implements SchemeFactory {
      public setUserInfoLeve_argsStandardScheme getScheme() {
        return new setUserInfoLeve_argsStandardScheme();
      }
    }

    private static class setUserInfoLeve_argsStandardScheme extends StandardScheme<setUserInfoLeve_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUserInfoLeve_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ID_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.idNo = iprot.readString();
                struct.setIdNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REAL_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.realName = iprot.readString();
                struct.setRealNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LEVE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.leve = iprot.readI32();
                struct.setLeveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUserInfoLeve_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.idNo != null) {
          oprot.writeFieldBegin(ID_NO_FIELD_DESC);
          oprot.writeString(struct.idNo);
          oprot.writeFieldEnd();
        }
        if (struct.realName != null) {
          oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
          oprot.writeString(struct.realName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LEVE_FIELD_DESC);
        oprot.writeI32(struct.leve);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUserInfoLeve_argsTupleSchemeFactory implements SchemeFactory {
      public setUserInfoLeve_argsTupleScheme getScheme() {
        return new setUserInfoLeve_argsTupleScheme();
      }
    }

    private static class setUserInfoLeve_argsTupleScheme extends TupleScheme<setUserInfoLeve_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUserInfoLeve_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetIdNo()) {
          optionals.set(2);
        }
        if (struct.isSetRealName()) {
          optionals.set(3);
        }
        if (struct.isSetLeve()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetIdNo()) {
          oprot.writeString(struct.idNo);
        }
        if (struct.isSetRealName()) {
          oprot.writeString(struct.realName);
        }
        if (struct.isSetLeve()) {
          oprot.writeI32(struct.leve);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUserInfoLeve_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.idNo = iprot.readString();
          struct.setIdNoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.realName = iprot.readString();
          struct.setRealNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.leve = iprot.readI32();
          struct.setLeveIsSet(true);
        }
      }
    }

  }

  public static class setUserInfoLeve_result implements org.apache.thrift.TBase<setUserInfoLeve_result, setUserInfoLeve_result._Fields>, java.io.Serializable, Cloneable, Comparable<setUserInfoLeve_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUserInfoLeve_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setUserInfoLeve_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setUserInfoLeve_resultTupleSchemeFactory());
    }

    public MerchantsUserReturnThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MerchantsUserReturnThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserInfoLeve_result.class, metaDataMap);
    }

    public setUserInfoLeve_result() {
    }

    public setUserInfoLeve_result(
      MerchantsUserReturnThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUserInfoLeve_result(setUserInfoLeve_result other) {
      if (other.isSetSuccess()) {
        this.success = new MerchantsUserReturnThrift(other.success);
      }
    }

    public setUserInfoLeve_result deepCopy() {
      return new setUserInfoLeve_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MerchantsUserReturnThrift getSuccess() {
      return this.success;
    }

    public setUserInfoLeve_result setSuccess(MerchantsUserReturnThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MerchantsUserReturnThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUserInfoLeve_result)
        return this.equals((setUserInfoLeve_result)that);
      return false;
    }

    public boolean equals(setUserInfoLeve_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setUserInfoLeve_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUserInfoLeve_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUserInfoLeve_resultStandardSchemeFactory implements SchemeFactory {
      public setUserInfoLeve_resultStandardScheme getScheme() {
        return new setUserInfoLeve_resultStandardScheme();
      }
    }

    private static class setUserInfoLeve_resultStandardScheme extends StandardScheme<setUserInfoLeve_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUserInfoLeve_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MerchantsUserReturnThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUserInfoLeve_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUserInfoLeve_resultTupleSchemeFactory implements SchemeFactory {
      public setUserInfoLeve_resultTupleScheme getScheme() {
        return new setUserInfoLeve_resultTupleScheme();
      }
    }

    private static class setUserInfoLeve_resultTupleScheme extends TupleScheme<setUserInfoLeve_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUserInfoLeve_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUserInfoLeve_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MerchantsUserReturnThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantsUserThrift_args implements org.apache.thrift.TBase<getMerchantsUserThrift_args, getMerchantsUserThrift_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantsUserThrift_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantsUserThrift_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantsUserThrift_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantsUserThrift_argsTupleSchemeFactory());
    }

    public String merchantId; // required
    public String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId"),
      USER_ID((short)2, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantsUserThrift_args.class, metaDataMap);
    }

    public getMerchantsUserThrift_args() {
    }

    public getMerchantsUserThrift_args(
      String merchantId,
      String userId)
    {
      this();
      this.merchantId = merchantId;
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantsUserThrift_args(getMerchantsUserThrift_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public getMerchantsUserThrift_args deepCopy() {
      return new getMerchantsUserThrift_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
      this.userId = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public getMerchantsUserThrift_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public getMerchantsUserThrift_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantsUserThrift_args)
        return this.equals((getMerchantsUserThrift_args)that);
      return false;
    }

    public boolean equals(getMerchantsUserThrift_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_userId = true && (isSetUserId());
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantsUserThrift_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantsUserThrift_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantsUserThrift_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantsUserThrift_argsStandardScheme getScheme() {
        return new getMerchantsUserThrift_argsStandardScheme();
      }
    }

    private static class getMerchantsUserThrift_argsStandardScheme extends StandardScheme<getMerchantsUserThrift_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantsUserThrift_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantsUserThrift_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantsUserThrift_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantsUserThrift_argsTupleScheme getScheme() {
        return new getMerchantsUserThrift_argsTupleScheme();
      }
    }

    private static class getMerchantsUserThrift_argsTupleScheme extends TupleScheme<getMerchantsUserThrift_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantsUserThrift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantsUserThrift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getMerchantsUserThrift_result implements org.apache.thrift.TBase<getMerchantsUserThrift_result, getMerchantsUserThrift_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantsUserThrift_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantsUserThrift_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantsUserThrift_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantsUserThrift_resultTupleSchemeFactory());
    }

    public MerchantsUserThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MerchantsUserThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantsUserThrift_result.class, metaDataMap);
    }

    public getMerchantsUserThrift_result() {
    }

    public getMerchantsUserThrift_result(
      MerchantsUserThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantsUserThrift_result(getMerchantsUserThrift_result other) {
      if (other.isSetSuccess()) {
        this.success = new MerchantsUserThrift(other.success);
      }
    }

    public getMerchantsUserThrift_result deepCopy() {
      return new getMerchantsUserThrift_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MerchantsUserThrift getSuccess() {
      return this.success;
    }

    public getMerchantsUserThrift_result setSuccess(MerchantsUserThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MerchantsUserThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantsUserThrift_result)
        return this.equals((getMerchantsUserThrift_result)that);
      return false;
    }

    public boolean equals(getMerchantsUserThrift_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantsUserThrift_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantsUserThrift_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantsUserThrift_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantsUserThrift_resultStandardScheme getScheme() {
        return new getMerchantsUserThrift_resultStandardScheme();
      }
    }

    private static class getMerchantsUserThrift_resultStandardScheme extends StandardScheme<getMerchantsUserThrift_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantsUserThrift_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MerchantsUserThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantsUserThrift_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantsUserThrift_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantsUserThrift_resultTupleScheme getScheme() {
        return new getMerchantsUserThrift_resultTupleScheme();
      }
    }

    private static class getMerchantsUserThrift_resultTupleScheme extends TupleScheme<getMerchantsUserThrift_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantsUserThrift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantsUserThrift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MerchantsUserThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryByLoginNameAndMerchantId_args implements org.apache.thrift.TBase<queryByLoginNameAndMerchantId_args, queryByLoginNameAndMerchantId_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryByLoginNameAndMerchantId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByLoginNameAndMerchantId_args");

    private static final org.apache.thrift.protocol.TField LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByLoginNameAndMerchantId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByLoginNameAndMerchantId_argsTupleSchemeFactory());
    }

    public String loginName; // required
    public String merchantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOGIN_NAME((short)1, "loginName"),
      MERCHANT_ID((short)2, "merchantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOGIN_NAME
            return LOGIN_NAME;
          case 2: // MERCHANT_ID
            return MERCHANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByLoginNameAndMerchantId_args.class, metaDataMap);
    }

    public queryByLoginNameAndMerchantId_args() {
    }

    public queryByLoginNameAndMerchantId_args(
      String loginName,
      String merchantId)
    {
      this();
      this.loginName = loginName;
      this.merchantId = merchantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByLoginNameAndMerchantId_args(queryByLoginNameAndMerchantId_args other) {
      if (other.isSetLoginName()) {
        this.loginName = other.loginName;
      }
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
    }

    public queryByLoginNameAndMerchantId_args deepCopy() {
      return new queryByLoginNameAndMerchantId_args(this);
    }

    @Override
    public void clear() {
      this.loginName = null;
      this.merchantId = null;
    }

    public String getLoginName() {
      return this.loginName;
    }

    public queryByLoginNameAndMerchantId_args setLoginName(String loginName) {
      this.loginName = loginName;
      return this;
    }

    public void unsetLoginName() {
      this.loginName = null;
    }

    /** Returns true if field loginName is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginName() {
      return this.loginName != null;
    }

    public void setLoginNameIsSet(boolean value) {
      if (!value) {
        this.loginName = null;
      }
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public queryByLoginNameAndMerchantId_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOGIN_NAME:
        if (value == null) {
          unsetLoginName();
        } else {
          setLoginName((String)value);
        }
        break;

      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOGIN_NAME:
        return getLoginName();

      case MERCHANT_ID:
        return getMerchantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOGIN_NAME:
        return isSetLoginName();
      case MERCHANT_ID:
        return isSetMerchantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByLoginNameAndMerchantId_args)
        return this.equals((queryByLoginNameAndMerchantId_args)that);
      return false;
    }

    public boolean equals(queryByLoginNameAndMerchantId_args that) {
      if (that == null)
        return false;

      boolean this_present_loginName = true && this.isSetLoginName();
      boolean that_present_loginName = true && that.isSetLoginName();
      if (this_present_loginName || that_present_loginName) {
        if (!(this_present_loginName && that_present_loginName))
          return false;
        if (!this.loginName.equals(that.loginName))
          return false;
      }

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loginName = true && (isSetLoginName());
      list.add(present_loginName);
      if (present_loginName)
        list.add(loginName);

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryByLoginNameAndMerchantId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoginName()).compareTo(other.isSetLoginName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginName, other.loginName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByLoginNameAndMerchantId_args(");
      boolean first = true;

      sb.append("loginName:");
      if (this.loginName == null) {
        sb.append("null");
      } else {
        sb.append(this.loginName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByLoginNameAndMerchantId_argsStandardSchemeFactory implements SchemeFactory {
      public queryByLoginNameAndMerchantId_argsStandardScheme getScheme() {
        return new queryByLoginNameAndMerchantId_argsStandardScheme();
      }
    }

    private static class queryByLoginNameAndMerchantId_argsStandardScheme extends StandardScheme<queryByLoginNameAndMerchantId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByLoginNameAndMerchantId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOGIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginName = iprot.readString();
                struct.setLoginNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByLoginNameAndMerchantId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loginName != null) {
          oprot.writeFieldBegin(LOGIN_NAME_FIELD_DESC);
          oprot.writeString(struct.loginName);
          oprot.writeFieldEnd();
        }
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByLoginNameAndMerchantId_argsTupleSchemeFactory implements SchemeFactory {
      public queryByLoginNameAndMerchantId_argsTupleScheme getScheme() {
        return new queryByLoginNameAndMerchantId_argsTupleScheme();
      }
    }

    private static class queryByLoginNameAndMerchantId_argsTupleScheme extends TupleScheme<queryByLoginNameAndMerchantId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByLoginNameAndMerchantId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoginName()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLoginName()) {
          oprot.writeString(struct.loginName);
        }
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByLoginNameAndMerchantId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.loginName = iprot.readString();
          struct.setLoginNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
      }
    }

  }

  public static class queryByLoginNameAndMerchantId_result implements org.apache.thrift.TBase<queryByLoginNameAndMerchantId_result, queryByLoginNameAndMerchantId_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryByLoginNameAndMerchantId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryByLoginNameAndMerchantId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryByLoginNameAndMerchantId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryByLoginNameAndMerchantId_resultTupleSchemeFactory());
    }

    public MerchantsUserThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MerchantsUserThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryByLoginNameAndMerchantId_result.class, metaDataMap);
    }

    public queryByLoginNameAndMerchantId_result() {
    }

    public queryByLoginNameAndMerchantId_result(
      MerchantsUserThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryByLoginNameAndMerchantId_result(queryByLoginNameAndMerchantId_result other) {
      if (other.isSetSuccess()) {
        this.success = new MerchantsUserThrift(other.success);
      }
    }

    public queryByLoginNameAndMerchantId_result deepCopy() {
      return new queryByLoginNameAndMerchantId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MerchantsUserThrift getSuccess() {
      return this.success;
    }

    public queryByLoginNameAndMerchantId_result setSuccess(MerchantsUserThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MerchantsUserThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryByLoginNameAndMerchantId_result)
        return this.equals((queryByLoginNameAndMerchantId_result)that);
      return false;
    }

    public boolean equals(queryByLoginNameAndMerchantId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryByLoginNameAndMerchantId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryByLoginNameAndMerchantId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryByLoginNameAndMerchantId_resultStandardSchemeFactory implements SchemeFactory {
      public queryByLoginNameAndMerchantId_resultStandardScheme getScheme() {
        return new queryByLoginNameAndMerchantId_resultStandardScheme();
      }
    }

    private static class queryByLoginNameAndMerchantId_resultStandardScheme extends StandardScheme<queryByLoginNameAndMerchantId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryByLoginNameAndMerchantId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MerchantsUserThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryByLoginNameAndMerchantId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryByLoginNameAndMerchantId_resultTupleSchemeFactory implements SchemeFactory {
      public queryByLoginNameAndMerchantId_resultTupleScheme getScheme() {
        return new queryByLoginNameAndMerchantId_resultTupleScheme();
      }
    }

    private static class queryByLoginNameAndMerchantId_resultTupleScheme extends TupleScheme<queryByLoginNameAndMerchantId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryByLoginNameAndMerchantId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryByLoginNameAndMerchantId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MerchantsUserThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantsUserThriftByUserId_args implements org.apache.thrift.TBase<getMerchantsUserThriftByUserId_args, getMerchantsUserThriftByUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantsUserThriftByUserId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantsUserThriftByUserId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantsUserThriftByUserId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantsUserThriftByUserId_argsTupleSchemeFactory());
    }

    public String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantsUserThriftByUserId_args.class, metaDataMap);
    }

    public getMerchantsUserThriftByUserId_args() {
    }

    public getMerchantsUserThriftByUserId_args(
      String userId)
    {
      this();
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantsUserThriftByUserId_args(getMerchantsUserThriftByUserId_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public getMerchantsUserThriftByUserId_args deepCopy() {
      return new getMerchantsUserThriftByUserId_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public getMerchantsUserThriftByUserId_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantsUserThriftByUserId_args)
        return this.equals((getMerchantsUserThriftByUserId_args)that);
      return false;
    }

    public boolean equals(getMerchantsUserThriftByUserId_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true && (isSetUserId());
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantsUserThriftByUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantsUserThriftByUserId_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantsUserThriftByUserId_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantsUserThriftByUserId_argsStandardScheme getScheme() {
        return new getMerchantsUserThriftByUserId_argsStandardScheme();
      }
    }

    private static class getMerchantsUserThriftByUserId_argsStandardScheme extends StandardScheme<getMerchantsUserThriftByUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantsUserThriftByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantsUserThriftByUserId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantsUserThriftByUserId_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantsUserThriftByUserId_argsTupleScheme getScheme() {
        return new getMerchantsUserThriftByUserId_argsTupleScheme();
      }
    }

    private static class getMerchantsUserThriftByUserId_argsTupleScheme extends TupleScheme<getMerchantsUserThriftByUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantsUserThriftByUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantsUserThriftByUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getMerchantsUserThriftByUserId_result implements org.apache.thrift.TBase<getMerchantsUserThriftByUserId_result, getMerchantsUserThriftByUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantsUserThriftByUserId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantsUserThriftByUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantsUserThriftByUserId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantsUserThriftByUserId_resultTupleSchemeFactory());
    }

    public MerchantsUserThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MerchantsUserThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantsUserThriftByUserId_result.class, metaDataMap);
    }

    public getMerchantsUserThriftByUserId_result() {
    }

    public getMerchantsUserThriftByUserId_result(
      MerchantsUserThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantsUserThriftByUserId_result(getMerchantsUserThriftByUserId_result other) {
      if (other.isSetSuccess()) {
        this.success = new MerchantsUserThrift(other.success);
      }
    }

    public getMerchantsUserThriftByUserId_result deepCopy() {
      return new getMerchantsUserThriftByUserId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MerchantsUserThrift getSuccess() {
      return this.success;
    }

    public getMerchantsUserThriftByUserId_result setSuccess(MerchantsUserThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MerchantsUserThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantsUserThriftByUserId_result)
        return this.equals((getMerchantsUserThriftByUserId_result)that);
      return false;
    }

    public boolean equals(getMerchantsUserThriftByUserId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantsUserThriftByUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantsUserThriftByUserId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantsUserThriftByUserId_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantsUserThriftByUserId_resultStandardScheme getScheme() {
        return new getMerchantsUserThriftByUserId_resultStandardScheme();
      }
    }

    private static class getMerchantsUserThriftByUserId_resultStandardScheme extends StandardScheme<getMerchantsUserThriftByUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantsUserThriftByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MerchantsUserThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantsUserThriftByUserId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantsUserThriftByUserId_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantsUserThriftByUserId_resultTupleScheme getScheme() {
        return new getMerchantsUserThriftByUserId_resultTupleScheme();
      }
    }

    private static class getMerchantsUserThriftByUserId_resultTupleScheme extends TupleScheme<getMerchantsUserThriftByUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantsUserThriftByUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantsUserThriftByUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MerchantsUserThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryMerchantsUser_args implements org.apache.thrift.TBase<queryMerchantsUser_args, queryMerchantsUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryMerchantsUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMerchantsUser_args");

    private static final org.apache.thrift.protocol.TField WALLET_USERS_WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("walletUsersWhere", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMerchantsUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMerchantsUser_argsTupleSchemeFactory());
    }

    public WalletUsersWhere walletUsersWhere; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_USERS_WHERE((short)1, "walletUsersWhere");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_USERS_WHERE
            return WALLET_USERS_WHERE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_USERS_WHERE, new org.apache.thrift.meta_data.FieldMetaData("walletUsersWhere", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "WalletUsersWhere")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMerchantsUser_args.class, metaDataMap);
    }

    public queryMerchantsUser_args() {
    }

    public queryMerchantsUser_args(
      WalletUsersWhere walletUsersWhere)
    {
      this();
      this.walletUsersWhere = walletUsersWhere;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMerchantsUser_args(queryMerchantsUser_args other) {
      if (other.isSetWalletUsersWhere()) {
        this.walletUsersWhere = other.walletUsersWhere;
      }
    }

    public queryMerchantsUser_args deepCopy() {
      return new queryMerchantsUser_args(this);
    }

    @Override
    public void clear() {
      this.walletUsersWhere = null;
    }

    public WalletUsersWhere getWalletUsersWhere() {
      return this.walletUsersWhere;
    }

    public queryMerchantsUser_args setWalletUsersWhere(WalletUsersWhere walletUsersWhere) {
      this.walletUsersWhere = walletUsersWhere;
      return this;
    }

    public void unsetWalletUsersWhere() {
      this.walletUsersWhere = null;
    }

    /** Returns true if field walletUsersWhere is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletUsersWhere() {
      return this.walletUsersWhere != null;
    }

    public void setWalletUsersWhereIsSet(boolean value) {
      if (!value) {
        this.walletUsersWhere = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_USERS_WHERE:
        if (value == null) {
          unsetWalletUsersWhere();
        } else {
          setWalletUsersWhere((WalletUsersWhere)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_USERS_WHERE:
        return getWalletUsersWhere();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_USERS_WHERE:
        return isSetWalletUsersWhere();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMerchantsUser_args)
        return this.equals((queryMerchantsUser_args)that);
      return false;
    }

    public boolean equals(queryMerchantsUser_args that) {
      if (that == null)
        return false;

      boolean this_present_walletUsersWhere = true && this.isSetWalletUsersWhere();
      boolean that_present_walletUsersWhere = true && that.isSetWalletUsersWhere();
      if (this_present_walletUsersWhere || that_present_walletUsersWhere) {
        if (!(this_present_walletUsersWhere && that_present_walletUsersWhere))
          return false;
        if (!this.walletUsersWhere.equals(that.walletUsersWhere))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_walletUsersWhere = true && (isSetWalletUsersWhere());
      list.add(present_walletUsersWhere);
      if (present_walletUsersWhere)
        list.add(walletUsersWhere);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMerchantsUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletUsersWhere()).compareTo(other.isSetWalletUsersWhere());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletUsersWhere()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletUsersWhere, other.walletUsersWhere);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMerchantsUser_args(");
      boolean first = true;

      sb.append("walletUsersWhere:");
      if (this.walletUsersWhere == null) {
        sb.append("null");
      } else {
        sb.append(this.walletUsersWhere);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMerchantsUser_argsStandardSchemeFactory implements SchemeFactory {
      public queryMerchantsUser_argsStandardScheme getScheme() {
        return new queryMerchantsUser_argsStandardScheme();
      }
    }

    private static class queryMerchantsUser_argsStandardScheme extends StandardScheme<queryMerchantsUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMerchantsUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_USERS_WHERE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.walletUsersWhere = new WalletUsersWhere();
                struct.walletUsersWhere.read(iprot);
                struct.setWalletUsersWhereIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMerchantsUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletUsersWhere != null) {
          oprot.writeFieldBegin(WALLET_USERS_WHERE_FIELD_DESC);
          struct.walletUsersWhere.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMerchantsUser_argsTupleSchemeFactory implements SchemeFactory {
      public queryMerchantsUser_argsTupleScheme getScheme() {
        return new queryMerchantsUser_argsTupleScheme();
      }
    }

    private static class queryMerchantsUser_argsTupleScheme extends TupleScheme<queryMerchantsUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMerchantsUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletUsersWhere()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletUsersWhere()) {
          struct.walletUsersWhere.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMerchantsUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.walletUsersWhere = new WalletUsersWhere();
          struct.walletUsersWhere.read(iprot);
          struct.setWalletUsersWhereIsSet(true);
        }
      }
    }

  }

  public static class queryMerchantsUser_result implements org.apache.thrift.TBase<queryMerchantsUser_result, queryMerchantsUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryMerchantsUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMerchantsUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMerchantsUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMerchantsUser_resultTupleSchemeFactory());
    }

    public WalletQueryUsersResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "WalletQueryUsersResult")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMerchantsUser_result.class, metaDataMap);
    }

    public queryMerchantsUser_result() {
    }

    public queryMerchantsUser_result(
      WalletQueryUsersResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMerchantsUser_result(queryMerchantsUser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryMerchantsUser_result deepCopy() {
      return new queryMerchantsUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WalletQueryUsersResult getSuccess() {
      return this.success;
    }

    public queryMerchantsUser_result setSuccess(WalletQueryUsersResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WalletQueryUsersResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMerchantsUser_result)
        return this.equals((queryMerchantsUser_result)that);
      return false;
    }

    public boolean equals(queryMerchantsUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMerchantsUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMerchantsUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMerchantsUser_resultStandardSchemeFactory implements SchemeFactory {
      public queryMerchantsUser_resultStandardScheme getScheme() {
        return new queryMerchantsUser_resultStandardScheme();
      }
    }

    private static class queryMerchantsUser_resultStandardScheme extends StandardScheme<queryMerchantsUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMerchantsUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WalletQueryUsersResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMerchantsUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMerchantsUser_resultTupleSchemeFactory implements SchemeFactory {
      public queryMerchantsUser_resultTupleScheme getScheme() {
        return new queryMerchantsUser_resultTupleScheme();
      }
    }

    private static class queryMerchantsUser_resultTupleScheme extends TupleScheme<queryMerchantsUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMerchantsUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMerchantsUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WalletQueryUsersResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryMerchantsUserCounts_args implements org.apache.thrift.TBase<queryMerchantsUserCounts_args, queryMerchantsUserCounts_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryMerchantsUserCounts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMerchantsUserCounts_args");

    private static final org.apache.thrift.protocol.TField WALLET_USERS_WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("walletUsersWhere", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMerchantsUserCounts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMerchantsUserCounts_argsTupleSchemeFactory());
    }

    public WalletUsersWhere walletUsersWhere; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WALLET_USERS_WHERE((short)1, "walletUsersWhere");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WALLET_USERS_WHERE
            return WALLET_USERS_WHERE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WALLET_USERS_WHERE, new org.apache.thrift.meta_data.FieldMetaData("walletUsersWhere", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "WalletUsersWhere")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMerchantsUserCounts_args.class, metaDataMap);
    }

    public queryMerchantsUserCounts_args() {
    }

    public queryMerchantsUserCounts_args(
      WalletUsersWhere walletUsersWhere)
    {
      this();
      this.walletUsersWhere = walletUsersWhere;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMerchantsUserCounts_args(queryMerchantsUserCounts_args other) {
      if (other.isSetWalletUsersWhere()) {
        this.walletUsersWhere = other.walletUsersWhere;
      }
    }

    public queryMerchantsUserCounts_args deepCopy() {
      return new queryMerchantsUserCounts_args(this);
    }

    @Override
    public void clear() {
      this.walletUsersWhere = null;
    }

    public WalletUsersWhere getWalletUsersWhere() {
      return this.walletUsersWhere;
    }

    public queryMerchantsUserCounts_args setWalletUsersWhere(WalletUsersWhere walletUsersWhere) {
      this.walletUsersWhere = walletUsersWhere;
      return this;
    }

    public void unsetWalletUsersWhere() {
      this.walletUsersWhere = null;
    }

    /** Returns true if field walletUsersWhere is set (has been assigned a value) and false otherwise */
    public boolean isSetWalletUsersWhere() {
      return this.walletUsersWhere != null;
    }

    public void setWalletUsersWhereIsSet(boolean value) {
      if (!value) {
        this.walletUsersWhere = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WALLET_USERS_WHERE:
        if (value == null) {
          unsetWalletUsersWhere();
        } else {
          setWalletUsersWhere((WalletUsersWhere)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WALLET_USERS_WHERE:
        return getWalletUsersWhere();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WALLET_USERS_WHERE:
        return isSetWalletUsersWhere();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMerchantsUserCounts_args)
        return this.equals((queryMerchantsUserCounts_args)that);
      return false;
    }

    public boolean equals(queryMerchantsUserCounts_args that) {
      if (that == null)
        return false;

      boolean this_present_walletUsersWhere = true && this.isSetWalletUsersWhere();
      boolean that_present_walletUsersWhere = true && that.isSetWalletUsersWhere();
      if (this_present_walletUsersWhere || that_present_walletUsersWhere) {
        if (!(this_present_walletUsersWhere && that_present_walletUsersWhere))
          return false;
        if (!this.walletUsersWhere.equals(that.walletUsersWhere))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_walletUsersWhere = true && (isSetWalletUsersWhere());
      list.add(present_walletUsersWhere);
      if (present_walletUsersWhere)
        list.add(walletUsersWhere);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMerchantsUserCounts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWalletUsersWhere()).compareTo(other.isSetWalletUsersWhere());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWalletUsersWhere()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletUsersWhere, other.walletUsersWhere);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMerchantsUserCounts_args(");
      boolean first = true;

      sb.append("walletUsersWhere:");
      if (this.walletUsersWhere == null) {
        sb.append("null");
      } else {
        sb.append(this.walletUsersWhere);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMerchantsUserCounts_argsStandardSchemeFactory implements SchemeFactory {
      public queryMerchantsUserCounts_argsStandardScheme getScheme() {
        return new queryMerchantsUserCounts_argsStandardScheme();
      }
    }

    private static class queryMerchantsUserCounts_argsStandardScheme extends StandardScheme<queryMerchantsUserCounts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMerchantsUserCounts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WALLET_USERS_WHERE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.walletUsersWhere = new WalletUsersWhere();
                struct.walletUsersWhere.read(iprot);
                struct.setWalletUsersWhereIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMerchantsUserCounts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.walletUsersWhere != null) {
          oprot.writeFieldBegin(WALLET_USERS_WHERE_FIELD_DESC);
          struct.walletUsersWhere.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMerchantsUserCounts_argsTupleSchemeFactory implements SchemeFactory {
      public queryMerchantsUserCounts_argsTupleScheme getScheme() {
        return new queryMerchantsUserCounts_argsTupleScheme();
      }
    }

    private static class queryMerchantsUserCounts_argsTupleScheme extends TupleScheme<queryMerchantsUserCounts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMerchantsUserCounts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWalletUsersWhere()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWalletUsersWhere()) {
          struct.walletUsersWhere.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMerchantsUserCounts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.walletUsersWhere = new WalletUsersWhere();
          struct.walletUsersWhere.read(iprot);
          struct.setWalletUsersWhereIsSet(true);
        }
      }
    }

  }

  public static class queryMerchantsUserCounts_result implements org.apache.thrift.TBase<queryMerchantsUserCounts_result, queryMerchantsUserCounts_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryMerchantsUserCounts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMerchantsUserCounts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMerchantsUserCounts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMerchantsUserCounts_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMerchantsUserCounts_result.class, metaDataMap);
    }

    public queryMerchantsUserCounts_result() {
    }

    public queryMerchantsUserCounts_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMerchantsUserCounts_result(queryMerchantsUserCounts_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public queryMerchantsUserCounts_result deepCopy() {
      return new queryMerchantsUserCounts_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public queryMerchantsUserCounts_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMerchantsUserCounts_result)
        return this.equals((queryMerchantsUserCounts_result)that);
      return false;
    }

    public boolean equals(queryMerchantsUserCounts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMerchantsUserCounts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMerchantsUserCounts_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMerchantsUserCounts_resultStandardSchemeFactory implements SchemeFactory {
      public queryMerchantsUserCounts_resultStandardScheme getScheme() {
        return new queryMerchantsUserCounts_resultStandardScheme();
      }
    }

    private static class queryMerchantsUserCounts_resultStandardScheme extends StandardScheme<queryMerchantsUserCounts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMerchantsUserCounts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMerchantsUserCounts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMerchantsUserCounts_resultTupleSchemeFactory implements SchemeFactory {
      public queryMerchantsUserCounts_resultTupleScheme getScheme() {
        return new queryMerchantsUserCounts_resultTupleScheme();
      }
    }

    private static class queryMerchantsUserCounts_resultTupleScheme extends TupleScheme<queryMerchantsUserCounts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMerchantsUserCounts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMerchantsUserCounts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
