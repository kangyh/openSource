/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-15")
public class PayChannelVO implements org.apache.thrift.TBase<PayChannelVO, PayChannelVO._Fields>, java.io.Serializable, Cloneable, Comparable<PayChannelVO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PayChannelVO");

  private static final org.apache.thrift.protocol.TField CHANNEL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("costType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COST_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("costRate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COST_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("costCount", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PayChannelVOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PayChannelVOTupleSchemeFactory());
  }

  public String channelCode; // required
  public String costType; // required
  public String costRate; // required
  public String costCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHANNEL_CODE((short)1, "channelCode"),
    COST_TYPE((short)2, "costType"),
    COST_RATE((short)3, "costRate"),
    COST_COUNT((short)4, "costCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHANNEL_CODE
          return CHANNEL_CODE;
        case 2: // COST_TYPE
          return COST_TYPE;
        case 3: // COST_RATE
          return COST_RATE;
        case 4: // COST_COUNT
          return COST_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHANNEL_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("costType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COST_RATE, new org.apache.thrift.meta_data.FieldMetaData("costRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COST_COUNT, new org.apache.thrift.meta_data.FieldMetaData("costCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PayChannelVO.class, metaDataMap);
  }

  public PayChannelVO() {
  }

  public PayChannelVO(
    String channelCode,
    String costType,
    String costRate,
    String costCount)
  {
    this();
    this.channelCode = channelCode;
    this.costType = costType;
    this.costRate = costRate;
    this.costCount = costCount;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PayChannelVO(PayChannelVO other) {
    if (other.isSetChannelCode()) {
      this.channelCode = other.channelCode;
    }
    if (other.isSetCostType()) {
      this.costType = other.costType;
    }
    if (other.isSetCostRate()) {
      this.costRate = other.costRate;
    }
    if (other.isSetCostCount()) {
      this.costCount = other.costCount;
    }
  }

  public PayChannelVO deepCopy() {
    return new PayChannelVO(this);
  }

  @Override
  public void clear() {
    this.channelCode = null;
    this.costType = null;
    this.costRate = null;
    this.costCount = null;
  }

  public String getChannelCode() {
    return this.channelCode;
  }

  public PayChannelVO setChannelCode(String channelCode) {
    this.channelCode = channelCode;
    return this;
  }

  public void unsetChannelCode() {
    this.channelCode = null;
  }

  /** Returns true if field channelCode is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelCode() {
    return this.channelCode != null;
  }

  public void setChannelCodeIsSet(boolean value) {
    if (!value) {
      this.channelCode = null;
    }
  }

  public String getCostType() {
    return this.costType;
  }

  public PayChannelVO setCostType(String costType) {
    this.costType = costType;
    return this;
  }

  public void unsetCostType() {
    this.costType = null;
  }

  /** Returns true if field costType is set (has been assigned a value) and false otherwise */
  public boolean isSetCostType() {
    return this.costType != null;
  }

  public void setCostTypeIsSet(boolean value) {
    if (!value) {
      this.costType = null;
    }
  }

  public String getCostRate() {
    return this.costRate;
  }

  public PayChannelVO setCostRate(String costRate) {
    this.costRate = costRate;
    return this;
  }

  public void unsetCostRate() {
    this.costRate = null;
  }

  /** Returns true if field costRate is set (has been assigned a value) and false otherwise */
  public boolean isSetCostRate() {
    return this.costRate != null;
  }

  public void setCostRateIsSet(boolean value) {
    if (!value) {
      this.costRate = null;
    }
  }

  public String getCostCount() {
    return this.costCount;
  }

  public PayChannelVO setCostCount(String costCount) {
    this.costCount = costCount;
    return this;
  }

  public void unsetCostCount() {
    this.costCount = null;
  }

  /** Returns true if field costCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCostCount() {
    return this.costCount != null;
  }

  public void setCostCountIsSet(boolean value) {
    if (!value) {
      this.costCount = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHANNEL_CODE:
      if (value == null) {
        unsetChannelCode();
      } else {
        setChannelCode((String)value);
      }
      break;

    case COST_TYPE:
      if (value == null) {
        unsetCostType();
      } else {
        setCostType((String)value);
      }
      break;

    case COST_RATE:
      if (value == null) {
        unsetCostRate();
      } else {
        setCostRate((String)value);
      }
      break;

    case COST_COUNT:
      if (value == null) {
        unsetCostCount();
      } else {
        setCostCount((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHANNEL_CODE:
      return getChannelCode();

    case COST_TYPE:
      return getCostType();

    case COST_RATE:
      return getCostRate();

    case COST_COUNT:
      return getCostCount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHANNEL_CODE:
      return isSetChannelCode();
    case COST_TYPE:
      return isSetCostType();
    case COST_RATE:
      return isSetCostRate();
    case COST_COUNT:
      return isSetCostCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PayChannelVO)
      return this.equals((PayChannelVO)that);
    return false;
  }

  public boolean equals(PayChannelVO that) {
    if (that == null)
      return false;

    boolean this_present_channelCode = true && this.isSetChannelCode();
    boolean that_present_channelCode = true && that.isSetChannelCode();
    if (this_present_channelCode || that_present_channelCode) {
      if (!(this_present_channelCode && that_present_channelCode))
        return false;
      if (!this.channelCode.equals(that.channelCode))
        return false;
    }

    boolean this_present_costType = true && this.isSetCostType();
    boolean that_present_costType = true && that.isSetCostType();
    if (this_present_costType || that_present_costType) {
      if (!(this_present_costType && that_present_costType))
        return false;
      if (!this.costType.equals(that.costType))
        return false;
    }

    boolean this_present_costRate = true && this.isSetCostRate();
    boolean that_present_costRate = true && that.isSetCostRate();
    if (this_present_costRate || that_present_costRate) {
      if (!(this_present_costRate && that_present_costRate))
        return false;
      if (!this.costRate.equals(that.costRate))
        return false;
    }

    boolean this_present_costCount = true && this.isSetCostCount();
    boolean that_present_costCount = true && that.isSetCostCount();
    if (this_present_costCount || that_present_costCount) {
      if (!(this_present_costCount && that_present_costCount))
        return false;
      if (!this.costCount.equals(that.costCount))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_channelCode = true && (isSetChannelCode());
    list.add(present_channelCode);
    if (present_channelCode)
      list.add(channelCode);

    boolean present_costType = true && (isSetCostType());
    list.add(present_costType);
    if (present_costType)
      list.add(costType);

    boolean present_costRate = true && (isSetCostRate());
    list.add(present_costRate);
    if (present_costRate)
      list.add(costRate);

    boolean present_costCount = true && (isSetCostCount());
    list.add(present_costCount);
    if (present_costCount)
      list.add(costCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(PayChannelVO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChannelCode()).compareTo(other.isSetChannelCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCode, other.channelCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostType()).compareTo(other.isSetCostType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costType, other.costType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostRate()).compareTo(other.isSetCostRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costRate, other.costRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostCount()).compareTo(other.isSetCostCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costCount, other.costCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PayChannelVO(");
    boolean first = true;

    sb.append("channelCode:");
    if (this.channelCode == null) {
      sb.append("null");
    } else {
      sb.append(this.channelCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("costType:");
    if (this.costType == null) {
      sb.append("null");
    } else {
      sb.append(this.costType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("costRate:");
    if (this.costRate == null) {
      sb.append("null");
    } else {
      sb.append(this.costRate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("costCount:");
    if (this.costCount == null) {
      sb.append("null");
    } else {
      sb.append(this.costCount);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PayChannelVOStandardSchemeFactory implements SchemeFactory {
    public PayChannelVOStandardScheme getScheme() {
      return new PayChannelVOStandardScheme();
    }
  }

  private static class PayChannelVOStandardScheme extends StandardScheme<PayChannelVO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PayChannelVO struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // CHANNEL_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelCode = iprot.readString();
              struct.setChannelCodeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.costType = iprot.readString();
              struct.setCostTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COST_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.costRate = iprot.readString();
              struct.setCostRateIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COST_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.costCount = iprot.readString();
              struct.setCostCountIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PayChannelVO struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.channelCode != null) {
        oprot.writeFieldBegin(CHANNEL_CODE_FIELD_DESC);
        oprot.writeString(struct.channelCode);
        oprot.writeFieldEnd();
      }
      if (struct.costType != null) {
        oprot.writeFieldBegin(COST_TYPE_FIELD_DESC);
        oprot.writeString(struct.costType);
        oprot.writeFieldEnd();
      }
      if (struct.costRate != null) {
        oprot.writeFieldBegin(COST_RATE_FIELD_DESC);
        oprot.writeString(struct.costRate);
        oprot.writeFieldEnd();
      }
      if (struct.costCount != null) {
        oprot.writeFieldBegin(COST_COUNT_FIELD_DESC);
        oprot.writeString(struct.costCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PayChannelVOTupleSchemeFactory implements SchemeFactory {
    public PayChannelVOTupleScheme getScheme() {
      return new PayChannelVOTupleScheme();
    }
  }

  private static class PayChannelVOTupleScheme extends TupleScheme<PayChannelVO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PayChannelVO struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChannelCode()) {
        optionals.set(0);
      }
      if (struct.isSetCostType()) {
        optionals.set(1);
      }
      if (struct.isSetCostRate()) {
        optionals.set(2);
      }
      if (struct.isSetCostCount()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetChannelCode()) {
        oprot.writeString(struct.channelCode);
      }
      if (struct.isSetCostType()) {
        oprot.writeString(struct.costType);
      }
      if (struct.isSetCostRate()) {
        oprot.writeString(struct.costRate);
      }
      if (struct.isSetCostCount()) {
        oprot.writeString(struct.costCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PayChannelVO struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.channelCode = iprot.readString();
        struct.setChannelCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.costType = iprot.readString();
        struct.setCostTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.costRate = iprot.readString();
        struct.setCostRateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.costCount = iprot.readString();
        struct.setCostCountIsSet(true);
      }
    }
  }

}

