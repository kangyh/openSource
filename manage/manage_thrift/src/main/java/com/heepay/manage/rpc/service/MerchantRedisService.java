/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-07-27")
public class MerchantRedisService {

  public interface Iface {

    public String getProductVo(String productCode) throws org.apache.thrift.TException;

    public String getMerchantVO(String merchantId) throws org.apache.thrift.TException;

    public String getMerchantProductVO(String merchantId, String productCode) throws org.apache.thrift.TException;

    public String getProductList(String trxType) throws org.apache.thrift.TException;

    public String getMerchantFeeVO(String merchantId, String productCode, String bankCardType, String bankNo, String money) throws org.apache.thrift.TException;

    public String getMerchantProduct(String merchantId, String productCode, String businessType) throws org.apache.thrift.TException;

    public String getMerchantFee(String merchantId, String productCode, String bankCardType, String bankNo, String money, String businessType) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getProductVo(String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantVO(String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantProductVO(String merchantId, String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductList(String trxType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantFeeVO(String merchantId, String productCode, String bankCardType, String bankNo, String money, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantProduct(String merchantId, String productCode, String businessType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantFee(String merchantId, String productCode, String bankCardType, String bankNo, String money, String businessType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getProductVo(String productCode) throws org.apache.thrift.TException
    {
      send_getProductVo(productCode);
      return recv_getProductVo();
    }

    public void send_getProductVo(String productCode) throws org.apache.thrift.TException
    {
      getProductVo_args args = new getProductVo_args();
      args.setProductCode(productCode);
      sendBase("getProductVo", args);
    }

    public String recv_getProductVo() throws org.apache.thrift.TException
    {
      getProductVo_result result = new getProductVo_result();
      receiveBase(result, "getProductVo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductVo failed: unknown result");
    }

    public String getMerchantVO(String merchantId) throws org.apache.thrift.TException
    {
      send_getMerchantVO(merchantId);
      return recv_getMerchantVO();
    }

    public void send_getMerchantVO(String merchantId) throws org.apache.thrift.TException
    {
      getMerchantVO_args args = new getMerchantVO_args();
      args.setMerchantId(merchantId);
      sendBase("getMerchantVO", args);
    }

    public String recv_getMerchantVO() throws org.apache.thrift.TException
    {
      getMerchantVO_result result = new getMerchantVO_result();
      receiveBase(result, "getMerchantVO");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantVO failed: unknown result");
    }

    public String getMerchantProductVO(String merchantId, String productCode) throws org.apache.thrift.TException
    {
      send_getMerchantProductVO(merchantId, productCode);
      return recv_getMerchantProductVO();
    }

    public void send_getMerchantProductVO(String merchantId, String productCode) throws org.apache.thrift.TException
    {
      getMerchantProductVO_args args = new getMerchantProductVO_args();
      args.setMerchantId(merchantId);
      args.setProductCode(productCode);
      sendBase("getMerchantProductVO", args);
    }

    public String recv_getMerchantProductVO() throws org.apache.thrift.TException
    {
      getMerchantProductVO_result result = new getMerchantProductVO_result();
      receiveBase(result, "getMerchantProductVO");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantProductVO failed: unknown result");
    }

    public String getProductList(String trxType) throws org.apache.thrift.TException
    {
      send_getProductList(trxType);
      return recv_getProductList();
    }

    public void send_getProductList(String trxType) throws org.apache.thrift.TException
    {
      getProductList_args args = new getProductList_args();
      args.setTrxType(trxType);
      sendBase("getProductList", args);
    }

    public String recv_getProductList() throws org.apache.thrift.TException
    {
      getProductList_result result = new getProductList_result();
      receiveBase(result, "getProductList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductList failed: unknown result");
    }

    public String getMerchantFeeVO(String merchantId, String productCode, String bankCardType, String bankNo, String money) throws org.apache.thrift.TException
    {
      send_getMerchantFeeVO(merchantId, productCode, bankCardType, bankNo, money);
      return recv_getMerchantFeeVO();
    }

    public void send_getMerchantFeeVO(String merchantId, String productCode, String bankCardType, String bankNo, String money) throws org.apache.thrift.TException
    {
      getMerchantFeeVO_args args = new getMerchantFeeVO_args();
      args.setMerchantId(merchantId);
      args.setProductCode(productCode);
      args.setBankCardType(bankCardType);
      args.setBankNo(bankNo);
      args.setMoney(money);
      sendBase("getMerchantFeeVO", args);
    }

    public String recv_getMerchantFeeVO() throws org.apache.thrift.TException
    {
      getMerchantFeeVO_result result = new getMerchantFeeVO_result();
      receiveBase(result, "getMerchantFeeVO");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantFeeVO failed: unknown result");
    }

    public String getMerchantProduct(String merchantId, String productCode, String businessType) throws org.apache.thrift.TException
    {
      send_getMerchantProduct(merchantId, productCode, businessType);
      return recv_getMerchantProduct();
    }

    public void send_getMerchantProduct(String merchantId, String productCode, String businessType) throws org.apache.thrift.TException
    {
      getMerchantProduct_args args = new getMerchantProduct_args();
      args.setMerchantId(merchantId);
      args.setProductCode(productCode);
      args.setBusinessType(businessType);
      sendBase("getMerchantProduct", args);
    }

    public String recv_getMerchantProduct() throws org.apache.thrift.TException
    {
      getMerchantProduct_result result = new getMerchantProduct_result();
      receiveBase(result, "getMerchantProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantProduct failed: unknown result");
    }

    public String getMerchantFee(String merchantId, String productCode, String bankCardType, String bankNo, String money, String businessType) throws org.apache.thrift.TException
    {
      send_getMerchantFee(merchantId, productCode, bankCardType, bankNo, money, businessType);
      return recv_getMerchantFee();
    }

    public void send_getMerchantFee(String merchantId, String productCode, String bankCardType, String bankNo, String money, String businessType) throws org.apache.thrift.TException
    {
      getMerchantFee_args args = new getMerchantFee_args();
      args.setMerchantId(merchantId);
      args.setProductCode(productCode);
      args.setBankCardType(bankCardType);
      args.setBankNo(bankNo);
      args.setMoney(money);
      args.setBusinessType(businessType);
      sendBase("getMerchantFee", args);
    }

    public String recv_getMerchantFee() throws org.apache.thrift.TException
    {
      getMerchantFee_result result = new getMerchantFee_result();
      receiveBase(result, "getMerchantFee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantFee failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getProductVo(String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductVo_call method_call = new getProductVo_call(productCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductVo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productCode;
      public getProductVo_call(String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCode = productCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductVo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductVo_args args = new getProductVo_args();
        args.setProductCode(productCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductVo();
      }
    }

    public void getMerchantVO(String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantVO_call method_call = new getMerchantVO_call(merchantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantVO_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      public getMerchantVO_call(String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantVO", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantVO_args args = new getMerchantVO_args();
        args.setMerchantId(merchantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantVO();
      }
    }

    public void getMerchantProductVO(String merchantId, String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantProductVO_call method_call = new getMerchantProductVO_call(merchantId, productCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantProductVO_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      private String productCode;
      public getMerchantProductVO_call(String merchantId, String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
        this.productCode = productCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantProductVO", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantProductVO_args args = new getMerchantProductVO_args();
        args.setMerchantId(merchantId);
        args.setProductCode(productCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantProductVO();
      }
    }

    public void getProductList(String trxType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductList_call method_call = new getProductList_call(trxType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String trxType;
      public getProductList_call(String trxType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.trxType = trxType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductList_args args = new getProductList_args();
        args.setTrxType(trxType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductList();
      }
    }

    public void getMerchantFeeVO(String merchantId, String productCode, String bankCardType, String bankNo, String money, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantFeeVO_call method_call = new getMerchantFeeVO_call(merchantId, productCode, bankCardType, bankNo, money, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantFeeVO_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      private String productCode;
      private String bankCardType;
      private String bankNo;
      private String money;
      public getMerchantFeeVO_call(String merchantId, String productCode, String bankCardType, String bankNo, String money, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
        this.productCode = productCode;
        this.bankCardType = bankCardType;
        this.bankNo = bankNo;
        this.money = money;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantFeeVO", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantFeeVO_args args = new getMerchantFeeVO_args();
        args.setMerchantId(merchantId);
        args.setProductCode(productCode);
        args.setBankCardType(bankCardType);
        args.setBankNo(bankNo);
        args.setMoney(money);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantFeeVO();
      }
    }

    public void getMerchantProduct(String merchantId, String productCode, String businessType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantProduct_call method_call = new getMerchantProduct_call(merchantId, productCode, businessType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      private String productCode;
      private String businessType;
      public getMerchantProduct_call(String merchantId, String productCode, String businessType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
        this.productCode = productCode;
        this.businessType = businessType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantProduct_args args = new getMerchantProduct_args();
        args.setMerchantId(merchantId);
        args.setProductCode(productCode);
        args.setBusinessType(businessType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantProduct();
      }
    }

    public void getMerchantFee(String merchantId, String productCode, String bankCardType, String bankNo, String money, String businessType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantFee_call method_call = new getMerchantFee_call(merchantId, productCode, bankCardType, bankNo, money, businessType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantFee_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      private String productCode;
      private String bankCardType;
      private String bankNo;
      private String money;
      private String businessType;
      public getMerchantFee_call(String merchantId, String productCode, String bankCardType, String bankNo, String money, String businessType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
        this.productCode = productCode;
        this.bankCardType = bankCardType;
        this.bankNo = bankNo;
        this.money = money;
        this.businessType = businessType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantFee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantFee_args args = new getMerchantFee_args();
        args.setMerchantId(merchantId);
        args.setProductCode(productCode);
        args.setBankCardType(bankCardType);
        args.setBankNo(bankNo);
        args.setMoney(money);
        args.setBusinessType(businessType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantFee();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getProductVo", new getProductVo());
      processMap.put("getMerchantVO", new getMerchantVO());
      processMap.put("getMerchantProductVO", new getMerchantProductVO());
      processMap.put("getProductList", new getProductList());
      processMap.put("getMerchantFeeVO", new getMerchantFeeVO());
      processMap.put("getMerchantProduct", new getMerchantProduct());
      processMap.put("getMerchantFee", new getMerchantFee());
      return processMap;
    }

    public static class getProductVo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductVo_args> {
      public getProductVo() {
        super("getProductVo");
      }

      public getProductVo_args getEmptyArgsInstance() {
        return new getProductVo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductVo_result getResult(I iface, getProductVo_args args) throws org.apache.thrift.TException {
        getProductVo_result result = new getProductVo_result();
        result.success = iface.getProductVo(args.productCode);
        return result;
      }
    }

    public static class getMerchantVO<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantVO_args> {
      public getMerchantVO() {
        super("getMerchantVO");
      }

      public getMerchantVO_args getEmptyArgsInstance() {
        return new getMerchantVO_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantVO_result getResult(I iface, getMerchantVO_args args) throws org.apache.thrift.TException {
        getMerchantVO_result result = new getMerchantVO_result();
        result.success = iface.getMerchantVO(args.merchantId);
        return result;
      }
    }

    public static class getMerchantProductVO<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantProductVO_args> {
      public getMerchantProductVO() {
        super("getMerchantProductVO");
      }

      public getMerchantProductVO_args getEmptyArgsInstance() {
        return new getMerchantProductVO_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantProductVO_result getResult(I iface, getMerchantProductVO_args args) throws org.apache.thrift.TException {
        getMerchantProductVO_result result = new getMerchantProductVO_result();
        result.success = iface.getMerchantProductVO(args.merchantId, args.productCode);
        return result;
      }
    }

    public static class getProductList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductList_args> {
      public getProductList() {
        super("getProductList");
      }

      public getProductList_args getEmptyArgsInstance() {
        return new getProductList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductList_result getResult(I iface, getProductList_args args) throws org.apache.thrift.TException {
        getProductList_result result = new getProductList_result();
        result.success = iface.getProductList(args.trxType);
        return result;
      }
    }

    public static class getMerchantFeeVO<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantFeeVO_args> {
      public getMerchantFeeVO() {
        super("getMerchantFeeVO");
      }

      public getMerchantFeeVO_args getEmptyArgsInstance() {
        return new getMerchantFeeVO_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantFeeVO_result getResult(I iface, getMerchantFeeVO_args args) throws org.apache.thrift.TException {
        getMerchantFeeVO_result result = new getMerchantFeeVO_result();
        result.success = iface.getMerchantFeeVO(args.merchantId, args.productCode, args.bankCardType, args.bankNo, args.money);
        return result;
      }
    }

    public static class getMerchantProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantProduct_args> {
      public getMerchantProduct() {
        super("getMerchantProduct");
      }

      public getMerchantProduct_args getEmptyArgsInstance() {
        return new getMerchantProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantProduct_result getResult(I iface, getMerchantProduct_args args) throws org.apache.thrift.TException {
        getMerchantProduct_result result = new getMerchantProduct_result();
        result.success = iface.getMerchantProduct(args.merchantId, args.productCode, args.businessType);
        return result;
      }
    }

    public static class getMerchantFee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantFee_args> {
      public getMerchantFee() {
        super("getMerchantFee");
      }

      public getMerchantFee_args getEmptyArgsInstance() {
        return new getMerchantFee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantFee_result getResult(I iface, getMerchantFee_args args) throws org.apache.thrift.TException {
        getMerchantFee_result result = new getMerchantFee_result();
        result.success = iface.getMerchantFee(args.merchantId, args.productCode, args.bankCardType, args.bankNo, args.money, args.businessType);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getProductVo", new getProductVo());
      processMap.put("getMerchantVO", new getMerchantVO());
      processMap.put("getMerchantProductVO", new getMerchantProductVO());
      processMap.put("getProductList", new getProductList());
      processMap.put("getMerchantFeeVO", new getMerchantFeeVO());
      processMap.put("getMerchantProduct", new getMerchantProduct());
      processMap.put("getMerchantFee", new getMerchantFee());
      return processMap;
    }

    public static class getProductVo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductVo_args, String> {
      public getProductVo() {
        super("getProductVo");
      }

      public getProductVo_args getEmptyArgsInstance() {
        return new getProductVo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getProductVo_result result = new getProductVo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductVo_result result = new getProductVo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductVo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getProductVo(args.productCode,resultHandler);
      }
    }

    public static class getMerchantVO<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantVO_args, String> {
      public getMerchantVO() {
        super("getMerchantVO");
      }

      public getMerchantVO_args getEmptyArgsInstance() {
        return new getMerchantVO_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getMerchantVO_result result = new getMerchantVO_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantVO_result result = new getMerchantVO_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantVO_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getMerchantVO(args.merchantId,resultHandler);
      }
    }

    public static class getMerchantProductVO<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantProductVO_args, String> {
      public getMerchantProductVO() {
        super("getMerchantProductVO");
      }

      public getMerchantProductVO_args getEmptyArgsInstance() {
        return new getMerchantProductVO_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getMerchantProductVO_result result = new getMerchantProductVO_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantProductVO_result result = new getMerchantProductVO_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantProductVO_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getMerchantProductVO(args.merchantId, args.productCode,resultHandler);
      }
    }

    public static class getProductList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductList_args, String> {
      public getProductList() {
        super("getProductList");
      }

      public getProductList_args getEmptyArgsInstance() {
        return new getProductList_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getProductList_result result = new getProductList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductList_result result = new getProductList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductList_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getProductList(args.trxType,resultHandler);
      }
    }

    public static class getMerchantFeeVO<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantFeeVO_args, String> {
      public getMerchantFeeVO() {
        super("getMerchantFeeVO");
      }

      public getMerchantFeeVO_args getEmptyArgsInstance() {
        return new getMerchantFeeVO_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getMerchantFeeVO_result result = new getMerchantFeeVO_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantFeeVO_result result = new getMerchantFeeVO_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantFeeVO_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getMerchantFeeVO(args.merchantId, args.productCode, args.bankCardType, args.bankNo, args.money,resultHandler);
      }
    }

    public static class getMerchantProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantProduct_args, String> {
      public getMerchantProduct() {
        super("getMerchantProduct");
      }

      public getMerchantProduct_args getEmptyArgsInstance() {
        return new getMerchantProduct_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getMerchantProduct_result result = new getMerchantProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantProduct_result result = new getMerchantProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantProduct_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getMerchantProduct(args.merchantId, args.productCode, args.businessType,resultHandler);
      }
    }

    public static class getMerchantFee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantFee_args, String> {
      public getMerchantFee() {
        super("getMerchantFee");
      }

      public getMerchantFee_args getEmptyArgsInstance() {
        return new getMerchantFee_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getMerchantFee_result result = new getMerchantFee_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantFee_result result = new getMerchantFee_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantFee_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getMerchantFee(args.merchantId, args.productCode, args.bankCardType, args.bankNo, args.money, args.businessType,resultHandler);
      }
    }

  }

  public static class getProductVo_args implements org.apache.thrift.TBase<getProductVo_args, getProductVo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductVo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductVo_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("productCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductVo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductVo_argsTupleSchemeFactory());
    }

    public String productCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_CODE((short)1, "productCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_CODE
            return PRODUCT_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("productCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductVo_args.class, metaDataMap);
    }

    public getProductVo_args() {
    }

    public getProductVo_args(
      String productCode)
    {
      this();
      this.productCode = productCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductVo_args(getProductVo_args other) {
      if (other.isSetProductCode()) {
        this.productCode = other.productCode;
      }
    }

    public getProductVo_args deepCopy() {
      return new getProductVo_args(this);
    }

    @Override
    public void clear() {
      this.productCode = null;
    }

    public String getProductCode() {
      return this.productCode;
    }

    public getProductVo_args setProductCode(String productCode) {
      this.productCode = productCode;
      return this;
    }

    public void unsetProductCode() {
      this.productCode = null;
    }

    /** Returns true if field productCode is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCode() {
      return this.productCode != null;
    }

    public void setProductCodeIsSet(boolean value) {
      if (!value) {
        this.productCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_CODE:
        if (value == null) {
          unsetProductCode();
        } else {
          setProductCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_CODE:
        return getProductCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_CODE:
        return isSetProductCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductVo_args)
        return this.equals((getProductVo_args)that);
      return false;
    }

    public boolean equals(getProductVo_args that) {
      if (that == null)
        return false;

      boolean this_present_productCode = true && this.isSetProductCode();
      boolean that_present_productCode = true && that.isSetProductCode();
      if (this_present_productCode || that_present_productCode) {
        if (!(this_present_productCode && that_present_productCode))
          return false;
        if (!this.productCode.equals(that.productCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCode = true && (isSetProductCode());
      list.add(present_productCode);
      if (present_productCode)
        list.add(productCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductVo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCode()).compareTo(other.isSetProductCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCode, other.productCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductVo_args(");
      boolean first = true;

      sb.append("productCode:");
      if (this.productCode == null) {
        sb.append("null");
      } else {
        sb.append(this.productCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductVo_argsStandardSchemeFactory implements SchemeFactory {
      public getProductVo_argsStandardScheme getScheme() {
        return new getProductVo_argsStandardScheme();
      }
    }

    private static class getProductVo_argsStandardScheme extends StandardScheme<getProductVo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductVo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productCode = iprot.readString();
                struct.setProductCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductVo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCode != null) {
          oprot.writeFieldBegin(PRODUCT_CODE_FIELD_DESC);
          oprot.writeString(struct.productCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductVo_argsTupleSchemeFactory implements SchemeFactory {
      public getProductVo_argsTupleScheme getScheme() {
        return new getProductVo_argsTupleScheme();
      }
    }

    private static class getProductVo_argsTupleScheme extends TupleScheme<getProductVo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductVo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductCode()) {
          oprot.writeString(struct.productCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductVo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productCode = iprot.readString();
          struct.setProductCodeIsSet(true);
        }
      }
    }

  }

  public static class getProductVo_result implements org.apache.thrift.TBase<getProductVo_result, getProductVo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductVo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductVo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductVo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductVo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductVo_result.class, metaDataMap);
    }

    public getProductVo_result() {
    }

    public getProductVo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductVo_result(getProductVo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getProductVo_result deepCopy() {
      return new getProductVo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getProductVo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductVo_result)
        return this.equals((getProductVo_result)that);
      return false;
    }

    public boolean equals(getProductVo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductVo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductVo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductVo_resultStandardSchemeFactory implements SchemeFactory {
      public getProductVo_resultStandardScheme getScheme() {
        return new getProductVo_resultStandardScheme();
      }
    }

    private static class getProductVo_resultStandardScheme extends StandardScheme<getProductVo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductVo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductVo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductVo_resultTupleSchemeFactory implements SchemeFactory {
      public getProductVo_resultTupleScheme getScheme() {
        return new getProductVo_resultTupleScheme();
      }
    }

    private static class getProductVo_resultTupleScheme extends TupleScheme<getProductVo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductVo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductVo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantVO_args implements org.apache.thrift.TBase<getMerchantVO_args, getMerchantVO_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantVO_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantVO_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantVO_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantVO_argsTupleSchemeFactory());
    }

    public String merchantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantVO_args.class, metaDataMap);
    }

    public getMerchantVO_args() {
    }

    public getMerchantVO_args(
      String merchantId)
    {
      this();
      this.merchantId = merchantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantVO_args(getMerchantVO_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
    }

    public getMerchantVO_args deepCopy() {
      return new getMerchantVO_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public getMerchantVO_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantVO_args)
        return this.equals((getMerchantVO_args)that);
      return false;
    }

    public boolean equals(getMerchantVO_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantVO_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantVO_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantVO_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantVO_argsStandardScheme getScheme() {
        return new getMerchantVO_argsStandardScheme();
      }
    }

    private static class getMerchantVO_argsStandardScheme extends StandardScheme<getMerchantVO_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantVO_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantVO_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantVO_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantVO_argsTupleScheme getScheme() {
        return new getMerchantVO_argsTupleScheme();
      }
    }

    private static class getMerchantVO_argsTupleScheme extends TupleScheme<getMerchantVO_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantVO_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantVO_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
      }
    }

  }

  public static class getMerchantVO_result implements org.apache.thrift.TBase<getMerchantVO_result, getMerchantVO_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantVO_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantVO_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantVO_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantVO_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantVO_result.class, metaDataMap);
    }

    public getMerchantVO_result() {
    }

    public getMerchantVO_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantVO_result(getMerchantVO_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getMerchantVO_result deepCopy() {
      return new getMerchantVO_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getMerchantVO_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantVO_result)
        return this.equals((getMerchantVO_result)that);
      return false;
    }

    public boolean equals(getMerchantVO_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantVO_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantVO_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantVO_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantVO_resultStandardScheme getScheme() {
        return new getMerchantVO_resultStandardScheme();
      }
    }

    private static class getMerchantVO_resultStandardScheme extends StandardScheme<getMerchantVO_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantVO_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantVO_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantVO_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantVO_resultTupleScheme getScheme() {
        return new getMerchantVO_resultTupleScheme();
      }
    }

    private static class getMerchantVO_resultTupleScheme extends TupleScheme<getMerchantVO_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantVO_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantVO_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantProductVO_args implements org.apache.thrift.TBase<getMerchantProductVO_args, getMerchantProductVO_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantProductVO_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantProductVO_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("productCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantProductVO_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantProductVO_argsTupleSchemeFactory());
    }

    public String merchantId; // required
    public String productCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId"),
      PRODUCT_CODE((short)2, "productCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          case 2: // PRODUCT_CODE
            return PRODUCT_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("productCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantProductVO_args.class, metaDataMap);
    }

    public getMerchantProductVO_args() {
    }

    public getMerchantProductVO_args(
      String merchantId,
      String productCode)
    {
      this();
      this.merchantId = merchantId;
      this.productCode = productCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantProductVO_args(getMerchantProductVO_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetProductCode()) {
        this.productCode = other.productCode;
      }
    }

    public getMerchantProductVO_args deepCopy() {
      return new getMerchantProductVO_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
      this.productCode = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public getMerchantProductVO_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getProductCode() {
      return this.productCode;
    }

    public getMerchantProductVO_args setProductCode(String productCode) {
      this.productCode = productCode;
      return this;
    }

    public void unsetProductCode() {
      this.productCode = null;
    }

    /** Returns true if field productCode is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCode() {
      return this.productCode != null;
    }

    public void setProductCodeIsSet(boolean value) {
      if (!value) {
        this.productCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case PRODUCT_CODE:
        if (value == null) {
          unsetProductCode();
        } else {
          setProductCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      case PRODUCT_CODE:
        return getProductCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      case PRODUCT_CODE:
        return isSetProductCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantProductVO_args)
        return this.equals((getMerchantProductVO_args)that);
      return false;
    }

    public boolean equals(getMerchantProductVO_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_productCode = true && this.isSetProductCode();
      boolean that_present_productCode = true && that.isSetProductCode();
      if (this_present_productCode || that_present_productCode) {
        if (!(this_present_productCode && that_present_productCode))
          return false;
        if (!this.productCode.equals(that.productCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_productCode = true && (isSetProductCode());
      list.add(present_productCode);
      if (present_productCode)
        list.add(productCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantProductVO_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductCode()).compareTo(other.isSetProductCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCode, other.productCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantProductVO_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productCode:");
      if (this.productCode == null) {
        sb.append("null");
      } else {
        sb.append(this.productCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantProductVO_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantProductVO_argsStandardScheme getScheme() {
        return new getMerchantProductVO_argsStandardScheme();
      }
    }

    private static class getMerchantProductVO_argsStandardScheme extends StandardScheme<getMerchantProductVO_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantProductVO_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productCode = iprot.readString();
                struct.setProductCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantProductVO_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.productCode != null) {
          oprot.writeFieldBegin(PRODUCT_CODE_FIELD_DESC);
          oprot.writeString(struct.productCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantProductVO_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantProductVO_argsTupleScheme getScheme() {
        return new getMerchantProductVO_argsTupleScheme();
      }
    }

    private static class getMerchantProductVO_argsTupleScheme extends TupleScheme<getMerchantProductVO_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantProductVO_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        if (struct.isSetProductCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetProductCode()) {
          oprot.writeString(struct.productCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantProductVO_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productCode = iprot.readString();
          struct.setProductCodeIsSet(true);
        }
      }
    }

  }

  public static class getMerchantProductVO_result implements org.apache.thrift.TBase<getMerchantProductVO_result, getMerchantProductVO_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantProductVO_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantProductVO_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantProductVO_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantProductVO_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantProductVO_result.class, metaDataMap);
    }

    public getMerchantProductVO_result() {
    }

    public getMerchantProductVO_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantProductVO_result(getMerchantProductVO_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getMerchantProductVO_result deepCopy() {
      return new getMerchantProductVO_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getMerchantProductVO_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantProductVO_result)
        return this.equals((getMerchantProductVO_result)that);
      return false;
    }

    public boolean equals(getMerchantProductVO_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantProductVO_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantProductVO_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantProductVO_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantProductVO_resultStandardScheme getScheme() {
        return new getMerchantProductVO_resultStandardScheme();
      }
    }

    private static class getMerchantProductVO_resultStandardScheme extends StandardScheme<getMerchantProductVO_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantProductVO_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantProductVO_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantProductVO_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantProductVO_resultTupleScheme getScheme() {
        return new getMerchantProductVO_resultTupleScheme();
      }
    }

    private static class getMerchantProductVO_resultTupleScheme extends TupleScheme<getMerchantProductVO_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantProductVO_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantProductVO_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductList_args implements org.apache.thrift.TBase<getProductList_args, getProductList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductList_args");

    private static final org.apache.thrift.protocol.TField TRX_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("trxType", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductList_argsTupleSchemeFactory());
    }

    public String trxType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRX_TYPE((short)1, "trxType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRX_TYPE
            return TRX_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRX_TYPE, new org.apache.thrift.meta_data.FieldMetaData("trxType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductList_args.class, metaDataMap);
    }

    public getProductList_args() {
    }

    public getProductList_args(
      String trxType)
    {
      this();
      this.trxType = trxType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductList_args(getProductList_args other) {
      if (other.isSetTrxType()) {
        this.trxType = other.trxType;
      }
    }

    public getProductList_args deepCopy() {
      return new getProductList_args(this);
    }

    @Override
    public void clear() {
      this.trxType = null;
    }

    public String getTrxType() {
      return this.trxType;
    }

    public getProductList_args setTrxType(String trxType) {
      this.trxType = trxType;
      return this;
    }

    public void unsetTrxType() {
      this.trxType = null;
    }

    /** Returns true if field trxType is set (has been assigned a value) and false otherwise */
    public boolean isSetTrxType() {
      return this.trxType != null;
    }

    public void setTrxTypeIsSet(boolean value) {
      if (!value) {
        this.trxType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRX_TYPE:
        if (value == null) {
          unsetTrxType();
        } else {
          setTrxType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRX_TYPE:
        return getTrxType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRX_TYPE:
        return isSetTrxType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductList_args)
        return this.equals((getProductList_args)that);
      return false;
    }

    public boolean equals(getProductList_args that) {
      if (that == null)
        return false;

      boolean this_present_trxType = true && this.isSetTrxType();
      boolean that_present_trxType = true && that.isSetTrxType();
      if (this_present_trxType || that_present_trxType) {
        if (!(this_present_trxType && that_present_trxType))
          return false;
        if (!this.trxType.equals(that.trxType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_trxType = true && (isSetTrxType());
      list.add(present_trxType);
      if (present_trxType)
        list.add(trxType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTrxType()).compareTo(other.isSetTrxType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTrxType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trxType, other.trxType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductList_args(");
      boolean first = true;

      sb.append("trxType:");
      if (this.trxType == null) {
        sb.append("null");
      } else {
        sb.append(this.trxType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductList_argsStandardSchemeFactory implements SchemeFactory {
      public getProductList_argsStandardScheme getScheme() {
        return new getProductList_argsStandardScheme();
      }
    }

    private static class getProductList_argsStandardScheme extends StandardScheme<getProductList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRX_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.trxType = iprot.readString();
                struct.setTrxTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.trxType != null) {
          oprot.writeFieldBegin(TRX_TYPE_FIELD_DESC);
          oprot.writeString(struct.trxType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductList_argsTupleSchemeFactory implements SchemeFactory {
      public getProductList_argsTupleScheme getScheme() {
        return new getProductList_argsTupleScheme();
      }
    }

    private static class getProductList_argsTupleScheme extends TupleScheme<getProductList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTrxType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTrxType()) {
          oprot.writeString(struct.trxType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.trxType = iprot.readString();
          struct.setTrxTypeIsSet(true);
        }
      }
    }

  }

  public static class getProductList_result implements org.apache.thrift.TBase<getProductList_result, getProductList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductList_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductList_result.class, metaDataMap);
    }

    public getProductList_result() {
    }

    public getProductList_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductList_result(getProductList_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getProductList_result deepCopy() {
      return new getProductList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getProductList_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductList_result)
        return this.equals((getProductList_result)that);
      return false;
    }

    public boolean equals(getProductList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductList_resultStandardSchemeFactory implements SchemeFactory {
      public getProductList_resultStandardScheme getScheme() {
        return new getProductList_resultStandardScheme();
      }
    }

    private static class getProductList_resultStandardScheme extends StandardScheme<getProductList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductList_resultTupleSchemeFactory implements SchemeFactory {
      public getProductList_resultTupleScheme getScheme() {
        return new getProductList_resultTupleScheme();
      }
    }

    private static class getProductList_resultTupleScheme extends TupleScheme<getProductList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantFeeVO_args implements org.apache.thrift.TBase<getMerchantFeeVO_args, getMerchantFeeVO_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantFeeVO_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantFeeVO_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("productCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField BANK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNo", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantFeeVO_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantFeeVO_argsTupleSchemeFactory());
    }

    public String merchantId; // required
    public String productCode; // required
    public String bankCardType; // required
    public String bankNo; // required
    public String money; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId"),
      PRODUCT_CODE((short)2, "productCode"),
      BANK_CARD_TYPE((short)3, "bankCardType"),
      BANK_NO((short)4, "bankNo"),
      MONEY((short)5, "money");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          case 2: // PRODUCT_CODE
            return PRODUCT_CODE;
          case 3: // BANK_CARD_TYPE
            return BANK_CARD_TYPE;
          case 4: // BANK_NO
            return BANK_NO;
          case 5: // MONEY
            return MONEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("productCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_NO, new org.apache.thrift.meta_data.FieldMetaData("bankNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantFeeVO_args.class, metaDataMap);
    }

    public getMerchantFeeVO_args() {
    }

    public getMerchantFeeVO_args(
      String merchantId,
      String productCode,
      String bankCardType,
      String bankNo,
      String money)
    {
      this();
      this.merchantId = merchantId;
      this.productCode = productCode;
      this.bankCardType = bankCardType;
      this.bankNo = bankNo;
      this.money = money;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantFeeVO_args(getMerchantFeeVO_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetProductCode()) {
        this.productCode = other.productCode;
      }
      if (other.isSetBankCardType()) {
        this.bankCardType = other.bankCardType;
      }
      if (other.isSetBankNo()) {
        this.bankNo = other.bankNo;
      }
      if (other.isSetMoney()) {
        this.money = other.money;
      }
    }

    public getMerchantFeeVO_args deepCopy() {
      return new getMerchantFeeVO_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
      this.productCode = null;
      this.bankCardType = null;
      this.bankNo = null;
      this.money = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public getMerchantFeeVO_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getProductCode() {
      return this.productCode;
    }

    public getMerchantFeeVO_args setProductCode(String productCode) {
      this.productCode = productCode;
      return this;
    }

    public void unsetProductCode() {
      this.productCode = null;
    }

    /** Returns true if field productCode is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCode() {
      return this.productCode != null;
    }

    public void setProductCodeIsSet(boolean value) {
      if (!value) {
        this.productCode = null;
      }
    }

    public String getBankCardType() {
      return this.bankCardType;
    }

    public getMerchantFeeVO_args setBankCardType(String bankCardType) {
      this.bankCardType = bankCardType;
      return this;
    }

    public void unsetBankCardType() {
      this.bankCardType = null;
    }

    /** Returns true if field bankCardType is set (has been assigned a value) and false otherwise */
    public boolean isSetBankCardType() {
      return this.bankCardType != null;
    }

    public void setBankCardTypeIsSet(boolean value) {
      if (!value) {
        this.bankCardType = null;
      }
    }

    public String getBankNo() {
      return this.bankNo;
    }

    public getMerchantFeeVO_args setBankNo(String bankNo) {
      this.bankNo = bankNo;
      return this;
    }

    public void unsetBankNo() {
      this.bankNo = null;
    }

    /** Returns true if field bankNo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankNo() {
      return this.bankNo != null;
    }

    public void setBankNoIsSet(boolean value) {
      if (!value) {
        this.bankNo = null;
      }
    }

    public String getMoney() {
      return this.money;
    }

    public getMerchantFeeVO_args setMoney(String money) {
      this.money = money;
      return this;
    }

    public void unsetMoney() {
      this.money = null;
    }

    /** Returns true if field money is set (has been assigned a value) and false otherwise */
    public boolean isSetMoney() {
      return this.money != null;
    }

    public void setMoneyIsSet(boolean value) {
      if (!value) {
        this.money = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case PRODUCT_CODE:
        if (value == null) {
          unsetProductCode();
        } else {
          setProductCode((String)value);
        }
        break;

      case BANK_CARD_TYPE:
        if (value == null) {
          unsetBankCardType();
        } else {
          setBankCardType((String)value);
        }
        break;

      case BANK_NO:
        if (value == null) {
          unsetBankNo();
        } else {
          setBankNo((String)value);
        }
        break;

      case MONEY:
        if (value == null) {
          unsetMoney();
        } else {
          setMoney((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      case PRODUCT_CODE:
        return getProductCode();

      case BANK_CARD_TYPE:
        return getBankCardType();

      case BANK_NO:
        return getBankNo();

      case MONEY:
        return getMoney();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      case PRODUCT_CODE:
        return isSetProductCode();
      case BANK_CARD_TYPE:
        return isSetBankCardType();
      case BANK_NO:
        return isSetBankNo();
      case MONEY:
        return isSetMoney();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantFeeVO_args)
        return this.equals((getMerchantFeeVO_args)that);
      return false;
    }

    public boolean equals(getMerchantFeeVO_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_productCode = true && this.isSetProductCode();
      boolean that_present_productCode = true && that.isSetProductCode();
      if (this_present_productCode || that_present_productCode) {
        if (!(this_present_productCode && that_present_productCode))
          return false;
        if (!this.productCode.equals(that.productCode))
          return false;
      }

      boolean this_present_bankCardType = true && this.isSetBankCardType();
      boolean that_present_bankCardType = true && that.isSetBankCardType();
      if (this_present_bankCardType || that_present_bankCardType) {
        if (!(this_present_bankCardType && that_present_bankCardType))
          return false;
        if (!this.bankCardType.equals(that.bankCardType))
          return false;
      }

      boolean this_present_bankNo = true && this.isSetBankNo();
      boolean that_present_bankNo = true && that.isSetBankNo();
      if (this_present_bankNo || that_present_bankNo) {
        if (!(this_present_bankNo && that_present_bankNo))
          return false;
        if (!this.bankNo.equals(that.bankNo))
          return false;
      }

      boolean this_present_money = true && this.isSetMoney();
      boolean that_present_money = true && that.isSetMoney();
      if (this_present_money || that_present_money) {
        if (!(this_present_money && that_present_money))
          return false;
        if (!this.money.equals(that.money))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_productCode = true && (isSetProductCode());
      list.add(present_productCode);
      if (present_productCode)
        list.add(productCode);

      boolean present_bankCardType = true && (isSetBankCardType());
      list.add(present_bankCardType);
      if (present_bankCardType)
        list.add(bankCardType);

      boolean present_bankNo = true && (isSetBankNo());
      list.add(present_bankNo);
      if (present_bankNo)
        list.add(bankNo);

      boolean present_money = true && (isSetMoney());
      list.add(present_money);
      if (present_money)
        list.add(money);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantFeeVO_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductCode()).compareTo(other.isSetProductCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCode, other.productCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankCardType()).compareTo(other.isSetBankCardType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankCardType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardType, other.bankCardType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankNo()).compareTo(other.isSetBankNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNo, other.bankNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMoney()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantFeeVO_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productCode:");
      if (this.productCode == null) {
        sb.append("null");
      } else {
        sb.append(this.productCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankCardType:");
      if (this.bankCardType == null) {
        sb.append("null");
      } else {
        sb.append(this.bankCardType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankNo:");
      if (this.bankNo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("money:");
      if (this.money == null) {
        sb.append("null");
      } else {
        sb.append(this.money);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantFeeVO_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantFeeVO_argsStandardScheme getScheme() {
        return new getMerchantFeeVO_argsStandardScheme();
      }
    }

    private static class getMerchantFeeVO_argsStandardScheme extends StandardScheme<getMerchantFeeVO_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantFeeVO_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productCode = iprot.readString();
                struct.setProductCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BANK_CARD_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankCardType = iprot.readString();
                struct.setBankCardTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BANK_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankNo = iprot.readString();
                struct.setBankNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MONEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.money = iprot.readString();
                struct.setMoneyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantFeeVO_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.productCode != null) {
          oprot.writeFieldBegin(PRODUCT_CODE_FIELD_DESC);
          oprot.writeString(struct.productCode);
          oprot.writeFieldEnd();
        }
        if (struct.bankCardType != null) {
          oprot.writeFieldBegin(BANK_CARD_TYPE_FIELD_DESC);
          oprot.writeString(struct.bankCardType);
          oprot.writeFieldEnd();
        }
        if (struct.bankNo != null) {
          oprot.writeFieldBegin(BANK_NO_FIELD_DESC);
          oprot.writeString(struct.bankNo);
          oprot.writeFieldEnd();
        }
        if (struct.money != null) {
          oprot.writeFieldBegin(MONEY_FIELD_DESC);
          oprot.writeString(struct.money);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantFeeVO_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantFeeVO_argsTupleScheme getScheme() {
        return new getMerchantFeeVO_argsTupleScheme();
      }
    }

    private static class getMerchantFeeVO_argsTupleScheme extends TupleScheme<getMerchantFeeVO_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantFeeVO_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        if (struct.isSetProductCode()) {
          optionals.set(1);
        }
        if (struct.isSetBankCardType()) {
          optionals.set(2);
        }
        if (struct.isSetBankNo()) {
          optionals.set(3);
        }
        if (struct.isSetMoney()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetProductCode()) {
          oprot.writeString(struct.productCode);
        }
        if (struct.isSetBankCardType()) {
          oprot.writeString(struct.bankCardType);
        }
        if (struct.isSetBankNo()) {
          oprot.writeString(struct.bankNo);
        }
        if (struct.isSetMoney()) {
          oprot.writeString(struct.money);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantFeeVO_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productCode = iprot.readString();
          struct.setProductCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bankCardType = iprot.readString();
          struct.setBankCardTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.bankNo = iprot.readString();
          struct.setBankNoIsSet(true);
        }
        if (incoming.get(4)) {
          struct.money = iprot.readString();
          struct.setMoneyIsSet(true);
        }
      }
    }

  }

  public static class getMerchantFeeVO_result implements org.apache.thrift.TBase<getMerchantFeeVO_result, getMerchantFeeVO_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantFeeVO_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantFeeVO_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantFeeVO_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantFeeVO_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantFeeVO_result.class, metaDataMap);
    }

    public getMerchantFeeVO_result() {
    }

    public getMerchantFeeVO_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantFeeVO_result(getMerchantFeeVO_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getMerchantFeeVO_result deepCopy() {
      return new getMerchantFeeVO_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getMerchantFeeVO_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantFeeVO_result)
        return this.equals((getMerchantFeeVO_result)that);
      return false;
    }

    public boolean equals(getMerchantFeeVO_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantFeeVO_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantFeeVO_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantFeeVO_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantFeeVO_resultStandardScheme getScheme() {
        return new getMerchantFeeVO_resultStandardScheme();
      }
    }

    private static class getMerchantFeeVO_resultStandardScheme extends StandardScheme<getMerchantFeeVO_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantFeeVO_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantFeeVO_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantFeeVO_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantFeeVO_resultTupleScheme getScheme() {
        return new getMerchantFeeVO_resultTupleScheme();
      }
    }

    private static class getMerchantFeeVO_resultTupleScheme extends TupleScheme<getMerchantFeeVO_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantFeeVO_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantFeeVO_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantProduct_args implements org.apache.thrift.TBase<getMerchantProduct_args, getMerchantProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantProduct_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("productCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessType", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantProduct_argsTupleSchemeFactory());
    }

    public String merchantId; // required
    public String productCode; // required
    public String businessType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId"),
      PRODUCT_CODE((short)2, "productCode"),
      BUSINESS_TYPE((short)3, "businessType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          case 2: // PRODUCT_CODE
            return PRODUCT_CODE;
          case 3: // BUSINESS_TYPE
            return BUSINESS_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("productCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUSINESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("businessType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantProduct_args.class, metaDataMap);
    }

    public getMerchantProduct_args() {
    }

    public getMerchantProduct_args(
      String merchantId,
      String productCode,
      String businessType)
    {
      this();
      this.merchantId = merchantId;
      this.productCode = productCode;
      this.businessType = businessType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantProduct_args(getMerchantProduct_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetProductCode()) {
        this.productCode = other.productCode;
      }
      if (other.isSetBusinessType()) {
        this.businessType = other.businessType;
      }
    }

    public getMerchantProduct_args deepCopy() {
      return new getMerchantProduct_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
      this.productCode = null;
      this.businessType = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public getMerchantProduct_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getProductCode() {
      return this.productCode;
    }

    public getMerchantProduct_args setProductCode(String productCode) {
      this.productCode = productCode;
      return this;
    }

    public void unsetProductCode() {
      this.productCode = null;
    }

    /** Returns true if field productCode is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCode() {
      return this.productCode != null;
    }

    public void setProductCodeIsSet(boolean value) {
      if (!value) {
        this.productCode = null;
      }
    }

    public String getBusinessType() {
      return this.businessType;
    }

    public getMerchantProduct_args setBusinessType(String businessType) {
      this.businessType = businessType;
      return this;
    }

    public void unsetBusinessType() {
      this.businessType = null;
    }

    /** Returns true if field businessType is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessType() {
      return this.businessType != null;
    }

    public void setBusinessTypeIsSet(boolean value) {
      if (!value) {
        this.businessType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case PRODUCT_CODE:
        if (value == null) {
          unsetProductCode();
        } else {
          setProductCode((String)value);
        }
        break;

      case BUSINESS_TYPE:
        if (value == null) {
          unsetBusinessType();
        } else {
          setBusinessType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      case PRODUCT_CODE:
        return getProductCode();

      case BUSINESS_TYPE:
        return getBusinessType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      case PRODUCT_CODE:
        return isSetProductCode();
      case BUSINESS_TYPE:
        return isSetBusinessType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantProduct_args)
        return this.equals((getMerchantProduct_args)that);
      return false;
    }

    public boolean equals(getMerchantProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_productCode = true && this.isSetProductCode();
      boolean that_present_productCode = true && that.isSetProductCode();
      if (this_present_productCode || that_present_productCode) {
        if (!(this_present_productCode && that_present_productCode))
          return false;
        if (!this.productCode.equals(that.productCode))
          return false;
      }

      boolean this_present_businessType = true && this.isSetBusinessType();
      boolean that_present_businessType = true && that.isSetBusinessType();
      if (this_present_businessType || that_present_businessType) {
        if (!(this_present_businessType && that_present_businessType))
          return false;
        if (!this.businessType.equals(that.businessType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_productCode = true && (isSetProductCode());
      list.add(present_productCode);
      if (present_productCode)
        list.add(productCode);

      boolean present_businessType = true && (isSetBusinessType());
      list.add(present_businessType);
      if (present_businessType)
        list.add(businessType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductCode()).compareTo(other.isSetProductCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCode, other.productCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessType()).compareTo(other.isSetBusinessType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessType, other.businessType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantProduct_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productCode:");
      if (this.productCode == null) {
        sb.append("null");
      } else {
        sb.append(this.productCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessType:");
      if (this.businessType == null) {
        sb.append("null");
      } else {
        sb.append(this.businessType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantProduct_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantProduct_argsStandardScheme getScheme() {
        return new getMerchantProduct_argsStandardScheme();
      }
    }

    private static class getMerchantProduct_argsStandardScheme extends StandardScheme<getMerchantProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productCode = iprot.readString();
                struct.setProductCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BUSINESS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.businessType = iprot.readString();
                struct.setBusinessTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.productCode != null) {
          oprot.writeFieldBegin(PRODUCT_CODE_FIELD_DESC);
          oprot.writeString(struct.productCode);
          oprot.writeFieldEnd();
        }
        if (struct.businessType != null) {
          oprot.writeFieldBegin(BUSINESS_TYPE_FIELD_DESC);
          oprot.writeString(struct.businessType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantProduct_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantProduct_argsTupleScheme getScheme() {
        return new getMerchantProduct_argsTupleScheme();
      }
    }

    private static class getMerchantProduct_argsTupleScheme extends TupleScheme<getMerchantProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        if (struct.isSetProductCode()) {
          optionals.set(1);
        }
        if (struct.isSetBusinessType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetProductCode()) {
          oprot.writeString(struct.productCode);
        }
        if (struct.isSetBusinessType()) {
          oprot.writeString(struct.businessType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productCode = iprot.readString();
          struct.setProductCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.businessType = iprot.readString();
          struct.setBusinessTypeIsSet(true);
        }
      }
    }

  }

  public static class getMerchantProduct_result implements org.apache.thrift.TBase<getMerchantProduct_result, getMerchantProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantProduct_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantProduct_result.class, metaDataMap);
    }

    public getMerchantProduct_result() {
    }

    public getMerchantProduct_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantProduct_result(getMerchantProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getMerchantProduct_result deepCopy() {
      return new getMerchantProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getMerchantProduct_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantProduct_result)
        return this.equals((getMerchantProduct_result)that);
      return false;
    }

    public boolean equals(getMerchantProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantProduct_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantProduct_resultStandardScheme getScheme() {
        return new getMerchantProduct_resultStandardScheme();
      }
    }

    private static class getMerchantProduct_resultStandardScheme extends StandardScheme<getMerchantProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantProduct_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantProduct_resultTupleScheme getScheme() {
        return new getMerchantProduct_resultTupleScheme();
      }
    }

    private static class getMerchantProduct_resultTupleScheme extends TupleScheme<getMerchantProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantFee_args implements org.apache.thrift.TBase<getMerchantFee_args, getMerchantFee_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantFee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantFee_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("productCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField BANK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNo", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessType", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantFee_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantFee_argsTupleSchemeFactory());
    }

    public String merchantId; // required
    public String productCode; // required
    public String bankCardType; // required
    public String bankNo; // required
    public String money; // required
    public String businessType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId"),
      PRODUCT_CODE((short)2, "productCode"),
      BANK_CARD_TYPE((short)3, "bankCardType"),
      BANK_NO((short)4, "bankNo"),
      MONEY((short)5, "money"),
      BUSINESS_TYPE((short)6, "businessType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          case 2: // PRODUCT_CODE
            return PRODUCT_CODE;
          case 3: // BANK_CARD_TYPE
            return BANK_CARD_TYPE;
          case 4: // BANK_NO
            return BANK_NO;
          case 5: // MONEY
            return MONEY;
          case 6: // BUSINESS_TYPE
            return BUSINESS_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("productCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_NO, new org.apache.thrift.meta_data.FieldMetaData("bankNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUSINESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("businessType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantFee_args.class, metaDataMap);
    }

    public getMerchantFee_args() {
    }

    public getMerchantFee_args(
      String merchantId,
      String productCode,
      String bankCardType,
      String bankNo,
      String money,
      String businessType)
    {
      this();
      this.merchantId = merchantId;
      this.productCode = productCode;
      this.bankCardType = bankCardType;
      this.bankNo = bankNo;
      this.money = money;
      this.businessType = businessType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantFee_args(getMerchantFee_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetProductCode()) {
        this.productCode = other.productCode;
      }
      if (other.isSetBankCardType()) {
        this.bankCardType = other.bankCardType;
      }
      if (other.isSetBankNo()) {
        this.bankNo = other.bankNo;
      }
      if (other.isSetMoney()) {
        this.money = other.money;
      }
      if (other.isSetBusinessType()) {
        this.businessType = other.businessType;
      }
    }

    public getMerchantFee_args deepCopy() {
      return new getMerchantFee_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
      this.productCode = null;
      this.bankCardType = null;
      this.bankNo = null;
      this.money = null;
      this.businessType = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public getMerchantFee_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getProductCode() {
      return this.productCode;
    }

    public getMerchantFee_args setProductCode(String productCode) {
      this.productCode = productCode;
      return this;
    }

    public void unsetProductCode() {
      this.productCode = null;
    }

    /** Returns true if field productCode is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCode() {
      return this.productCode != null;
    }

    public void setProductCodeIsSet(boolean value) {
      if (!value) {
        this.productCode = null;
      }
    }

    public String getBankCardType() {
      return this.bankCardType;
    }

    public getMerchantFee_args setBankCardType(String bankCardType) {
      this.bankCardType = bankCardType;
      return this;
    }

    public void unsetBankCardType() {
      this.bankCardType = null;
    }

    /** Returns true if field bankCardType is set (has been assigned a value) and false otherwise */
    public boolean isSetBankCardType() {
      return this.bankCardType != null;
    }

    public void setBankCardTypeIsSet(boolean value) {
      if (!value) {
        this.bankCardType = null;
      }
    }

    public String getBankNo() {
      return this.bankNo;
    }

    public getMerchantFee_args setBankNo(String bankNo) {
      this.bankNo = bankNo;
      return this;
    }

    public void unsetBankNo() {
      this.bankNo = null;
    }

    /** Returns true if field bankNo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankNo() {
      return this.bankNo != null;
    }

    public void setBankNoIsSet(boolean value) {
      if (!value) {
        this.bankNo = null;
      }
    }

    public String getMoney() {
      return this.money;
    }

    public getMerchantFee_args setMoney(String money) {
      this.money = money;
      return this;
    }

    public void unsetMoney() {
      this.money = null;
    }

    /** Returns true if field money is set (has been assigned a value) and false otherwise */
    public boolean isSetMoney() {
      return this.money != null;
    }

    public void setMoneyIsSet(boolean value) {
      if (!value) {
        this.money = null;
      }
    }

    public String getBusinessType() {
      return this.businessType;
    }

    public getMerchantFee_args setBusinessType(String businessType) {
      this.businessType = businessType;
      return this;
    }

    public void unsetBusinessType() {
      this.businessType = null;
    }

    /** Returns true if field businessType is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessType() {
      return this.businessType != null;
    }

    public void setBusinessTypeIsSet(boolean value) {
      if (!value) {
        this.businessType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case PRODUCT_CODE:
        if (value == null) {
          unsetProductCode();
        } else {
          setProductCode((String)value);
        }
        break;

      case BANK_CARD_TYPE:
        if (value == null) {
          unsetBankCardType();
        } else {
          setBankCardType((String)value);
        }
        break;

      case BANK_NO:
        if (value == null) {
          unsetBankNo();
        } else {
          setBankNo((String)value);
        }
        break;

      case MONEY:
        if (value == null) {
          unsetMoney();
        } else {
          setMoney((String)value);
        }
        break;

      case BUSINESS_TYPE:
        if (value == null) {
          unsetBusinessType();
        } else {
          setBusinessType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      case PRODUCT_CODE:
        return getProductCode();

      case BANK_CARD_TYPE:
        return getBankCardType();

      case BANK_NO:
        return getBankNo();

      case MONEY:
        return getMoney();

      case BUSINESS_TYPE:
        return getBusinessType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      case PRODUCT_CODE:
        return isSetProductCode();
      case BANK_CARD_TYPE:
        return isSetBankCardType();
      case BANK_NO:
        return isSetBankNo();
      case MONEY:
        return isSetMoney();
      case BUSINESS_TYPE:
        return isSetBusinessType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantFee_args)
        return this.equals((getMerchantFee_args)that);
      return false;
    }

    public boolean equals(getMerchantFee_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_productCode = true && this.isSetProductCode();
      boolean that_present_productCode = true && that.isSetProductCode();
      if (this_present_productCode || that_present_productCode) {
        if (!(this_present_productCode && that_present_productCode))
          return false;
        if (!this.productCode.equals(that.productCode))
          return false;
      }

      boolean this_present_bankCardType = true && this.isSetBankCardType();
      boolean that_present_bankCardType = true && that.isSetBankCardType();
      if (this_present_bankCardType || that_present_bankCardType) {
        if (!(this_present_bankCardType && that_present_bankCardType))
          return false;
        if (!this.bankCardType.equals(that.bankCardType))
          return false;
      }

      boolean this_present_bankNo = true && this.isSetBankNo();
      boolean that_present_bankNo = true && that.isSetBankNo();
      if (this_present_bankNo || that_present_bankNo) {
        if (!(this_present_bankNo && that_present_bankNo))
          return false;
        if (!this.bankNo.equals(that.bankNo))
          return false;
      }

      boolean this_present_money = true && this.isSetMoney();
      boolean that_present_money = true && that.isSetMoney();
      if (this_present_money || that_present_money) {
        if (!(this_present_money && that_present_money))
          return false;
        if (!this.money.equals(that.money))
          return false;
      }

      boolean this_present_businessType = true && this.isSetBusinessType();
      boolean that_present_businessType = true && that.isSetBusinessType();
      if (this_present_businessType || that_present_businessType) {
        if (!(this_present_businessType && that_present_businessType))
          return false;
        if (!this.businessType.equals(that.businessType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_productCode = true && (isSetProductCode());
      list.add(present_productCode);
      if (present_productCode)
        list.add(productCode);

      boolean present_bankCardType = true && (isSetBankCardType());
      list.add(present_bankCardType);
      if (present_bankCardType)
        list.add(bankCardType);

      boolean present_bankNo = true && (isSetBankNo());
      list.add(present_bankNo);
      if (present_bankNo)
        list.add(bankNo);

      boolean present_money = true && (isSetMoney());
      list.add(present_money);
      if (present_money)
        list.add(money);

      boolean present_businessType = true && (isSetBusinessType());
      list.add(present_businessType);
      if (present_businessType)
        list.add(businessType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantFee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductCode()).compareTo(other.isSetProductCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCode, other.productCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankCardType()).compareTo(other.isSetBankCardType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankCardType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardType, other.bankCardType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankNo()).compareTo(other.isSetBankNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNo, other.bankNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMoney()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessType()).compareTo(other.isSetBusinessType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessType, other.businessType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantFee_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productCode:");
      if (this.productCode == null) {
        sb.append("null");
      } else {
        sb.append(this.productCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankCardType:");
      if (this.bankCardType == null) {
        sb.append("null");
      } else {
        sb.append(this.bankCardType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankNo:");
      if (this.bankNo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("money:");
      if (this.money == null) {
        sb.append("null");
      } else {
        sb.append(this.money);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessType:");
      if (this.businessType == null) {
        sb.append("null");
      } else {
        sb.append(this.businessType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantFee_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantFee_argsStandardScheme getScheme() {
        return new getMerchantFee_argsStandardScheme();
      }
    }

    private static class getMerchantFee_argsStandardScheme extends StandardScheme<getMerchantFee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantFee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productCode = iprot.readString();
                struct.setProductCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BANK_CARD_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankCardType = iprot.readString();
                struct.setBankCardTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BANK_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankNo = iprot.readString();
                struct.setBankNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MONEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.money = iprot.readString();
                struct.setMoneyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // BUSINESS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.businessType = iprot.readString();
                struct.setBusinessTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantFee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.productCode != null) {
          oprot.writeFieldBegin(PRODUCT_CODE_FIELD_DESC);
          oprot.writeString(struct.productCode);
          oprot.writeFieldEnd();
        }
        if (struct.bankCardType != null) {
          oprot.writeFieldBegin(BANK_CARD_TYPE_FIELD_DESC);
          oprot.writeString(struct.bankCardType);
          oprot.writeFieldEnd();
        }
        if (struct.bankNo != null) {
          oprot.writeFieldBegin(BANK_NO_FIELD_DESC);
          oprot.writeString(struct.bankNo);
          oprot.writeFieldEnd();
        }
        if (struct.money != null) {
          oprot.writeFieldBegin(MONEY_FIELD_DESC);
          oprot.writeString(struct.money);
          oprot.writeFieldEnd();
        }
        if (struct.businessType != null) {
          oprot.writeFieldBegin(BUSINESS_TYPE_FIELD_DESC);
          oprot.writeString(struct.businessType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantFee_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantFee_argsTupleScheme getScheme() {
        return new getMerchantFee_argsTupleScheme();
      }
    }

    private static class getMerchantFee_argsTupleScheme extends TupleScheme<getMerchantFee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        if (struct.isSetProductCode()) {
          optionals.set(1);
        }
        if (struct.isSetBankCardType()) {
          optionals.set(2);
        }
        if (struct.isSetBankNo()) {
          optionals.set(3);
        }
        if (struct.isSetMoney()) {
          optionals.set(4);
        }
        if (struct.isSetBusinessType()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetProductCode()) {
          oprot.writeString(struct.productCode);
        }
        if (struct.isSetBankCardType()) {
          oprot.writeString(struct.bankCardType);
        }
        if (struct.isSetBankNo()) {
          oprot.writeString(struct.bankNo);
        }
        if (struct.isSetMoney()) {
          oprot.writeString(struct.money);
        }
        if (struct.isSetBusinessType()) {
          oprot.writeString(struct.businessType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productCode = iprot.readString();
          struct.setProductCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bankCardType = iprot.readString();
          struct.setBankCardTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.bankNo = iprot.readString();
          struct.setBankNoIsSet(true);
        }
        if (incoming.get(4)) {
          struct.money = iprot.readString();
          struct.setMoneyIsSet(true);
        }
        if (incoming.get(5)) {
          struct.businessType = iprot.readString();
          struct.setBusinessTypeIsSet(true);
        }
      }
    }

  }

  public static class getMerchantFee_result implements org.apache.thrift.TBase<getMerchantFee_result, getMerchantFee_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantFee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantFee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantFee_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantFee_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantFee_result.class, metaDataMap);
    }

    public getMerchantFee_result() {
    }

    public getMerchantFee_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantFee_result(getMerchantFee_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getMerchantFee_result deepCopy() {
      return new getMerchantFee_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getMerchantFee_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantFee_result)
        return this.equals((getMerchantFee_result)that);
      return false;
    }

    public boolean equals(getMerchantFee_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantFee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantFee_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantFee_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantFee_resultStandardScheme getScheme() {
        return new getMerchantFee_resultStandardScheme();
      }
    }

    private static class getMerchantFee_resultStandardScheme extends StandardScheme<getMerchantFee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantFee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantFee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantFee_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantFee_resultTupleScheme getScheme() {
        return new getMerchantFee_resultTupleScheme();
      }
    }

    private static class getMerchantFee_resultTupleScheme extends TupleScheme<getMerchantFee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
