/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-05")
public class BankQuotaService {

  public interface Iface {

    public BankQuotaThrift getBankQuota(String bankCardType, String bankId) throws org.apache.thrift.TException;

    public List<BankQuotaThrift> getBankQuotaList(List<BankQuotaThrift> bankQuotaThrifts) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getBankQuota(String bankCardType, String bankId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBankQuotaList(List<BankQuotaThrift> bankQuotaThrifts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public BankQuotaThrift getBankQuota(String bankCardType, String bankId) throws org.apache.thrift.TException
    {
      send_getBankQuota(bankCardType, bankId);
      return recv_getBankQuota();
    }

    public void send_getBankQuota(String bankCardType, String bankId) throws org.apache.thrift.TException
    {
      getBankQuota_args args = new getBankQuota_args();
      args.setBankCardType(bankCardType);
      args.setBankId(bankId);
      sendBase("getBankQuota", args);
    }

    public BankQuotaThrift recv_getBankQuota() throws org.apache.thrift.TException
    {
      getBankQuota_result result = new getBankQuota_result();
      receiveBase(result, "getBankQuota");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBankQuota failed: unknown result");
    }

    public List<BankQuotaThrift> getBankQuotaList(List<BankQuotaThrift> bankQuotaThrifts) throws org.apache.thrift.TException
    {
      send_getBankQuotaList(bankQuotaThrifts);
      return recv_getBankQuotaList();
    }

    public void send_getBankQuotaList(List<BankQuotaThrift> bankQuotaThrifts) throws org.apache.thrift.TException
    {
      getBankQuotaList_args args = new getBankQuotaList_args();
      args.setBankQuotaThrifts(bankQuotaThrifts);
      sendBase("getBankQuotaList", args);
    }

    public List<BankQuotaThrift> recv_getBankQuotaList() throws org.apache.thrift.TException
    {
      getBankQuotaList_result result = new getBankQuotaList_result();
      receiveBase(result, "getBankQuotaList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBankQuotaList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getBankQuota(String bankCardType, String bankId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBankQuota_call method_call = new getBankQuota_call(bankCardType, bankId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBankQuota_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bankCardType;
      private String bankId;
      public getBankQuota_call(String bankCardType, String bankId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankCardType = bankCardType;
        this.bankId = bankId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBankQuota", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBankQuota_args args = new getBankQuota_args();
        args.setBankCardType(bankCardType);
        args.setBankId(bankId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BankQuotaThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBankQuota();
      }
    }

    public void getBankQuotaList(List<BankQuotaThrift> bankQuotaThrifts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBankQuotaList_call method_call = new getBankQuotaList_call(bankQuotaThrifts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBankQuotaList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<BankQuotaThrift> bankQuotaThrifts;
      public getBankQuotaList_call(List<BankQuotaThrift> bankQuotaThrifts, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankQuotaThrifts = bankQuotaThrifts;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBankQuotaList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBankQuotaList_args args = new getBankQuotaList_args();
        args.setBankQuotaThrifts(bankQuotaThrifts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BankQuotaThrift> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBankQuotaList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getBankQuota", new getBankQuota());
      processMap.put("getBankQuotaList", new getBankQuotaList());
      return processMap;
    }

    public static class getBankQuota<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBankQuota_args> {
      public getBankQuota() {
        super("getBankQuota");
      }

      public getBankQuota_args getEmptyArgsInstance() {
        return new getBankQuota_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBankQuota_result getResult(I iface, getBankQuota_args args) throws org.apache.thrift.TException {
        getBankQuota_result result = new getBankQuota_result();
        result.success = iface.getBankQuota(args.bankCardType, args.bankId);
        return result;
      }
    }

    public static class getBankQuotaList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBankQuotaList_args> {
      public getBankQuotaList() {
        super("getBankQuotaList");
      }

      public getBankQuotaList_args getEmptyArgsInstance() {
        return new getBankQuotaList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBankQuotaList_result getResult(I iface, getBankQuotaList_args args) throws org.apache.thrift.TException {
        getBankQuotaList_result result = new getBankQuotaList_result();
        result.success = iface.getBankQuotaList(args.bankQuotaThrifts);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getBankQuota", new getBankQuota());
      processMap.put("getBankQuotaList", new getBankQuotaList());
      return processMap;
    }

    public static class getBankQuota<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBankQuota_args, BankQuotaThrift> {
      public getBankQuota() {
        super("getBankQuota");
      }

      public getBankQuota_args getEmptyArgsInstance() {
        return new getBankQuota_args();
      }

      public AsyncMethodCallback<BankQuotaThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BankQuotaThrift>() { 
          public void onComplete(BankQuotaThrift o) {
            getBankQuota_result result = new getBankQuota_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBankQuota_result result = new getBankQuota_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBankQuota_args args, org.apache.thrift.async.AsyncMethodCallback<BankQuotaThrift> resultHandler) throws TException {
        iface.getBankQuota(args.bankCardType, args.bankId,resultHandler);
      }
    }

    public static class getBankQuotaList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBankQuotaList_args, List<BankQuotaThrift>> {
      public getBankQuotaList() {
        super("getBankQuotaList");
      }

      public getBankQuotaList_args getEmptyArgsInstance() {
        return new getBankQuotaList_args();
      }

      public AsyncMethodCallback<List<BankQuotaThrift>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BankQuotaThrift>>() { 
          public void onComplete(List<BankQuotaThrift> o) {
            getBankQuotaList_result result = new getBankQuotaList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBankQuotaList_result result = new getBankQuotaList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBankQuotaList_args args, org.apache.thrift.async.AsyncMethodCallback<List<BankQuotaThrift>> resultHandler) throws TException {
        iface.getBankQuotaList(args.bankQuotaThrifts,resultHandler);
      }
    }

  }

  public static class getBankQuota_args implements org.apache.thrift.TBase<getBankQuota_args, getBankQuota_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBankQuota_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankQuota_args");

    private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankQuota_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankQuota_argsTupleSchemeFactory());
    }

    public String bankCardType; // required
    public String bankId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_CARD_TYPE((short)1, "bankCardType"),
      BANK_ID((short)2, "bankId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_CARD_TYPE
            return BANK_CARD_TYPE;
          case 2: // BANK_ID
            return BANK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankQuota_args.class, metaDataMap);
    }

    public getBankQuota_args() {
    }

    public getBankQuota_args(
      String bankCardType,
      String bankId)
    {
      this();
      this.bankCardType = bankCardType;
      this.bankId = bankId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankQuota_args(getBankQuota_args other) {
      if (other.isSetBankCardType()) {
        this.bankCardType = other.bankCardType;
      }
      if (other.isSetBankId()) {
        this.bankId = other.bankId;
      }
    }

    public getBankQuota_args deepCopy() {
      return new getBankQuota_args(this);
    }

    @Override
    public void clear() {
      this.bankCardType = null;
      this.bankId = null;
    }

    public String getBankCardType() {
      return this.bankCardType;
    }

    public getBankQuota_args setBankCardType(String bankCardType) {
      this.bankCardType = bankCardType;
      return this;
    }

    public void unsetBankCardType() {
      this.bankCardType = null;
    }

    /** Returns true if field bankCardType is set (has been assigned a value) and false otherwise */
    public boolean isSetBankCardType() {
      return this.bankCardType != null;
    }

    public void setBankCardTypeIsSet(boolean value) {
      if (!value) {
        this.bankCardType = null;
      }
    }

    public String getBankId() {
      return this.bankId;
    }

    public getBankQuota_args setBankId(String bankId) {
      this.bankId = bankId;
      return this;
    }

    public void unsetBankId() {
      this.bankId = null;
    }

    /** Returns true if field bankId is set (has been assigned a value) and false otherwise */
    public boolean isSetBankId() {
      return this.bankId != null;
    }

    public void setBankIdIsSet(boolean value) {
      if (!value) {
        this.bankId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_CARD_TYPE:
        if (value == null) {
          unsetBankCardType();
        } else {
          setBankCardType((String)value);
        }
        break;

      case BANK_ID:
        if (value == null) {
          unsetBankId();
        } else {
          setBankId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_CARD_TYPE:
        return getBankCardType();

      case BANK_ID:
        return getBankId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_CARD_TYPE:
        return isSetBankCardType();
      case BANK_ID:
        return isSetBankId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankQuota_args)
        return this.equals((getBankQuota_args)that);
      return false;
    }

    public boolean equals(getBankQuota_args that) {
      if (that == null)
        return false;

      boolean this_present_bankCardType = true && this.isSetBankCardType();
      boolean that_present_bankCardType = true && that.isSetBankCardType();
      if (this_present_bankCardType || that_present_bankCardType) {
        if (!(this_present_bankCardType && that_present_bankCardType))
          return false;
        if (!this.bankCardType.equals(that.bankCardType))
          return false;
      }

      boolean this_present_bankId = true && this.isSetBankId();
      boolean that_present_bankId = true && that.isSetBankId();
      if (this_present_bankId || that_present_bankId) {
        if (!(this_present_bankId && that_present_bankId))
          return false;
        if (!this.bankId.equals(that.bankId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bankCardType = true && (isSetBankCardType());
      list.add(present_bankCardType);
      if (present_bankCardType)
        list.add(bankCardType);

      boolean present_bankId = true && (isSetBankId());
      list.add(present_bankId);
      if (present_bankId)
        list.add(bankId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankQuota_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankCardType()).compareTo(other.isSetBankCardType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankCardType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardType, other.bankCardType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankId()).compareTo(other.isSetBankId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankId, other.bankId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankQuota_args(");
      boolean first = true;

      sb.append("bankCardType:");
      if (this.bankCardType == null) {
        sb.append("null");
      } else {
        sb.append(this.bankCardType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankId:");
      if (this.bankId == null) {
        sb.append("null");
      } else {
        sb.append(this.bankId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankQuota_argsStandardSchemeFactory implements SchemeFactory {
      public getBankQuota_argsStandardScheme getScheme() {
        return new getBankQuota_argsStandardScheme();
      }
    }

    private static class getBankQuota_argsStandardScheme extends StandardScheme<getBankQuota_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankQuota_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_CARD_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankCardType = iprot.readString();
                struct.setBankCardTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BANK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankId = iprot.readString();
                struct.setBankIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankQuota_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankCardType != null) {
          oprot.writeFieldBegin(BANK_CARD_TYPE_FIELD_DESC);
          oprot.writeString(struct.bankCardType);
          oprot.writeFieldEnd();
        }
        if (struct.bankId != null) {
          oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
          oprot.writeString(struct.bankId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankQuota_argsTupleSchemeFactory implements SchemeFactory {
      public getBankQuota_argsTupleScheme getScheme() {
        return new getBankQuota_argsTupleScheme();
      }
    }

    private static class getBankQuota_argsTupleScheme extends TupleScheme<getBankQuota_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankCardType()) {
          optionals.set(0);
        }
        if (struct.isSetBankId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBankCardType()) {
          oprot.writeString(struct.bankCardType);
        }
        if (struct.isSetBankId()) {
          oprot.writeString(struct.bankId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bankCardType = iprot.readString();
          struct.setBankCardTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bankId = iprot.readString();
          struct.setBankIdIsSet(true);
        }
      }
    }

  }

  public static class getBankQuota_result implements org.apache.thrift.TBase<getBankQuota_result, getBankQuota_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBankQuota_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankQuota_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankQuota_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankQuota_resultTupleSchemeFactory());
    }

    public BankQuotaThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BankQuotaThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankQuota_result.class, metaDataMap);
    }

    public getBankQuota_result() {
    }

    public getBankQuota_result(
      BankQuotaThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankQuota_result(getBankQuota_result other) {
      if (other.isSetSuccess()) {
        this.success = new BankQuotaThrift(other.success);
      }
    }

    public getBankQuota_result deepCopy() {
      return new getBankQuota_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BankQuotaThrift getSuccess() {
      return this.success;
    }

    public getBankQuota_result setSuccess(BankQuotaThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BankQuotaThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankQuota_result)
        return this.equals((getBankQuota_result)that);
      return false;
    }

    public boolean equals(getBankQuota_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankQuota_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankQuota_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankQuota_resultStandardSchemeFactory implements SchemeFactory {
      public getBankQuota_resultStandardScheme getScheme() {
        return new getBankQuota_resultStandardScheme();
      }
    }

    private static class getBankQuota_resultStandardScheme extends StandardScheme<getBankQuota_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankQuota_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BankQuotaThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankQuota_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankQuota_resultTupleSchemeFactory implements SchemeFactory {
      public getBankQuota_resultTupleScheme getScheme() {
        return new getBankQuota_resultTupleScheme();
      }
    }

    private static class getBankQuota_resultTupleScheme extends TupleScheme<getBankQuota_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BankQuotaThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBankQuotaList_args implements org.apache.thrift.TBase<getBankQuotaList_args, getBankQuotaList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBankQuotaList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankQuotaList_args");

    private static final org.apache.thrift.protocol.TField BANK_QUOTA_THRIFTS_FIELD_DESC = new org.apache.thrift.protocol.TField("bankQuotaThrifts", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankQuotaList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankQuotaList_argsTupleSchemeFactory());
    }

    public List<BankQuotaThrift> bankQuotaThrifts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_QUOTA_THRIFTS((short)1, "bankQuotaThrifts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_QUOTA_THRIFTS
            return BANK_QUOTA_THRIFTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_QUOTA_THRIFTS, new org.apache.thrift.meta_data.FieldMetaData("bankQuotaThrifts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BankQuotaThrift.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankQuotaList_args.class, metaDataMap);
    }

    public getBankQuotaList_args() {
    }

    public getBankQuotaList_args(
      List<BankQuotaThrift> bankQuotaThrifts)
    {
      this();
      this.bankQuotaThrifts = bankQuotaThrifts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankQuotaList_args(getBankQuotaList_args other) {
      if (other.isSetBankQuotaThrifts()) {
        List<BankQuotaThrift> __this__bankQuotaThrifts = new ArrayList<BankQuotaThrift>(other.bankQuotaThrifts.size());
        for (BankQuotaThrift other_element : other.bankQuotaThrifts) {
          __this__bankQuotaThrifts.add(new BankQuotaThrift(other_element));
        }
        this.bankQuotaThrifts = __this__bankQuotaThrifts;
      }
    }

    public getBankQuotaList_args deepCopy() {
      return new getBankQuotaList_args(this);
    }

    @Override
    public void clear() {
      this.bankQuotaThrifts = null;
    }

    public int getBankQuotaThriftsSize() {
      return (this.bankQuotaThrifts == null) ? 0 : this.bankQuotaThrifts.size();
    }

    public java.util.Iterator<BankQuotaThrift> getBankQuotaThriftsIterator() {
      return (this.bankQuotaThrifts == null) ? null : this.bankQuotaThrifts.iterator();
    }

    public void addToBankQuotaThrifts(BankQuotaThrift elem) {
      if (this.bankQuotaThrifts == null) {
        this.bankQuotaThrifts = new ArrayList<BankQuotaThrift>();
      }
      this.bankQuotaThrifts.add(elem);
    }

    public List<BankQuotaThrift> getBankQuotaThrifts() {
      return this.bankQuotaThrifts;
    }

    public getBankQuotaList_args setBankQuotaThrifts(List<BankQuotaThrift> bankQuotaThrifts) {
      this.bankQuotaThrifts = bankQuotaThrifts;
      return this;
    }

    public void unsetBankQuotaThrifts() {
      this.bankQuotaThrifts = null;
    }

    /** Returns true if field bankQuotaThrifts is set (has been assigned a value) and false otherwise */
    public boolean isSetBankQuotaThrifts() {
      return this.bankQuotaThrifts != null;
    }

    public void setBankQuotaThriftsIsSet(boolean value) {
      if (!value) {
        this.bankQuotaThrifts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_QUOTA_THRIFTS:
        if (value == null) {
          unsetBankQuotaThrifts();
        } else {
          setBankQuotaThrifts((List<BankQuotaThrift>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_QUOTA_THRIFTS:
        return getBankQuotaThrifts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_QUOTA_THRIFTS:
        return isSetBankQuotaThrifts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankQuotaList_args)
        return this.equals((getBankQuotaList_args)that);
      return false;
    }

    public boolean equals(getBankQuotaList_args that) {
      if (that == null)
        return false;

      boolean this_present_bankQuotaThrifts = true && this.isSetBankQuotaThrifts();
      boolean that_present_bankQuotaThrifts = true && that.isSetBankQuotaThrifts();
      if (this_present_bankQuotaThrifts || that_present_bankQuotaThrifts) {
        if (!(this_present_bankQuotaThrifts && that_present_bankQuotaThrifts))
          return false;
        if (!this.bankQuotaThrifts.equals(that.bankQuotaThrifts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bankQuotaThrifts = true && (isSetBankQuotaThrifts());
      list.add(present_bankQuotaThrifts);
      if (present_bankQuotaThrifts)
        list.add(bankQuotaThrifts);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankQuotaList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankQuotaThrifts()).compareTo(other.isSetBankQuotaThrifts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankQuotaThrifts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankQuotaThrifts, other.bankQuotaThrifts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankQuotaList_args(");
      boolean first = true;

      sb.append("bankQuotaThrifts:");
      if (this.bankQuotaThrifts == null) {
        sb.append("null");
      } else {
        sb.append(this.bankQuotaThrifts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankQuotaList_argsStandardSchemeFactory implements SchemeFactory {
      public getBankQuotaList_argsStandardScheme getScheme() {
        return new getBankQuotaList_argsStandardScheme();
      }
    }

    private static class getBankQuotaList_argsStandardScheme extends StandardScheme<getBankQuotaList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankQuotaList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_QUOTA_THRIFTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.bankQuotaThrifts = new ArrayList<BankQuotaThrift>(_list0.size);
                  BankQuotaThrift _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new BankQuotaThrift();
                    _elem1.read(iprot);
                    struct.bankQuotaThrifts.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setBankQuotaThriftsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankQuotaList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankQuotaThrifts != null) {
          oprot.writeFieldBegin(BANK_QUOTA_THRIFTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bankQuotaThrifts.size()));
            for (BankQuotaThrift _iter3 : struct.bankQuotaThrifts)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankQuotaList_argsTupleSchemeFactory implements SchemeFactory {
      public getBankQuotaList_argsTupleScheme getScheme() {
        return new getBankQuotaList_argsTupleScheme();
      }
    }

    private static class getBankQuotaList_argsTupleScheme extends TupleScheme<getBankQuotaList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankQuotaList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankQuotaThrifts()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBankQuotaThrifts()) {
          {
            oprot.writeI32(struct.bankQuotaThrifts.size());
            for (BankQuotaThrift _iter4 : struct.bankQuotaThrifts)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankQuotaList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.bankQuotaThrifts = new ArrayList<BankQuotaThrift>(_list5.size);
            BankQuotaThrift _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new BankQuotaThrift();
              _elem6.read(iprot);
              struct.bankQuotaThrifts.add(_elem6);
            }
          }
          struct.setBankQuotaThriftsIsSet(true);
        }
      }
    }

  }

  public static class getBankQuotaList_result implements org.apache.thrift.TBase<getBankQuotaList_result, getBankQuotaList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBankQuotaList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBankQuotaList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBankQuotaList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBankQuotaList_resultTupleSchemeFactory());
    }

    public List<BankQuotaThrift> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BankQuotaThrift.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBankQuotaList_result.class, metaDataMap);
    }

    public getBankQuotaList_result() {
    }

    public getBankQuotaList_result(
      List<BankQuotaThrift> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBankQuotaList_result(getBankQuotaList_result other) {
      if (other.isSetSuccess()) {
        List<BankQuotaThrift> __this__success = new ArrayList<BankQuotaThrift>(other.success.size());
        for (BankQuotaThrift other_element : other.success) {
          __this__success.add(new BankQuotaThrift(other_element));
        }
        this.success = __this__success;
      }
    }

    public getBankQuotaList_result deepCopy() {
      return new getBankQuotaList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BankQuotaThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BankQuotaThrift elem) {
      if (this.success == null) {
        this.success = new ArrayList<BankQuotaThrift>();
      }
      this.success.add(elem);
    }

    public List<BankQuotaThrift> getSuccess() {
      return this.success;
    }

    public getBankQuotaList_result setSuccess(List<BankQuotaThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BankQuotaThrift>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBankQuotaList_result)
        return this.equals((getBankQuotaList_result)that);
      return false;
    }

    public boolean equals(getBankQuotaList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBankQuotaList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBankQuotaList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBankQuotaList_resultStandardSchemeFactory implements SchemeFactory {
      public getBankQuotaList_resultStandardScheme getScheme() {
        return new getBankQuotaList_resultStandardScheme();
      }
    }

    private static class getBankQuotaList_resultStandardScheme extends StandardScheme<getBankQuotaList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBankQuotaList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<BankQuotaThrift>(_list8.size);
                  BankQuotaThrift _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new BankQuotaThrift();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBankQuotaList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BankQuotaThrift _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBankQuotaList_resultTupleSchemeFactory implements SchemeFactory {
      public getBankQuotaList_resultTupleScheme getScheme() {
        return new getBankQuotaList_resultTupleScheme();
      }
    }

    private static class getBankQuotaList_resultTupleScheme extends TupleScheme<getBankQuotaList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBankQuotaList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BankQuotaThrift _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBankQuotaList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BankQuotaThrift>(_list13.size);
            BankQuotaThrift _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new BankQuotaThrift();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
