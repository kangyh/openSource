/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-03")
public class FileStorageService {

  public interface Iface {

    public Response WriteFile(String file_name, String schema, ByteBuffer write_buffer, long length) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void WriteFile(String file_name, String schema, ByteBuffer write_buffer, long length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Response WriteFile(String file_name, String schema, ByteBuffer write_buffer, long length) throws org.apache.thrift.TException
    {
      send_WriteFile(file_name, schema, write_buffer, length);
      return recv_WriteFile();
    }

    public void send_WriteFile(String file_name, String schema, ByteBuffer write_buffer, long length) throws org.apache.thrift.TException
    {
      WriteFile_args args = new WriteFile_args();
      args.setFile_name(file_name);
      args.setSchema(schema);
      args.setWrite_buffer(write_buffer);
      args.setLength(length);
      sendBase("WriteFile", args);
    }

    public Response recv_WriteFile() throws org.apache.thrift.TException
    {
      WriteFile_result result = new WriteFile_result();
      receiveBase(result, "WriteFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "WriteFile failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void WriteFile(String file_name, String schema, ByteBuffer write_buffer, long length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      WriteFile_call method_call = new WriteFile_call(file_name, schema, write_buffer, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class WriteFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String file_name;
      private String schema;
      private ByteBuffer write_buffer;
      private long length;
      public WriteFile_call(String file_name, String schema, ByteBuffer write_buffer, long length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.file_name = file_name;
        this.schema = schema;
        this.write_buffer = write_buffer;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("WriteFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        WriteFile_args args = new WriteFile_args();
        args.setFile_name(file_name);
        args.setSchema(schema);
        args.setWrite_buffer(write_buffer);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_WriteFile();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("WriteFile", new WriteFile());
      return processMap;
    }

    public static class WriteFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, WriteFile_args> {
      public WriteFile() {
        super("WriteFile");
      }

      public WriteFile_args getEmptyArgsInstance() {
        return new WriteFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public WriteFile_result getResult(I iface, WriteFile_args args) throws org.apache.thrift.TException {
        WriteFile_result result = new WriteFile_result();
        result.success = iface.WriteFile(args.file_name, args.schema, args.write_buffer, args.length);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("WriteFile", new WriteFile());
      return processMap;
    }

    public static class WriteFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, WriteFile_args, Response> {
      public WriteFile() {
        super("WriteFile");
      }

      public WriteFile_args getEmptyArgsInstance() {
        return new WriteFile_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            WriteFile_result result = new WriteFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            WriteFile_result result = new WriteFile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, WriteFile_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.WriteFile(args.file_name, args.schema, args.write_buffer, args.length,resultHandler);
      }
    }

  }

  public static class WriteFile_args implements org.apache.thrift.TBase<WriteFile_args, WriteFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<WriteFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WriteFile_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("file_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField WRITE_BUFFER_FIELD_DESC = new org.apache.thrift.protocol.TField("write_buffer", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new WriteFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new WriteFile_argsTupleSchemeFactory());
    }

    public String file_name; // required
    public String schema; // required
    public ByteBuffer write_buffer; // required
    public long length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_NAME((short)1, "file_name"),
      SCHEMA((short)2, "schema"),
      WRITE_BUFFER((short)3, "write_buffer"),
      LENGTH((short)4, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          case 2: // SCHEMA
            return SCHEMA;
          case 3: // WRITE_BUFFER
            return WRITE_BUFFER;
          case 4: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LENGTH_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("file_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WRITE_BUFFER, new org.apache.thrift.meta_data.FieldMetaData("write_buffer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WriteFile_args.class, metaDataMap);
    }

    public WriteFile_args() {
    }

    public WriteFile_args(
      String file_name,
      String schema,
      ByteBuffer write_buffer,
      long length)
    {
      this();
      this.file_name = file_name;
      this.schema = schema;
      this.write_buffer = org.apache.thrift.TBaseHelper.copyBinary(write_buffer);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public WriteFile_args(WriteFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFile_name()) {
        this.file_name = other.file_name;
      }
      if (other.isSetSchema()) {
        this.schema = other.schema;
      }
      if (other.isSetWrite_buffer()) {
        this.write_buffer = org.apache.thrift.TBaseHelper.copyBinary(other.write_buffer);
      }
      this.length = other.length;
    }

    public WriteFile_args deepCopy() {
      return new WriteFile_args(this);
    }

    @Override
    public void clear() {
      this.file_name = null;
      this.schema = null;
      this.write_buffer = null;
      setLengthIsSet(false);
      this.length = 0;
    }

    public String getFile_name() {
      return this.file_name;
    }

    public WriteFile_args setFile_name(String file_name) {
      this.file_name = file_name;
      return this;
    }

    public void unsetFile_name() {
      this.file_name = null;
    }

    /** Returns true if field file_name is set (has been assigned a value) and false otherwise */
    public boolean isSetFile_name() {
      return this.file_name != null;
    }

    public void setFile_nameIsSet(boolean value) {
      if (!value) {
        this.file_name = null;
      }
    }

    public String getSchema() {
      return this.schema;
    }

    public WriteFile_args setSchema(String schema) {
      this.schema = schema;
      return this;
    }

    public void unsetSchema() {
      this.schema = null;
    }

    /** Returns true if field schema is set (has been assigned a value) and false otherwise */
    public boolean isSetSchema() {
      return this.schema != null;
    }

    public void setSchemaIsSet(boolean value) {
      if (!value) {
        this.schema = null;
      }
    }

    public byte[] getWrite_buffer() {
      setWrite_buffer(org.apache.thrift.TBaseHelper.rightSize(write_buffer));
      return write_buffer == null ? null : write_buffer.array();
    }

    public ByteBuffer bufferForWrite_buffer() {
      return org.apache.thrift.TBaseHelper.copyBinary(write_buffer);
    }

    public WriteFile_args setWrite_buffer(byte[] write_buffer) {
      this.write_buffer = write_buffer == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(write_buffer, write_buffer.length));
      return this;
    }

    public WriteFile_args setWrite_buffer(ByteBuffer write_buffer) {
      this.write_buffer = org.apache.thrift.TBaseHelper.copyBinary(write_buffer);
      return this;
    }

    public void unsetWrite_buffer() {
      this.write_buffer = null;
    }

    /** Returns true if field write_buffer is set (has been assigned a value) and false otherwise */
    public boolean isSetWrite_buffer() {
      return this.write_buffer != null;
    }

    public void setWrite_bufferIsSet(boolean value) {
      if (!value) {
        this.write_buffer = null;
      }
    }

    public long getLength() {
      return this.length;
    }

    public WriteFile_args setLength(long length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_NAME:
        if (value == null) {
          unsetFile_name();
        } else {
          setFile_name((String)value);
        }
        break;

      case SCHEMA:
        if (value == null) {
          unsetSchema();
        } else {
          setSchema((String)value);
        }
        break;

      case WRITE_BUFFER:
        if (value == null) {
          unsetWrite_buffer();
        } else {
          setWrite_buffer((ByteBuffer)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_NAME:
        return getFile_name();

      case SCHEMA:
        return getSchema();

      case WRITE_BUFFER:
        return getWrite_buffer();

      case LENGTH:
        return getLength();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_NAME:
        return isSetFile_name();
      case SCHEMA:
        return isSetSchema();
      case WRITE_BUFFER:
        return isSetWrite_buffer();
      case LENGTH:
        return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof WriteFile_args)
        return this.equals((WriteFile_args)that);
      return false;
    }

    public boolean equals(WriteFile_args that) {
      if (that == null)
        return false;

      boolean this_present_file_name = true && this.isSetFile_name();
      boolean that_present_file_name = true && that.isSetFile_name();
      if (this_present_file_name || that_present_file_name) {
        if (!(this_present_file_name && that_present_file_name))
          return false;
        if (!this.file_name.equals(that.file_name))
          return false;
      }

      boolean this_present_schema = true && this.isSetSchema();
      boolean that_present_schema = true && that.isSetSchema();
      if (this_present_schema || that_present_schema) {
        if (!(this_present_schema && that_present_schema))
          return false;
        if (!this.schema.equals(that.schema))
          return false;
      }

      boolean this_present_write_buffer = true && this.isSetWrite_buffer();
      boolean that_present_write_buffer = true && that.isSetWrite_buffer();
      if (this_present_write_buffer || that_present_write_buffer) {
        if (!(this_present_write_buffer && that_present_write_buffer))
          return false;
        if (!this.write_buffer.equals(that.write_buffer))
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_file_name = true && (isSetFile_name());
      list.add(present_file_name);
      if (present_file_name)
        list.add(file_name);

      boolean present_schema = true && (isSetSchema());
      list.add(present_schema);
      if (present_schema)
        list.add(schema);

      boolean present_write_buffer = true && (isSetWrite_buffer());
      list.add(present_write_buffer);
      if (present_write_buffer)
        list.add(write_buffer);

      boolean present_length = true;
      list.add(present_length);
      if (present_length)
        list.add(length);

      return list.hashCode();
    }

    @Override
    public int compareTo(WriteFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFile_name()).compareTo(other.isSetFile_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_name, other.file_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSchema()).compareTo(other.isSetSchema());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchema()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, other.schema);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWrite_buffer()).compareTo(other.isSetWrite_buffer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWrite_buffer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.write_buffer, other.write_buffer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("WriteFile_args(");
      boolean first = true;

      sb.append("file_name:");
      if (this.file_name == null) {
        sb.append("null");
      } else {
        sb.append(this.file_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schema:");
      if (this.schema == null) {
        sb.append("null");
      } else {
        sb.append(this.schema);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("write_buffer:");
      if (this.write_buffer == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.write_buffer, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WriteFile_argsStandardSchemeFactory implements SchemeFactory {
      public WriteFile_argsStandardScheme getScheme() {
        return new WriteFile_argsStandardScheme();
      }
    }

    private static class WriteFile_argsStandardScheme extends StandardScheme<WriteFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, WriteFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.file_name = iprot.readString();
                struct.setFile_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCHEMA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schema = iprot.readString();
                struct.setSchemaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WRITE_BUFFER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.write_buffer = iprot.readBinary();
                struct.setWrite_bufferIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.length = iprot.readI64();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, WriteFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.file_name != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.file_name);
          oprot.writeFieldEnd();
        }
        if (struct.schema != null) {
          oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
          oprot.writeString(struct.schema);
          oprot.writeFieldEnd();
        }
        if (struct.write_buffer != null) {
          oprot.writeFieldBegin(WRITE_BUFFER_FIELD_DESC);
          oprot.writeBinary(struct.write_buffer);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI64(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class WriteFile_argsTupleSchemeFactory implements SchemeFactory {
      public WriteFile_argsTupleScheme getScheme() {
        return new WriteFile_argsTupleScheme();
      }
    }

    private static class WriteFile_argsTupleScheme extends TupleScheme<WriteFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WriteFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFile_name()) {
          optionals.set(0);
        }
        if (struct.isSetSchema()) {
          optionals.set(1);
        }
        if (struct.isSetWrite_buffer()) {
          optionals.set(2);
        }
        if (struct.isSetLength()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFile_name()) {
          oprot.writeString(struct.file_name);
        }
        if (struct.isSetSchema()) {
          oprot.writeString(struct.schema);
        }
        if (struct.isSetWrite_buffer()) {
          oprot.writeBinary(struct.write_buffer);
        }
        if (struct.isSetLength()) {
          oprot.writeI64(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WriteFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.file_name = iprot.readString();
          struct.setFile_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.schema = iprot.readString();
          struct.setSchemaIsSet(true);
        }
        if (incoming.get(2)) {
          struct.write_buffer = iprot.readBinary();
          struct.setWrite_bufferIsSet(true);
        }
        if (incoming.get(3)) {
          struct.length = iprot.readI64();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class WriteFile_result implements org.apache.thrift.TBase<WriteFile_result, WriteFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<WriteFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WriteFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new WriteFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new WriteFile_resultTupleSchemeFactory());
    }

    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WriteFile_result.class, metaDataMap);
    }

    public WriteFile_result() {
    }

    public WriteFile_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public WriteFile_result(WriteFile_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public WriteFile_result deepCopy() {
      return new WriteFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public WriteFile_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof WriteFile_result)
        return this.equals((WriteFile_result)that);
      return false;
    }

    public boolean equals(WriteFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(WriteFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("WriteFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WriteFile_resultStandardSchemeFactory implements SchemeFactory {
      public WriteFile_resultStandardScheme getScheme() {
        return new WriteFile_resultStandardScheme();
      }
    }

    private static class WriteFile_resultStandardScheme extends StandardScheme<WriteFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, WriteFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, WriteFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class WriteFile_resultTupleSchemeFactory implements SchemeFactory {
      public WriteFile_resultTupleScheme getScheme() {
        return new WriteFile_resultTupleScheme();
      }
    }

    private static class WriteFile_resultTupleScheme extends TupleScheme<WriteFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WriteFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WriteFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
