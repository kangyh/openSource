/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-09-12")
public class PayChannelCacheService {

  public interface Iface {

    public void queryMerchantChannel() throws org.apache.thrift.TException;

    public String queryMerchantChannelBy(String bankNo, String channelTypeCode, String cardTypeCode, String accountType, String businessType, String merchantId) throws org.apache.thrift.TException;

    public void queryPayChannel() throws org.apache.thrift.TException;

    public String queryBestChannel(String bankNo, String channelTypeCode, String cardTypeCode, String accountType, String businessType, String costType) throws org.apache.thrift.TException;

    public void queryChannelType() throws org.apache.thrift.TException;

    public String queryBankInfoByChannelType(String channelTypeCode) throws org.apache.thrift.TException;

    public String queryBankInfoByProductCode(String productCode) throws org.apache.thrift.TException;

    public void queryPayChannelAll() throws org.apache.thrift.TException;

    public String queryChannelByChannelCode(String channelCode) throws org.apache.thrift.TException;

    public List<PayChannelThrift> selectPayChannelAllList() throws org.apache.thrift.TException;

    public List<PayChannelThrift> selectPayChannelByType(String bankNo, String channelTypeCode, String bankCardType, String productCode) throws org.apache.thrift.TException;

    public List<PayChannelThrift> queryChannelTypeList() throws org.apache.thrift.TException;

    public CertifyThrift queryCertifyCost() throws org.apache.thrift.TException;

    public String queryCertifyChannelByChannelCode(String channelCode) throws org.apache.thrift.TException;

    public String getRouteByChannelCode(String channelCode) throws org.apache.thrift.TException;

    public List<PayChannelThrift> queryPayChannelByProductCode(String productCode) throws org.apache.thrift.TException;

    public void bankIdSync() throws org.apache.thrift.TException;

    public String queryBankId(String channelCode) throws org.apache.thrift.TException;

    public String selectPayChannelByMerchantId(String bankNo, String channelTypeCode, String bankCardType, String merchantId, String productCode) throws org.apache.thrift.TException;

    public String queryCertifyChannelByChannelType(String channelType) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryMerchantChannel(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryMerchantChannelBy(String bankNo, String channelTypeCode, String cardTypeCode, String accountType, String businessType, String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryPayChannel(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBestChannel(String bankNo, String channelTypeCode, String cardTypeCode, String accountType, String businessType, String costType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryChannelType(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBankInfoByChannelType(String channelTypeCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBankInfoByProductCode(String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryPayChannelAll(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryChannelByChannelCode(String channelCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void selectPayChannelAllList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void selectPayChannelByType(String bankNo, String channelTypeCode, String bankCardType, String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryChannelTypeList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCertifyCost(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCertifyChannelByChannelCode(String channelCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRouteByChannelCode(String channelCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryPayChannelByProductCode(String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bankIdSync(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBankId(String channelCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void selectPayChannelByMerchantId(String bankNo, String channelTypeCode, String bankCardType, String merchantId, String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCertifyChannelByChannelType(String channelType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void queryMerchantChannel() throws org.apache.thrift.TException
    {
      send_queryMerchantChannel();
      recv_queryMerchantChannel();
    }

    public void send_queryMerchantChannel() throws org.apache.thrift.TException
    {
      queryMerchantChannel_args args = new queryMerchantChannel_args();
      sendBase("queryMerchantChannel", args);
    }

    public void recv_queryMerchantChannel() throws org.apache.thrift.TException
    {
      queryMerchantChannel_result result = new queryMerchantChannel_result();
      receiveBase(result, "queryMerchantChannel");
      return;
    }

    public String queryMerchantChannelBy(String bankNo, String channelTypeCode, String cardTypeCode, String accountType, String businessType, String merchantId) throws org.apache.thrift.TException
    {
      send_queryMerchantChannelBy(bankNo, channelTypeCode, cardTypeCode, accountType, businessType, merchantId);
      return recv_queryMerchantChannelBy();
    }

    public void send_queryMerchantChannelBy(String bankNo, String channelTypeCode, String cardTypeCode, String accountType, String businessType, String merchantId) throws org.apache.thrift.TException
    {
      queryMerchantChannelBy_args args = new queryMerchantChannelBy_args();
      args.setBankNo(bankNo);
      args.setChannelTypeCode(channelTypeCode);
      args.setCardTypeCode(cardTypeCode);
      args.setAccountType(accountType);
      args.setBusinessType(businessType);
      args.setMerchantId(merchantId);
      sendBase("queryMerchantChannelBy", args);
    }

    public String recv_queryMerchantChannelBy() throws org.apache.thrift.TException
    {
      queryMerchantChannelBy_result result = new queryMerchantChannelBy_result();
      receiveBase(result, "queryMerchantChannelBy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryMerchantChannelBy failed: unknown result");
    }

    public void queryPayChannel() throws org.apache.thrift.TException
    {
      send_queryPayChannel();
      recv_queryPayChannel();
    }

    public void send_queryPayChannel() throws org.apache.thrift.TException
    {
      queryPayChannel_args args = new queryPayChannel_args();
      sendBase("queryPayChannel", args);
    }

    public void recv_queryPayChannel() throws org.apache.thrift.TException
    {
      queryPayChannel_result result = new queryPayChannel_result();
      receiveBase(result, "queryPayChannel");
      return;
    }

    public String queryBestChannel(String bankNo, String channelTypeCode, String cardTypeCode, String accountType, String businessType, String costType) throws org.apache.thrift.TException
    {
      send_queryBestChannel(bankNo, channelTypeCode, cardTypeCode, accountType, businessType, costType);
      return recv_queryBestChannel();
    }

    public void send_queryBestChannel(String bankNo, String channelTypeCode, String cardTypeCode, String accountType, String businessType, String costType) throws org.apache.thrift.TException
    {
      queryBestChannel_args args = new queryBestChannel_args();
      args.setBankNo(bankNo);
      args.setChannelTypeCode(channelTypeCode);
      args.setCardTypeCode(cardTypeCode);
      args.setAccountType(accountType);
      args.setBusinessType(businessType);
      args.setCostType(costType);
      sendBase("queryBestChannel", args);
    }

    public String recv_queryBestChannel() throws org.apache.thrift.TException
    {
      queryBestChannel_result result = new queryBestChannel_result();
      receiveBase(result, "queryBestChannel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBestChannel failed: unknown result");
    }

    public void queryChannelType() throws org.apache.thrift.TException
    {
      send_queryChannelType();
      recv_queryChannelType();
    }

    public void send_queryChannelType() throws org.apache.thrift.TException
    {
      queryChannelType_args args = new queryChannelType_args();
      sendBase("queryChannelType", args);
    }

    public void recv_queryChannelType() throws org.apache.thrift.TException
    {
      queryChannelType_result result = new queryChannelType_result();
      receiveBase(result, "queryChannelType");
      return;
    }

    public String queryBankInfoByChannelType(String channelTypeCode) throws org.apache.thrift.TException
    {
      send_queryBankInfoByChannelType(channelTypeCode);
      return recv_queryBankInfoByChannelType();
    }

    public void send_queryBankInfoByChannelType(String channelTypeCode) throws org.apache.thrift.TException
    {
      queryBankInfoByChannelType_args args = new queryBankInfoByChannelType_args();
      args.setChannelTypeCode(channelTypeCode);
      sendBase("queryBankInfoByChannelType", args);
    }

    public String recv_queryBankInfoByChannelType() throws org.apache.thrift.TException
    {
      queryBankInfoByChannelType_result result = new queryBankInfoByChannelType_result();
      receiveBase(result, "queryBankInfoByChannelType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBankInfoByChannelType failed: unknown result");
    }

    public String queryBankInfoByProductCode(String productCode) throws org.apache.thrift.TException
    {
      send_queryBankInfoByProductCode(productCode);
      return recv_queryBankInfoByProductCode();
    }

    public void send_queryBankInfoByProductCode(String productCode) throws org.apache.thrift.TException
    {
      queryBankInfoByProductCode_args args = new queryBankInfoByProductCode_args();
      args.setProductCode(productCode);
      sendBase("queryBankInfoByProductCode", args);
    }

    public String recv_queryBankInfoByProductCode() throws org.apache.thrift.TException
    {
      queryBankInfoByProductCode_result result = new queryBankInfoByProductCode_result();
      receiveBase(result, "queryBankInfoByProductCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBankInfoByProductCode failed: unknown result");
    }

    public void queryPayChannelAll() throws org.apache.thrift.TException
    {
      send_queryPayChannelAll();
      recv_queryPayChannelAll();
    }

    public void send_queryPayChannelAll() throws org.apache.thrift.TException
    {
      queryPayChannelAll_args args = new queryPayChannelAll_args();
      sendBase("queryPayChannelAll", args);
    }

    public void recv_queryPayChannelAll() throws org.apache.thrift.TException
    {
      queryPayChannelAll_result result = new queryPayChannelAll_result();
      receiveBase(result, "queryPayChannelAll");
      return;
    }

    public String queryChannelByChannelCode(String channelCode) throws org.apache.thrift.TException
    {
      send_queryChannelByChannelCode(channelCode);
      return recv_queryChannelByChannelCode();
    }

    public void send_queryChannelByChannelCode(String channelCode) throws org.apache.thrift.TException
    {
      queryChannelByChannelCode_args args = new queryChannelByChannelCode_args();
      args.setChannelCode(channelCode);
      sendBase("queryChannelByChannelCode", args);
    }

    public String recv_queryChannelByChannelCode() throws org.apache.thrift.TException
    {
      queryChannelByChannelCode_result result = new queryChannelByChannelCode_result();
      receiveBase(result, "queryChannelByChannelCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryChannelByChannelCode failed: unknown result");
    }

    public List<PayChannelThrift> selectPayChannelAllList() throws org.apache.thrift.TException
    {
      send_selectPayChannelAllList();
      return recv_selectPayChannelAllList();
    }

    public void send_selectPayChannelAllList() throws org.apache.thrift.TException
    {
      selectPayChannelAllList_args args = new selectPayChannelAllList_args();
      sendBase("selectPayChannelAllList", args);
    }

    public List<PayChannelThrift> recv_selectPayChannelAllList() throws org.apache.thrift.TException
    {
      selectPayChannelAllList_result result = new selectPayChannelAllList_result();
      receiveBase(result, "selectPayChannelAllList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectPayChannelAllList failed: unknown result");
    }

    public List<PayChannelThrift> selectPayChannelByType(String bankNo, String channelTypeCode, String bankCardType, String productCode) throws org.apache.thrift.TException
    {
      send_selectPayChannelByType(bankNo, channelTypeCode, bankCardType, productCode);
      return recv_selectPayChannelByType();
    }

    public void send_selectPayChannelByType(String bankNo, String channelTypeCode, String bankCardType, String productCode) throws org.apache.thrift.TException
    {
      selectPayChannelByType_args args = new selectPayChannelByType_args();
      args.setBankNo(bankNo);
      args.setChannelTypeCode(channelTypeCode);
      args.setBankCardType(bankCardType);
      args.setProductCode(productCode);
      sendBase("selectPayChannelByType", args);
    }

    public List<PayChannelThrift> recv_selectPayChannelByType() throws org.apache.thrift.TException
    {
      selectPayChannelByType_result result = new selectPayChannelByType_result();
      receiveBase(result, "selectPayChannelByType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectPayChannelByType failed: unknown result");
    }

    public List<PayChannelThrift> queryChannelTypeList() throws org.apache.thrift.TException
    {
      send_queryChannelTypeList();
      return recv_queryChannelTypeList();
    }

    public void send_queryChannelTypeList() throws org.apache.thrift.TException
    {
      queryChannelTypeList_args args = new queryChannelTypeList_args();
      sendBase("queryChannelTypeList", args);
    }

    public List<PayChannelThrift> recv_queryChannelTypeList() throws org.apache.thrift.TException
    {
      queryChannelTypeList_result result = new queryChannelTypeList_result();
      receiveBase(result, "queryChannelTypeList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryChannelTypeList failed: unknown result");
    }

    public CertifyThrift queryCertifyCost() throws org.apache.thrift.TException
    {
      send_queryCertifyCost();
      return recv_queryCertifyCost();
    }

    public void send_queryCertifyCost() throws org.apache.thrift.TException
    {
      queryCertifyCost_args args = new queryCertifyCost_args();
      sendBase("queryCertifyCost", args);
    }

    public CertifyThrift recv_queryCertifyCost() throws org.apache.thrift.TException
    {
      queryCertifyCost_result result = new queryCertifyCost_result();
      receiveBase(result, "queryCertifyCost");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCertifyCost failed: unknown result");
    }

    public String queryCertifyChannelByChannelCode(String channelCode) throws org.apache.thrift.TException
    {
      send_queryCertifyChannelByChannelCode(channelCode);
      return recv_queryCertifyChannelByChannelCode();
    }

    public void send_queryCertifyChannelByChannelCode(String channelCode) throws org.apache.thrift.TException
    {
      queryCertifyChannelByChannelCode_args args = new queryCertifyChannelByChannelCode_args();
      args.setChannelCode(channelCode);
      sendBase("queryCertifyChannelByChannelCode", args);
    }

    public String recv_queryCertifyChannelByChannelCode() throws org.apache.thrift.TException
    {
      queryCertifyChannelByChannelCode_result result = new queryCertifyChannelByChannelCode_result();
      receiveBase(result, "queryCertifyChannelByChannelCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCertifyChannelByChannelCode failed: unknown result");
    }

    public String getRouteByChannelCode(String channelCode) throws org.apache.thrift.TException
    {
      send_getRouteByChannelCode(channelCode);
      return recv_getRouteByChannelCode();
    }

    public void send_getRouteByChannelCode(String channelCode) throws org.apache.thrift.TException
    {
      getRouteByChannelCode_args args = new getRouteByChannelCode_args();
      args.setChannelCode(channelCode);
      sendBase("getRouteByChannelCode", args);
    }

    public String recv_getRouteByChannelCode() throws org.apache.thrift.TException
    {
      getRouteByChannelCode_result result = new getRouteByChannelCode_result();
      receiveBase(result, "getRouteByChannelCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRouteByChannelCode failed: unknown result");
    }

    public List<PayChannelThrift> queryPayChannelByProductCode(String productCode) throws org.apache.thrift.TException
    {
      send_queryPayChannelByProductCode(productCode);
      return recv_queryPayChannelByProductCode();
    }

    public void send_queryPayChannelByProductCode(String productCode) throws org.apache.thrift.TException
    {
      queryPayChannelByProductCode_args args = new queryPayChannelByProductCode_args();
      args.setProductCode(productCode);
      sendBase("queryPayChannelByProductCode", args);
    }

    public List<PayChannelThrift> recv_queryPayChannelByProductCode() throws org.apache.thrift.TException
    {
      queryPayChannelByProductCode_result result = new queryPayChannelByProductCode_result();
      receiveBase(result, "queryPayChannelByProductCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryPayChannelByProductCode failed: unknown result");
    }

    public void bankIdSync() throws org.apache.thrift.TException
    {
      send_bankIdSync();
      recv_bankIdSync();
    }

    public void send_bankIdSync() throws org.apache.thrift.TException
    {
      bankIdSync_args args = new bankIdSync_args();
      sendBase("bankIdSync", args);
    }

    public void recv_bankIdSync() throws org.apache.thrift.TException
    {
      bankIdSync_result result = new bankIdSync_result();
      receiveBase(result, "bankIdSync");
      return;
    }

    public String queryBankId(String channelCode) throws org.apache.thrift.TException
    {
      send_queryBankId(channelCode);
      return recv_queryBankId();
    }

    public void send_queryBankId(String channelCode) throws org.apache.thrift.TException
    {
      queryBankId_args args = new queryBankId_args();
      args.setChannelCode(channelCode);
      sendBase("queryBankId", args);
    }

    public String recv_queryBankId() throws org.apache.thrift.TException
    {
      queryBankId_result result = new queryBankId_result();
      receiveBase(result, "queryBankId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBankId failed: unknown result");
    }

    public String selectPayChannelByMerchantId(String bankNo, String channelTypeCode, String bankCardType, String merchantId, String productCode) throws org.apache.thrift.TException
    {
      send_selectPayChannelByMerchantId(bankNo, channelTypeCode, bankCardType, merchantId, productCode);
      return recv_selectPayChannelByMerchantId();
    }

    public void send_selectPayChannelByMerchantId(String bankNo, String channelTypeCode, String bankCardType, String merchantId, String productCode) throws org.apache.thrift.TException
    {
      selectPayChannelByMerchantId_args args = new selectPayChannelByMerchantId_args();
      args.setBankNo(bankNo);
      args.setChannelTypeCode(channelTypeCode);
      args.setBankCardType(bankCardType);
      args.setMerchantId(merchantId);
      args.setProductCode(productCode);
      sendBase("selectPayChannelByMerchantId", args);
    }

    public String recv_selectPayChannelByMerchantId() throws org.apache.thrift.TException
    {
      selectPayChannelByMerchantId_result result = new selectPayChannelByMerchantId_result();
      receiveBase(result, "selectPayChannelByMerchantId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectPayChannelByMerchantId failed: unknown result");
    }

    public String queryCertifyChannelByChannelType(String channelType) throws org.apache.thrift.TException
    {
      send_queryCertifyChannelByChannelType(channelType);
      return recv_queryCertifyChannelByChannelType();
    }

    public void send_queryCertifyChannelByChannelType(String channelType) throws org.apache.thrift.TException
    {
      queryCertifyChannelByChannelType_args args = new queryCertifyChannelByChannelType_args();
      args.setChannelType(channelType);
      sendBase("queryCertifyChannelByChannelType", args);
    }

    public String recv_queryCertifyChannelByChannelType() throws org.apache.thrift.TException
    {
      queryCertifyChannelByChannelType_result result = new queryCertifyChannelByChannelType_result();
      receiveBase(result, "queryCertifyChannelByChannelType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCertifyChannelByChannelType failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryMerchantChannel(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryMerchantChannel_call method_call = new queryMerchantChannel_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryMerchantChannel_call extends org.apache.thrift.async.TAsyncMethodCall {
      public queryMerchantChannel_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryMerchantChannel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryMerchantChannel_args args = new queryMerchantChannel_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_queryMerchantChannel();
      }
    }

    public void queryMerchantChannelBy(String bankNo, String channelTypeCode, String cardTypeCode, String accountType, String businessType, String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryMerchantChannelBy_call method_call = new queryMerchantChannelBy_call(bankNo, channelTypeCode, cardTypeCode, accountType, businessType, merchantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryMerchantChannelBy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bankNo;
      private String channelTypeCode;
      private String cardTypeCode;
      private String accountType;
      private String businessType;
      private String merchantId;
      public queryMerchantChannelBy_call(String bankNo, String channelTypeCode, String cardTypeCode, String accountType, String businessType, String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankNo = bankNo;
        this.channelTypeCode = channelTypeCode;
        this.cardTypeCode = cardTypeCode;
        this.accountType = accountType;
        this.businessType = businessType;
        this.merchantId = merchantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryMerchantChannelBy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryMerchantChannelBy_args args = new queryMerchantChannelBy_args();
        args.setBankNo(bankNo);
        args.setChannelTypeCode(channelTypeCode);
        args.setCardTypeCode(cardTypeCode);
        args.setAccountType(accountType);
        args.setBusinessType(businessType);
        args.setMerchantId(merchantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryMerchantChannelBy();
      }
    }

    public void queryPayChannel(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryPayChannel_call method_call = new queryPayChannel_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryPayChannel_call extends org.apache.thrift.async.TAsyncMethodCall {
      public queryPayChannel_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryPayChannel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryPayChannel_args args = new queryPayChannel_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_queryPayChannel();
      }
    }

    public void queryBestChannel(String bankNo, String channelTypeCode, String cardTypeCode, String accountType, String businessType, String costType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBestChannel_call method_call = new queryBestChannel_call(bankNo, channelTypeCode, cardTypeCode, accountType, businessType, costType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBestChannel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bankNo;
      private String channelTypeCode;
      private String cardTypeCode;
      private String accountType;
      private String businessType;
      private String costType;
      public queryBestChannel_call(String bankNo, String channelTypeCode, String cardTypeCode, String accountType, String businessType, String costType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankNo = bankNo;
        this.channelTypeCode = channelTypeCode;
        this.cardTypeCode = cardTypeCode;
        this.accountType = accountType;
        this.businessType = businessType;
        this.costType = costType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBestChannel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBestChannel_args args = new queryBestChannel_args();
        args.setBankNo(bankNo);
        args.setChannelTypeCode(channelTypeCode);
        args.setCardTypeCode(cardTypeCode);
        args.setAccountType(accountType);
        args.setBusinessType(businessType);
        args.setCostType(costType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBestChannel();
      }
    }

    public void queryChannelType(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryChannelType_call method_call = new queryChannelType_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryChannelType_call extends org.apache.thrift.async.TAsyncMethodCall {
      public queryChannelType_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryChannelType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryChannelType_args args = new queryChannelType_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_queryChannelType();
      }
    }

    public void queryBankInfoByChannelType(String channelTypeCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBankInfoByChannelType_call method_call = new queryBankInfoByChannelType_call(channelTypeCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBankInfoByChannelType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelTypeCode;
      public queryBankInfoByChannelType_call(String channelTypeCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelTypeCode = channelTypeCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBankInfoByChannelType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBankInfoByChannelType_args args = new queryBankInfoByChannelType_args();
        args.setChannelTypeCode(channelTypeCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBankInfoByChannelType();
      }
    }

    public void queryBankInfoByProductCode(String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBankInfoByProductCode_call method_call = new queryBankInfoByProductCode_call(productCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBankInfoByProductCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productCode;
      public queryBankInfoByProductCode_call(String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCode = productCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBankInfoByProductCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBankInfoByProductCode_args args = new queryBankInfoByProductCode_args();
        args.setProductCode(productCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBankInfoByProductCode();
      }
    }

    public void queryPayChannelAll(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryPayChannelAll_call method_call = new queryPayChannelAll_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryPayChannelAll_call extends org.apache.thrift.async.TAsyncMethodCall {
      public queryPayChannelAll_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryPayChannelAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryPayChannelAll_args args = new queryPayChannelAll_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_queryPayChannelAll();
      }
    }

    public void queryChannelByChannelCode(String channelCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryChannelByChannelCode_call method_call = new queryChannelByChannelCode_call(channelCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryChannelByChannelCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelCode;
      public queryChannelByChannelCode_call(String channelCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelCode = channelCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryChannelByChannelCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryChannelByChannelCode_args args = new queryChannelByChannelCode_args();
        args.setChannelCode(channelCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryChannelByChannelCode();
      }
    }

    public void selectPayChannelAllList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectPayChannelAllList_call method_call = new selectPayChannelAllList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectPayChannelAllList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public selectPayChannelAllList_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectPayChannelAllList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectPayChannelAllList_args args = new selectPayChannelAllList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PayChannelThrift> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectPayChannelAllList();
      }
    }

    public void selectPayChannelByType(String bankNo, String channelTypeCode, String bankCardType, String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectPayChannelByType_call method_call = new selectPayChannelByType_call(bankNo, channelTypeCode, bankCardType, productCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectPayChannelByType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bankNo;
      private String channelTypeCode;
      private String bankCardType;
      private String productCode;
      public selectPayChannelByType_call(String bankNo, String channelTypeCode, String bankCardType, String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankNo = bankNo;
        this.channelTypeCode = channelTypeCode;
        this.bankCardType = bankCardType;
        this.productCode = productCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectPayChannelByType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectPayChannelByType_args args = new selectPayChannelByType_args();
        args.setBankNo(bankNo);
        args.setChannelTypeCode(channelTypeCode);
        args.setBankCardType(bankCardType);
        args.setProductCode(productCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PayChannelThrift> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectPayChannelByType();
      }
    }

    public void queryChannelTypeList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryChannelTypeList_call method_call = new queryChannelTypeList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryChannelTypeList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public queryChannelTypeList_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryChannelTypeList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryChannelTypeList_args args = new queryChannelTypeList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PayChannelThrift> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryChannelTypeList();
      }
    }

    public void queryCertifyCost(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCertifyCost_call method_call = new queryCertifyCost_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCertifyCost_call extends org.apache.thrift.async.TAsyncMethodCall {
      public queryCertifyCost_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCertifyCost", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCertifyCost_args args = new queryCertifyCost_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CertifyThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCertifyCost();
      }
    }

    public void queryCertifyChannelByChannelCode(String channelCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCertifyChannelByChannelCode_call method_call = new queryCertifyChannelByChannelCode_call(channelCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCertifyChannelByChannelCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelCode;
      public queryCertifyChannelByChannelCode_call(String channelCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelCode = channelCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCertifyChannelByChannelCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCertifyChannelByChannelCode_args args = new queryCertifyChannelByChannelCode_args();
        args.setChannelCode(channelCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCertifyChannelByChannelCode();
      }
    }

    public void getRouteByChannelCode(String channelCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRouteByChannelCode_call method_call = new getRouteByChannelCode_call(channelCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRouteByChannelCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelCode;
      public getRouteByChannelCode_call(String channelCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelCode = channelCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRouteByChannelCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRouteByChannelCode_args args = new getRouteByChannelCode_args();
        args.setChannelCode(channelCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRouteByChannelCode();
      }
    }

    public void queryPayChannelByProductCode(String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryPayChannelByProductCode_call method_call = new queryPayChannelByProductCode_call(productCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryPayChannelByProductCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productCode;
      public queryPayChannelByProductCode_call(String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCode = productCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryPayChannelByProductCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryPayChannelByProductCode_args args = new queryPayChannelByProductCode_args();
        args.setProductCode(productCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PayChannelThrift> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryPayChannelByProductCode();
      }
    }

    public void bankIdSync(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bankIdSync_call method_call = new bankIdSync_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bankIdSync_call extends org.apache.thrift.async.TAsyncMethodCall {
      public bankIdSync_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bankIdSync", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bankIdSync_args args = new bankIdSync_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bankIdSync();
      }
    }

    public void queryBankId(String channelCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBankId_call method_call = new queryBankId_call(channelCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBankId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelCode;
      public queryBankId_call(String channelCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelCode = channelCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBankId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBankId_args args = new queryBankId_args();
        args.setChannelCode(channelCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBankId();
      }
    }

    public void selectPayChannelByMerchantId(String bankNo, String channelTypeCode, String bankCardType, String merchantId, String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectPayChannelByMerchantId_call method_call = new selectPayChannelByMerchantId_call(bankNo, channelTypeCode, bankCardType, merchantId, productCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectPayChannelByMerchantId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bankNo;
      private String channelTypeCode;
      private String bankCardType;
      private String merchantId;
      private String productCode;
      public selectPayChannelByMerchantId_call(String bankNo, String channelTypeCode, String bankCardType, String merchantId, String productCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankNo = bankNo;
        this.channelTypeCode = channelTypeCode;
        this.bankCardType = bankCardType;
        this.merchantId = merchantId;
        this.productCode = productCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectPayChannelByMerchantId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectPayChannelByMerchantId_args args = new selectPayChannelByMerchantId_args();
        args.setBankNo(bankNo);
        args.setChannelTypeCode(channelTypeCode);
        args.setBankCardType(bankCardType);
        args.setMerchantId(merchantId);
        args.setProductCode(productCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectPayChannelByMerchantId();
      }
    }

    public void queryCertifyChannelByChannelType(String channelType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCertifyChannelByChannelType_call method_call = new queryCertifyChannelByChannelType_call(channelType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCertifyChannelByChannelType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String channelType;
      public queryCertifyChannelByChannelType_call(String channelType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.channelType = channelType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCertifyChannelByChannelType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCertifyChannelByChannelType_args args = new queryCertifyChannelByChannelType_args();
        args.setChannelType(channelType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCertifyChannelByChannelType();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryMerchantChannel", new queryMerchantChannel());
      processMap.put("queryMerchantChannelBy", new queryMerchantChannelBy());
      processMap.put("queryPayChannel", new queryPayChannel());
      processMap.put("queryBestChannel", new queryBestChannel());
      processMap.put("queryChannelType", new queryChannelType());
      processMap.put("queryBankInfoByChannelType", new queryBankInfoByChannelType());
      processMap.put("queryBankInfoByProductCode", new queryBankInfoByProductCode());
      processMap.put("queryPayChannelAll", new queryPayChannelAll());
      processMap.put("queryChannelByChannelCode", new queryChannelByChannelCode());
      processMap.put("selectPayChannelAllList", new selectPayChannelAllList());
      processMap.put("selectPayChannelByType", new selectPayChannelByType());
      processMap.put("queryChannelTypeList", new queryChannelTypeList());
      processMap.put("queryCertifyCost", new queryCertifyCost());
      processMap.put("queryCertifyChannelByChannelCode", new queryCertifyChannelByChannelCode());
      processMap.put("getRouteByChannelCode", new getRouteByChannelCode());
      processMap.put("queryPayChannelByProductCode", new queryPayChannelByProductCode());
      processMap.put("bankIdSync", new bankIdSync());
      processMap.put("queryBankId", new queryBankId());
      processMap.put("selectPayChannelByMerchantId", new selectPayChannelByMerchantId());
      processMap.put("queryCertifyChannelByChannelType", new queryCertifyChannelByChannelType());
      return processMap;
    }

    public static class queryMerchantChannel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryMerchantChannel_args> {
      public queryMerchantChannel() {
        super("queryMerchantChannel");
      }

      public queryMerchantChannel_args getEmptyArgsInstance() {
        return new queryMerchantChannel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryMerchantChannel_result getResult(I iface, queryMerchantChannel_args args) throws org.apache.thrift.TException {
        queryMerchantChannel_result result = new queryMerchantChannel_result();
        iface.queryMerchantChannel();
        return result;
      }
    }

    public static class queryMerchantChannelBy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryMerchantChannelBy_args> {
      public queryMerchantChannelBy() {
        super("queryMerchantChannelBy");
      }

      public queryMerchantChannelBy_args getEmptyArgsInstance() {
        return new queryMerchantChannelBy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryMerchantChannelBy_result getResult(I iface, queryMerchantChannelBy_args args) throws org.apache.thrift.TException {
        queryMerchantChannelBy_result result = new queryMerchantChannelBy_result();
        result.success = iface.queryMerchantChannelBy(args.bankNo, args.channelTypeCode, args.cardTypeCode, args.accountType, args.businessType, args.merchantId);
        return result;
      }
    }

    public static class queryPayChannel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryPayChannel_args> {
      public queryPayChannel() {
        super("queryPayChannel");
      }

      public queryPayChannel_args getEmptyArgsInstance() {
        return new queryPayChannel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryPayChannel_result getResult(I iface, queryPayChannel_args args) throws org.apache.thrift.TException {
        queryPayChannel_result result = new queryPayChannel_result();
        iface.queryPayChannel();
        return result;
      }
    }

    public static class queryBestChannel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBestChannel_args> {
      public queryBestChannel() {
        super("queryBestChannel");
      }

      public queryBestChannel_args getEmptyArgsInstance() {
        return new queryBestChannel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBestChannel_result getResult(I iface, queryBestChannel_args args) throws org.apache.thrift.TException {
        queryBestChannel_result result = new queryBestChannel_result();
        result.success = iface.queryBestChannel(args.bankNo, args.channelTypeCode, args.cardTypeCode, args.accountType, args.businessType, args.costType);
        return result;
      }
    }

    public static class queryChannelType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryChannelType_args> {
      public queryChannelType() {
        super("queryChannelType");
      }

      public queryChannelType_args getEmptyArgsInstance() {
        return new queryChannelType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryChannelType_result getResult(I iface, queryChannelType_args args) throws org.apache.thrift.TException {
        queryChannelType_result result = new queryChannelType_result();
        iface.queryChannelType();
        return result;
      }
    }

    public static class queryBankInfoByChannelType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBankInfoByChannelType_args> {
      public queryBankInfoByChannelType() {
        super("queryBankInfoByChannelType");
      }

      public queryBankInfoByChannelType_args getEmptyArgsInstance() {
        return new queryBankInfoByChannelType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBankInfoByChannelType_result getResult(I iface, queryBankInfoByChannelType_args args) throws org.apache.thrift.TException {
        queryBankInfoByChannelType_result result = new queryBankInfoByChannelType_result();
        result.success = iface.queryBankInfoByChannelType(args.channelTypeCode);
        return result;
      }
    }

    public static class queryBankInfoByProductCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBankInfoByProductCode_args> {
      public queryBankInfoByProductCode() {
        super("queryBankInfoByProductCode");
      }

      public queryBankInfoByProductCode_args getEmptyArgsInstance() {
        return new queryBankInfoByProductCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBankInfoByProductCode_result getResult(I iface, queryBankInfoByProductCode_args args) throws org.apache.thrift.TException {
        queryBankInfoByProductCode_result result = new queryBankInfoByProductCode_result();
        result.success = iface.queryBankInfoByProductCode(args.productCode);
        return result;
      }
    }

    public static class queryPayChannelAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryPayChannelAll_args> {
      public queryPayChannelAll() {
        super("queryPayChannelAll");
      }

      public queryPayChannelAll_args getEmptyArgsInstance() {
        return new queryPayChannelAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryPayChannelAll_result getResult(I iface, queryPayChannelAll_args args) throws org.apache.thrift.TException {
        queryPayChannelAll_result result = new queryPayChannelAll_result();
        iface.queryPayChannelAll();
        return result;
      }
    }

    public static class queryChannelByChannelCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryChannelByChannelCode_args> {
      public queryChannelByChannelCode() {
        super("queryChannelByChannelCode");
      }

      public queryChannelByChannelCode_args getEmptyArgsInstance() {
        return new queryChannelByChannelCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryChannelByChannelCode_result getResult(I iface, queryChannelByChannelCode_args args) throws org.apache.thrift.TException {
        queryChannelByChannelCode_result result = new queryChannelByChannelCode_result();
        result.success = iface.queryChannelByChannelCode(args.channelCode);
        return result;
      }
    }

    public static class selectPayChannelAllList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectPayChannelAllList_args> {
      public selectPayChannelAllList() {
        super("selectPayChannelAllList");
      }

      public selectPayChannelAllList_args getEmptyArgsInstance() {
        return new selectPayChannelAllList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectPayChannelAllList_result getResult(I iface, selectPayChannelAllList_args args) throws org.apache.thrift.TException {
        selectPayChannelAllList_result result = new selectPayChannelAllList_result();
        result.success = iface.selectPayChannelAllList();
        return result;
      }
    }

    public static class selectPayChannelByType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectPayChannelByType_args> {
      public selectPayChannelByType() {
        super("selectPayChannelByType");
      }

      public selectPayChannelByType_args getEmptyArgsInstance() {
        return new selectPayChannelByType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectPayChannelByType_result getResult(I iface, selectPayChannelByType_args args) throws org.apache.thrift.TException {
        selectPayChannelByType_result result = new selectPayChannelByType_result();
        result.success = iface.selectPayChannelByType(args.bankNo, args.channelTypeCode, args.bankCardType, args.productCode);
        return result;
      }
    }

    public static class queryChannelTypeList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryChannelTypeList_args> {
      public queryChannelTypeList() {
        super("queryChannelTypeList");
      }

      public queryChannelTypeList_args getEmptyArgsInstance() {
        return new queryChannelTypeList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryChannelTypeList_result getResult(I iface, queryChannelTypeList_args args) throws org.apache.thrift.TException {
        queryChannelTypeList_result result = new queryChannelTypeList_result();
        result.success = iface.queryChannelTypeList();
        return result;
      }
    }

    public static class queryCertifyCost<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCertifyCost_args> {
      public queryCertifyCost() {
        super("queryCertifyCost");
      }

      public queryCertifyCost_args getEmptyArgsInstance() {
        return new queryCertifyCost_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCertifyCost_result getResult(I iface, queryCertifyCost_args args) throws org.apache.thrift.TException {
        queryCertifyCost_result result = new queryCertifyCost_result();
        result.success = iface.queryCertifyCost();
        return result;
      }
    }

    public static class queryCertifyChannelByChannelCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCertifyChannelByChannelCode_args> {
      public queryCertifyChannelByChannelCode() {
        super("queryCertifyChannelByChannelCode");
      }

      public queryCertifyChannelByChannelCode_args getEmptyArgsInstance() {
        return new queryCertifyChannelByChannelCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCertifyChannelByChannelCode_result getResult(I iface, queryCertifyChannelByChannelCode_args args) throws org.apache.thrift.TException {
        queryCertifyChannelByChannelCode_result result = new queryCertifyChannelByChannelCode_result();
        result.success = iface.queryCertifyChannelByChannelCode(args.channelCode);
        return result;
      }
    }

    public static class getRouteByChannelCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRouteByChannelCode_args> {
      public getRouteByChannelCode() {
        super("getRouteByChannelCode");
      }

      public getRouteByChannelCode_args getEmptyArgsInstance() {
        return new getRouteByChannelCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRouteByChannelCode_result getResult(I iface, getRouteByChannelCode_args args) throws org.apache.thrift.TException {
        getRouteByChannelCode_result result = new getRouteByChannelCode_result();
        result.success = iface.getRouteByChannelCode(args.channelCode);
        return result;
      }
    }

    public static class queryPayChannelByProductCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryPayChannelByProductCode_args> {
      public queryPayChannelByProductCode() {
        super("queryPayChannelByProductCode");
      }

      public queryPayChannelByProductCode_args getEmptyArgsInstance() {
        return new queryPayChannelByProductCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryPayChannelByProductCode_result getResult(I iface, queryPayChannelByProductCode_args args) throws org.apache.thrift.TException {
        queryPayChannelByProductCode_result result = new queryPayChannelByProductCode_result();
        result.success = iface.queryPayChannelByProductCode(args.productCode);
        return result;
      }
    }

    public static class bankIdSync<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bankIdSync_args> {
      public bankIdSync() {
        super("bankIdSync");
      }

      public bankIdSync_args getEmptyArgsInstance() {
        return new bankIdSync_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bankIdSync_result getResult(I iface, bankIdSync_args args) throws org.apache.thrift.TException {
        bankIdSync_result result = new bankIdSync_result();
        iface.bankIdSync();
        return result;
      }
    }

    public static class queryBankId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBankId_args> {
      public queryBankId() {
        super("queryBankId");
      }

      public queryBankId_args getEmptyArgsInstance() {
        return new queryBankId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBankId_result getResult(I iface, queryBankId_args args) throws org.apache.thrift.TException {
        queryBankId_result result = new queryBankId_result();
        result.success = iface.queryBankId(args.channelCode);
        return result;
      }
    }

    public static class selectPayChannelByMerchantId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectPayChannelByMerchantId_args> {
      public selectPayChannelByMerchantId() {
        super("selectPayChannelByMerchantId");
      }

      public selectPayChannelByMerchantId_args getEmptyArgsInstance() {
        return new selectPayChannelByMerchantId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectPayChannelByMerchantId_result getResult(I iface, selectPayChannelByMerchantId_args args) throws org.apache.thrift.TException {
        selectPayChannelByMerchantId_result result = new selectPayChannelByMerchantId_result();
        result.success = iface.selectPayChannelByMerchantId(args.bankNo, args.channelTypeCode, args.bankCardType, args.merchantId, args.productCode);
        return result;
      }
    }

    public static class queryCertifyChannelByChannelType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCertifyChannelByChannelType_args> {
      public queryCertifyChannelByChannelType() {
        super("queryCertifyChannelByChannelType");
      }

      public queryCertifyChannelByChannelType_args getEmptyArgsInstance() {
        return new queryCertifyChannelByChannelType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCertifyChannelByChannelType_result getResult(I iface, queryCertifyChannelByChannelType_args args) throws org.apache.thrift.TException {
        queryCertifyChannelByChannelType_result result = new queryCertifyChannelByChannelType_result();
        result.success = iface.queryCertifyChannelByChannelType(args.channelType);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryMerchantChannel", new queryMerchantChannel());
      processMap.put("queryMerchantChannelBy", new queryMerchantChannelBy());
      processMap.put("queryPayChannel", new queryPayChannel());
      processMap.put("queryBestChannel", new queryBestChannel());
      processMap.put("queryChannelType", new queryChannelType());
      processMap.put("queryBankInfoByChannelType", new queryBankInfoByChannelType());
      processMap.put("queryBankInfoByProductCode", new queryBankInfoByProductCode());
      processMap.put("queryPayChannelAll", new queryPayChannelAll());
      processMap.put("queryChannelByChannelCode", new queryChannelByChannelCode());
      processMap.put("selectPayChannelAllList", new selectPayChannelAllList());
      processMap.put("selectPayChannelByType", new selectPayChannelByType());
      processMap.put("queryChannelTypeList", new queryChannelTypeList());
      processMap.put("queryCertifyCost", new queryCertifyCost());
      processMap.put("queryCertifyChannelByChannelCode", new queryCertifyChannelByChannelCode());
      processMap.put("getRouteByChannelCode", new getRouteByChannelCode());
      processMap.put("queryPayChannelByProductCode", new queryPayChannelByProductCode());
      processMap.put("bankIdSync", new bankIdSync());
      processMap.put("queryBankId", new queryBankId());
      processMap.put("selectPayChannelByMerchantId", new selectPayChannelByMerchantId());
      processMap.put("queryCertifyChannelByChannelType", new queryCertifyChannelByChannelType());
      return processMap;
    }

    public static class queryMerchantChannel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryMerchantChannel_args, Void> {
      public queryMerchantChannel() {
        super("queryMerchantChannel");
      }

      public queryMerchantChannel_args getEmptyArgsInstance() {
        return new queryMerchantChannel_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            queryMerchantChannel_result result = new queryMerchantChannel_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryMerchantChannel_result result = new queryMerchantChannel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryMerchantChannel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.queryMerchantChannel(resultHandler);
      }
    }

    public static class queryMerchantChannelBy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryMerchantChannelBy_args, String> {
      public queryMerchantChannelBy() {
        super("queryMerchantChannelBy");
      }

      public queryMerchantChannelBy_args getEmptyArgsInstance() {
        return new queryMerchantChannelBy_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryMerchantChannelBy_result result = new queryMerchantChannelBy_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryMerchantChannelBy_result result = new queryMerchantChannelBy_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryMerchantChannelBy_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryMerchantChannelBy(args.bankNo, args.channelTypeCode, args.cardTypeCode, args.accountType, args.businessType, args.merchantId,resultHandler);
      }
    }

    public static class queryPayChannel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryPayChannel_args, Void> {
      public queryPayChannel() {
        super("queryPayChannel");
      }

      public queryPayChannel_args getEmptyArgsInstance() {
        return new queryPayChannel_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            queryPayChannel_result result = new queryPayChannel_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryPayChannel_result result = new queryPayChannel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryPayChannel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.queryPayChannel(resultHandler);
      }
    }

    public static class queryBestChannel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBestChannel_args, String> {
      public queryBestChannel() {
        super("queryBestChannel");
      }

      public queryBestChannel_args getEmptyArgsInstance() {
        return new queryBestChannel_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryBestChannel_result result = new queryBestChannel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBestChannel_result result = new queryBestChannel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBestChannel_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryBestChannel(args.bankNo, args.channelTypeCode, args.cardTypeCode, args.accountType, args.businessType, args.costType,resultHandler);
      }
    }

    public static class queryChannelType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryChannelType_args, Void> {
      public queryChannelType() {
        super("queryChannelType");
      }

      public queryChannelType_args getEmptyArgsInstance() {
        return new queryChannelType_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            queryChannelType_result result = new queryChannelType_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryChannelType_result result = new queryChannelType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryChannelType_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.queryChannelType(resultHandler);
      }
    }

    public static class queryBankInfoByChannelType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBankInfoByChannelType_args, String> {
      public queryBankInfoByChannelType() {
        super("queryBankInfoByChannelType");
      }

      public queryBankInfoByChannelType_args getEmptyArgsInstance() {
        return new queryBankInfoByChannelType_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryBankInfoByChannelType_result result = new queryBankInfoByChannelType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBankInfoByChannelType_result result = new queryBankInfoByChannelType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBankInfoByChannelType_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryBankInfoByChannelType(args.channelTypeCode,resultHandler);
      }
    }

    public static class queryBankInfoByProductCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBankInfoByProductCode_args, String> {
      public queryBankInfoByProductCode() {
        super("queryBankInfoByProductCode");
      }

      public queryBankInfoByProductCode_args getEmptyArgsInstance() {
        return new queryBankInfoByProductCode_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryBankInfoByProductCode_result result = new queryBankInfoByProductCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBankInfoByProductCode_result result = new queryBankInfoByProductCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBankInfoByProductCode_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryBankInfoByProductCode(args.productCode,resultHandler);
      }
    }

    public static class queryPayChannelAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryPayChannelAll_args, Void> {
      public queryPayChannelAll() {
        super("queryPayChannelAll");
      }

      public queryPayChannelAll_args getEmptyArgsInstance() {
        return new queryPayChannelAll_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            queryPayChannelAll_result result = new queryPayChannelAll_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryPayChannelAll_result result = new queryPayChannelAll_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryPayChannelAll_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.queryPayChannelAll(resultHandler);
      }
    }

    public static class queryChannelByChannelCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryChannelByChannelCode_args, String> {
      public queryChannelByChannelCode() {
        super("queryChannelByChannelCode");
      }

      public queryChannelByChannelCode_args getEmptyArgsInstance() {
        return new queryChannelByChannelCode_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryChannelByChannelCode_result result = new queryChannelByChannelCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryChannelByChannelCode_result result = new queryChannelByChannelCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryChannelByChannelCode_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryChannelByChannelCode(args.channelCode,resultHandler);
      }
    }

    public static class selectPayChannelAllList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectPayChannelAllList_args, List<PayChannelThrift>> {
      public selectPayChannelAllList() {
        super("selectPayChannelAllList");
      }

      public selectPayChannelAllList_args getEmptyArgsInstance() {
        return new selectPayChannelAllList_args();
      }

      public AsyncMethodCallback<List<PayChannelThrift>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<PayChannelThrift>>() { 
          public void onComplete(List<PayChannelThrift> o) {
            selectPayChannelAllList_result result = new selectPayChannelAllList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectPayChannelAllList_result result = new selectPayChannelAllList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectPayChannelAllList_args args, org.apache.thrift.async.AsyncMethodCallback<List<PayChannelThrift>> resultHandler) throws TException {
        iface.selectPayChannelAllList(resultHandler);
      }
    }

    public static class selectPayChannelByType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectPayChannelByType_args, List<PayChannelThrift>> {
      public selectPayChannelByType() {
        super("selectPayChannelByType");
      }

      public selectPayChannelByType_args getEmptyArgsInstance() {
        return new selectPayChannelByType_args();
      }

      public AsyncMethodCallback<List<PayChannelThrift>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<PayChannelThrift>>() { 
          public void onComplete(List<PayChannelThrift> o) {
            selectPayChannelByType_result result = new selectPayChannelByType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectPayChannelByType_result result = new selectPayChannelByType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectPayChannelByType_args args, org.apache.thrift.async.AsyncMethodCallback<List<PayChannelThrift>> resultHandler) throws TException {
        iface.selectPayChannelByType(args.bankNo, args.channelTypeCode, args.bankCardType, args.productCode,resultHandler);
      }
    }

    public static class queryChannelTypeList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryChannelTypeList_args, List<PayChannelThrift>> {
      public queryChannelTypeList() {
        super("queryChannelTypeList");
      }

      public queryChannelTypeList_args getEmptyArgsInstance() {
        return new queryChannelTypeList_args();
      }

      public AsyncMethodCallback<List<PayChannelThrift>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<PayChannelThrift>>() { 
          public void onComplete(List<PayChannelThrift> o) {
            queryChannelTypeList_result result = new queryChannelTypeList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryChannelTypeList_result result = new queryChannelTypeList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryChannelTypeList_args args, org.apache.thrift.async.AsyncMethodCallback<List<PayChannelThrift>> resultHandler) throws TException {
        iface.queryChannelTypeList(resultHandler);
      }
    }

    public static class queryCertifyCost<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCertifyCost_args, CertifyThrift> {
      public queryCertifyCost() {
        super("queryCertifyCost");
      }

      public queryCertifyCost_args getEmptyArgsInstance() {
        return new queryCertifyCost_args();
      }

      public AsyncMethodCallback<CertifyThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CertifyThrift>() { 
          public void onComplete(CertifyThrift o) {
            queryCertifyCost_result result = new queryCertifyCost_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCertifyCost_result result = new queryCertifyCost_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCertifyCost_args args, org.apache.thrift.async.AsyncMethodCallback<CertifyThrift> resultHandler) throws TException {
        iface.queryCertifyCost(resultHandler);
      }
    }

    public static class queryCertifyChannelByChannelCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCertifyChannelByChannelCode_args, String> {
      public queryCertifyChannelByChannelCode() {
        super("queryCertifyChannelByChannelCode");
      }

      public queryCertifyChannelByChannelCode_args getEmptyArgsInstance() {
        return new queryCertifyChannelByChannelCode_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryCertifyChannelByChannelCode_result result = new queryCertifyChannelByChannelCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCertifyChannelByChannelCode_result result = new queryCertifyChannelByChannelCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCertifyChannelByChannelCode_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryCertifyChannelByChannelCode(args.channelCode,resultHandler);
      }
    }

    public static class getRouteByChannelCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRouteByChannelCode_args, String> {
      public getRouteByChannelCode() {
        super("getRouteByChannelCode");
      }

      public getRouteByChannelCode_args getEmptyArgsInstance() {
        return new getRouteByChannelCode_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getRouteByChannelCode_result result = new getRouteByChannelCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRouteByChannelCode_result result = new getRouteByChannelCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRouteByChannelCode_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getRouteByChannelCode(args.channelCode,resultHandler);
      }
    }

    public static class queryPayChannelByProductCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryPayChannelByProductCode_args, List<PayChannelThrift>> {
      public queryPayChannelByProductCode() {
        super("queryPayChannelByProductCode");
      }

      public queryPayChannelByProductCode_args getEmptyArgsInstance() {
        return new queryPayChannelByProductCode_args();
      }

      public AsyncMethodCallback<List<PayChannelThrift>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<PayChannelThrift>>() { 
          public void onComplete(List<PayChannelThrift> o) {
            queryPayChannelByProductCode_result result = new queryPayChannelByProductCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryPayChannelByProductCode_result result = new queryPayChannelByProductCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryPayChannelByProductCode_args args, org.apache.thrift.async.AsyncMethodCallback<List<PayChannelThrift>> resultHandler) throws TException {
        iface.queryPayChannelByProductCode(args.productCode,resultHandler);
      }
    }

    public static class bankIdSync<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bankIdSync_args, Void> {
      public bankIdSync() {
        super("bankIdSync");
      }

      public bankIdSync_args getEmptyArgsInstance() {
        return new bankIdSync_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bankIdSync_result result = new bankIdSync_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bankIdSync_result result = new bankIdSync_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bankIdSync_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bankIdSync(resultHandler);
      }
    }

    public static class queryBankId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBankId_args, String> {
      public queryBankId() {
        super("queryBankId");
      }

      public queryBankId_args getEmptyArgsInstance() {
        return new queryBankId_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryBankId_result result = new queryBankId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBankId_result result = new queryBankId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBankId_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryBankId(args.channelCode,resultHandler);
      }
    }

    public static class selectPayChannelByMerchantId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectPayChannelByMerchantId_args, String> {
      public selectPayChannelByMerchantId() {
        super("selectPayChannelByMerchantId");
      }

      public selectPayChannelByMerchantId_args getEmptyArgsInstance() {
        return new selectPayChannelByMerchantId_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            selectPayChannelByMerchantId_result result = new selectPayChannelByMerchantId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectPayChannelByMerchantId_result result = new selectPayChannelByMerchantId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectPayChannelByMerchantId_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.selectPayChannelByMerchantId(args.bankNo, args.channelTypeCode, args.bankCardType, args.merchantId, args.productCode,resultHandler);
      }
    }

    public static class queryCertifyChannelByChannelType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCertifyChannelByChannelType_args, String> {
      public queryCertifyChannelByChannelType() {
        super("queryCertifyChannelByChannelType");
      }

      public queryCertifyChannelByChannelType_args getEmptyArgsInstance() {
        return new queryCertifyChannelByChannelType_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryCertifyChannelByChannelType_result result = new queryCertifyChannelByChannelType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCertifyChannelByChannelType_result result = new queryCertifyChannelByChannelType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCertifyChannelByChannelType_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryCertifyChannelByChannelType(args.channelType,resultHandler);
      }
    }

  }

  public static class queryMerchantChannel_args implements org.apache.thrift.TBase<queryMerchantChannel_args, queryMerchantChannel_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryMerchantChannel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMerchantChannel_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMerchantChannel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMerchantChannel_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMerchantChannel_args.class, metaDataMap);
    }

    public queryMerchantChannel_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMerchantChannel_args(queryMerchantChannel_args other) {
    }

    public queryMerchantChannel_args deepCopy() {
      return new queryMerchantChannel_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMerchantChannel_args)
        return this.equals((queryMerchantChannel_args)that);
      return false;
    }

    public boolean equals(queryMerchantChannel_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMerchantChannel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMerchantChannel_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMerchantChannel_argsStandardSchemeFactory implements SchemeFactory {
      public queryMerchantChannel_argsStandardScheme getScheme() {
        return new queryMerchantChannel_argsStandardScheme();
      }
    }

    private static class queryMerchantChannel_argsStandardScheme extends StandardScheme<queryMerchantChannel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMerchantChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMerchantChannel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMerchantChannel_argsTupleSchemeFactory implements SchemeFactory {
      public queryMerchantChannel_argsTupleScheme getScheme() {
        return new queryMerchantChannel_argsTupleScheme();
      }
    }

    private static class queryMerchantChannel_argsTupleScheme extends TupleScheme<queryMerchantChannel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMerchantChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMerchantChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queryMerchantChannel_result implements org.apache.thrift.TBase<queryMerchantChannel_result, queryMerchantChannel_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryMerchantChannel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMerchantChannel_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMerchantChannel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMerchantChannel_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMerchantChannel_result.class, metaDataMap);
    }

    public queryMerchantChannel_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMerchantChannel_result(queryMerchantChannel_result other) {
    }

    public queryMerchantChannel_result deepCopy() {
      return new queryMerchantChannel_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMerchantChannel_result)
        return this.equals((queryMerchantChannel_result)that);
      return false;
    }

    public boolean equals(queryMerchantChannel_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMerchantChannel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMerchantChannel_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMerchantChannel_resultStandardSchemeFactory implements SchemeFactory {
      public queryMerchantChannel_resultStandardScheme getScheme() {
        return new queryMerchantChannel_resultStandardScheme();
      }
    }

    private static class queryMerchantChannel_resultStandardScheme extends StandardScheme<queryMerchantChannel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMerchantChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMerchantChannel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMerchantChannel_resultTupleSchemeFactory implements SchemeFactory {
      public queryMerchantChannel_resultTupleScheme getScheme() {
        return new queryMerchantChannel_resultTupleScheme();
      }
    }

    private static class queryMerchantChannel_resultTupleScheme extends TupleScheme<queryMerchantChannel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMerchantChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMerchantChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queryMerchantChannelBy_args implements org.apache.thrift.TBase<queryMerchantChannelBy_args, queryMerchantChannelBy_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryMerchantChannelBy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMerchantChannelBy_args");

    private static final org.apache.thrift.protocol.TField BANK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNo", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelTypeCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CARD_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardTypeCode", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ACCOUNT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessType", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMerchantChannelBy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMerchantChannelBy_argsTupleSchemeFactory());
    }

    public String bankNo; // required
    public String channelTypeCode; // required
    public String cardTypeCode; // required
    public String accountType; // required
    public String businessType; // required
    public String merchantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_NO((short)1, "bankNo"),
      CHANNEL_TYPE_CODE((short)2, "channelTypeCode"),
      CARD_TYPE_CODE((short)3, "cardTypeCode"),
      ACCOUNT_TYPE((short)4, "accountType"),
      BUSINESS_TYPE((short)5, "businessType"),
      MERCHANT_ID((short)6, "merchantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_NO
            return BANK_NO;
          case 2: // CHANNEL_TYPE_CODE
            return CHANNEL_TYPE_CODE;
          case 3: // CARD_TYPE_CODE
            return CARD_TYPE_CODE;
          case 4: // ACCOUNT_TYPE
            return ACCOUNT_TYPE;
          case 5: // BUSINESS_TYPE
            return BUSINESS_TYPE;
          case 6: // MERCHANT_ID
            return MERCHANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_NO, new org.apache.thrift.meta_data.FieldMetaData("bankNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelTypeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CARD_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("cardTypeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCOUNT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accountType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUSINESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("businessType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMerchantChannelBy_args.class, metaDataMap);
    }

    public queryMerchantChannelBy_args() {
    }

    public queryMerchantChannelBy_args(
      String bankNo,
      String channelTypeCode,
      String cardTypeCode,
      String accountType,
      String businessType,
      String merchantId)
    {
      this();
      this.bankNo = bankNo;
      this.channelTypeCode = channelTypeCode;
      this.cardTypeCode = cardTypeCode;
      this.accountType = accountType;
      this.businessType = businessType;
      this.merchantId = merchantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMerchantChannelBy_args(queryMerchantChannelBy_args other) {
      if (other.isSetBankNo()) {
        this.bankNo = other.bankNo;
      }
      if (other.isSetChannelTypeCode()) {
        this.channelTypeCode = other.channelTypeCode;
      }
      if (other.isSetCardTypeCode()) {
        this.cardTypeCode = other.cardTypeCode;
      }
      if (other.isSetAccountType()) {
        this.accountType = other.accountType;
      }
      if (other.isSetBusinessType()) {
        this.businessType = other.businessType;
      }
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
    }

    public queryMerchantChannelBy_args deepCopy() {
      return new queryMerchantChannelBy_args(this);
    }

    @Override
    public void clear() {
      this.bankNo = null;
      this.channelTypeCode = null;
      this.cardTypeCode = null;
      this.accountType = null;
      this.businessType = null;
      this.merchantId = null;
    }

    public String getBankNo() {
      return this.bankNo;
    }

    public queryMerchantChannelBy_args setBankNo(String bankNo) {
      this.bankNo = bankNo;
      return this;
    }

    public void unsetBankNo() {
      this.bankNo = null;
    }

    /** Returns true if field bankNo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankNo() {
      return this.bankNo != null;
    }

    public void setBankNoIsSet(boolean value) {
      if (!value) {
        this.bankNo = null;
      }
    }

    public String getChannelTypeCode() {
      return this.channelTypeCode;
    }

    public queryMerchantChannelBy_args setChannelTypeCode(String channelTypeCode) {
      this.channelTypeCode = channelTypeCode;
      return this;
    }

    public void unsetChannelTypeCode() {
      this.channelTypeCode = null;
    }

    /** Returns true if field channelTypeCode is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelTypeCode() {
      return this.channelTypeCode != null;
    }

    public void setChannelTypeCodeIsSet(boolean value) {
      if (!value) {
        this.channelTypeCode = null;
      }
    }

    public String getCardTypeCode() {
      return this.cardTypeCode;
    }

    public queryMerchantChannelBy_args setCardTypeCode(String cardTypeCode) {
      this.cardTypeCode = cardTypeCode;
      return this;
    }

    public void unsetCardTypeCode() {
      this.cardTypeCode = null;
    }

    /** Returns true if field cardTypeCode is set (has been assigned a value) and false otherwise */
    public boolean isSetCardTypeCode() {
      return this.cardTypeCode != null;
    }

    public void setCardTypeCodeIsSet(boolean value) {
      if (!value) {
        this.cardTypeCode = null;
      }
    }

    public String getAccountType() {
      return this.accountType;
    }

    public queryMerchantChannelBy_args setAccountType(String accountType) {
      this.accountType = accountType;
      return this;
    }

    public void unsetAccountType() {
      this.accountType = null;
    }

    /** Returns true if field accountType is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountType() {
      return this.accountType != null;
    }

    public void setAccountTypeIsSet(boolean value) {
      if (!value) {
        this.accountType = null;
      }
    }

    public String getBusinessType() {
      return this.businessType;
    }

    public queryMerchantChannelBy_args setBusinessType(String businessType) {
      this.businessType = businessType;
      return this;
    }

    public void unsetBusinessType() {
      this.businessType = null;
    }

    /** Returns true if field businessType is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessType() {
      return this.businessType != null;
    }

    public void setBusinessTypeIsSet(boolean value) {
      if (!value) {
        this.businessType = null;
      }
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public queryMerchantChannelBy_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_NO:
        if (value == null) {
          unsetBankNo();
        } else {
          setBankNo((String)value);
        }
        break;

      case CHANNEL_TYPE_CODE:
        if (value == null) {
          unsetChannelTypeCode();
        } else {
          setChannelTypeCode((String)value);
        }
        break;

      case CARD_TYPE_CODE:
        if (value == null) {
          unsetCardTypeCode();
        } else {
          setCardTypeCode((String)value);
        }
        break;

      case ACCOUNT_TYPE:
        if (value == null) {
          unsetAccountType();
        } else {
          setAccountType((String)value);
        }
        break;

      case BUSINESS_TYPE:
        if (value == null) {
          unsetBusinessType();
        } else {
          setBusinessType((String)value);
        }
        break;

      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_NO:
        return getBankNo();

      case CHANNEL_TYPE_CODE:
        return getChannelTypeCode();

      case CARD_TYPE_CODE:
        return getCardTypeCode();

      case ACCOUNT_TYPE:
        return getAccountType();

      case BUSINESS_TYPE:
        return getBusinessType();

      case MERCHANT_ID:
        return getMerchantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_NO:
        return isSetBankNo();
      case CHANNEL_TYPE_CODE:
        return isSetChannelTypeCode();
      case CARD_TYPE_CODE:
        return isSetCardTypeCode();
      case ACCOUNT_TYPE:
        return isSetAccountType();
      case BUSINESS_TYPE:
        return isSetBusinessType();
      case MERCHANT_ID:
        return isSetMerchantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMerchantChannelBy_args)
        return this.equals((queryMerchantChannelBy_args)that);
      return false;
    }

    public boolean equals(queryMerchantChannelBy_args that) {
      if (that == null)
        return false;

      boolean this_present_bankNo = true && this.isSetBankNo();
      boolean that_present_bankNo = true && that.isSetBankNo();
      if (this_present_bankNo || that_present_bankNo) {
        if (!(this_present_bankNo && that_present_bankNo))
          return false;
        if (!this.bankNo.equals(that.bankNo))
          return false;
      }

      boolean this_present_channelTypeCode = true && this.isSetChannelTypeCode();
      boolean that_present_channelTypeCode = true && that.isSetChannelTypeCode();
      if (this_present_channelTypeCode || that_present_channelTypeCode) {
        if (!(this_present_channelTypeCode && that_present_channelTypeCode))
          return false;
        if (!this.channelTypeCode.equals(that.channelTypeCode))
          return false;
      }

      boolean this_present_cardTypeCode = true && this.isSetCardTypeCode();
      boolean that_present_cardTypeCode = true && that.isSetCardTypeCode();
      if (this_present_cardTypeCode || that_present_cardTypeCode) {
        if (!(this_present_cardTypeCode && that_present_cardTypeCode))
          return false;
        if (!this.cardTypeCode.equals(that.cardTypeCode))
          return false;
      }

      boolean this_present_accountType = true && this.isSetAccountType();
      boolean that_present_accountType = true && that.isSetAccountType();
      if (this_present_accountType || that_present_accountType) {
        if (!(this_present_accountType && that_present_accountType))
          return false;
        if (!this.accountType.equals(that.accountType))
          return false;
      }

      boolean this_present_businessType = true && this.isSetBusinessType();
      boolean that_present_businessType = true && that.isSetBusinessType();
      if (this_present_businessType || that_present_businessType) {
        if (!(this_present_businessType && that_present_businessType))
          return false;
        if (!this.businessType.equals(that.businessType))
          return false;
      }

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bankNo = true && (isSetBankNo());
      list.add(present_bankNo);
      if (present_bankNo)
        list.add(bankNo);

      boolean present_channelTypeCode = true && (isSetChannelTypeCode());
      list.add(present_channelTypeCode);
      if (present_channelTypeCode)
        list.add(channelTypeCode);

      boolean present_cardTypeCode = true && (isSetCardTypeCode());
      list.add(present_cardTypeCode);
      if (present_cardTypeCode)
        list.add(cardTypeCode);

      boolean present_accountType = true && (isSetAccountType());
      list.add(present_accountType);
      if (present_accountType)
        list.add(accountType);

      boolean present_businessType = true && (isSetBusinessType());
      list.add(present_businessType);
      if (present_businessType)
        list.add(businessType);

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMerchantChannelBy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankNo()).compareTo(other.isSetBankNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNo, other.bankNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelTypeCode()).compareTo(other.isSetChannelTypeCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelTypeCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelTypeCode, other.channelTypeCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCardTypeCode()).compareTo(other.isSetCardTypeCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardTypeCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardTypeCode, other.cardTypeCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccountType()).compareTo(other.isSetAccountType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountType, other.accountType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessType()).compareTo(other.isSetBusinessType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessType, other.businessType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMerchantChannelBy_args(");
      boolean first = true;

      sb.append("bankNo:");
      if (this.bankNo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelTypeCode:");
      if (this.channelTypeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.channelTypeCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cardTypeCode:");
      if (this.cardTypeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.cardTypeCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accountType:");
      if (this.accountType == null) {
        sb.append("null");
      } else {
        sb.append(this.accountType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessType:");
      if (this.businessType == null) {
        sb.append("null");
      } else {
        sb.append(this.businessType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMerchantChannelBy_argsStandardSchemeFactory implements SchemeFactory {
      public queryMerchantChannelBy_argsStandardScheme getScheme() {
        return new queryMerchantChannelBy_argsStandardScheme();
      }
    }

    private static class queryMerchantChannelBy_argsStandardScheme extends StandardScheme<queryMerchantChannelBy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMerchantChannelBy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankNo = iprot.readString();
                struct.setBankNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_TYPE_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelTypeCode = iprot.readString();
                struct.setChannelTypeCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CARD_TYPE_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cardTypeCode = iprot.readString();
                struct.setCardTypeCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACCOUNT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountType = iprot.readString();
                struct.setAccountTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // BUSINESS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.businessType = iprot.readString();
                struct.setBusinessTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMerchantChannelBy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankNo != null) {
          oprot.writeFieldBegin(BANK_NO_FIELD_DESC);
          oprot.writeString(struct.bankNo);
          oprot.writeFieldEnd();
        }
        if (struct.channelTypeCode != null) {
          oprot.writeFieldBegin(CHANNEL_TYPE_CODE_FIELD_DESC);
          oprot.writeString(struct.channelTypeCode);
          oprot.writeFieldEnd();
        }
        if (struct.cardTypeCode != null) {
          oprot.writeFieldBegin(CARD_TYPE_CODE_FIELD_DESC);
          oprot.writeString(struct.cardTypeCode);
          oprot.writeFieldEnd();
        }
        if (struct.accountType != null) {
          oprot.writeFieldBegin(ACCOUNT_TYPE_FIELD_DESC);
          oprot.writeString(struct.accountType);
          oprot.writeFieldEnd();
        }
        if (struct.businessType != null) {
          oprot.writeFieldBegin(BUSINESS_TYPE_FIELD_DESC);
          oprot.writeString(struct.businessType);
          oprot.writeFieldEnd();
        }
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMerchantChannelBy_argsTupleSchemeFactory implements SchemeFactory {
      public queryMerchantChannelBy_argsTupleScheme getScheme() {
        return new queryMerchantChannelBy_argsTupleScheme();
      }
    }

    private static class queryMerchantChannelBy_argsTupleScheme extends TupleScheme<queryMerchantChannelBy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMerchantChannelBy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankNo()) {
          optionals.set(0);
        }
        if (struct.isSetChannelTypeCode()) {
          optionals.set(1);
        }
        if (struct.isSetCardTypeCode()) {
          optionals.set(2);
        }
        if (struct.isSetAccountType()) {
          optionals.set(3);
        }
        if (struct.isSetBusinessType()) {
          optionals.set(4);
        }
        if (struct.isSetMerchantId()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetBankNo()) {
          oprot.writeString(struct.bankNo);
        }
        if (struct.isSetChannelTypeCode()) {
          oprot.writeString(struct.channelTypeCode);
        }
        if (struct.isSetCardTypeCode()) {
          oprot.writeString(struct.cardTypeCode);
        }
        if (struct.isSetAccountType()) {
          oprot.writeString(struct.accountType);
        }
        if (struct.isSetBusinessType()) {
          oprot.writeString(struct.businessType);
        }
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMerchantChannelBy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.bankNo = iprot.readString();
          struct.setBankNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelTypeCode = iprot.readString();
          struct.setChannelTypeCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cardTypeCode = iprot.readString();
          struct.setCardTypeCodeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.accountType = iprot.readString();
          struct.setAccountTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.businessType = iprot.readString();
          struct.setBusinessTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
      }
    }

  }

  public static class queryMerchantChannelBy_result implements org.apache.thrift.TBase<queryMerchantChannelBy_result, queryMerchantChannelBy_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryMerchantChannelBy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMerchantChannelBy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMerchantChannelBy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMerchantChannelBy_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMerchantChannelBy_result.class, metaDataMap);
    }

    public queryMerchantChannelBy_result() {
    }

    public queryMerchantChannelBy_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMerchantChannelBy_result(queryMerchantChannelBy_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryMerchantChannelBy_result deepCopy() {
      return new queryMerchantChannelBy_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryMerchantChannelBy_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMerchantChannelBy_result)
        return this.equals((queryMerchantChannelBy_result)that);
      return false;
    }

    public boolean equals(queryMerchantChannelBy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMerchantChannelBy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMerchantChannelBy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMerchantChannelBy_resultStandardSchemeFactory implements SchemeFactory {
      public queryMerchantChannelBy_resultStandardScheme getScheme() {
        return new queryMerchantChannelBy_resultStandardScheme();
      }
    }

    private static class queryMerchantChannelBy_resultStandardScheme extends StandardScheme<queryMerchantChannelBy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMerchantChannelBy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMerchantChannelBy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMerchantChannelBy_resultTupleSchemeFactory implements SchemeFactory {
      public queryMerchantChannelBy_resultTupleScheme getScheme() {
        return new queryMerchantChannelBy_resultTupleScheme();
      }
    }

    private static class queryMerchantChannelBy_resultTupleScheme extends TupleScheme<queryMerchantChannelBy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMerchantChannelBy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMerchantChannelBy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryPayChannel_args implements org.apache.thrift.TBase<queryPayChannel_args, queryPayChannel_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryPayChannel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPayChannel_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPayChannel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPayChannel_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPayChannel_args.class, metaDataMap);
    }

    public queryPayChannel_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPayChannel_args(queryPayChannel_args other) {
    }

    public queryPayChannel_args deepCopy() {
      return new queryPayChannel_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPayChannel_args)
        return this.equals((queryPayChannel_args)that);
      return false;
    }

    public boolean equals(queryPayChannel_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPayChannel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPayChannel_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPayChannel_argsStandardSchemeFactory implements SchemeFactory {
      public queryPayChannel_argsStandardScheme getScheme() {
        return new queryPayChannel_argsStandardScheme();
      }
    }

    private static class queryPayChannel_argsStandardScheme extends StandardScheme<queryPayChannel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPayChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPayChannel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPayChannel_argsTupleSchemeFactory implements SchemeFactory {
      public queryPayChannel_argsTupleScheme getScheme() {
        return new queryPayChannel_argsTupleScheme();
      }
    }

    private static class queryPayChannel_argsTupleScheme extends TupleScheme<queryPayChannel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPayChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPayChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queryPayChannel_result implements org.apache.thrift.TBase<queryPayChannel_result, queryPayChannel_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryPayChannel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPayChannel_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPayChannel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPayChannel_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPayChannel_result.class, metaDataMap);
    }

    public queryPayChannel_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPayChannel_result(queryPayChannel_result other) {
    }

    public queryPayChannel_result deepCopy() {
      return new queryPayChannel_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPayChannel_result)
        return this.equals((queryPayChannel_result)that);
      return false;
    }

    public boolean equals(queryPayChannel_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPayChannel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPayChannel_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPayChannel_resultStandardSchemeFactory implements SchemeFactory {
      public queryPayChannel_resultStandardScheme getScheme() {
        return new queryPayChannel_resultStandardScheme();
      }
    }

    private static class queryPayChannel_resultStandardScheme extends StandardScheme<queryPayChannel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPayChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPayChannel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPayChannel_resultTupleSchemeFactory implements SchemeFactory {
      public queryPayChannel_resultTupleScheme getScheme() {
        return new queryPayChannel_resultTupleScheme();
      }
    }

    private static class queryPayChannel_resultTupleScheme extends TupleScheme<queryPayChannel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPayChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPayChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queryBestChannel_args implements org.apache.thrift.TBase<queryBestChannel_args, queryBestChannel_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBestChannel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBestChannel_args");

    private static final org.apache.thrift.protocol.TField BANK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNo", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelTypeCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CARD_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardTypeCode", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ACCOUNT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessType", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField COST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("costType", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBestChannel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBestChannel_argsTupleSchemeFactory());
    }

    public String bankNo; // required
    public String channelTypeCode; // required
    public String cardTypeCode; // required
    public String accountType; // required
    public String businessType; // required
    public String costType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_NO((short)1, "bankNo"),
      CHANNEL_TYPE_CODE((short)2, "channelTypeCode"),
      CARD_TYPE_CODE((short)3, "cardTypeCode"),
      ACCOUNT_TYPE((short)4, "accountType"),
      BUSINESS_TYPE((short)5, "businessType"),
      COST_TYPE((short)6, "costType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_NO
            return BANK_NO;
          case 2: // CHANNEL_TYPE_CODE
            return CHANNEL_TYPE_CODE;
          case 3: // CARD_TYPE_CODE
            return CARD_TYPE_CODE;
          case 4: // ACCOUNT_TYPE
            return ACCOUNT_TYPE;
          case 5: // BUSINESS_TYPE
            return BUSINESS_TYPE;
          case 6: // COST_TYPE
            return COST_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_NO, new org.apache.thrift.meta_data.FieldMetaData("bankNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelTypeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CARD_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("cardTypeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCOUNT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accountType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUSINESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("businessType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("costType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBestChannel_args.class, metaDataMap);
    }

    public queryBestChannel_args() {
    }

    public queryBestChannel_args(
      String bankNo,
      String channelTypeCode,
      String cardTypeCode,
      String accountType,
      String businessType,
      String costType)
    {
      this();
      this.bankNo = bankNo;
      this.channelTypeCode = channelTypeCode;
      this.cardTypeCode = cardTypeCode;
      this.accountType = accountType;
      this.businessType = businessType;
      this.costType = costType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBestChannel_args(queryBestChannel_args other) {
      if (other.isSetBankNo()) {
        this.bankNo = other.bankNo;
      }
      if (other.isSetChannelTypeCode()) {
        this.channelTypeCode = other.channelTypeCode;
      }
      if (other.isSetCardTypeCode()) {
        this.cardTypeCode = other.cardTypeCode;
      }
      if (other.isSetAccountType()) {
        this.accountType = other.accountType;
      }
      if (other.isSetBusinessType()) {
        this.businessType = other.businessType;
      }
      if (other.isSetCostType()) {
        this.costType = other.costType;
      }
    }

    public queryBestChannel_args deepCopy() {
      return new queryBestChannel_args(this);
    }

    @Override
    public void clear() {
      this.bankNo = null;
      this.channelTypeCode = null;
      this.cardTypeCode = null;
      this.accountType = null;
      this.businessType = null;
      this.costType = null;
    }

    public String getBankNo() {
      return this.bankNo;
    }

    public queryBestChannel_args setBankNo(String bankNo) {
      this.bankNo = bankNo;
      return this;
    }

    public void unsetBankNo() {
      this.bankNo = null;
    }

    /** Returns true if field bankNo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankNo() {
      return this.bankNo != null;
    }

    public void setBankNoIsSet(boolean value) {
      if (!value) {
        this.bankNo = null;
      }
    }

    public String getChannelTypeCode() {
      return this.channelTypeCode;
    }

    public queryBestChannel_args setChannelTypeCode(String channelTypeCode) {
      this.channelTypeCode = channelTypeCode;
      return this;
    }

    public void unsetChannelTypeCode() {
      this.channelTypeCode = null;
    }

    /** Returns true if field channelTypeCode is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelTypeCode() {
      return this.channelTypeCode != null;
    }

    public void setChannelTypeCodeIsSet(boolean value) {
      if (!value) {
        this.channelTypeCode = null;
      }
    }

    public String getCardTypeCode() {
      return this.cardTypeCode;
    }

    public queryBestChannel_args setCardTypeCode(String cardTypeCode) {
      this.cardTypeCode = cardTypeCode;
      return this;
    }

    public void unsetCardTypeCode() {
      this.cardTypeCode = null;
    }

    /** Returns true if field cardTypeCode is set (has been assigned a value) and false otherwise */
    public boolean isSetCardTypeCode() {
      return this.cardTypeCode != null;
    }

    public void setCardTypeCodeIsSet(boolean value) {
      if (!value) {
        this.cardTypeCode = null;
      }
    }

    public String getAccountType() {
      return this.accountType;
    }

    public queryBestChannel_args setAccountType(String accountType) {
      this.accountType = accountType;
      return this;
    }

    public void unsetAccountType() {
      this.accountType = null;
    }

    /** Returns true if field accountType is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountType() {
      return this.accountType != null;
    }

    public void setAccountTypeIsSet(boolean value) {
      if (!value) {
        this.accountType = null;
      }
    }

    public String getBusinessType() {
      return this.businessType;
    }

    public queryBestChannel_args setBusinessType(String businessType) {
      this.businessType = businessType;
      return this;
    }

    public void unsetBusinessType() {
      this.businessType = null;
    }

    /** Returns true if field businessType is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessType() {
      return this.businessType != null;
    }

    public void setBusinessTypeIsSet(boolean value) {
      if (!value) {
        this.businessType = null;
      }
    }

    public String getCostType() {
      return this.costType;
    }

    public queryBestChannel_args setCostType(String costType) {
      this.costType = costType;
      return this;
    }

    public void unsetCostType() {
      this.costType = null;
    }

    /** Returns true if field costType is set (has been assigned a value) and false otherwise */
    public boolean isSetCostType() {
      return this.costType != null;
    }

    public void setCostTypeIsSet(boolean value) {
      if (!value) {
        this.costType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_NO:
        if (value == null) {
          unsetBankNo();
        } else {
          setBankNo((String)value);
        }
        break;

      case CHANNEL_TYPE_CODE:
        if (value == null) {
          unsetChannelTypeCode();
        } else {
          setChannelTypeCode((String)value);
        }
        break;

      case CARD_TYPE_CODE:
        if (value == null) {
          unsetCardTypeCode();
        } else {
          setCardTypeCode((String)value);
        }
        break;

      case ACCOUNT_TYPE:
        if (value == null) {
          unsetAccountType();
        } else {
          setAccountType((String)value);
        }
        break;

      case BUSINESS_TYPE:
        if (value == null) {
          unsetBusinessType();
        } else {
          setBusinessType((String)value);
        }
        break;

      case COST_TYPE:
        if (value == null) {
          unsetCostType();
        } else {
          setCostType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_NO:
        return getBankNo();

      case CHANNEL_TYPE_CODE:
        return getChannelTypeCode();

      case CARD_TYPE_CODE:
        return getCardTypeCode();

      case ACCOUNT_TYPE:
        return getAccountType();

      case BUSINESS_TYPE:
        return getBusinessType();

      case COST_TYPE:
        return getCostType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_NO:
        return isSetBankNo();
      case CHANNEL_TYPE_CODE:
        return isSetChannelTypeCode();
      case CARD_TYPE_CODE:
        return isSetCardTypeCode();
      case ACCOUNT_TYPE:
        return isSetAccountType();
      case BUSINESS_TYPE:
        return isSetBusinessType();
      case COST_TYPE:
        return isSetCostType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBestChannel_args)
        return this.equals((queryBestChannel_args)that);
      return false;
    }

    public boolean equals(queryBestChannel_args that) {
      if (that == null)
        return false;

      boolean this_present_bankNo = true && this.isSetBankNo();
      boolean that_present_bankNo = true && that.isSetBankNo();
      if (this_present_bankNo || that_present_bankNo) {
        if (!(this_present_bankNo && that_present_bankNo))
          return false;
        if (!this.bankNo.equals(that.bankNo))
          return false;
      }

      boolean this_present_channelTypeCode = true && this.isSetChannelTypeCode();
      boolean that_present_channelTypeCode = true && that.isSetChannelTypeCode();
      if (this_present_channelTypeCode || that_present_channelTypeCode) {
        if (!(this_present_channelTypeCode && that_present_channelTypeCode))
          return false;
        if (!this.channelTypeCode.equals(that.channelTypeCode))
          return false;
      }

      boolean this_present_cardTypeCode = true && this.isSetCardTypeCode();
      boolean that_present_cardTypeCode = true && that.isSetCardTypeCode();
      if (this_present_cardTypeCode || that_present_cardTypeCode) {
        if (!(this_present_cardTypeCode && that_present_cardTypeCode))
          return false;
        if (!this.cardTypeCode.equals(that.cardTypeCode))
          return false;
      }

      boolean this_present_accountType = true && this.isSetAccountType();
      boolean that_present_accountType = true && that.isSetAccountType();
      if (this_present_accountType || that_present_accountType) {
        if (!(this_present_accountType && that_present_accountType))
          return false;
        if (!this.accountType.equals(that.accountType))
          return false;
      }

      boolean this_present_businessType = true && this.isSetBusinessType();
      boolean that_present_businessType = true && that.isSetBusinessType();
      if (this_present_businessType || that_present_businessType) {
        if (!(this_present_businessType && that_present_businessType))
          return false;
        if (!this.businessType.equals(that.businessType))
          return false;
      }

      boolean this_present_costType = true && this.isSetCostType();
      boolean that_present_costType = true && that.isSetCostType();
      if (this_present_costType || that_present_costType) {
        if (!(this_present_costType && that_present_costType))
          return false;
        if (!this.costType.equals(that.costType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bankNo = true && (isSetBankNo());
      list.add(present_bankNo);
      if (present_bankNo)
        list.add(bankNo);

      boolean present_channelTypeCode = true && (isSetChannelTypeCode());
      list.add(present_channelTypeCode);
      if (present_channelTypeCode)
        list.add(channelTypeCode);

      boolean present_cardTypeCode = true && (isSetCardTypeCode());
      list.add(present_cardTypeCode);
      if (present_cardTypeCode)
        list.add(cardTypeCode);

      boolean present_accountType = true && (isSetAccountType());
      list.add(present_accountType);
      if (present_accountType)
        list.add(accountType);

      boolean present_businessType = true && (isSetBusinessType());
      list.add(present_businessType);
      if (present_businessType)
        list.add(businessType);

      boolean present_costType = true && (isSetCostType());
      list.add(present_costType);
      if (present_costType)
        list.add(costType);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBestChannel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankNo()).compareTo(other.isSetBankNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNo, other.bankNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelTypeCode()).compareTo(other.isSetChannelTypeCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelTypeCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelTypeCode, other.channelTypeCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCardTypeCode()).compareTo(other.isSetCardTypeCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardTypeCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardTypeCode, other.cardTypeCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccountType()).compareTo(other.isSetAccountType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountType, other.accountType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBusinessType()).compareTo(other.isSetBusinessType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessType, other.businessType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCostType()).compareTo(other.isSetCostType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCostType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costType, other.costType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBestChannel_args(");
      boolean first = true;

      sb.append("bankNo:");
      if (this.bankNo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelTypeCode:");
      if (this.channelTypeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.channelTypeCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cardTypeCode:");
      if (this.cardTypeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.cardTypeCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accountType:");
      if (this.accountType == null) {
        sb.append("null");
      } else {
        sb.append(this.accountType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("businessType:");
      if (this.businessType == null) {
        sb.append("null");
      } else {
        sb.append(this.businessType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("costType:");
      if (this.costType == null) {
        sb.append("null");
      } else {
        sb.append(this.costType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBestChannel_argsStandardSchemeFactory implements SchemeFactory {
      public queryBestChannel_argsStandardScheme getScheme() {
        return new queryBestChannel_argsStandardScheme();
      }
    }

    private static class queryBestChannel_argsStandardScheme extends StandardScheme<queryBestChannel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBestChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankNo = iprot.readString();
                struct.setBankNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_TYPE_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelTypeCode = iprot.readString();
                struct.setChannelTypeCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CARD_TYPE_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cardTypeCode = iprot.readString();
                struct.setCardTypeCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACCOUNT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountType = iprot.readString();
                struct.setAccountTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // BUSINESS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.businessType = iprot.readString();
                struct.setBusinessTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // COST_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.costType = iprot.readString();
                struct.setCostTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBestChannel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankNo != null) {
          oprot.writeFieldBegin(BANK_NO_FIELD_DESC);
          oprot.writeString(struct.bankNo);
          oprot.writeFieldEnd();
        }
        if (struct.channelTypeCode != null) {
          oprot.writeFieldBegin(CHANNEL_TYPE_CODE_FIELD_DESC);
          oprot.writeString(struct.channelTypeCode);
          oprot.writeFieldEnd();
        }
        if (struct.cardTypeCode != null) {
          oprot.writeFieldBegin(CARD_TYPE_CODE_FIELD_DESC);
          oprot.writeString(struct.cardTypeCode);
          oprot.writeFieldEnd();
        }
        if (struct.accountType != null) {
          oprot.writeFieldBegin(ACCOUNT_TYPE_FIELD_DESC);
          oprot.writeString(struct.accountType);
          oprot.writeFieldEnd();
        }
        if (struct.businessType != null) {
          oprot.writeFieldBegin(BUSINESS_TYPE_FIELD_DESC);
          oprot.writeString(struct.businessType);
          oprot.writeFieldEnd();
        }
        if (struct.costType != null) {
          oprot.writeFieldBegin(COST_TYPE_FIELD_DESC);
          oprot.writeString(struct.costType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBestChannel_argsTupleSchemeFactory implements SchemeFactory {
      public queryBestChannel_argsTupleScheme getScheme() {
        return new queryBestChannel_argsTupleScheme();
      }
    }

    private static class queryBestChannel_argsTupleScheme extends TupleScheme<queryBestChannel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBestChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankNo()) {
          optionals.set(0);
        }
        if (struct.isSetChannelTypeCode()) {
          optionals.set(1);
        }
        if (struct.isSetCardTypeCode()) {
          optionals.set(2);
        }
        if (struct.isSetAccountType()) {
          optionals.set(3);
        }
        if (struct.isSetBusinessType()) {
          optionals.set(4);
        }
        if (struct.isSetCostType()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetBankNo()) {
          oprot.writeString(struct.bankNo);
        }
        if (struct.isSetChannelTypeCode()) {
          oprot.writeString(struct.channelTypeCode);
        }
        if (struct.isSetCardTypeCode()) {
          oprot.writeString(struct.cardTypeCode);
        }
        if (struct.isSetAccountType()) {
          oprot.writeString(struct.accountType);
        }
        if (struct.isSetBusinessType()) {
          oprot.writeString(struct.businessType);
        }
        if (struct.isSetCostType()) {
          oprot.writeString(struct.costType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBestChannel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.bankNo = iprot.readString();
          struct.setBankNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelTypeCode = iprot.readString();
          struct.setChannelTypeCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cardTypeCode = iprot.readString();
          struct.setCardTypeCodeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.accountType = iprot.readString();
          struct.setAccountTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.businessType = iprot.readString();
          struct.setBusinessTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.costType = iprot.readString();
          struct.setCostTypeIsSet(true);
        }
      }
    }

  }

  public static class queryBestChannel_result implements org.apache.thrift.TBase<queryBestChannel_result, queryBestChannel_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBestChannel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBestChannel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBestChannel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBestChannel_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBestChannel_result.class, metaDataMap);
    }

    public queryBestChannel_result() {
    }

    public queryBestChannel_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBestChannel_result(queryBestChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryBestChannel_result deepCopy() {
      return new queryBestChannel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryBestChannel_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBestChannel_result)
        return this.equals((queryBestChannel_result)that);
      return false;
    }

    public boolean equals(queryBestChannel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBestChannel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBestChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBestChannel_resultStandardSchemeFactory implements SchemeFactory {
      public queryBestChannel_resultStandardScheme getScheme() {
        return new queryBestChannel_resultStandardScheme();
      }
    }

    private static class queryBestChannel_resultStandardScheme extends StandardScheme<queryBestChannel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBestChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBestChannel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBestChannel_resultTupleSchemeFactory implements SchemeFactory {
      public queryBestChannel_resultTupleScheme getScheme() {
        return new queryBestChannel_resultTupleScheme();
      }
    }

    private static class queryBestChannel_resultTupleScheme extends TupleScheme<queryBestChannel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBestChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBestChannel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryChannelType_args implements org.apache.thrift.TBase<queryChannelType_args, queryChannelType_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryChannelType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryChannelType_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryChannelType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryChannelType_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryChannelType_args.class, metaDataMap);
    }

    public queryChannelType_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryChannelType_args(queryChannelType_args other) {
    }

    public queryChannelType_args deepCopy() {
      return new queryChannelType_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryChannelType_args)
        return this.equals((queryChannelType_args)that);
      return false;
    }

    public boolean equals(queryChannelType_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(queryChannelType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryChannelType_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryChannelType_argsStandardSchemeFactory implements SchemeFactory {
      public queryChannelType_argsStandardScheme getScheme() {
        return new queryChannelType_argsStandardScheme();
      }
    }

    private static class queryChannelType_argsStandardScheme extends StandardScheme<queryChannelType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryChannelType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryChannelType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryChannelType_argsTupleSchemeFactory implements SchemeFactory {
      public queryChannelType_argsTupleScheme getScheme() {
        return new queryChannelType_argsTupleScheme();
      }
    }

    private static class queryChannelType_argsTupleScheme extends TupleScheme<queryChannelType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryChannelType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryChannelType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queryChannelType_result implements org.apache.thrift.TBase<queryChannelType_result, queryChannelType_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryChannelType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryChannelType_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryChannelType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryChannelType_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryChannelType_result.class, metaDataMap);
    }

    public queryChannelType_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryChannelType_result(queryChannelType_result other) {
    }

    public queryChannelType_result deepCopy() {
      return new queryChannelType_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryChannelType_result)
        return this.equals((queryChannelType_result)that);
      return false;
    }

    public boolean equals(queryChannelType_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(queryChannelType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryChannelType_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryChannelType_resultStandardSchemeFactory implements SchemeFactory {
      public queryChannelType_resultStandardScheme getScheme() {
        return new queryChannelType_resultStandardScheme();
      }
    }

    private static class queryChannelType_resultStandardScheme extends StandardScheme<queryChannelType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryChannelType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryChannelType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryChannelType_resultTupleSchemeFactory implements SchemeFactory {
      public queryChannelType_resultTupleScheme getScheme() {
        return new queryChannelType_resultTupleScheme();
      }
    }

    private static class queryChannelType_resultTupleScheme extends TupleScheme<queryChannelType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryChannelType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryChannelType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queryBankInfoByChannelType_args implements org.apache.thrift.TBase<queryBankInfoByChannelType_args, queryBankInfoByChannelType_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBankInfoByChannelType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBankInfoByChannelType_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelTypeCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBankInfoByChannelType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBankInfoByChannelType_argsTupleSchemeFactory());
    }

    public String channelTypeCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_TYPE_CODE((short)1, "channelTypeCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_TYPE_CODE
            return CHANNEL_TYPE_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelTypeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBankInfoByChannelType_args.class, metaDataMap);
    }

    public queryBankInfoByChannelType_args() {
    }

    public queryBankInfoByChannelType_args(
      String channelTypeCode)
    {
      this();
      this.channelTypeCode = channelTypeCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBankInfoByChannelType_args(queryBankInfoByChannelType_args other) {
      if (other.isSetChannelTypeCode()) {
        this.channelTypeCode = other.channelTypeCode;
      }
    }

    public queryBankInfoByChannelType_args deepCopy() {
      return new queryBankInfoByChannelType_args(this);
    }

    @Override
    public void clear() {
      this.channelTypeCode = null;
    }

    public String getChannelTypeCode() {
      return this.channelTypeCode;
    }

    public queryBankInfoByChannelType_args setChannelTypeCode(String channelTypeCode) {
      this.channelTypeCode = channelTypeCode;
      return this;
    }

    public void unsetChannelTypeCode() {
      this.channelTypeCode = null;
    }

    /** Returns true if field channelTypeCode is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelTypeCode() {
      return this.channelTypeCode != null;
    }

    public void setChannelTypeCodeIsSet(boolean value) {
      if (!value) {
        this.channelTypeCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_TYPE_CODE:
        if (value == null) {
          unsetChannelTypeCode();
        } else {
          setChannelTypeCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_TYPE_CODE:
        return getChannelTypeCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_TYPE_CODE:
        return isSetChannelTypeCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBankInfoByChannelType_args)
        return this.equals((queryBankInfoByChannelType_args)that);
      return false;
    }

    public boolean equals(queryBankInfoByChannelType_args that) {
      if (that == null)
        return false;

      boolean this_present_channelTypeCode = true && this.isSetChannelTypeCode();
      boolean that_present_channelTypeCode = true && that.isSetChannelTypeCode();
      if (this_present_channelTypeCode || that_present_channelTypeCode) {
        if (!(this_present_channelTypeCode && that_present_channelTypeCode))
          return false;
        if (!this.channelTypeCode.equals(that.channelTypeCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelTypeCode = true && (isSetChannelTypeCode());
      list.add(present_channelTypeCode);
      if (present_channelTypeCode)
        list.add(channelTypeCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBankInfoByChannelType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelTypeCode()).compareTo(other.isSetChannelTypeCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelTypeCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelTypeCode, other.channelTypeCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBankInfoByChannelType_args(");
      boolean first = true;

      sb.append("channelTypeCode:");
      if (this.channelTypeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.channelTypeCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBankInfoByChannelType_argsStandardSchemeFactory implements SchemeFactory {
      public queryBankInfoByChannelType_argsStandardScheme getScheme() {
        return new queryBankInfoByChannelType_argsStandardScheme();
      }
    }

    private static class queryBankInfoByChannelType_argsStandardScheme extends StandardScheme<queryBankInfoByChannelType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBankInfoByChannelType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_TYPE_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelTypeCode = iprot.readString();
                struct.setChannelTypeCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBankInfoByChannelType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelTypeCode != null) {
          oprot.writeFieldBegin(CHANNEL_TYPE_CODE_FIELD_DESC);
          oprot.writeString(struct.channelTypeCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBankInfoByChannelType_argsTupleSchemeFactory implements SchemeFactory {
      public queryBankInfoByChannelType_argsTupleScheme getScheme() {
        return new queryBankInfoByChannelType_argsTupleScheme();
      }
    }

    private static class queryBankInfoByChannelType_argsTupleScheme extends TupleScheme<queryBankInfoByChannelType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBankInfoByChannelType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelTypeCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChannelTypeCode()) {
          oprot.writeString(struct.channelTypeCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBankInfoByChannelType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.channelTypeCode = iprot.readString();
          struct.setChannelTypeCodeIsSet(true);
        }
      }
    }

  }

  public static class queryBankInfoByChannelType_result implements org.apache.thrift.TBase<queryBankInfoByChannelType_result, queryBankInfoByChannelType_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBankInfoByChannelType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBankInfoByChannelType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBankInfoByChannelType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBankInfoByChannelType_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBankInfoByChannelType_result.class, metaDataMap);
    }

    public queryBankInfoByChannelType_result() {
    }

    public queryBankInfoByChannelType_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBankInfoByChannelType_result(queryBankInfoByChannelType_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryBankInfoByChannelType_result deepCopy() {
      return new queryBankInfoByChannelType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryBankInfoByChannelType_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBankInfoByChannelType_result)
        return this.equals((queryBankInfoByChannelType_result)that);
      return false;
    }

    public boolean equals(queryBankInfoByChannelType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBankInfoByChannelType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBankInfoByChannelType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBankInfoByChannelType_resultStandardSchemeFactory implements SchemeFactory {
      public queryBankInfoByChannelType_resultStandardScheme getScheme() {
        return new queryBankInfoByChannelType_resultStandardScheme();
      }
    }

    private static class queryBankInfoByChannelType_resultStandardScheme extends StandardScheme<queryBankInfoByChannelType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBankInfoByChannelType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBankInfoByChannelType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBankInfoByChannelType_resultTupleSchemeFactory implements SchemeFactory {
      public queryBankInfoByChannelType_resultTupleScheme getScheme() {
        return new queryBankInfoByChannelType_resultTupleScheme();
      }
    }

    private static class queryBankInfoByChannelType_resultTupleScheme extends TupleScheme<queryBankInfoByChannelType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBankInfoByChannelType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBankInfoByChannelType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryBankInfoByProductCode_args implements org.apache.thrift.TBase<queryBankInfoByProductCode_args, queryBankInfoByProductCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBankInfoByProductCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBankInfoByProductCode_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("productCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBankInfoByProductCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBankInfoByProductCode_argsTupleSchemeFactory());
    }

    public String productCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_CODE((short)1, "productCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_CODE
            return PRODUCT_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("productCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBankInfoByProductCode_args.class, metaDataMap);
    }

    public queryBankInfoByProductCode_args() {
    }

    public queryBankInfoByProductCode_args(
      String productCode)
    {
      this();
      this.productCode = productCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBankInfoByProductCode_args(queryBankInfoByProductCode_args other) {
      if (other.isSetProductCode()) {
        this.productCode = other.productCode;
      }
    }

    public queryBankInfoByProductCode_args deepCopy() {
      return new queryBankInfoByProductCode_args(this);
    }

    @Override
    public void clear() {
      this.productCode = null;
    }

    public String getProductCode() {
      return this.productCode;
    }

    public queryBankInfoByProductCode_args setProductCode(String productCode) {
      this.productCode = productCode;
      return this;
    }

    public void unsetProductCode() {
      this.productCode = null;
    }

    /** Returns true if field productCode is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCode() {
      return this.productCode != null;
    }

    public void setProductCodeIsSet(boolean value) {
      if (!value) {
        this.productCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_CODE:
        if (value == null) {
          unsetProductCode();
        } else {
          setProductCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_CODE:
        return getProductCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_CODE:
        return isSetProductCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBankInfoByProductCode_args)
        return this.equals((queryBankInfoByProductCode_args)that);
      return false;
    }

    public boolean equals(queryBankInfoByProductCode_args that) {
      if (that == null)
        return false;

      boolean this_present_productCode = true && this.isSetProductCode();
      boolean that_present_productCode = true && that.isSetProductCode();
      if (this_present_productCode || that_present_productCode) {
        if (!(this_present_productCode && that_present_productCode))
          return false;
        if (!this.productCode.equals(that.productCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCode = true && (isSetProductCode());
      list.add(present_productCode);
      if (present_productCode)
        list.add(productCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBankInfoByProductCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCode()).compareTo(other.isSetProductCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCode, other.productCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBankInfoByProductCode_args(");
      boolean first = true;

      sb.append("productCode:");
      if (this.productCode == null) {
        sb.append("null");
      } else {
        sb.append(this.productCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBankInfoByProductCode_argsStandardSchemeFactory implements SchemeFactory {
      public queryBankInfoByProductCode_argsStandardScheme getScheme() {
        return new queryBankInfoByProductCode_argsStandardScheme();
      }
    }

    private static class queryBankInfoByProductCode_argsStandardScheme extends StandardScheme<queryBankInfoByProductCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBankInfoByProductCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productCode = iprot.readString();
                struct.setProductCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBankInfoByProductCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCode != null) {
          oprot.writeFieldBegin(PRODUCT_CODE_FIELD_DESC);
          oprot.writeString(struct.productCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBankInfoByProductCode_argsTupleSchemeFactory implements SchemeFactory {
      public queryBankInfoByProductCode_argsTupleScheme getScheme() {
        return new queryBankInfoByProductCode_argsTupleScheme();
      }
    }

    private static class queryBankInfoByProductCode_argsTupleScheme extends TupleScheme<queryBankInfoByProductCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBankInfoByProductCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductCode()) {
          oprot.writeString(struct.productCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBankInfoByProductCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productCode = iprot.readString();
          struct.setProductCodeIsSet(true);
        }
      }
    }

  }

  public static class queryBankInfoByProductCode_result implements org.apache.thrift.TBase<queryBankInfoByProductCode_result, queryBankInfoByProductCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBankInfoByProductCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBankInfoByProductCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBankInfoByProductCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBankInfoByProductCode_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBankInfoByProductCode_result.class, metaDataMap);
    }

    public queryBankInfoByProductCode_result() {
    }

    public queryBankInfoByProductCode_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBankInfoByProductCode_result(queryBankInfoByProductCode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryBankInfoByProductCode_result deepCopy() {
      return new queryBankInfoByProductCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryBankInfoByProductCode_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBankInfoByProductCode_result)
        return this.equals((queryBankInfoByProductCode_result)that);
      return false;
    }

    public boolean equals(queryBankInfoByProductCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBankInfoByProductCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBankInfoByProductCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBankInfoByProductCode_resultStandardSchemeFactory implements SchemeFactory {
      public queryBankInfoByProductCode_resultStandardScheme getScheme() {
        return new queryBankInfoByProductCode_resultStandardScheme();
      }
    }

    private static class queryBankInfoByProductCode_resultStandardScheme extends StandardScheme<queryBankInfoByProductCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBankInfoByProductCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBankInfoByProductCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBankInfoByProductCode_resultTupleSchemeFactory implements SchemeFactory {
      public queryBankInfoByProductCode_resultTupleScheme getScheme() {
        return new queryBankInfoByProductCode_resultTupleScheme();
      }
    }

    private static class queryBankInfoByProductCode_resultTupleScheme extends TupleScheme<queryBankInfoByProductCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBankInfoByProductCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBankInfoByProductCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryPayChannelAll_args implements org.apache.thrift.TBase<queryPayChannelAll_args, queryPayChannelAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryPayChannelAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPayChannelAll_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPayChannelAll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPayChannelAll_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPayChannelAll_args.class, metaDataMap);
    }

    public queryPayChannelAll_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPayChannelAll_args(queryPayChannelAll_args other) {
    }

    public queryPayChannelAll_args deepCopy() {
      return new queryPayChannelAll_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPayChannelAll_args)
        return this.equals((queryPayChannelAll_args)that);
      return false;
    }

    public boolean equals(queryPayChannelAll_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPayChannelAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPayChannelAll_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPayChannelAll_argsStandardSchemeFactory implements SchemeFactory {
      public queryPayChannelAll_argsStandardScheme getScheme() {
        return new queryPayChannelAll_argsStandardScheme();
      }
    }

    private static class queryPayChannelAll_argsStandardScheme extends StandardScheme<queryPayChannelAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPayChannelAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPayChannelAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPayChannelAll_argsTupleSchemeFactory implements SchemeFactory {
      public queryPayChannelAll_argsTupleScheme getScheme() {
        return new queryPayChannelAll_argsTupleScheme();
      }
    }

    private static class queryPayChannelAll_argsTupleScheme extends TupleScheme<queryPayChannelAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPayChannelAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPayChannelAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queryPayChannelAll_result implements org.apache.thrift.TBase<queryPayChannelAll_result, queryPayChannelAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryPayChannelAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPayChannelAll_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPayChannelAll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPayChannelAll_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPayChannelAll_result.class, metaDataMap);
    }

    public queryPayChannelAll_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPayChannelAll_result(queryPayChannelAll_result other) {
    }

    public queryPayChannelAll_result deepCopy() {
      return new queryPayChannelAll_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPayChannelAll_result)
        return this.equals((queryPayChannelAll_result)that);
      return false;
    }

    public boolean equals(queryPayChannelAll_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPayChannelAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPayChannelAll_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPayChannelAll_resultStandardSchemeFactory implements SchemeFactory {
      public queryPayChannelAll_resultStandardScheme getScheme() {
        return new queryPayChannelAll_resultStandardScheme();
      }
    }

    private static class queryPayChannelAll_resultStandardScheme extends StandardScheme<queryPayChannelAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPayChannelAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPayChannelAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPayChannelAll_resultTupleSchemeFactory implements SchemeFactory {
      public queryPayChannelAll_resultTupleScheme getScheme() {
        return new queryPayChannelAll_resultTupleScheme();
      }
    }

    private static class queryPayChannelAll_resultTupleScheme extends TupleScheme<queryPayChannelAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPayChannelAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPayChannelAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queryChannelByChannelCode_args implements org.apache.thrift.TBase<queryChannelByChannelCode_args, queryChannelByChannelCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryChannelByChannelCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryChannelByChannelCode_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryChannelByChannelCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryChannelByChannelCode_argsTupleSchemeFactory());
    }

    public String channelCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_CODE((short)1, "channelCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_CODE
            return CHANNEL_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryChannelByChannelCode_args.class, metaDataMap);
    }

    public queryChannelByChannelCode_args() {
    }

    public queryChannelByChannelCode_args(
      String channelCode)
    {
      this();
      this.channelCode = channelCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryChannelByChannelCode_args(queryChannelByChannelCode_args other) {
      if (other.isSetChannelCode()) {
        this.channelCode = other.channelCode;
      }
    }

    public queryChannelByChannelCode_args deepCopy() {
      return new queryChannelByChannelCode_args(this);
    }

    @Override
    public void clear() {
      this.channelCode = null;
    }

    public String getChannelCode() {
      return this.channelCode;
    }

    public queryChannelByChannelCode_args setChannelCode(String channelCode) {
      this.channelCode = channelCode;
      return this;
    }

    public void unsetChannelCode() {
      this.channelCode = null;
    }

    /** Returns true if field channelCode is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelCode() {
      return this.channelCode != null;
    }

    public void setChannelCodeIsSet(boolean value) {
      if (!value) {
        this.channelCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_CODE:
        if (value == null) {
          unsetChannelCode();
        } else {
          setChannelCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_CODE:
        return getChannelCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_CODE:
        return isSetChannelCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryChannelByChannelCode_args)
        return this.equals((queryChannelByChannelCode_args)that);
      return false;
    }

    public boolean equals(queryChannelByChannelCode_args that) {
      if (that == null)
        return false;

      boolean this_present_channelCode = true && this.isSetChannelCode();
      boolean that_present_channelCode = true && that.isSetChannelCode();
      if (this_present_channelCode || that_present_channelCode) {
        if (!(this_present_channelCode && that_present_channelCode))
          return false;
        if (!this.channelCode.equals(that.channelCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelCode = true && (isSetChannelCode());
      list.add(present_channelCode);
      if (present_channelCode)
        list.add(channelCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryChannelByChannelCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelCode()).compareTo(other.isSetChannelCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCode, other.channelCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryChannelByChannelCode_args(");
      boolean first = true;

      sb.append("channelCode:");
      if (this.channelCode == null) {
        sb.append("null");
      } else {
        sb.append(this.channelCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryChannelByChannelCode_argsStandardSchemeFactory implements SchemeFactory {
      public queryChannelByChannelCode_argsStandardScheme getScheme() {
        return new queryChannelByChannelCode_argsStandardScheme();
      }
    }

    private static class queryChannelByChannelCode_argsStandardScheme extends StandardScheme<queryChannelByChannelCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryChannelByChannelCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelCode = iprot.readString();
                struct.setChannelCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryChannelByChannelCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelCode != null) {
          oprot.writeFieldBegin(CHANNEL_CODE_FIELD_DESC);
          oprot.writeString(struct.channelCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryChannelByChannelCode_argsTupleSchemeFactory implements SchemeFactory {
      public queryChannelByChannelCode_argsTupleScheme getScheme() {
        return new queryChannelByChannelCode_argsTupleScheme();
      }
    }

    private static class queryChannelByChannelCode_argsTupleScheme extends TupleScheme<queryChannelByChannelCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryChannelByChannelCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChannelCode()) {
          oprot.writeString(struct.channelCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryChannelByChannelCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.channelCode = iprot.readString();
          struct.setChannelCodeIsSet(true);
        }
      }
    }

  }

  public static class queryChannelByChannelCode_result implements org.apache.thrift.TBase<queryChannelByChannelCode_result, queryChannelByChannelCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryChannelByChannelCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryChannelByChannelCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryChannelByChannelCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryChannelByChannelCode_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryChannelByChannelCode_result.class, metaDataMap);
    }

    public queryChannelByChannelCode_result() {
    }

    public queryChannelByChannelCode_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryChannelByChannelCode_result(queryChannelByChannelCode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryChannelByChannelCode_result deepCopy() {
      return new queryChannelByChannelCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryChannelByChannelCode_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryChannelByChannelCode_result)
        return this.equals((queryChannelByChannelCode_result)that);
      return false;
    }

    public boolean equals(queryChannelByChannelCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryChannelByChannelCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryChannelByChannelCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryChannelByChannelCode_resultStandardSchemeFactory implements SchemeFactory {
      public queryChannelByChannelCode_resultStandardScheme getScheme() {
        return new queryChannelByChannelCode_resultStandardScheme();
      }
    }

    private static class queryChannelByChannelCode_resultStandardScheme extends StandardScheme<queryChannelByChannelCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryChannelByChannelCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryChannelByChannelCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryChannelByChannelCode_resultTupleSchemeFactory implements SchemeFactory {
      public queryChannelByChannelCode_resultTupleScheme getScheme() {
        return new queryChannelByChannelCode_resultTupleScheme();
      }
    }

    private static class queryChannelByChannelCode_resultTupleScheme extends TupleScheme<queryChannelByChannelCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryChannelByChannelCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryChannelByChannelCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class selectPayChannelAllList_args implements org.apache.thrift.TBase<selectPayChannelAllList_args, selectPayChannelAllList_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectPayChannelAllList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectPayChannelAllList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectPayChannelAllList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectPayChannelAllList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectPayChannelAllList_args.class, metaDataMap);
    }

    public selectPayChannelAllList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectPayChannelAllList_args(selectPayChannelAllList_args other) {
    }

    public selectPayChannelAllList_args deepCopy() {
      return new selectPayChannelAllList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectPayChannelAllList_args)
        return this.equals((selectPayChannelAllList_args)that);
      return false;
    }

    public boolean equals(selectPayChannelAllList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(selectPayChannelAllList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectPayChannelAllList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectPayChannelAllList_argsStandardSchemeFactory implements SchemeFactory {
      public selectPayChannelAllList_argsStandardScheme getScheme() {
        return new selectPayChannelAllList_argsStandardScheme();
      }
    }

    private static class selectPayChannelAllList_argsStandardScheme extends StandardScheme<selectPayChannelAllList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectPayChannelAllList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectPayChannelAllList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectPayChannelAllList_argsTupleSchemeFactory implements SchemeFactory {
      public selectPayChannelAllList_argsTupleScheme getScheme() {
        return new selectPayChannelAllList_argsTupleScheme();
      }
    }

    private static class selectPayChannelAllList_argsTupleScheme extends TupleScheme<selectPayChannelAllList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectPayChannelAllList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectPayChannelAllList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class selectPayChannelAllList_result implements org.apache.thrift.TBase<selectPayChannelAllList_result, selectPayChannelAllList_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectPayChannelAllList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectPayChannelAllList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectPayChannelAllList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectPayChannelAllList_resultTupleSchemeFactory());
    }

    public List<PayChannelThrift> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PayChannelThrift.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectPayChannelAllList_result.class, metaDataMap);
    }

    public selectPayChannelAllList_result() {
    }

    public selectPayChannelAllList_result(
      List<PayChannelThrift> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectPayChannelAllList_result(selectPayChannelAllList_result other) {
      if (other.isSetSuccess()) {
        List<PayChannelThrift> __this__success = new ArrayList<PayChannelThrift>(other.success.size());
        for (PayChannelThrift other_element : other.success) {
          __this__success.add(new PayChannelThrift(other_element));
        }
        this.success = __this__success;
      }
    }

    public selectPayChannelAllList_result deepCopy() {
      return new selectPayChannelAllList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PayChannelThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PayChannelThrift elem) {
      if (this.success == null) {
        this.success = new ArrayList<PayChannelThrift>();
      }
      this.success.add(elem);
    }

    public List<PayChannelThrift> getSuccess() {
      return this.success;
    }

    public selectPayChannelAllList_result setSuccess(List<PayChannelThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PayChannelThrift>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectPayChannelAllList_result)
        return this.equals((selectPayChannelAllList_result)that);
      return false;
    }

    public boolean equals(selectPayChannelAllList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectPayChannelAllList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectPayChannelAllList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectPayChannelAllList_resultStandardSchemeFactory implements SchemeFactory {
      public selectPayChannelAllList_resultStandardScheme getScheme() {
        return new selectPayChannelAllList_resultStandardScheme();
      }
    }

    private static class selectPayChannelAllList_resultStandardScheme extends StandardScheme<selectPayChannelAllList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectPayChannelAllList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<PayChannelThrift>(_list0.size);
                  PayChannelThrift _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new PayChannelThrift();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectPayChannelAllList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PayChannelThrift _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectPayChannelAllList_resultTupleSchemeFactory implements SchemeFactory {
      public selectPayChannelAllList_resultTupleScheme getScheme() {
        return new selectPayChannelAllList_resultTupleScheme();
      }
    }

    private static class selectPayChannelAllList_resultTupleScheme extends TupleScheme<selectPayChannelAllList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectPayChannelAllList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PayChannelThrift _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectPayChannelAllList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PayChannelThrift>(_list5.size);
            PayChannelThrift _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new PayChannelThrift();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class selectPayChannelByType_args implements org.apache.thrift.TBase<selectPayChannelByType_args, selectPayChannelByType_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectPayChannelByType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectPayChannelByType_args");

    private static final org.apache.thrift.protocol.TField BANK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNo", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelTypeCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("productCode", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectPayChannelByType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectPayChannelByType_argsTupleSchemeFactory());
    }

    public String bankNo; // required
    public String channelTypeCode; // required
    public String bankCardType; // required
    public String productCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_NO((short)1, "bankNo"),
      CHANNEL_TYPE_CODE((short)2, "channelTypeCode"),
      BANK_CARD_TYPE((short)3, "bankCardType"),
      PRODUCT_CODE((short)4, "productCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_NO
            return BANK_NO;
          case 2: // CHANNEL_TYPE_CODE
            return CHANNEL_TYPE_CODE;
          case 3: // BANK_CARD_TYPE
            return BANK_CARD_TYPE;
          case 4: // PRODUCT_CODE
            return PRODUCT_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_NO, new org.apache.thrift.meta_data.FieldMetaData("bankNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelTypeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("productCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectPayChannelByType_args.class, metaDataMap);
    }

    public selectPayChannelByType_args() {
    }

    public selectPayChannelByType_args(
      String bankNo,
      String channelTypeCode,
      String bankCardType,
      String productCode)
    {
      this();
      this.bankNo = bankNo;
      this.channelTypeCode = channelTypeCode;
      this.bankCardType = bankCardType;
      this.productCode = productCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectPayChannelByType_args(selectPayChannelByType_args other) {
      if (other.isSetBankNo()) {
        this.bankNo = other.bankNo;
      }
      if (other.isSetChannelTypeCode()) {
        this.channelTypeCode = other.channelTypeCode;
      }
      if (other.isSetBankCardType()) {
        this.bankCardType = other.bankCardType;
      }
      if (other.isSetProductCode()) {
        this.productCode = other.productCode;
      }
    }

    public selectPayChannelByType_args deepCopy() {
      return new selectPayChannelByType_args(this);
    }

    @Override
    public void clear() {
      this.bankNo = null;
      this.channelTypeCode = null;
      this.bankCardType = null;
      this.productCode = null;
    }

    public String getBankNo() {
      return this.bankNo;
    }

    public selectPayChannelByType_args setBankNo(String bankNo) {
      this.bankNo = bankNo;
      return this;
    }

    public void unsetBankNo() {
      this.bankNo = null;
    }

    /** Returns true if field bankNo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankNo() {
      return this.bankNo != null;
    }

    public void setBankNoIsSet(boolean value) {
      if (!value) {
        this.bankNo = null;
      }
    }

    public String getChannelTypeCode() {
      return this.channelTypeCode;
    }

    public selectPayChannelByType_args setChannelTypeCode(String channelTypeCode) {
      this.channelTypeCode = channelTypeCode;
      return this;
    }

    public void unsetChannelTypeCode() {
      this.channelTypeCode = null;
    }

    /** Returns true if field channelTypeCode is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelTypeCode() {
      return this.channelTypeCode != null;
    }

    public void setChannelTypeCodeIsSet(boolean value) {
      if (!value) {
        this.channelTypeCode = null;
      }
    }

    public String getBankCardType() {
      return this.bankCardType;
    }

    public selectPayChannelByType_args setBankCardType(String bankCardType) {
      this.bankCardType = bankCardType;
      return this;
    }

    public void unsetBankCardType() {
      this.bankCardType = null;
    }

    /** Returns true if field bankCardType is set (has been assigned a value) and false otherwise */
    public boolean isSetBankCardType() {
      return this.bankCardType != null;
    }

    public void setBankCardTypeIsSet(boolean value) {
      if (!value) {
        this.bankCardType = null;
      }
    }

    public String getProductCode() {
      return this.productCode;
    }

    public selectPayChannelByType_args setProductCode(String productCode) {
      this.productCode = productCode;
      return this;
    }

    public void unsetProductCode() {
      this.productCode = null;
    }

    /** Returns true if field productCode is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCode() {
      return this.productCode != null;
    }

    public void setProductCodeIsSet(boolean value) {
      if (!value) {
        this.productCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_NO:
        if (value == null) {
          unsetBankNo();
        } else {
          setBankNo((String)value);
        }
        break;

      case CHANNEL_TYPE_CODE:
        if (value == null) {
          unsetChannelTypeCode();
        } else {
          setChannelTypeCode((String)value);
        }
        break;

      case BANK_CARD_TYPE:
        if (value == null) {
          unsetBankCardType();
        } else {
          setBankCardType((String)value);
        }
        break;

      case PRODUCT_CODE:
        if (value == null) {
          unsetProductCode();
        } else {
          setProductCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_NO:
        return getBankNo();

      case CHANNEL_TYPE_CODE:
        return getChannelTypeCode();

      case BANK_CARD_TYPE:
        return getBankCardType();

      case PRODUCT_CODE:
        return getProductCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_NO:
        return isSetBankNo();
      case CHANNEL_TYPE_CODE:
        return isSetChannelTypeCode();
      case BANK_CARD_TYPE:
        return isSetBankCardType();
      case PRODUCT_CODE:
        return isSetProductCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectPayChannelByType_args)
        return this.equals((selectPayChannelByType_args)that);
      return false;
    }

    public boolean equals(selectPayChannelByType_args that) {
      if (that == null)
        return false;

      boolean this_present_bankNo = true && this.isSetBankNo();
      boolean that_present_bankNo = true && that.isSetBankNo();
      if (this_present_bankNo || that_present_bankNo) {
        if (!(this_present_bankNo && that_present_bankNo))
          return false;
        if (!this.bankNo.equals(that.bankNo))
          return false;
      }

      boolean this_present_channelTypeCode = true && this.isSetChannelTypeCode();
      boolean that_present_channelTypeCode = true && that.isSetChannelTypeCode();
      if (this_present_channelTypeCode || that_present_channelTypeCode) {
        if (!(this_present_channelTypeCode && that_present_channelTypeCode))
          return false;
        if (!this.channelTypeCode.equals(that.channelTypeCode))
          return false;
      }

      boolean this_present_bankCardType = true && this.isSetBankCardType();
      boolean that_present_bankCardType = true && that.isSetBankCardType();
      if (this_present_bankCardType || that_present_bankCardType) {
        if (!(this_present_bankCardType && that_present_bankCardType))
          return false;
        if (!this.bankCardType.equals(that.bankCardType))
          return false;
      }

      boolean this_present_productCode = true && this.isSetProductCode();
      boolean that_present_productCode = true && that.isSetProductCode();
      if (this_present_productCode || that_present_productCode) {
        if (!(this_present_productCode && that_present_productCode))
          return false;
        if (!this.productCode.equals(that.productCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bankNo = true && (isSetBankNo());
      list.add(present_bankNo);
      if (present_bankNo)
        list.add(bankNo);

      boolean present_channelTypeCode = true && (isSetChannelTypeCode());
      list.add(present_channelTypeCode);
      if (present_channelTypeCode)
        list.add(channelTypeCode);

      boolean present_bankCardType = true && (isSetBankCardType());
      list.add(present_bankCardType);
      if (present_bankCardType)
        list.add(bankCardType);

      boolean present_productCode = true && (isSetProductCode());
      list.add(present_productCode);
      if (present_productCode)
        list.add(productCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectPayChannelByType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankNo()).compareTo(other.isSetBankNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNo, other.bankNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelTypeCode()).compareTo(other.isSetChannelTypeCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelTypeCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelTypeCode, other.channelTypeCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankCardType()).compareTo(other.isSetBankCardType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankCardType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardType, other.bankCardType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductCode()).compareTo(other.isSetProductCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCode, other.productCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectPayChannelByType_args(");
      boolean first = true;

      sb.append("bankNo:");
      if (this.bankNo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelTypeCode:");
      if (this.channelTypeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.channelTypeCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankCardType:");
      if (this.bankCardType == null) {
        sb.append("null");
      } else {
        sb.append(this.bankCardType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productCode:");
      if (this.productCode == null) {
        sb.append("null");
      } else {
        sb.append(this.productCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectPayChannelByType_argsStandardSchemeFactory implements SchemeFactory {
      public selectPayChannelByType_argsStandardScheme getScheme() {
        return new selectPayChannelByType_argsStandardScheme();
      }
    }

    private static class selectPayChannelByType_argsStandardScheme extends StandardScheme<selectPayChannelByType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectPayChannelByType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankNo = iprot.readString();
                struct.setBankNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_TYPE_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelTypeCode = iprot.readString();
                struct.setChannelTypeCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BANK_CARD_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankCardType = iprot.readString();
                struct.setBankCardTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PRODUCT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productCode = iprot.readString();
                struct.setProductCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectPayChannelByType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankNo != null) {
          oprot.writeFieldBegin(BANK_NO_FIELD_DESC);
          oprot.writeString(struct.bankNo);
          oprot.writeFieldEnd();
        }
        if (struct.channelTypeCode != null) {
          oprot.writeFieldBegin(CHANNEL_TYPE_CODE_FIELD_DESC);
          oprot.writeString(struct.channelTypeCode);
          oprot.writeFieldEnd();
        }
        if (struct.bankCardType != null) {
          oprot.writeFieldBegin(BANK_CARD_TYPE_FIELD_DESC);
          oprot.writeString(struct.bankCardType);
          oprot.writeFieldEnd();
        }
        if (struct.productCode != null) {
          oprot.writeFieldBegin(PRODUCT_CODE_FIELD_DESC);
          oprot.writeString(struct.productCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectPayChannelByType_argsTupleSchemeFactory implements SchemeFactory {
      public selectPayChannelByType_argsTupleScheme getScheme() {
        return new selectPayChannelByType_argsTupleScheme();
      }
    }

    private static class selectPayChannelByType_argsTupleScheme extends TupleScheme<selectPayChannelByType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectPayChannelByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankNo()) {
          optionals.set(0);
        }
        if (struct.isSetChannelTypeCode()) {
          optionals.set(1);
        }
        if (struct.isSetBankCardType()) {
          optionals.set(2);
        }
        if (struct.isSetProductCode()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBankNo()) {
          oprot.writeString(struct.bankNo);
        }
        if (struct.isSetChannelTypeCode()) {
          oprot.writeString(struct.channelTypeCode);
        }
        if (struct.isSetBankCardType()) {
          oprot.writeString(struct.bankCardType);
        }
        if (struct.isSetProductCode()) {
          oprot.writeString(struct.productCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectPayChannelByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bankNo = iprot.readString();
          struct.setBankNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelTypeCode = iprot.readString();
          struct.setChannelTypeCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bankCardType = iprot.readString();
          struct.setBankCardTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.productCode = iprot.readString();
          struct.setProductCodeIsSet(true);
        }
      }
    }

  }

  public static class selectPayChannelByType_result implements org.apache.thrift.TBase<selectPayChannelByType_result, selectPayChannelByType_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectPayChannelByType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectPayChannelByType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectPayChannelByType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectPayChannelByType_resultTupleSchemeFactory());
    }

    public List<PayChannelThrift> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PayChannelThrift.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectPayChannelByType_result.class, metaDataMap);
    }

    public selectPayChannelByType_result() {
    }

    public selectPayChannelByType_result(
      List<PayChannelThrift> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectPayChannelByType_result(selectPayChannelByType_result other) {
      if (other.isSetSuccess()) {
        List<PayChannelThrift> __this__success = new ArrayList<PayChannelThrift>(other.success.size());
        for (PayChannelThrift other_element : other.success) {
          __this__success.add(new PayChannelThrift(other_element));
        }
        this.success = __this__success;
      }
    }

    public selectPayChannelByType_result deepCopy() {
      return new selectPayChannelByType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PayChannelThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PayChannelThrift elem) {
      if (this.success == null) {
        this.success = new ArrayList<PayChannelThrift>();
      }
      this.success.add(elem);
    }

    public List<PayChannelThrift> getSuccess() {
      return this.success;
    }

    public selectPayChannelByType_result setSuccess(List<PayChannelThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PayChannelThrift>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectPayChannelByType_result)
        return this.equals((selectPayChannelByType_result)that);
      return false;
    }

    public boolean equals(selectPayChannelByType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectPayChannelByType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectPayChannelByType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectPayChannelByType_resultStandardSchemeFactory implements SchemeFactory {
      public selectPayChannelByType_resultStandardScheme getScheme() {
        return new selectPayChannelByType_resultStandardScheme();
      }
    }

    private static class selectPayChannelByType_resultStandardScheme extends StandardScheme<selectPayChannelByType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectPayChannelByType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<PayChannelThrift>(_list8.size);
                  PayChannelThrift _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new PayChannelThrift();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectPayChannelByType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PayChannelThrift _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectPayChannelByType_resultTupleSchemeFactory implements SchemeFactory {
      public selectPayChannelByType_resultTupleScheme getScheme() {
        return new selectPayChannelByType_resultTupleScheme();
      }
    }

    private static class selectPayChannelByType_resultTupleScheme extends TupleScheme<selectPayChannelByType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectPayChannelByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PayChannelThrift _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectPayChannelByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PayChannelThrift>(_list13.size);
            PayChannelThrift _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new PayChannelThrift();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryChannelTypeList_args implements org.apache.thrift.TBase<queryChannelTypeList_args, queryChannelTypeList_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryChannelTypeList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryChannelTypeList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryChannelTypeList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryChannelTypeList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryChannelTypeList_args.class, metaDataMap);
    }

    public queryChannelTypeList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryChannelTypeList_args(queryChannelTypeList_args other) {
    }

    public queryChannelTypeList_args deepCopy() {
      return new queryChannelTypeList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryChannelTypeList_args)
        return this.equals((queryChannelTypeList_args)that);
      return false;
    }

    public boolean equals(queryChannelTypeList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(queryChannelTypeList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryChannelTypeList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryChannelTypeList_argsStandardSchemeFactory implements SchemeFactory {
      public queryChannelTypeList_argsStandardScheme getScheme() {
        return new queryChannelTypeList_argsStandardScheme();
      }
    }

    private static class queryChannelTypeList_argsStandardScheme extends StandardScheme<queryChannelTypeList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryChannelTypeList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryChannelTypeList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryChannelTypeList_argsTupleSchemeFactory implements SchemeFactory {
      public queryChannelTypeList_argsTupleScheme getScheme() {
        return new queryChannelTypeList_argsTupleScheme();
      }
    }

    private static class queryChannelTypeList_argsTupleScheme extends TupleScheme<queryChannelTypeList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryChannelTypeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryChannelTypeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queryChannelTypeList_result implements org.apache.thrift.TBase<queryChannelTypeList_result, queryChannelTypeList_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryChannelTypeList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryChannelTypeList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryChannelTypeList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryChannelTypeList_resultTupleSchemeFactory());
    }

    public List<PayChannelThrift> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PayChannelThrift.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryChannelTypeList_result.class, metaDataMap);
    }

    public queryChannelTypeList_result() {
    }

    public queryChannelTypeList_result(
      List<PayChannelThrift> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryChannelTypeList_result(queryChannelTypeList_result other) {
      if (other.isSetSuccess()) {
        List<PayChannelThrift> __this__success = new ArrayList<PayChannelThrift>(other.success.size());
        for (PayChannelThrift other_element : other.success) {
          __this__success.add(new PayChannelThrift(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryChannelTypeList_result deepCopy() {
      return new queryChannelTypeList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PayChannelThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PayChannelThrift elem) {
      if (this.success == null) {
        this.success = new ArrayList<PayChannelThrift>();
      }
      this.success.add(elem);
    }

    public List<PayChannelThrift> getSuccess() {
      return this.success;
    }

    public queryChannelTypeList_result setSuccess(List<PayChannelThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PayChannelThrift>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryChannelTypeList_result)
        return this.equals((queryChannelTypeList_result)that);
      return false;
    }

    public boolean equals(queryChannelTypeList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryChannelTypeList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryChannelTypeList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryChannelTypeList_resultStandardSchemeFactory implements SchemeFactory {
      public queryChannelTypeList_resultStandardScheme getScheme() {
        return new queryChannelTypeList_resultStandardScheme();
      }
    }

    private static class queryChannelTypeList_resultStandardScheme extends StandardScheme<queryChannelTypeList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryChannelTypeList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<PayChannelThrift>(_list16.size);
                  PayChannelThrift _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new PayChannelThrift();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryChannelTypeList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PayChannelThrift _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryChannelTypeList_resultTupleSchemeFactory implements SchemeFactory {
      public queryChannelTypeList_resultTupleScheme getScheme() {
        return new queryChannelTypeList_resultTupleScheme();
      }
    }

    private static class queryChannelTypeList_resultTupleScheme extends TupleScheme<queryChannelTypeList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryChannelTypeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PayChannelThrift _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryChannelTypeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PayChannelThrift>(_list21.size);
            PayChannelThrift _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new PayChannelThrift();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCertifyCost_args implements org.apache.thrift.TBase<queryCertifyCost_args, queryCertifyCost_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCertifyCost_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCertifyCost_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCertifyCost_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCertifyCost_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCertifyCost_args.class, metaDataMap);
    }

    public queryCertifyCost_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCertifyCost_args(queryCertifyCost_args other) {
    }

    public queryCertifyCost_args deepCopy() {
      return new queryCertifyCost_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCertifyCost_args)
        return this.equals((queryCertifyCost_args)that);
      return false;
    }

    public boolean equals(queryCertifyCost_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCertifyCost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCertifyCost_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCertifyCost_argsStandardSchemeFactory implements SchemeFactory {
      public queryCertifyCost_argsStandardScheme getScheme() {
        return new queryCertifyCost_argsStandardScheme();
      }
    }

    private static class queryCertifyCost_argsStandardScheme extends StandardScheme<queryCertifyCost_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCertifyCost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCertifyCost_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCertifyCost_argsTupleSchemeFactory implements SchemeFactory {
      public queryCertifyCost_argsTupleScheme getScheme() {
        return new queryCertifyCost_argsTupleScheme();
      }
    }

    private static class queryCertifyCost_argsTupleScheme extends TupleScheme<queryCertifyCost_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCertifyCost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCertifyCost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queryCertifyCost_result implements org.apache.thrift.TBase<queryCertifyCost_result, queryCertifyCost_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCertifyCost_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCertifyCost_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCertifyCost_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCertifyCost_resultTupleSchemeFactory());
    }

    public CertifyThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CertifyThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCertifyCost_result.class, metaDataMap);
    }

    public queryCertifyCost_result() {
    }

    public queryCertifyCost_result(
      CertifyThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCertifyCost_result(queryCertifyCost_result other) {
      if (other.isSetSuccess()) {
        this.success = new CertifyThrift(other.success);
      }
    }

    public queryCertifyCost_result deepCopy() {
      return new queryCertifyCost_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CertifyThrift getSuccess() {
      return this.success;
    }

    public queryCertifyCost_result setSuccess(CertifyThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CertifyThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCertifyCost_result)
        return this.equals((queryCertifyCost_result)that);
      return false;
    }

    public boolean equals(queryCertifyCost_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCertifyCost_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCertifyCost_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCertifyCost_resultStandardSchemeFactory implements SchemeFactory {
      public queryCertifyCost_resultStandardScheme getScheme() {
        return new queryCertifyCost_resultStandardScheme();
      }
    }

    private static class queryCertifyCost_resultStandardScheme extends StandardScheme<queryCertifyCost_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCertifyCost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CertifyThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCertifyCost_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCertifyCost_resultTupleSchemeFactory implements SchemeFactory {
      public queryCertifyCost_resultTupleScheme getScheme() {
        return new queryCertifyCost_resultTupleScheme();
      }
    }

    private static class queryCertifyCost_resultTupleScheme extends TupleScheme<queryCertifyCost_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCertifyCost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCertifyCost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CertifyThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCertifyChannelByChannelCode_args implements org.apache.thrift.TBase<queryCertifyChannelByChannelCode_args, queryCertifyChannelByChannelCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCertifyChannelByChannelCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCertifyChannelByChannelCode_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCertifyChannelByChannelCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCertifyChannelByChannelCode_argsTupleSchemeFactory());
    }

    public String channelCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_CODE((short)1, "channelCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_CODE
            return CHANNEL_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCertifyChannelByChannelCode_args.class, metaDataMap);
    }

    public queryCertifyChannelByChannelCode_args() {
    }

    public queryCertifyChannelByChannelCode_args(
      String channelCode)
    {
      this();
      this.channelCode = channelCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCertifyChannelByChannelCode_args(queryCertifyChannelByChannelCode_args other) {
      if (other.isSetChannelCode()) {
        this.channelCode = other.channelCode;
      }
    }

    public queryCertifyChannelByChannelCode_args deepCopy() {
      return new queryCertifyChannelByChannelCode_args(this);
    }

    @Override
    public void clear() {
      this.channelCode = null;
    }

    public String getChannelCode() {
      return this.channelCode;
    }

    public queryCertifyChannelByChannelCode_args setChannelCode(String channelCode) {
      this.channelCode = channelCode;
      return this;
    }

    public void unsetChannelCode() {
      this.channelCode = null;
    }

    /** Returns true if field channelCode is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelCode() {
      return this.channelCode != null;
    }

    public void setChannelCodeIsSet(boolean value) {
      if (!value) {
        this.channelCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_CODE:
        if (value == null) {
          unsetChannelCode();
        } else {
          setChannelCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_CODE:
        return getChannelCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_CODE:
        return isSetChannelCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCertifyChannelByChannelCode_args)
        return this.equals((queryCertifyChannelByChannelCode_args)that);
      return false;
    }

    public boolean equals(queryCertifyChannelByChannelCode_args that) {
      if (that == null)
        return false;

      boolean this_present_channelCode = true && this.isSetChannelCode();
      boolean that_present_channelCode = true && that.isSetChannelCode();
      if (this_present_channelCode || that_present_channelCode) {
        if (!(this_present_channelCode && that_present_channelCode))
          return false;
        if (!this.channelCode.equals(that.channelCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelCode = true && (isSetChannelCode());
      list.add(present_channelCode);
      if (present_channelCode)
        list.add(channelCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCertifyChannelByChannelCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelCode()).compareTo(other.isSetChannelCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCode, other.channelCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCertifyChannelByChannelCode_args(");
      boolean first = true;

      sb.append("channelCode:");
      if (this.channelCode == null) {
        sb.append("null");
      } else {
        sb.append(this.channelCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCertifyChannelByChannelCode_argsStandardSchemeFactory implements SchemeFactory {
      public queryCertifyChannelByChannelCode_argsStandardScheme getScheme() {
        return new queryCertifyChannelByChannelCode_argsStandardScheme();
      }
    }

    private static class queryCertifyChannelByChannelCode_argsStandardScheme extends StandardScheme<queryCertifyChannelByChannelCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCertifyChannelByChannelCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelCode = iprot.readString();
                struct.setChannelCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCertifyChannelByChannelCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelCode != null) {
          oprot.writeFieldBegin(CHANNEL_CODE_FIELD_DESC);
          oprot.writeString(struct.channelCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCertifyChannelByChannelCode_argsTupleSchemeFactory implements SchemeFactory {
      public queryCertifyChannelByChannelCode_argsTupleScheme getScheme() {
        return new queryCertifyChannelByChannelCode_argsTupleScheme();
      }
    }

    private static class queryCertifyChannelByChannelCode_argsTupleScheme extends TupleScheme<queryCertifyChannelByChannelCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCertifyChannelByChannelCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChannelCode()) {
          oprot.writeString(struct.channelCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCertifyChannelByChannelCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.channelCode = iprot.readString();
          struct.setChannelCodeIsSet(true);
        }
      }
    }

  }

  public static class queryCertifyChannelByChannelCode_result implements org.apache.thrift.TBase<queryCertifyChannelByChannelCode_result, queryCertifyChannelByChannelCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCertifyChannelByChannelCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCertifyChannelByChannelCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCertifyChannelByChannelCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCertifyChannelByChannelCode_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCertifyChannelByChannelCode_result.class, metaDataMap);
    }

    public queryCertifyChannelByChannelCode_result() {
    }

    public queryCertifyChannelByChannelCode_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCertifyChannelByChannelCode_result(queryCertifyChannelByChannelCode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryCertifyChannelByChannelCode_result deepCopy() {
      return new queryCertifyChannelByChannelCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryCertifyChannelByChannelCode_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCertifyChannelByChannelCode_result)
        return this.equals((queryCertifyChannelByChannelCode_result)that);
      return false;
    }

    public boolean equals(queryCertifyChannelByChannelCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCertifyChannelByChannelCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCertifyChannelByChannelCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCertifyChannelByChannelCode_resultStandardSchemeFactory implements SchemeFactory {
      public queryCertifyChannelByChannelCode_resultStandardScheme getScheme() {
        return new queryCertifyChannelByChannelCode_resultStandardScheme();
      }
    }

    private static class queryCertifyChannelByChannelCode_resultStandardScheme extends StandardScheme<queryCertifyChannelByChannelCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCertifyChannelByChannelCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCertifyChannelByChannelCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCertifyChannelByChannelCode_resultTupleSchemeFactory implements SchemeFactory {
      public queryCertifyChannelByChannelCode_resultTupleScheme getScheme() {
        return new queryCertifyChannelByChannelCode_resultTupleScheme();
      }
    }

    private static class queryCertifyChannelByChannelCode_resultTupleScheme extends TupleScheme<queryCertifyChannelByChannelCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCertifyChannelByChannelCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCertifyChannelByChannelCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRouteByChannelCode_args implements org.apache.thrift.TBase<getRouteByChannelCode_args, getRouteByChannelCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRouteByChannelCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRouteByChannelCode_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRouteByChannelCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRouteByChannelCode_argsTupleSchemeFactory());
    }

    public String channelCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_CODE((short)1, "channelCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_CODE
            return CHANNEL_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRouteByChannelCode_args.class, metaDataMap);
    }

    public getRouteByChannelCode_args() {
    }

    public getRouteByChannelCode_args(
      String channelCode)
    {
      this();
      this.channelCode = channelCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRouteByChannelCode_args(getRouteByChannelCode_args other) {
      if (other.isSetChannelCode()) {
        this.channelCode = other.channelCode;
      }
    }

    public getRouteByChannelCode_args deepCopy() {
      return new getRouteByChannelCode_args(this);
    }

    @Override
    public void clear() {
      this.channelCode = null;
    }

    public String getChannelCode() {
      return this.channelCode;
    }

    public getRouteByChannelCode_args setChannelCode(String channelCode) {
      this.channelCode = channelCode;
      return this;
    }

    public void unsetChannelCode() {
      this.channelCode = null;
    }

    /** Returns true if field channelCode is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelCode() {
      return this.channelCode != null;
    }

    public void setChannelCodeIsSet(boolean value) {
      if (!value) {
        this.channelCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_CODE:
        if (value == null) {
          unsetChannelCode();
        } else {
          setChannelCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_CODE:
        return getChannelCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_CODE:
        return isSetChannelCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRouteByChannelCode_args)
        return this.equals((getRouteByChannelCode_args)that);
      return false;
    }

    public boolean equals(getRouteByChannelCode_args that) {
      if (that == null)
        return false;

      boolean this_present_channelCode = true && this.isSetChannelCode();
      boolean that_present_channelCode = true && that.isSetChannelCode();
      if (this_present_channelCode || that_present_channelCode) {
        if (!(this_present_channelCode && that_present_channelCode))
          return false;
        if (!this.channelCode.equals(that.channelCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelCode = true && (isSetChannelCode());
      list.add(present_channelCode);
      if (present_channelCode)
        list.add(channelCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRouteByChannelCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelCode()).compareTo(other.isSetChannelCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCode, other.channelCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRouteByChannelCode_args(");
      boolean first = true;

      sb.append("channelCode:");
      if (this.channelCode == null) {
        sb.append("null");
      } else {
        sb.append(this.channelCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRouteByChannelCode_argsStandardSchemeFactory implements SchemeFactory {
      public getRouteByChannelCode_argsStandardScheme getScheme() {
        return new getRouteByChannelCode_argsStandardScheme();
      }
    }

    private static class getRouteByChannelCode_argsStandardScheme extends StandardScheme<getRouteByChannelCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRouteByChannelCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelCode = iprot.readString();
                struct.setChannelCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRouteByChannelCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelCode != null) {
          oprot.writeFieldBegin(CHANNEL_CODE_FIELD_DESC);
          oprot.writeString(struct.channelCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRouteByChannelCode_argsTupleSchemeFactory implements SchemeFactory {
      public getRouteByChannelCode_argsTupleScheme getScheme() {
        return new getRouteByChannelCode_argsTupleScheme();
      }
    }

    private static class getRouteByChannelCode_argsTupleScheme extends TupleScheme<getRouteByChannelCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRouteByChannelCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChannelCode()) {
          oprot.writeString(struct.channelCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRouteByChannelCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.channelCode = iprot.readString();
          struct.setChannelCodeIsSet(true);
        }
      }
    }

  }

  public static class getRouteByChannelCode_result implements org.apache.thrift.TBase<getRouteByChannelCode_result, getRouteByChannelCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRouteByChannelCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRouteByChannelCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRouteByChannelCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRouteByChannelCode_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRouteByChannelCode_result.class, metaDataMap);
    }

    public getRouteByChannelCode_result() {
    }

    public getRouteByChannelCode_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRouteByChannelCode_result(getRouteByChannelCode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getRouteByChannelCode_result deepCopy() {
      return new getRouteByChannelCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getRouteByChannelCode_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRouteByChannelCode_result)
        return this.equals((getRouteByChannelCode_result)that);
      return false;
    }

    public boolean equals(getRouteByChannelCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRouteByChannelCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRouteByChannelCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRouteByChannelCode_resultStandardSchemeFactory implements SchemeFactory {
      public getRouteByChannelCode_resultStandardScheme getScheme() {
        return new getRouteByChannelCode_resultStandardScheme();
      }
    }

    private static class getRouteByChannelCode_resultStandardScheme extends StandardScheme<getRouteByChannelCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRouteByChannelCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRouteByChannelCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRouteByChannelCode_resultTupleSchemeFactory implements SchemeFactory {
      public getRouteByChannelCode_resultTupleScheme getScheme() {
        return new getRouteByChannelCode_resultTupleScheme();
      }
    }

    private static class getRouteByChannelCode_resultTupleScheme extends TupleScheme<getRouteByChannelCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRouteByChannelCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRouteByChannelCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryPayChannelByProductCode_args implements org.apache.thrift.TBase<queryPayChannelByProductCode_args, queryPayChannelByProductCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryPayChannelByProductCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPayChannelByProductCode_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("productCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPayChannelByProductCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPayChannelByProductCode_argsTupleSchemeFactory());
    }

    public String productCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_CODE((short)1, "productCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_CODE
            return PRODUCT_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("productCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPayChannelByProductCode_args.class, metaDataMap);
    }

    public queryPayChannelByProductCode_args() {
    }

    public queryPayChannelByProductCode_args(
      String productCode)
    {
      this();
      this.productCode = productCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPayChannelByProductCode_args(queryPayChannelByProductCode_args other) {
      if (other.isSetProductCode()) {
        this.productCode = other.productCode;
      }
    }

    public queryPayChannelByProductCode_args deepCopy() {
      return new queryPayChannelByProductCode_args(this);
    }

    @Override
    public void clear() {
      this.productCode = null;
    }

    public String getProductCode() {
      return this.productCode;
    }

    public queryPayChannelByProductCode_args setProductCode(String productCode) {
      this.productCode = productCode;
      return this;
    }

    public void unsetProductCode() {
      this.productCode = null;
    }

    /** Returns true if field productCode is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCode() {
      return this.productCode != null;
    }

    public void setProductCodeIsSet(boolean value) {
      if (!value) {
        this.productCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_CODE:
        if (value == null) {
          unsetProductCode();
        } else {
          setProductCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_CODE:
        return getProductCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_CODE:
        return isSetProductCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPayChannelByProductCode_args)
        return this.equals((queryPayChannelByProductCode_args)that);
      return false;
    }

    public boolean equals(queryPayChannelByProductCode_args that) {
      if (that == null)
        return false;

      boolean this_present_productCode = true && this.isSetProductCode();
      boolean that_present_productCode = true && that.isSetProductCode();
      if (this_present_productCode || that_present_productCode) {
        if (!(this_present_productCode && that_present_productCode))
          return false;
        if (!this.productCode.equals(that.productCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCode = true && (isSetProductCode());
      list.add(present_productCode);
      if (present_productCode)
        list.add(productCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPayChannelByProductCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCode()).compareTo(other.isSetProductCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCode, other.productCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPayChannelByProductCode_args(");
      boolean first = true;

      sb.append("productCode:");
      if (this.productCode == null) {
        sb.append("null");
      } else {
        sb.append(this.productCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPayChannelByProductCode_argsStandardSchemeFactory implements SchemeFactory {
      public queryPayChannelByProductCode_argsStandardScheme getScheme() {
        return new queryPayChannelByProductCode_argsStandardScheme();
      }
    }

    private static class queryPayChannelByProductCode_argsStandardScheme extends StandardScheme<queryPayChannelByProductCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPayChannelByProductCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productCode = iprot.readString();
                struct.setProductCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPayChannelByProductCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCode != null) {
          oprot.writeFieldBegin(PRODUCT_CODE_FIELD_DESC);
          oprot.writeString(struct.productCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPayChannelByProductCode_argsTupleSchemeFactory implements SchemeFactory {
      public queryPayChannelByProductCode_argsTupleScheme getScheme() {
        return new queryPayChannelByProductCode_argsTupleScheme();
      }
    }

    private static class queryPayChannelByProductCode_argsTupleScheme extends TupleScheme<queryPayChannelByProductCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPayChannelByProductCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductCode()) {
          oprot.writeString(struct.productCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPayChannelByProductCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productCode = iprot.readString();
          struct.setProductCodeIsSet(true);
        }
      }
    }

  }

  public static class queryPayChannelByProductCode_result implements org.apache.thrift.TBase<queryPayChannelByProductCode_result, queryPayChannelByProductCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryPayChannelByProductCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPayChannelByProductCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPayChannelByProductCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPayChannelByProductCode_resultTupleSchemeFactory());
    }

    public List<PayChannelThrift> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PayChannelThrift.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPayChannelByProductCode_result.class, metaDataMap);
    }

    public queryPayChannelByProductCode_result() {
    }

    public queryPayChannelByProductCode_result(
      List<PayChannelThrift> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPayChannelByProductCode_result(queryPayChannelByProductCode_result other) {
      if (other.isSetSuccess()) {
        List<PayChannelThrift> __this__success = new ArrayList<PayChannelThrift>(other.success.size());
        for (PayChannelThrift other_element : other.success) {
          __this__success.add(new PayChannelThrift(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryPayChannelByProductCode_result deepCopy() {
      return new queryPayChannelByProductCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PayChannelThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PayChannelThrift elem) {
      if (this.success == null) {
        this.success = new ArrayList<PayChannelThrift>();
      }
      this.success.add(elem);
    }

    public List<PayChannelThrift> getSuccess() {
      return this.success;
    }

    public queryPayChannelByProductCode_result setSuccess(List<PayChannelThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PayChannelThrift>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPayChannelByProductCode_result)
        return this.equals((queryPayChannelByProductCode_result)that);
      return false;
    }

    public boolean equals(queryPayChannelByProductCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPayChannelByProductCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPayChannelByProductCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPayChannelByProductCode_resultStandardSchemeFactory implements SchemeFactory {
      public queryPayChannelByProductCode_resultStandardScheme getScheme() {
        return new queryPayChannelByProductCode_resultStandardScheme();
      }
    }

    private static class queryPayChannelByProductCode_resultStandardScheme extends StandardScheme<queryPayChannelByProductCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPayChannelByProductCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<PayChannelThrift>(_list24.size);
                  PayChannelThrift _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new PayChannelThrift();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPayChannelByProductCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PayChannelThrift _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPayChannelByProductCode_resultTupleSchemeFactory implements SchemeFactory {
      public queryPayChannelByProductCode_resultTupleScheme getScheme() {
        return new queryPayChannelByProductCode_resultTupleScheme();
      }
    }

    private static class queryPayChannelByProductCode_resultTupleScheme extends TupleScheme<queryPayChannelByProductCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPayChannelByProductCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PayChannelThrift _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPayChannelByProductCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PayChannelThrift>(_list29.size);
            PayChannelThrift _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new PayChannelThrift();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bankIdSync_args implements org.apache.thrift.TBase<bankIdSync_args, bankIdSync_args._Fields>, java.io.Serializable, Cloneable, Comparable<bankIdSync_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bankIdSync_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bankIdSync_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bankIdSync_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bankIdSync_args.class, metaDataMap);
    }

    public bankIdSync_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bankIdSync_args(bankIdSync_args other) {
    }

    public bankIdSync_args deepCopy() {
      return new bankIdSync_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bankIdSync_args)
        return this.equals((bankIdSync_args)that);
      return false;
    }

    public boolean equals(bankIdSync_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(bankIdSync_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bankIdSync_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bankIdSync_argsStandardSchemeFactory implements SchemeFactory {
      public bankIdSync_argsStandardScheme getScheme() {
        return new bankIdSync_argsStandardScheme();
      }
    }

    private static class bankIdSync_argsStandardScheme extends StandardScheme<bankIdSync_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bankIdSync_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bankIdSync_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bankIdSync_argsTupleSchemeFactory implements SchemeFactory {
      public bankIdSync_argsTupleScheme getScheme() {
        return new bankIdSync_argsTupleScheme();
      }
    }

    private static class bankIdSync_argsTupleScheme extends TupleScheme<bankIdSync_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bankIdSync_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bankIdSync_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class bankIdSync_result implements org.apache.thrift.TBase<bankIdSync_result, bankIdSync_result._Fields>, java.io.Serializable, Cloneable, Comparable<bankIdSync_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bankIdSync_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bankIdSync_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bankIdSync_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bankIdSync_result.class, metaDataMap);
    }

    public bankIdSync_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bankIdSync_result(bankIdSync_result other) {
    }

    public bankIdSync_result deepCopy() {
      return new bankIdSync_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bankIdSync_result)
        return this.equals((bankIdSync_result)that);
      return false;
    }

    public boolean equals(bankIdSync_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(bankIdSync_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bankIdSync_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bankIdSync_resultStandardSchemeFactory implements SchemeFactory {
      public bankIdSync_resultStandardScheme getScheme() {
        return new bankIdSync_resultStandardScheme();
      }
    }

    private static class bankIdSync_resultStandardScheme extends StandardScheme<bankIdSync_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bankIdSync_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bankIdSync_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bankIdSync_resultTupleSchemeFactory implements SchemeFactory {
      public bankIdSync_resultTupleScheme getScheme() {
        return new bankIdSync_resultTupleScheme();
      }
    }

    private static class bankIdSync_resultTupleScheme extends TupleScheme<bankIdSync_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bankIdSync_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bankIdSync_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queryBankId_args implements org.apache.thrift.TBase<queryBankId_args, queryBankId_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBankId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBankId_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBankId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBankId_argsTupleSchemeFactory());
    }

    public String channelCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_CODE((short)1, "channelCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_CODE
            return CHANNEL_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBankId_args.class, metaDataMap);
    }

    public queryBankId_args() {
    }

    public queryBankId_args(
      String channelCode)
    {
      this();
      this.channelCode = channelCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBankId_args(queryBankId_args other) {
      if (other.isSetChannelCode()) {
        this.channelCode = other.channelCode;
      }
    }

    public queryBankId_args deepCopy() {
      return new queryBankId_args(this);
    }

    @Override
    public void clear() {
      this.channelCode = null;
    }

    public String getChannelCode() {
      return this.channelCode;
    }

    public queryBankId_args setChannelCode(String channelCode) {
      this.channelCode = channelCode;
      return this;
    }

    public void unsetChannelCode() {
      this.channelCode = null;
    }

    /** Returns true if field channelCode is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelCode() {
      return this.channelCode != null;
    }

    public void setChannelCodeIsSet(boolean value) {
      if (!value) {
        this.channelCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_CODE:
        if (value == null) {
          unsetChannelCode();
        } else {
          setChannelCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_CODE:
        return getChannelCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_CODE:
        return isSetChannelCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBankId_args)
        return this.equals((queryBankId_args)that);
      return false;
    }

    public boolean equals(queryBankId_args that) {
      if (that == null)
        return false;

      boolean this_present_channelCode = true && this.isSetChannelCode();
      boolean that_present_channelCode = true && that.isSetChannelCode();
      if (this_present_channelCode || that_present_channelCode) {
        if (!(this_present_channelCode && that_present_channelCode))
          return false;
        if (!this.channelCode.equals(that.channelCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelCode = true && (isSetChannelCode());
      list.add(present_channelCode);
      if (present_channelCode)
        list.add(channelCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBankId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelCode()).compareTo(other.isSetChannelCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCode, other.channelCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBankId_args(");
      boolean first = true;

      sb.append("channelCode:");
      if (this.channelCode == null) {
        sb.append("null");
      } else {
        sb.append(this.channelCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBankId_argsStandardSchemeFactory implements SchemeFactory {
      public queryBankId_argsStandardScheme getScheme() {
        return new queryBankId_argsStandardScheme();
      }
    }

    private static class queryBankId_argsStandardScheme extends StandardScheme<queryBankId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBankId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelCode = iprot.readString();
                struct.setChannelCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBankId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelCode != null) {
          oprot.writeFieldBegin(CHANNEL_CODE_FIELD_DESC);
          oprot.writeString(struct.channelCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBankId_argsTupleSchemeFactory implements SchemeFactory {
      public queryBankId_argsTupleScheme getScheme() {
        return new queryBankId_argsTupleScheme();
      }
    }

    private static class queryBankId_argsTupleScheme extends TupleScheme<queryBankId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBankId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChannelCode()) {
          oprot.writeString(struct.channelCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBankId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.channelCode = iprot.readString();
          struct.setChannelCodeIsSet(true);
        }
      }
    }

  }

  public static class queryBankId_result implements org.apache.thrift.TBase<queryBankId_result, queryBankId_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBankId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBankId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBankId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBankId_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBankId_result.class, metaDataMap);
    }

    public queryBankId_result() {
    }

    public queryBankId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBankId_result(queryBankId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryBankId_result deepCopy() {
      return new queryBankId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryBankId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBankId_result)
        return this.equals((queryBankId_result)that);
      return false;
    }

    public boolean equals(queryBankId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBankId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBankId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBankId_resultStandardSchemeFactory implements SchemeFactory {
      public queryBankId_resultStandardScheme getScheme() {
        return new queryBankId_resultStandardScheme();
      }
    }

    private static class queryBankId_resultStandardScheme extends StandardScheme<queryBankId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBankId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBankId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBankId_resultTupleSchemeFactory implements SchemeFactory {
      public queryBankId_resultTupleScheme getScheme() {
        return new queryBankId_resultTupleScheme();
      }
    }

    private static class queryBankId_resultTupleScheme extends TupleScheme<queryBankId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBankId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBankId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class selectPayChannelByMerchantId_args implements org.apache.thrift.TBase<selectPayChannelByMerchantId_args, selectPayChannelByMerchantId_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectPayChannelByMerchantId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectPayChannelByMerchantId_args");

    private static final org.apache.thrift.protocol.TField BANK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNo", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelTypeCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PRODUCT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("productCode", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectPayChannelByMerchantId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectPayChannelByMerchantId_argsTupleSchemeFactory());
    }

    public String bankNo; // required
    public String channelTypeCode; // required
    public String bankCardType; // required
    public String merchantId; // required
    public String productCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_NO((short)1, "bankNo"),
      CHANNEL_TYPE_CODE((short)2, "channelTypeCode"),
      BANK_CARD_TYPE((short)3, "bankCardType"),
      MERCHANT_ID((short)4, "merchantId"),
      PRODUCT_CODE((short)5, "productCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_NO
            return BANK_NO;
          case 2: // CHANNEL_TYPE_CODE
            return CHANNEL_TYPE_CODE;
          case 3: // BANK_CARD_TYPE
            return BANK_CARD_TYPE;
          case 4: // MERCHANT_ID
            return MERCHANT_ID;
          case 5: // PRODUCT_CODE
            return PRODUCT_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_NO, new org.apache.thrift.meta_data.FieldMetaData("bankNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("channelTypeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRODUCT_CODE, new org.apache.thrift.meta_data.FieldMetaData("productCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectPayChannelByMerchantId_args.class, metaDataMap);
    }

    public selectPayChannelByMerchantId_args() {
    }

    public selectPayChannelByMerchantId_args(
      String bankNo,
      String channelTypeCode,
      String bankCardType,
      String merchantId,
      String productCode)
    {
      this();
      this.bankNo = bankNo;
      this.channelTypeCode = channelTypeCode;
      this.bankCardType = bankCardType;
      this.merchantId = merchantId;
      this.productCode = productCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectPayChannelByMerchantId_args(selectPayChannelByMerchantId_args other) {
      if (other.isSetBankNo()) {
        this.bankNo = other.bankNo;
      }
      if (other.isSetChannelTypeCode()) {
        this.channelTypeCode = other.channelTypeCode;
      }
      if (other.isSetBankCardType()) {
        this.bankCardType = other.bankCardType;
      }
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetProductCode()) {
        this.productCode = other.productCode;
      }
    }

    public selectPayChannelByMerchantId_args deepCopy() {
      return new selectPayChannelByMerchantId_args(this);
    }

    @Override
    public void clear() {
      this.bankNo = null;
      this.channelTypeCode = null;
      this.bankCardType = null;
      this.merchantId = null;
      this.productCode = null;
    }

    public String getBankNo() {
      return this.bankNo;
    }

    public selectPayChannelByMerchantId_args setBankNo(String bankNo) {
      this.bankNo = bankNo;
      return this;
    }

    public void unsetBankNo() {
      this.bankNo = null;
    }

    /** Returns true if field bankNo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankNo() {
      return this.bankNo != null;
    }

    public void setBankNoIsSet(boolean value) {
      if (!value) {
        this.bankNo = null;
      }
    }

    public String getChannelTypeCode() {
      return this.channelTypeCode;
    }

    public selectPayChannelByMerchantId_args setChannelTypeCode(String channelTypeCode) {
      this.channelTypeCode = channelTypeCode;
      return this;
    }

    public void unsetChannelTypeCode() {
      this.channelTypeCode = null;
    }

    /** Returns true if field channelTypeCode is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelTypeCode() {
      return this.channelTypeCode != null;
    }

    public void setChannelTypeCodeIsSet(boolean value) {
      if (!value) {
        this.channelTypeCode = null;
      }
    }

    public String getBankCardType() {
      return this.bankCardType;
    }

    public selectPayChannelByMerchantId_args setBankCardType(String bankCardType) {
      this.bankCardType = bankCardType;
      return this;
    }

    public void unsetBankCardType() {
      this.bankCardType = null;
    }

    /** Returns true if field bankCardType is set (has been assigned a value) and false otherwise */
    public boolean isSetBankCardType() {
      return this.bankCardType != null;
    }

    public void setBankCardTypeIsSet(boolean value) {
      if (!value) {
        this.bankCardType = null;
      }
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public selectPayChannelByMerchantId_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getProductCode() {
      return this.productCode;
    }

    public selectPayChannelByMerchantId_args setProductCode(String productCode) {
      this.productCode = productCode;
      return this;
    }

    public void unsetProductCode() {
      this.productCode = null;
    }

    /** Returns true if field productCode is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCode() {
      return this.productCode != null;
    }

    public void setProductCodeIsSet(boolean value) {
      if (!value) {
        this.productCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_NO:
        if (value == null) {
          unsetBankNo();
        } else {
          setBankNo((String)value);
        }
        break;

      case CHANNEL_TYPE_CODE:
        if (value == null) {
          unsetChannelTypeCode();
        } else {
          setChannelTypeCode((String)value);
        }
        break;

      case BANK_CARD_TYPE:
        if (value == null) {
          unsetBankCardType();
        } else {
          setBankCardType((String)value);
        }
        break;

      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case PRODUCT_CODE:
        if (value == null) {
          unsetProductCode();
        } else {
          setProductCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_NO:
        return getBankNo();

      case CHANNEL_TYPE_CODE:
        return getChannelTypeCode();

      case BANK_CARD_TYPE:
        return getBankCardType();

      case MERCHANT_ID:
        return getMerchantId();

      case PRODUCT_CODE:
        return getProductCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_NO:
        return isSetBankNo();
      case CHANNEL_TYPE_CODE:
        return isSetChannelTypeCode();
      case BANK_CARD_TYPE:
        return isSetBankCardType();
      case MERCHANT_ID:
        return isSetMerchantId();
      case PRODUCT_CODE:
        return isSetProductCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectPayChannelByMerchantId_args)
        return this.equals((selectPayChannelByMerchantId_args)that);
      return false;
    }

    public boolean equals(selectPayChannelByMerchantId_args that) {
      if (that == null)
        return false;

      boolean this_present_bankNo = true && this.isSetBankNo();
      boolean that_present_bankNo = true && that.isSetBankNo();
      if (this_present_bankNo || that_present_bankNo) {
        if (!(this_present_bankNo && that_present_bankNo))
          return false;
        if (!this.bankNo.equals(that.bankNo))
          return false;
      }

      boolean this_present_channelTypeCode = true && this.isSetChannelTypeCode();
      boolean that_present_channelTypeCode = true && that.isSetChannelTypeCode();
      if (this_present_channelTypeCode || that_present_channelTypeCode) {
        if (!(this_present_channelTypeCode && that_present_channelTypeCode))
          return false;
        if (!this.channelTypeCode.equals(that.channelTypeCode))
          return false;
      }

      boolean this_present_bankCardType = true && this.isSetBankCardType();
      boolean that_present_bankCardType = true && that.isSetBankCardType();
      if (this_present_bankCardType || that_present_bankCardType) {
        if (!(this_present_bankCardType && that_present_bankCardType))
          return false;
        if (!this.bankCardType.equals(that.bankCardType))
          return false;
      }

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_productCode = true && this.isSetProductCode();
      boolean that_present_productCode = true && that.isSetProductCode();
      if (this_present_productCode || that_present_productCode) {
        if (!(this_present_productCode && that_present_productCode))
          return false;
        if (!this.productCode.equals(that.productCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bankNo = true && (isSetBankNo());
      list.add(present_bankNo);
      if (present_bankNo)
        list.add(bankNo);

      boolean present_channelTypeCode = true && (isSetChannelTypeCode());
      list.add(present_channelTypeCode);
      if (present_channelTypeCode)
        list.add(channelTypeCode);

      boolean present_bankCardType = true && (isSetBankCardType());
      list.add(present_bankCardType);
      if (present_bankCardType)
        list.add(bankCardType);

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_productCode = true && (isSetProductCode());
      list.add(present_productCode);
      if (present_productCode)
        list.add(productCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectPayChannelByMerchantId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankNo()).compareTo(other.isSetBankNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNo, other.bankNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelTypeCode()).compareTo(other.isSetChannelTypeCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelTypeCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelTypeCode, other.channelTypeCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankCardType()).compareTo(other.isSetBankCardType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankCardType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardType, other.bankCardType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductCode()).compareTo(other.isSetProductCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCode, other.productCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectPayChannelByMerchantId_args(");
      boolean first = true;

      sb.append("bankNo:");
      if (this.bankNo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelTypeCode:");
      if (this.channelTypeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.channelTypeCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankCardType:");
      if (this.bankCardType == null) {
        sb.append("null");
      } else {
        sb.append(this.bankCardType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productCode:");
      if (this.productCode == null) {
        sb.append("null");
      } else {
        sb.append(this.productCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectPayChannelByMerchantId_argsStandardSchemeFactory implements SchemeFactory {
      public selectPayChannelByMerchantId_argsStandardScheme getScheme() {
        return new selectPayChannelByMerchantId_argsStandardScheme();
      }
    }

    private static class selectPayChannelByMerchantId_argsStandardScheme extends StandardScheme<selectPayChannelByMerchantId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectPayChannelByMerchantId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankNo = iprot.readString();
                struct.setBankNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_TYPE_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelTypeCode = iprot.readString();
                struct.setChannelTypeCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BANK_CARD_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankCardType = iprot.readString();
                struct.setBankCardTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PRODUCT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productCode = iprot.readString();
                struct.setProductCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectPayChannelByMerchantId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankNo != null) {
          oprot.writeFieldBegin(BANK_NO_FIELD_DESC);
          oprot.writeString(struct.bankNo);
          oprot.writeFieldEnd();
        }
        if (struct.channelTypeCode != null) {
          oprot.writeFieldBegin(CHANNEL_TYPE_CODE_FIELD_DESC);
          oprot.writeString(struct.channelTypeCode);
          oprot.writeFieldEnd();
        }
        if (struct.bankCardType != null) {
          oprot.writeFieldBegin(BANK_CARD_TYPE_FIELD_DESC);
          oprot.writeString(struct.bankCardType);
          oprot.writeFieldEnd();
        }
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.productCode != null) {
          oprot.writeFieldBegin(PRODUCT_CODE_FIELD_DESC);
          oprot.writeString(struct.productCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectPayChannelByMerchantId_argsTupleSchemeFactory implements SchemeFactory {
      public selectPayChannelByMerchantId_argsTupleScheme getScheme() {
        return new selectPayChannelByMerchantId_argsTupleScheme();
      }
    }

    private static class selectPayChannelByMerchantId_argsTupleScheme extends TupleScheme<selectPayChannelByMerchantId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectPayChannelByMerchantId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankNo()) {
          optionals.set(0);
        }
        if (struct.isSetChannelTypeCode()) {
          optionals.set(1);
        }
        if (struct.isSetBankCardType()) {
          optionals.set(2);
        }
        if (struct.isSetMerchantId()) {
          optionals.set(3);
        }
        if (struct.isSetProductCode()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetBankNo()) {
          oprot.writeString(struct.bankNo);
        }
        if (struct.isSetChannelTypeCode()) {
          oprot.writeString(struct.channelTypeCode);
        }
        if (struct.isSetBankCardType()) {
          oprot.writeString(struct.bankCardType);
        }
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetProductCode()) {
          oprot.writeString(struct.productCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectPayChannelByMerchantId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.bankNo = iprot.readString();
          struct.setBankNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelTypeCode = iprot.readString();
          struct.setChannelTypeCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bankCardType = iprot.readString();
          struct.setBankCardTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.productCode = iprot.readString();
          struct.setProductCodeIsSet(true);
        }
      }
    }

  }

  public static class selectPayChannelByMerchantId_result implements org.apache.thrift.TBase<selectPayChannelByMerchantId_result, selectPayChannelByMerchantId_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectPayChannelByMerchantId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectPayChannelByMerchantId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectPayChannelByMerchantId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectPayChannelByMerchantId_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectPayChannelByMerchantId_result.class, metaDataMap);
    }

    public selectPayChannelByMerchantId_result() {
    }

    public selectPayChannelByMerchantId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectPayChannelByMerchantId_result(selectPayChannelByMerchantId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public selectPayChannelByMerchantId_result deepCopy() {
      return new selectPayChannelByMerchantId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public selectPayChannelByMerchantId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectPayChannelByMerchantId_result)
        return this.equals((selectPayChannelByMerchantId_result)that);
      return false;
    }

    public boolean equals(selectPayChannelByMerchantId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectPayChannelByMerchantId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectPayChannelByMerchantId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectPayChannelByMerchantId_resultStandardSchemeFactory implements SchemeFactory {
      public selectPayChannelByMerchantId_resultStandardScheme getScheme() {
        return new selectPayChannelByMerchantId_resultStandardScheme();
      }
    }

    private static class selectPayChannelByMerchantId_resultStandardScheme extends StandardScheme<selectPayChannelByMerchantId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectPayChannelByMerchantId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectPayChannelByMerchantId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectPayChannelByMerchantId_resultTupleSchemeFactory implements SchemeFactory {
      public selectPayChannelByMerchantId_resultTupleScheme getScheme() {
        return new selectPayChannelByMerchantId_resultTupleScheme();
      }
    }

    private static class selectPayChannelByMerchantId_resultTupleScheme extends TupleScheme<selectPayChannelByMerchantId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectPayChannelByMerchantId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectPayChannelByMerchantId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCertifyChannelByChannelType_args implements org.apache.thrift.TBase<queryCertifyChannelByChannelType_args, queryCertifyChannelByChannelType_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCertifyChannelByChannelType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCertifyChannelByChannelType_args");

    private static final org.apache.thrift.protocol.TField CHANNEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelType", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCertifyChannelByChannelType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCertifyChannelByChannelType_argsTupleSchemeFactory());
    }

    public String channelType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHANNEL_TYPE((short)1, "channelType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHANNEL_TYPE
            return CHANNEL_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHANNEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("channelType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCertifyChannelByChannelType_args.class, metaDataMap);
    }

    public queryCertifyChannelByChannelType_args() {
    }

    public queryCertifyChannelByChannelType_args(
      String channelType)
    {
      this();
      this.channelType = channelType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCertifyChannelByChannelType_args(queryCertifyChannelByChannelType_args other) {
      if (other.isSetChannelType()) {
        this.channelType = other.channelType;
      }
    }

    public queryCertifyChannelByChannelType_args deepCopy() {
      return new queryCertifyChannelByChannelType_args(this);
    }

    @Override
    public void clear() {
      this.channelType = null;
    }

    public String getChannelType() {
      return this.channelType;
    }

    public queryCertifyChannelByChannelType_args setChannelType(String channelType) {
      this.channelType = channelType;
      return this;
    }

    public void unsetChannelType() {
      this.channelType = null;
    }

    /** Returns true if field channelType is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelType() {
      return this.channelType != null;
    }

    public void setChannelTypeIsSet(boolean value) {
      if (!value) {
        this.channelType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHANNEL_TYPE:
        if (value == null) {
          unsetChannelType();
        } else {
          setChannelType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHANNEL_TYPE:
        return getChannelType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHANNEL_TYPE:
        return isSetChannelType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCertifyChannelByChannelType_args)
        return this.equals((queryCertifyChannelByChannelType_args)that);
      return false;
    }

    public boolean equals(queryCertifyChannelByChannelType_args that) {
      if (that == null)
        return false;

      boolean this_present_channelType = true && this.isSetChannelType();
      boolean that_present_channelType = true && that.isSetChannelType();
      if (this_present_channelType || that_present_channelType) {
        if (!(this_present_channelType && that_present_channelType))
          return false;
        if (!this.channelType.equals(that.channelType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_channelType = true && (isSetChannelType());
      list.add(present_channelType);
      if (present_channelType)
        list.add(channelType);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCertifyChannelByChannelType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChannelType()).compareTo(other.isSetChannelType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelType, other.channelType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCertifyChannelByChannelType_args(");
      boolean first = true;

      sb.append("channelType:");
      if (this.channelType == null) {
        sb.append("null");
      } else {
        sb.append(this.channelType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCertifyChannelByChannelType_argsStandardSchemeFactory implements SchemeFactory {
      public queryCertifyChannelByChannelType_argsStandardScheme getScheme() {
        return new queryCertifyChannelByChannelType_argsStandardScheme();
      }
    }

    private static class queryCertifyChannelByChannelType_argsStandardScheme extends StandardScheme<queryCertifyChannelByChannelType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCertifyChannelByChannelType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHANNEL_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelType = iprot.readString();
                struct.setChannelTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCertifyChannelByChannelType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.channelType != null) {
          oprot.writeFieldBegin(CHANNEL_TYPE_FIELD_DESC);
          oprot.writeString(struct.channelType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCertifyChannelByChannelType_argsTupleSchemeFactory implements SchemeFactory {
      public queryCertifyChannelByChannelType_argsTupleScheme getScheme() {
        return new queryCertifyChannelByChannelType_argsTupleScheme();
      }
    }

    private static class queryCertifyChannelByChannelType_argsTupleScheme extends TupleScheme<queryCertifyChannelByChannelType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCertifyChannelByChannelType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChannelType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChannelType()) {
          oprot.writeString(struct.channelType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCertifyChannelByChannelType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.channelType = iprot.readString();
          struct.setChannelTypeIsSet(true);
        }
      }
    }

  }

  public static class queryCertifyChannelByChannelType_result implements org.apache.thrift.TBase<queryCertifyChannelByChannelType_result, queryCertifyChannelByChannelType_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCertifyChannelByChannelType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCertifyChannelByChannelType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCertifyChannelByChannelType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCertifyChannelByChannelType_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCertifyChannelByChannelType_result.class, metaDataMap);
    }

    public queryCertifyChannelByChannelType_result() {
    }

    public queryCertifyChannelByChannelType_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCertifyChannelByChannelType_result(queryCertifyChannelByChannelType_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queryCertifyChannelByChannelType_result deepCopy() {
      return new queryCertifyChannelByChannelType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryCertifyChannelByChannelType_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCertifyChannelByChannelType_result)
        return this.equals((queryCertifyChannelByChannelType_result)that);
      return false;
    }

    public boolean equals(queryCertifyChannelByChannelType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCertifyChannelByChannelType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCertifyChannelByChannelType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCertifyChannelByChannelType_resultStandardSchemeFactory implements SchemeFactory {
      public queryCertifyChannelByChannelType_resultStandardScheme getScheme() {
        return new queryCertifyChannelByChannelType_resultStandardScheme();
      }
    }

    private static class queryCertifyChannelByChannelType_resultStandardScheme extends StandardScheme<queryCertifyChannelByChannelType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCertifyChannelByChannelType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCertifyChannelByChannelType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCertifyChannelByChannelType_resultTupleSchemeFactory implements SchemeFactory {
      public queryCertifyChannelByChannelType_resultTupleScheme getScheme() {
        return new queryCertifyChannelByChannelType_resultTupleScheme();
      }
    }

    private static class queryCertifyChannelByChannelType_resultTupleScheme extends TupleScheme<queryCertifyChannelByChannelType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCertifyChannelByChannelType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCertifyChannelByChannelType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
