/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-20")
public class BankCardBinRedisService {

  public interface Iface {

    public String getNameOfBank(String cardNo) throws org.apache.thrift.TException;

    public String intercept(String cardBinNo, String bankcardNote) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getNameOfBank(String cardNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void intercept(String cardBinNo, String bankcardNote, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getNameOfBank(String cardNo) throws org.apache.thrift.TException
    {
      send_getNameOfBank(cardNo);
      return recv_getNameOfBank();
    }

    public void send_getNameOfBank(String cardNo) throws org.apache.thrift.TException
    {
      getNameOfBank_args args = new getNameOfBank_args();
      args.setCardNo(cardNo);
      sendBase("getNameOfBank", args);
    }

    public String recv_getNameOfBank() throws org.apache.thrift.TException
    {
      getNameOfBank_result result = new getNameOfBank_result();
      receiveBase(result, "getNameOfBank");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNameOfBank failed: unknown result");
    }

    public String intercept(String cardBinNo, String bankcardNote) throws org.apache.thrift.TException
    {
      send_intercept(cardBinNo, bankcardNote);
      return recv_intercept();
    }

    public void send_intercept(String cardBinNo, String bankcardNote) throws org.apache.thrift.TException
    {
      intercept_args args = new intercept_args();
      args.setCardBinNo(cardBinNo);
      args.setBankcardNote(bankcardNote);
      sendBase("intercept", args);
    }

    public String recv_intercept() throws org.apache.thrift.TException
    {
      intercept_result result = new intercept_result();
      receiveBase(result, "intercept");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "intercept failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getNameOfBank(String cardNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNameOfBank_call method_call = new getNameOfBank_call(cardNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNameOfBank_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cardNo;
      public getNameOfBank_call(String cardNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cardNo = cardNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNameOfBank", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNameOfBank_args args = new getNameOfBank_args();
        args.setCardNo(cardNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNameOfBank();
      }
    }

    public void intercept(String cardBinNo, String bankcardNote, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      intercept_call method_call = new intercept_call(cardBinNo, bankcardNote, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class intercept_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cardBinNo;
      private String bankcardNote;
      public intercept_call(String cardBinNo, String bankcardNote, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cardBinNo = cardBinNo;
        this.bankcardNote = bankcardNote;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("intercept", org.apache.thrift.protocol.TMessageType.CALL, 0));
        intercept_args args = new intercept_args();
        args.setCardBinNo(cardBinNo);
        args.setBankcardNote(bankcardNote);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_intercept();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getNameOfBank", new getNameOfBank());
      processMap.put("intercept", new intercept());
      return processMap;
    }

    public static class getNameOfBank<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNameOfBank_args> {
      public getNameOfBank() {
        super("getNameOfBank");
      }

      public getNameOfBank_args getEmptyArgsInstance() {
        return new getNameOfBank_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNameOfBank_result getResult(I iface, getNameOfBank_args args) throws org.apache.thrift.TException {
        getNameOfBank_result result = new getNameOfBank_result();
        result.success = iface.getNameOfBank(args.cardNo);
        return result;
      }
    }

    public static class intercept<I extends Iface> extends org.apache.thrift.ProcessFunction<I, intercept_args> {
      public intercept() {
        super("intercept");
      }

      public intercept_args getEmptyArgsInstance() {
        return new intercept_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public intercept_result getResult(I iface, intercept_args args) throws org.apache.thrift.TException {
        intercept_result result = new intercept_result();
        result.success = iface.intercept(args.cardBinNo, args.bankcardNote);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getNameOfBank", new getNameOfBank());
      processMap.put("intercept", new intercept());
      return processMap;
    }

    public static class getNameOfBank<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNameOfBank_args, String> {
      public getNameOfBank() {
        super("getNameOfBank");
      }

      public getNameOfBank_args getEmptyArgsInstance() {
        return new getNameOfBank_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getNameOfBank_result result = new getNameOfBank_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNameOfBank_result result = new getNameOfBank_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNameOfBank_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getNameOfBank(args.cardNo,resultHandler);
      }
    }

    public static class intercept<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, intercept_args, String> {
      public intercept() {
        super("intercept");
      }

      public intercept_args getEmptyArgsInstance() {
        return new intercept_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            intercept_result result = new intercept_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            intercept_result result = new intercept_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, intercept_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.intercept(args.cardBinNo, args.bankcardNote,resultHandler);
      }
    }

  }

  public static class getNameOfBank_args implements org.apache.thrift.TBase<getNameOfBank_args, getNameOfBank_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNameOfBank_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNameOfBank_args");

    private static final org.apache.thrift.protocol.TField CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardNo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNameOfBank_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNameOfBank_argsTupleSchemeFactory());
    }

    public String cardNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CARD_NO((short)1, "cardNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CARD_NO
            return CARD_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("cardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNameOfBank_args.class, metaDataMap);
    }

    public getNameOfBank_args() {
    }

    public getNameOfBank_args(
      String cardNo)
    {
      this();
      this.cardNo = cardNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNameOfBank_args(getNameOfBank_args other) {
      if (other.isSetCardNo()) {
        this.cardNo = other.cardNo;
      }
    }

    public getNameOfBank_args deepCopy() {
      return new getNameOfBank_args(this);
    }

    @Override
    public void clear() {
      this.cardNo = null;
    }

    public String getCardNo() {
      return this.cardNo;
    }

    public getNameOfBank_args setCardNo(String cardNo) {
      this.cardNo = cardNo;
      return this;
    }

    public void unsetCardNo() {
      this.cardNo = null;
    }

    /** Returns true if field cardNo is set (has been assigned a value) and false otherwise */
    public boolean isSetCardNo() {
      return this.cardNo != null;
    }

    public void setCardNoIsSet(boolean value) {
      if (!value) {
        this.cardNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CARD_NO:
        if (value == null) {
          unsetCardNo();
        } else {
          setCardNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CARD_NO:
        return getCardNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CARD_NO:
        return isSetCardNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNameOfBank_args)
        return this.equals((getNameOfBank_args)that);
      return false;
    }

    public boolean equals(getNameOfBank_args that) {
      if (that == null)
        return false;

      boolean this_present_cardNo = true && this.isSetCardNo();
      boolean that_present_cardNo = true && that.isSetCardNo();
      if (this_present_cardNo || that_present_cardNo) {
        if (!(this_present_cardNo && that_present_cardNo))
          return false;
        if (!this.cardNo.equals(that.cardNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cardNo = true && (isSetCardNo());
      list.add(present_cardNo);
      if (present_cardNo)
        list.add(cardNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNameOfBank_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCardNo()).compareTo(other.isSetCardNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardNo, other.cardNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNameOfBank_args(");
      boolean first = true;

      sb.append("cardNo:");
      if (this.cardNo == null) {
        sb.append("null");
      } else {
        sb.append(this.cardNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNameOfBank_argsStandardSchemeFactory implements SchemeFactory {
      public getNameOfBank_argsStandardScheme getScheme() {
        return new getNameOfBank_argsStandardScheme();
      }
    }

    private static class getNameOfBank_argsStandardScheme extends StandardScheme<getNameOfBank_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNameOfBank_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CARD_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cardNo = iprot.readString();
                struct.setCardNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNameOfBank_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cardNo != null) {
          oprot.writeFieldBegin(CARD_NO_FIELD_DESC);
          oprot.writeString(struct.cardNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNameOfBank_argsTupleSchemeFactory implements SchemeFactory {
      public getNameOfBank_argsTupleScheme getScheme() {
        return new getNameOfBank_argsTupleScheme();
      }
    }

    private static class getNameOfBank_argsTupleScheme extends TupleScheme<getNameOfBank_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNameOfBank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCardNo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCardNo()) {
          oprot.writeString(struct.cardNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNameOfBank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cardNo = iprot.readString();
          struct.setCardNoIsSet(true);
        }
      }
    }

  }

  public static class getNameOfBank_result implements org.apache.thrift.TBase<getNameOfBank_result, getNameOfBank_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNameOfBank_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNameOfBank_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNameOfBank_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNameOfBank_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNameOfBank_result.class, metaDataMap);
    }

    public getNameOfBank_result() {
    }

    public getNameOfBank_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNameOfBank_result(getNameOfBank_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getNameOfBank_result deepCopy() {
      return new getNameOfBank_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getNameOfBank_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNameOfBank_result)
        return this.equals((getNameOfBank_result)that);
      return false;
    }

    public boolean equals(getNameOfBank_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNameOfBank_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNameOfBank_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNameOfBank_resultStandardSchemeFactory implements SchemeFactory {
      public getNameOfBank_resultStandardScheme getScheme() {
        return new getNameOfBank_resultStandardScheme();
      }
    }

    private static class getNameOfBank_resultStandardScheme extends StandardScheme<getNameOfBank_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNameOfBank_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNameOfBank_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNameOfBank_resultTupleSchemeFactory implements SchemeFactory {
      public getNameOfBank_resultTupleScheme getScheme() {
        return new getNameOfBank_resultTupleScheme();
      }
    }

    private static class getNameOfBank_resultTupleScheme extends TupleScheme<getNameOfBank_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNameOfBank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNameOfBank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class intercept_args implements org.apache.thrift.TBase<intercept_args, intercept_args._Fields>, java.io.Serializable, Cloneable, Comparable<intercept_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("intercept_args");

    private static final org.apache.thrift.protocol.TField CARD_BIN_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardBinNo", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BANKCARD_NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankcardNote", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new intercept_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new intercept_argsTupleSchemeFactory());
    }

    public String cardBinNo; // required
    public String bankcardNote; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CARD_BIN_NO((short)1, "cardBinNo"),
      BANKCARD_NOTE((short)2, "bankcardNote");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CARD_BIN_NO
            return CARD_BIN_NO;
          case 2: // BANKCARD_NOTE
            return BANKCARD_NOTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CARD_BIN_NO, new org.apache.thrift.meta_data.FieldMetaData("cardBinNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANKCARD_NOTE, new org.apache.thrift.meta_data.FieldMetaData("bankcardNote", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(intercept_args.class, metaDataMap);
    }

    public intercept_args() {
    }

    public intercept_args(
      String cardBinNo,
      String bankcardNote)
    {
      this();
      this.cardBinNo = cardBinNo;
      this.bankcardNote = bankcardNote;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public intercept_args(intercept_args other) {
      if (other.isSetCardBinNo()) {
        this.cardBinNo = other.cardBinNo;
      }
      if (other.isSetBankcardNote()) {
        this.bankcardNote = other.bankcardNote;
      }
    }

    public intercept_args deepCopy() {
      return new intercept_args(this);
    }

    @Override
    public void clear() {
      this.cardBinNo = null;
      this.bankcardNote = null;
    }

    public String getCardBinNo() {
      return this.cardBinNo;
    }

    public intercept_args setCardBinNo(String cardBinNo) {
      this.cardBinNo = cardBinNo;
      return this;
    }

    public void unsetCardBinNo() {
      this.cardBinNo = null;
    }

    /** Returns true if field cardBinNo is set (has been assigned a value) and false otherwise */
    public boolean isSetCardBinNo() {
      return this.cardBinNo != null;
    }

    public void setCardBinNoIsSet(boolean value) {
      if (!value) {
        this.cardBinNo = null;
      }
    }

    public String getBankcardNote() {
      return this.bankcardNote;
    }

    public intercept_args setBankcardNote(String bankcardNote) {
      this.bankcardNote = bankcardNote;
      return this;
    }

    public void unsetBankcardNote() {
      this.bankcardNote = null;
    }

    /** Returns true if field bankcardNote is set (has been assigned a value) and false otherwise */
    public boolean isSetBankcardNote() {
      return this.bankcardNote != null;
    }

    public void setBankcardNoteIsSet(boolean value) {
      if (!value) {
        this.bankcardNote = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CARD_BIN_NO:
        if (value == null) {
          unsetCardBinNo();
        } else {
          setCardBinNo((String)value);
        }
        break;

      case BANKCARD_NOTE:
        if (value == null) {
          unsetBankcardNote();
        } else {
          setBankcardNote((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CARD_BIN_NO:
        return getCardBinNo();

      case BANKCARD_NOTE:
        return getBankcardNote();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CARD_BIN_NO:
        return isSetCardBinNo();
      case BANKCARD_NOTE:
        return isSetBankcardNote();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof intercept_args)
        return this.equals((intercept_args)that);
      return false;
    }

    public boolean equals(intercept_args that) {
      if (that == null)
        return false;

      boolean this_present_cardBinNo = true && this.isSetCardBinNo();
      boolean that_present_cardBinNo = true && that.isSetCardBinNo();
      if (this_present_cardBinNo || that_present_cardBinNo) {
        if (!(this_present_cardBinNo && that_present_cardBinNo))
          return false;
        if (!this.cardBinNo.equals(that.cardBinNo))
          return false;
      }

      boolean this_present_bankcardNote = true && this.isSetBankcardNote();
      boolean that_present_bankcardNote = true && that.isSetBankcardNote();
      if (this_present_bankcardNote || that_present_bankcardNote) {
        if (!(this_present_bankcardNote && that_present_bankcardNote))
          return false;
        if (!this.bankcardNote.equals(that.bankcardNote))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cardBinNo = true && (isSetCardBinNo());
      list.add(present_cardBinNo);
      if (present_cardBinNo)
        list.add(cardBinNo);

      boolean present_bankcardNote = true && (isSetBankcardNote());
      list.add(present_bankcardNote);
      if (present_bankcardNote)
        list.add(bankcardNote);

      return list.hashCode();
    }

    @Override
    public int compareTo(intercept_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCardBinNo()).compareTo(other.isSetCardBinNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardBinNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardBinNo, other.cardBinNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankcardNote()).compareTo(other.isSetBankcardNote());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankcardNote()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankcardNote, other.bankcardNote);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("intercept_args(");
      boolean first = true;

      sb.append("cardBinNo:");
      if (this.cardBinNo == null) {
        sb.append("null");
      } else {
        sb.append(this.cardBinNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankcardNote:");
      if (this.bankcardNote == null) {
        sb.append("null");
      } else {
        sb.append(this.bankcardNote);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class intercept_argsStandardSchemeFactory implements SchemeFactory {
      public intercept_argsStandardScheme getScheme() {
        return new intercept_argsStandardScheme();
      }
    }

    private static class intercept_argsStandardScheme extends StandardScheme<intercept_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, intercept_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CARD_BIN_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cardBinNo = iprot.readString();
                struct.setCardBinNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BANKCARD_NOTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankcardNote = iprot.readString();
                struct.setBankcardNoteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, intercept_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cardBinNo != null) {
          oprot.writeFieldBegin(CARD_BIN_NO_FIELD_DESC);
          oprot.writeString(struct.cardBinNo);
          oprot.writeFieldEnd();
        }
        if (struct.bankcardNote != null) {
          oprot.writeFieldBegin(BANKCARD_NOTE_FIELD_DESC);
          oprot.writeString(struct.bankcardNote);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class intercept_argsTupleSchemeFactory implements SchemeFactory {
      public intercept_argsTupleScheme getScheme() {
        return new intercept_argsTupleScheme();
      }
    }

    private static class intercept_argsTupleScheme extends TupleScheme<intercept_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, intercept_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCardBinNo()) {
          optionals.set(0);
        }
        if (struct.isSetBankcardNote()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCardBinNo()) {
          oprot.writeString(struct.cardBinNo);
        }
        if (struct.isSetBankcardNote()) {
          oprot.writeString(struct.bankcardNote);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, intercept_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cardBinNo = iprot.readString();
          struct.setCardBinNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bankcardNote = iprot.readString();
          struct.setBankcardNoteIsSet(true);
        }
      }
    }

  }

  public static class intercept_result implements org.apache.thrift.TBase<intercept_result, intercept_result._Fields>, java.io.Serializable, Cloneable, Comparable<intercept_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("intercept_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new intercept_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new intercept_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(intercept_result.class, metaDataMap);
    }

    public intercept_result() {
    }

    public intercept_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public intercept_result(intercept_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public intercept_result deepCopy() {
      return new intercept_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public intercept_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof intercept_result)
        return this.equals((intercept_result)that);
      return false;
    }

    public boolean equals(intercept_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(intercept_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("intercept_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class intercept_resultStandardSchemeFactory implements SchemeFactory {
      public intercept_resultStandardScheme getScheme() {
        return new intercept_resultStandardScheme();
      }
    }

    private static class intercept_resultStandardScheme extends StandardScheme<intercept_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, intercept_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, intercept_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class intercept_resultTupleSchemeFactory implements SchemeFactory {
      public intercept_resultTupleScheme getScheme() {
        return new intercept_resultTupleScheme();
      }
    }

    private static class intercept_resultTupleScheme extends TupleScheme<intercept_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, intercept_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, intercept_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
