/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.heepay.manage.rpc.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-14")
public class VerifyAmountThrift implements org.apache.thrift.TBase<VerifyAmountThrift, VerifyAmountThrift._Fields>, java.io.Serializable, Cloneable, Comparable<VerifyAmountThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VerifyAmountThrift");

  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BANK_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OPEN_BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("openBankName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VerifyAmountThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VerifyAmountThriftTupleSchemeFactory());
  }

  public String merchantId; // required
  public String bankCardNo; // required
  public String openBankName; // required
  public String createTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MERCHANT_ID((short)1, "merchantId"),
    BANK_CARD_NO((short)2, "bankCardNo"),
    OPEN_BANK_NAME((short)3, "openBankName"),
    CREATE_TIME((short)4, "createTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MERCHANT_ID
          return MERCHANT_ID;
        case 2: // BANK_CARD_NO
          return BANK_CARD_NO;
        case 3: // OPEN_BANK_NAME
          return OPEN_BANK_NAME;
        case 4: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("bankCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN_BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("openBankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VerifyAmountThrift.class, metaDataMap);
  }

  public VerifyAmountThrift() {
  }

  public VerifyAmountThrift(
    String merchantId,
    String bankCardNo,
    String openBankName,
    String createTime)
  {
    this();
    this.merchantId = merchantId;
    this.bankCardNo = bankCardNo;
    this.openBankName = openBankName;
    this.createTime = createTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VerifyAmountThrift(VerifyAmountThrift other) {
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetBankCardNo()) {
      this.bankCardNo = other.bankCardNo;
    }
    if (other.isSetOpenBankName()) {
      this.openBankName = other.openBankName;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
  }

  public VerifyAmountThrift deepCopy() {
    return new VerifyAmountThrift(this);
  }

  @Override
  public void clear() {
    this.merchantId = null;
    this.bankCardNo = null;
    this.openBankName = null;
    this.createTime = null;
  }

  public String getMerchantId() {
    return this.merchantId;
  }

  public VerifyAmountThrift setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  public String getBankCardNo() {
    return this.bankCardNo;
  }

  public VerifyAmountThrift setBankCardNo(String bankCardNo) {
    this.bankCardNo = bankCardNo;
    return this;
  }

  public void unsetBankCardNo() {
    this.bankCardNo = null;
  }

  /** Returns true if field bankCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardNo() {
    return this.bankCardNo != null;
  }

  public void setBankCardNoIsSet(boolean value) {
    if (!value) {
      this.bankCardNo = null;
    }
  }

  public String getOpenBankName() {
    return this.openBankName;
  }

  public VerifyAmountThrift setOpenBankName(String openBankName) {
    this.openBankName = openBankName;
    return this;
  }

  public void unsetOpenBankName() {
    this.openBankName = null;
  }

  /** Returns true if field openBankName is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenBankName() {
    return this.openBankName != null;
  }

  public void setOpenBankNameIsSet(boolean value) {
    if (!value) {
      this.openBankName = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public VerifyAmountThrift setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case BANK_CARD_NO:
      if (value == null) {
        unsetBankCardNo();
      } else {
        setBankCardNo((String)value);
      }
      break;

    case OPEN_BANK_NAME:
      if (value == null) {
        unsetOpenBankName();
      } else {
        setOpenBankName((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MERCHANT_ID:
      return getMerchantId();

    case BANK_CARD_NO:
      return getBankCardNo();

    case OPEN_BANK_NAME:
      return getOpenBankName();

    case CREATE_TIME:
      return getCreateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MERCHANT_ID:
      return isSetMerchantId();
    case BANK_CARD_NO:
      return isSetBankCardNo();
    case OPEN_BANK_NAME:
      return isSetOpenBankName();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VerifyAmountThrift)
      return this.equals((VerifyAmountThrift)that);
    return false;
  }

  public boolean equals(VerifyAmountThrift that) {
    if (that == null)
      return false;

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_bankCardNo = true && this.isSetBankCardNo();
    boolean that_present_bankCardNo = true && that.isSetBankCardNo();
    if (this_present_bankCardNo || that_present_bankCardNo) {
      if (!(this_present_bankCardNo && that_present_bankCardNo))
        return false;
      if (!this.bankCardNo.equals(that.bankCardNo))
        return false;
    }

    boolean this_present_openBankName = true && this.isSetOpenBankName();
    boolean that_present_openBankName = true && that.isSetOpenBankName();
    if (this_present_openBankName || that_present_openBankName) {
      if (!(this_present_openBankName && that_present_openBankName))
        return false;
      if (!this.openBankName.equals(that.openBankName))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_bankCardNo = true && (isSetBankCardNo());
    list.add(present_bankCardNo);
    if (present_bankCardNo)
      list.add(bankCardNo);

    boolean present_openBankName = true && (isSetOpenBankName());
    list.add(present_openBankName);
    if (present_openBankName)
      list.add(openBankName);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(VerifyAmountThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardNo()).compareTo(other.isSetBankCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardNo, other.bankCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenBankName()).compareTo(other.isSetOpenBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openBankName, other.openBankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VerifyAmountThrift(");
    boolean first = true;

    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardNo:");
    if (this.bankCardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openBankName:");
    if (this.openBankName == null) {
      sb.append("null");
    } else {
      sb.append(this.openBankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VerifyAmountThriftStandardSchemeFactory implements SchemeFactory {
    public VerifyAmountThriftStandardScheme getScheme() {
      return new VerifyAmountThriftStandardScheme();
    }
  }

  private static class VerifyAmountThriftStandardScheme extends StandardScheme<VerifyAmountThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VerifyAmountThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BANK_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCardNo = iprot.readString();
              struct.setBankCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPEN_BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openBankName = iprot.readString();
              struct.setOpenBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VerifyAmountThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.bankCardNo != null) {
        oprot.writeFieldBegin(BANK_CARD_NO_FIELD_DESC);
        oprot.writeString(struct.bankCardNo);
        oprot.writeFieldEnd();
      }
      if (struct.openBankName != null) {
        oprot.writeFieldBegin(OPEN_BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.openBankName);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VerifyAmountThriftTupleSchemeFactory implements SchemeFactory {
    public VerifyAmountThriftTupleScheme getScheme() {
      return new VerifyAmountThriftTupleScheme();
    }
  }

  private static class VerifyAmountThriftTupleScheme extends TupleScheme<VerifyAmountThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VerifyAmountThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMerchantId()) {
        optionals.set(0);
      }
      if (struct.isSetBankCardNo()) {
        optionals.set(1);
      }
      if (struct.isSetOpenBankName()) {
        optionals.set(2);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetBankCardNo()) {
        oprot.writeString(struct.bankCardNo);
      }
      if (struct.isSetOpenBankName()) {
        oprot.writeString(struct.openBankName);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VerifyAmountThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bankCardNo = iprot.readString();
        struct.setBankCardNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.openBankName = iprot.readString();
        struct.setOpenBankNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
    }
  }

}

